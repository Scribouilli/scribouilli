(function (buffer$1) {
    'use strict';

    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    function _mergeNamespaces(n, m) {
        m.forEach(function (e) {
            e && typeof e !== 'string' && !Array.isArray(e) && Object.keys(e).forEach(function (k) {
                if (k !== 'default' && !(k in n)) {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        });
        return Object.freeze(n);
    }

    var buffer__default = /*#__PURE__*/_interopDefaultLegacy(buffer$1);

    //@ts-check

    /**
     * Promise-based wrapped around localStorage.get/setItem
     * 
     * @param {string} key 
     * @param {any} [value]
     * @returns {Promise<any>}
     */
    function remember(key, value){

        if(value === undefined){ // recall
            return Promise.resolve().then(() => {
                const val = localStorage.getItem(key);
                
                if(val){
                    try{ 
                        // optimistic attempt at JSON.parsing the value...
                        return JSON.parse(val)
                    }
                    catch(e){
                        // ... and if that fails, no biggie, just return the value itself
                        return val;
                    }
                }
                else {
                    return undefined;
                }
            })
        }
        else {
            return Promise.resolve().then(() => {
                let toStore = Object(value) === value ?
                    // this may throw if value is cyclic and that's okay, the error with go to the catch channel
                    JSON.stringify(value) : 
                    value;
            
                // this may throw if storage is full and that's okay
                localStorage.setItem(key, toStore);
                return undefined;
            })
        }
    }

    /**
     * Promise-based wrapped around localStorage.removeItem
     * 
     * @param {string} key 
     * @returns {Promise<void>}
     */
    function forget(key){
        return Promise.resolve().then(() => {
            localStorage.removeItem(key);
        })
    }

    const OAUTH_PROVIDER_STORAGE_KEY = 'scribouilli_oauth_provider';
    const TOCTOCTOC_ACCESS_TOKEN_URL_PARAMETER = 'access_token';
    const TOCTOCTOC_OAUTH_PROVIDER_URL_PARAMETER = 'type';
    const TOCTOCTOC_OAUTH_PROVIDER_ORIGIN_PARAMETER = 'origin';
    const gitHubApiBaseUrl = 'https://api.github.com';

    const CUSTOM_CSS_PATH = 'assets/css/custom.css';

    /** @type {GitSiteTemplate[] & {default: GitSiteTemplate}} */
    // @ts-ignore
    const templates = [
      {
        url: 'https://github.com/Scribouilli/site-template.git',
        description: 'mon site vitrine ou mon blog',
        githubRepoId: 'Scribouilli/site-template',
      },
      {
        url: 'https://github.com/Scribouilli/site-template-framalibre.git',
        description: 'ma liste de recommandations liée à Framalibre',
        githubRepoId: 'Scribouilli/site-template-framalibre',
      },
    ];

    templates.default = templates[0];

    /** @type {Element} */
    const svelteTarget = document.body;

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function createCommonjsModule(fn, basedir, module) {
    	return module = {
    	  path: basedir,
    	  exports: {},
    	  require: function (path, base) {
          return commonjsRequire(path, (base === undefined || base === null) ? module.path : base);
        }
    	}, fn(module, module.exports), module.exports;
    }

    function getCjsExportFromNamespace (n) {
    	return n && n['default'] || n;
    }

    function commonjsRequire () {
    	throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
    }

    var page = createCommonjsModule(function (module, exports) {
    (function (global, factory) {
    	module.exports = factory() ;
    }(commonjsGlobal, (function () {
    var isarray = Array.isArray || function (arr) {
      return Object.prototype.toString.call(arr) == '[object Array]';
    };

    /**
     * Expose `pathToRegexp`.
     */
    var pathToRegexp_1 = pathToRegexp;
    var parse_1 = parse;
    var compile_1 = compile;
    var tokensToFunction_1 = tokensToFunction;
    var tokensToRegExp_1 = tokensToRegExp;

    /**
     * The main path matching regexp utility.
     *
     * @type {RegExp}
     */
    var PATH_REGEXP = new RegExp([
      // Match escaped characters that would otherwise appear in future matches.
      // This allows the user to escape special characters that won't transform.
      '(\\\\.)',
      // Match Express-style parameters and un-named parameters with a prefix
      // and optional suffixes. Matches appear as:
      //
      // "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]
      // "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]
      // "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]
      '([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^()])+)\\))?|\\(((?:\\\\.|[^()])+)\\))([+*?])?|(\\*))'
    ].join('|'), 'g');

    /**
     * Parse a string for the raw tokens.
     *
     * @param  {String} str
     * @return {Array}
     */
    function parse (str) {
      var tokens = [];
      var key = 0;
      var index = 0;
      var path = '';
      var res;

      while ((res = PATH_REGEXP.exec(str)) != null) {
        var m = res[0];
        var escaped = res[1];
        var offset = res.index;
        path += str.slice(index, offset);
        index = offset + m.length;

        // Ignore already escaped sequences.
        if (escaped) {
          path += escaped[1];
          continue
        }

        // Push the current path onto the tokens.
        if (path) {
          tokens.push(path);
          path = '';
        }

        var prefix = res[2];
        var name = res[3];
        var capture = res[4];
        var group = res[5];
        var suffix = res[6];
        var asterisk = res[7];

        var repeat = suffix === '+' || suffix === '*';
        var optional = suffix === '?' || suffix === '*';
        var delimiter = prefix || '/';
        var pattern = capture || group || (asterisk ? '.*' : '[^' + delimiter + ']+?');

        tokens.push({
          name: name || key++,
          prefix: prefix || '',
          delimiter: delimiter,
          optional: optional,
          repeat: repeat,
          pattern: escapeGroup(pattern)
        });
      }

      // Match any characters still remaining.
      if (index < str.length) {
        path += str.substr(index);
      }

      // If the path exists, push it onto the end.
      if (path) {
        tokens.push(path);
      }

      return tokens
    }

    /**
     * Compile a string to a template function for the path.
     *
     * @param  {String}   str
     * @return {Function}
     */
    function compile (str) {
      return tokensToFunction(parse(str))
    }

    /**
     * Expose a method for transforming tokens into the path function.
     */
    function tokensToFunction (tokens) {
      // Compile all the tokens into regexps.
      var matches = new Array(tokens.length);

      // Compile all the patterns before compilation.
      for (var i = 0; i < tokens.length; i++) {
        if (typeof tokens[i] === 'object') {
          matches[i] = new RegExp('^' + tokens[i].pattern + '$');
        }
      }

      return function (obj) {
        var path = '';
        var data = obj || {};

        for (var i = 0; i < tokens.length; i++) {
          var token = tokens[i];

          if (typeof token === 'string') {
            path += token;

            continue
          }

          var value = data[token.name];
          var segment;

          if (value == null) {
            if (token.optional) {
              continue
            } else {
              throw new TypeError('Expected "' + token.name + '" to be defined')
            }
          }

          if (isarray(value)) {
            if (!token.repeat) {
              throw new TypeError('Expected "' + token.name + '" to not repeat, but received "' + value + '"')
            }

            if (value.length === 0) {
              if (token.optional) {
                continue
              } else {
                throw new TypeError('Expected "' + token.name + '" to not be empty')
              }
            }

            for (var j = 0; j < value.length; j++) {
              segment = encodeURIComponent(value[j]);

              if (!matches[i].test(segment)) {
                throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"')
              }

              path += (j === 0 ? token.prefix : token.delimiter) + segment;
            }

            continue
          }

          segment = encodeURIComponent(value);

          if (!matches[i].test(segment)) {
            throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"')
          }

          path += token.prefix + segment;
        }

        return path
      }
    }

    /**
     * Escape a regular expression string.
     *
     * @param  {String} str
     * @return {String}
     */
    function escapeString (str) {
      return str.replace(/([.+*?=^!:${}()[\]|\/])/g, '\\$1')
    }

    /**
     * Escape the capturing group by escaping special characters and meaning.
     *
     * @param  {String} group
     * @return {String}
     */
    function escapeGroup (group) {
      return group.replace(/([=!:$\/()])/g, '\\$1')
    }

    /**
     * Attach the keys as a property of the regexp.
     *
     * @param  {RegExp} re
     * @param  {Array}  keys
     * @return {RegExp}
     */
    function attachKeys (re, keys) {
      re.keys = keys;
      return re
    }

    /**
     * Get the flags for a regexp from the options.
     *
     * @param  {Object} options
     * @return {String}
     */
    function flags (options) {
      return options.sensitive ? '' : 'i'
    }

    /**
     * Pull out keys from a regexp.
     *
     * @param  {RegExp} path
     * @param  {Array}  keys
     * @return {RegExp}
     */
    function regexpToRegexp (path, keys) {
      // Use a negative lookahead to match only capturing groups.
      var groups = path.source.match(/\((?!\?)/g);

      if (groups) {
        for (var i = 0; i < groups.length; i++) {
          keys.push({
            name: i,
            prefix: null,
            delimiter: null,
            optional: false,
            repeat: false,
            pattern: null
          });
        }
      }

      return attachKeys(path, keys)
    }

    /**
     * Transform an array into a regexp.
     *
     * @param  {Array}  path
     * @param  {Array}  keys
     * @param  {Object} options
     * @return {RegExp}
     */
    function arrayToRegexp (path, keys, options) {
      var parts = [];

      for (var i = 0; i < path.length; i++) {
        parts.push(pathToRegexp(path[i], keys, options).source);
      }

      var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options));

      return attachKeys(regexp, keys)
    }

    /**
     * Create a path regexp from string input.
     *
     * @param  {String} path
     * @param  {Array}  keys
     * @param  {Object} options
     * @return {RegExp}
     */
    function stringToRegexp (path, keys, options) {
      var tokens = parse(path);
      var re = tokensToRegExp(tokens, options);

      // Attach keys back to the regexp.
      for (var i = 0; i < tokens.length; i++) {
        if (typeof tokens[i] !== 'string') {
          keys.push(tokens[i]);
        }
      }

      return attachKeys(re, keys)
    }

    /**
     * Expose a function for taking tokens and returning a RegExp.
     *
     * @param  {Array}  tokens
     * @param  {Array}  keys
     * @param  {Object} options
     * @return {RegExp}
     */
    function tokensToRegExp (tokens, options) {
      options = options || {};

      var strict = options.strict;
      var end = options.end !== false;
      var route = '';
      var lastToken = tokens[tokens.length - 1];
      var endsWithSlash = typeof lastToken === 'string' && /\/$/.test(lastToken);

      // Iterate over the tokens and create our regexp string.
      for (var i = 0; i < tokens.length; i++) {
        var token = tokens[i];

        if (typeof token === 'string') {
          route += escapeString(token);
        } else {
          var prefix = escapeString(token.prefix);
          var capture = token.pattern;

          if (token.repeat) {
            capture += '(?:' + prefix + capture + ')*';
          }

          if (token.optional) {
            if (prefix) {
              capture = '(?:' + prefix + '(' + capture + '))?';
            } else {
              capture = '(' + capture + ')?';
            }
          } else {
            capture = prefix + '(' + capture + ')';
          }

          route += capture;
        }
      }

      // In non-strict mode we allow a slash at the end of match. If the path to
      // match already ends with a slash, we remove it for consistency. The slash
      // is valid at the end of a path match, not in the middle. This is important
      // in non-ending mode, where "/test/" shouldn't match "/test//route".
      if (!strict) {
        route = (endsWithSlash ? route.slice(0, -2) : route) + '(?:\\/(?=$))?';
      }

      if (end) {
        route += '$';
      } else {
        // In non-ending mode, we need the capturing groups to match as much as
        // possible by using a positive lookahead to the end or next path segment.
        route += strict && endsWithSlash ? '' : '(?=\\/|$)';
      }

      return new RegExp('^' + route, flags(options))
    }

    /**
     * Normalize the given path string, returning a regular expression.
     *
     * An empty array can be passed in for the keys, which will hold the
     * placeholder key descriptions. For example, using `/user/:id`, `keys` will
     * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
     *
     * @param  {(String|RegExp|Array)} path
     * @param  {Array}                 [keys]
     * @param  {Object}                [options]
     * @return {RegExp}
     */
    function pathToRegexp (path, keys, options) {
      keys = keys || [];

      if (!isarray(keys)) {
        options = keys;
        keys = [];
      } else if (!options) {
        options = {};
      }

      if (path instanceof RegExp) {
        return regexpToRegexp(path, keys)
      }

      if (isarray(path)) {
        return arrayToRegexp(path, keys, options)
      }

      return stringToRegexp(path, keys, options)
    }

    pathToRegexp_1.parse = parse_1;
    pathToRegexp_1.compile = compile_1;
    pathToRegexp_1.tokensToFunction = tokensToFunction_1;
    pathToRegexp_1.tokensToRegExp = tokensToRegExp_1;

    /**
       * Module dependencies.
       */

      

      /**
       * Short-cuts for global-object checks
       */

      var hasDocument = ('undefined' !== typeof document);
      var hasWindow = ('undefined' !== typeof window);
      var hasHistory = ('undefined' !== typeof history);
      var hasProcess = typeof process !== 'undefined';

      /**
       * Detect click event
       */
      var clickEvent = hasDocument && document.ontouchstart ? 'touchstart' : 'click';

      /**
       * To work properly with the URL
       * history.location generated polyfill in https://github.com/devote/HTML5-History-API
       */

      var isLocation = hasWindow && !!(window.history.location || window.location);

      /**
       * The page instance
       * @api private
       */
      function Page() {
        // public things
        this.callbacks = [];
        this.exits = [];
        this.current = '';
        this.len = 0;

        // private things
        this._decodeURLComponents = true;
        this._base = '';
        this._strict = false;
        this._running = false;
        this._hashbang = false;

        // bound functions
        this.clickHandler = this.clickHandler.bind(this);
        this._onpopstate = this._onpopstate.bind(this);
      }

      /**
       * Configure the instance of page. This can be called multiple times.
       *
       * @param {Object} options
       * @api public
       */

      Page.prototype.configure = function(options) {
        var opts = options || {};

        this._window = opts.window || (hasWindow && window);
        this._decodeURLComponents = opts.decodeURLComponents !== false;
        this._popstate = opts.popstate !== false && hasWindow;
        this._click = opts.click !== false && hasDocument;
        this._hashbang = !!opts.hashbang;

        var _window = this._window;
        if(this._popstate) {
          _window.addEventListener('popstate', this._onpopstate, false);
        } else if(hasWindow) {
          _window.removeEventListener('popstate', this._onpopstate, false);
        }

        if (this._click) {
          _window.document.addEventListener(clickEvent, this.clickHandler, false);
        } else if(hasDocument) {
          _window.document.removeEventListener(clickEvent, this.clickHandler, false);
        }

        if(this._hashbang && hasWindow && !hasHistory) {
          _window.addEventListener('hashchange', this._onpopstate, false);
        } else if(hasWindow) {
          _window.removeEventListener('hashchange', this._onpopstate, false);
        }
      };

      /**
       * Get or set basepath to `path`.
       *
       * @param {string} path
       * @api public
       */

      Page.prototype.base = function(path) {
        if (0 === arguments.length) return this._base;
        this._base = path;
      };

      /**
       * Gets the `base`, which depends on whether we are using History or
       * hashbang routing.

       * @api private
       */
      Page.prototype._getBase = function() {
        var base = this._base;
        if(!!base) return base;
        var loc = hasWindow && this._window && this._window.location;

        if(hasWindow && this._hashbang && loc && loc.protocol === 'file:') {
          base = loc.pathname;
        }

        return base;
      };

      /**
       * Get or set strict path matching to `enable`
       *
       * @param {boolean} enable
       * @api public
       */

      Page.prototype.strict = function(enable) {
        if (0 === arguments.length) return this._strict;
        this._strict = enable;
      };


      /**
       * Bind with the given `options`.
       *
       * Options:
       *
       *    - `click` bind to click events [true]
       *    - `popstate` bind to popstate [true]
       *    - `dispatch` perform initial dispatch [true]
       *
       * @param {Object} options
       * @api public
       */

      Page.prototype.start = function(options) {
        var opts = options || {};
        this.configure(opts);

        if (false === opts.dispatch) return;
        this._running = true;

        var url;
        if(isLocation) {
          var window = this._window;
          var loc = window.location;

          if(this._hashbang && ~loc.hash.indexOf('#!')) {
            url = loc.hash.substr(2) + loc.search;
          } else if (this._hashbang) {
            url = loc.search + loc.hash;
          } else {
            url = loc.pathname + loc.search + loc.hash;
          }
        }

        this.replace(url, null, true, opts.dispatch);
      };

      /**
       * Unbind click and popstate event handlers.
       *
       * @api public
       */

      Page.prototype.stop = function() {
        if (!this._running) return;
        this.current = '';
        this.len = 0;
        this._running = false;

        var window = this._window;
        this._click && window.document.removeEventListener(clickEvent, this.clickHandler, false);
        hasWindow && window.removeEventListener('popstate', this._onpopstate, false);
        hasWindow && window.removeEventListener('hashchange', this._onpopstate, false);
      };

      /**
       * Show `path` with optional `state` object.
       *
       * @param {string} path
       * @param {Object=} state
       * @param {boolean=} dispatch
       * @param {boolean=} push
       * @return {!Context}
       * @api public
       */

      Page.prototype.show = function(path, state, dispatch, push) {
        var ctx = new Context(path, state, this),
          prev = this.prevContext;
        this.prevContext = ctx;
        this.current = ctx.path;
        if (false !== dispatch) this.dispatch(ctx, prev);
        if (false !== ctx.handled && false !== push) ctx.pushState();
        return ctx;
      };

      /**
       * Goes back in the history
       * Back should always let the current route push state and then go back.
       *
       * @param {string} path - fallback path to go back if no more history exists, if undefined defaults to page.base
       * @param {Object=} state
       * @api public
       */

      Page.prototype.back = function(path, state) {
        var page = this;
        if (this.len > 0) {
          var window = this._window;
          // this may need more testing to see if all browsers
          // wait for the next tick to go back in history
          hasHistory && window.history.back();
          this.len--;
        } else if (path) {
          setTimeout(function() {
            page.show(path, state);
          });
        } else {
          setTimeout(function() {
            page.show(page._getBase(), state);
          });
        }
      };

      /**
       * Register route to redirect from one path to other
       * or just redirect to another route
       *
       * @param {string} from - if param 'to' is undefined redirects to 'from'
       * @param {string=} to
       * @api public
       */
      Page.prototype.redirect = function(from, to) {
        var inst = this;

        // Define route from a path to another
        if ('string' === typeof from && 'string' === typeof to) {
          page.call(this, from, function(e) {
            setTimeout(function() {
              inst.replace(/** @type {!string} */ (to));
            }, 0);
          });
        }

        // Wait for the push state and replace it with another
        if ('string' === typeof from && 'undefined' === typeof to) {
          setTimeout(function() {
            inst.replace(from);
          }, 0);
        }
      };

      /**
       * Replace `path` with optional `state` object.
       *
       * @param {string} path
       * @param {Object=} state
       * @param {boolean=} init
       * @param {boolean=} dispatch
       * @return {!Context}
       * @api public
       */


      Page.prototype.replace = function(path, state, init, dispatch) {
        var ctx = new Context(path, state, this),
          prev = this.prevContext;
        this.prevContext = ctx;
        this.current = ctx.path;
        ctx.init = init;
        ctx.save(); // save before dispatching, which may redirect
        if (false !== dispatch) this.dispatch(ctx, prev);
        return ctx;
      };

      /**
       * Dispatch the given `ctx`.
       *
       * @param {Context} ctx
       * @api private
       */

      Page.prototype.dispatch = function(ctx, prev) {
        var i = 0, j = 0, page = this;

        function nextExit() {
          var fn = page.exits[j++];
          if (!fn) return nextEnter();
          fn(prev, nextExit);
        }

        function nextEnter() {
          var fn = page.callbacks[i++];

          if (ctx.path !== page.current) {
            ctx.handled = false;
            return;
          }
          if (!fn) return unhandled.call(page, ctx);
          fn(ctx, nextEnter);
        }

        if (prev) {
          nextExit();
        } else {
          nextEnter();
        }
      };

      /**
       * Register an exit route on `path` with
       * callback `fn()`, which will be called
       * on the previous context when a new
       * page is visited.
       */
      Page.prototype.exit = function(path, fn) {
        if (typeof path === 'function') {
          return this.exit('*', path);
        }

        var route = new Route(path, null, this);
        for (var i = 1; i < arguments.length; ++i) {
          this.exits.push(route.middleware(arguments[i]));
        }
      };

      /**
       * Handle "click" events.
       */

      /* jshint +W054 */
      Page.prototype.clickHandler = function(e) {
        if (1 !== this._which(e)) return;

        if (e.metaKey || e.ctrlKey || e.shiftKey) return;
        if (e.defaultPrevented) return;

        // ensure link
        // use shadow dom when available if not, fall back to composedPath()
        // for browsers that only have shady
        var el = e.target;
        var eventPath = e.path || (e.composedPath ? e.composedPath() : null);

        if(eventPath) {
          for (var i = 0; i < eventPath.length; i++) {
            if (!eventPath[i].nodeName) continue;
            if (eventPath[i].nodeName.toUpperCase() !== 'A') continue;
            if (!eventPath[i].href) continue;

            el = eventPath[i];
            break;
          }
        }

        // continue ensure link
        // el.nodeName for svg links are 'a' instead of 'A'
        while (el && 'A' !== el.nodeName.toUpperCase()) el = el.parentNode;
        if (!el || 'A' !== el.nodeName.toUpperCase()) return;

        // check if link is inside an svg
        // in this case, both href and target are always inside an object
        var svg = (typeof el.href === 'object') && el.href.constructor.name === 'SVGAnimatedString';

        // Ignore if tag has
        // 1. "download" attribute
        // 2. rel="external" attribute
        if (el.hasAttribute('download') || el.getAttribute('rel') === 'external') return;

        // ensure non-hash for the same path
        var link = el.getAttribute('href');
        if(!this._hashbang && this._samePath(el) && (el.hash || '#' === link)) return;

        // Check for mailto: in the href
        if (link && link.indexOf('mailto:') > -1) return;

        // check target
        // svg target is an object and its desired value is in .baseVal property
        if (svg ? el.target.baseVal : el.target) return;

        // x-origin
        // note: svg links that are not relative don't call click events (and skip page.js)
        // consequently, all svg links tested inside page.js are relative and in the same origin
        if (!svg && !this.sameOrigin(el.href)) return;

        // rebuild path
        // There aren't .pathname and .search properties in svg links, so we use href
        // Also, svg href is an object and its desired value is in .baseVal property
        var path = svg ? el.href.baseVal : (el.pathname + el.search + (el.hash || ''));

        path = path[0] !== '/' ? '/' + path : path;

        // strip leading "/[drive letter]:" on NW.js on Windows
        if (hasProcess && path.match(/^\/[a-zA-Z]:\//)) {
          path = path.replace(/^\/[a-zA-Z]:\//, '/');
        }

        // same page
        var orig = path;
        var pageBase = this._getBase();

        if (path.indexOf(pageBase) === 0) {
          path = path.substr(pageBase.length);
        }

        if (this._hashbang) path = path.replace('#!', '');

        if (pageBase && orig === path && (!isLocation || this._window.location.protocol !== 'file:')) {
          return;
        }

        e.preventDefault();
        this.show(orig);
      };

      /**
       * Handle "populate" events.
       * @api private
       */

      Page.prototype._onpopstate = (function () {
        var loaded = false;
        if ( ! hasWindow ) {
          return function () {};
        }
        if (hasDocument && document.readyState === 'complete') {
          loaded = true;
        } else {
          window.addEventListener('load', function() {
            setTimeout(function() {
              loaded = true;
            }, 0);
          });
        }
        return function onpopstate(e) {
          if (!loaded) return;
          var page = this;
          if (e.state) {
            var path = e.state.path;
            page.replace(path, e.state);
          } else if (isLocation) {
            var loc = page._window.location;
            page.show(loc.pathname + loc.search + loc.hash, undefined, undefined, false);
          }
        };
      })();

      /**
       * Event button.
       */
      Page.prototype._which = function(e) {
        e = e || (hasWindow && this._window.event);
        return null == e.which ? e.button : e.which;
      };

      /**
       * Convert to a URL object
       * @api private
       */
      Page.prototype._toURL = function(href) {
        var window = this._window;
        if(typeof URL === 'function' && isLocation) {
          return new URL(href, window.location.toString());
        } else if (hasDocument) {
          var anc = window.document.createElement('a');
          anc.href = href;
          return anc;
        }
      };

      /**
       * Check if `href` is the same origin.
       * @param {string} href
       * @api public
       */
      Page.prototype.sameOrigin = function(href) {
        if(!href || !isLocation) return false;

        var url = this._toURL(href);
        var window = this._window;

        var loc = window.location;

        /*
           When the port is the default http port 80 for http, or 443 for
           https, internet explorer 11 returns an empty string for loc.port,
           so we need to compare loc.port with an empty string if url.port
           is the default port 80 or 443.
           Also the comparition with `port` is changed from `===` to `==` because
           `port` can be a string sometimes. This only applies to ie11.
        */
        return loc.protocol === url.protocol &&
          loc.hostname === url.hostname &&
          (loc.port === url.port || loc.port === '' && (url.port == 80 || url.port == 443)); // jshint ignore:line
      };

      /**
       * @api private
       */
      Page.prototype._samePath = function(url) {
        if(!isLocation) return false;
        var window = this._window;
        var loc = window.location;
        return url.pathname === loc.pathname &&
          url.search === loc.search;
      };

      /**
       * Remove URL encoding from the given `str`.
       * Accommodates whitespace in both x-www-form-urlencoded
       * and regular percent-encoded form.
       *
       * @param {string} val - URL component to decode
       * @api private
       */
      Page.prototype._decodeURLEncodedURIComponent = function(val) {
        if (typeof val !== 'string') { return val; }
        return this._decodeURLComponents ? decodeURIComponent(val.replace(/\+/g, ' ')) : val;
      };

      /**
       * Create a new `page` instance and function
       */
      function createPage() {
        var pageInstance = new Page();

        function pageFn(/* args */) {
          return page.apply(pageInstance, arguments);
        }

        // Copy all of the things over. In 2.0 maybe we use setPrototypeOf
        pageFn.callbacks = pageInstance.callbacks;
        pageFn.exits = pageInstance.exits;
        pageFn.base = pageInstance.base.bind(pageInstance);
        pageFn.strict = pageInstance.strict.bind(pageInstance);
        pageFn.start = pageInstance.start.bind(pageInstance);
        pageFn.stop = pageInstance.stop.bind(pageInstance);
        pageFn.show = pageInstance.show.bind(pageInstance);
        pageFn.back = pageInstance.back.bind(pageInstance);
        pageFn.redirect = pageInstance.redirect.bind(pageInstance);
        pageFn.replace = pageInstance.replace.bind(pageInstance);
        pageFn.dispatch = pageInstance.dispatch.bind(pageInstance);
        pageFn.exit = pageInstance.exit.bind(pageInstance);
        pageFn.configure = pageInstance.configure.bind(pageInstance);
        pageFn.sameOrigin = pageInstance.sameOrigin.bind(pageInstance);
        pageFn.clickHandler = pageInstance.clickHandler.bind(pageInstance);

        pageFn.create = createPage;

        Object.defineProperty(pageFn, 'len', {
          get: function(){
            return pageInstance.len;
          },
          set: function(val) {
            pageInstance.len = val;
          }
        });

        Object.defineProperty(pageFn, 'current', {
          get: function(){
            return pageInstance.current;
          },
          set: function(val) {
            pageInstance.current = val;
          }
        });

        // In 2.0 these can be named exports
        pageFn.Context = Context;
        pageFn.Route = Route;

        return pageFn;
      }

      /**
       * Register `path` with callback `fn()`,
       * or route `path`, or redirection,
       * or `page.start()`.
       *
       *   page(fn);
       *   page('*', fn);
       *   page('/user/:id', load, user);
       *   page('/user/' + user.id, { some: 'thing' });
       *   page('/user/' + user.id);
       *   page('/from', '/to')
       *   page();
       *
       * @param {string|!Function|!Object} path
       * @param {Function=} fn
       * @api public
       */

      function page(path, fn) {
        // <callback>
        if ('function' === typeof path) {
          return page.call(this, '*', path);
        }

        // route <path> to <callback ...>
        if ('function' === typeof fn) {
          var route = new Route(/** @type {string} */ (path), null, this);
          for (var i = 1; i < arguments.length; ++i) {
            this.callbacks.push(route.middleware(arguments[i]));
          }
          // show <path> with [state]
        } else if ('string' === typeof path) {
          this['string' === typeof fn ? 'redirect' : 'show'](path, fn);
          // start [options]
        } else {
          this.start(path);
        }
      }

      /**
       * Unhandled `ctx`. When it's not the initial
       * popstate then redirect. If you wish to handle
       * 404s on your own use `page('*', callback)`.
       *
       * @param {Context} ctx
       * @api private
       */
      function unhandled(ctx) {
        if (ctx.handled) return;
        var current;
        var page = this;
        var window = page._window;

        if (page._hashbang) {
          current = isLocation && this._getBase() + window.location.hash.replace('#!', '');
        } else {
          current = isLocation && window.location.pathname + window.location.search;
        }

        if (current === ctx.canonicalPath) return;
        page.stop();
        ctx.handled = false;
        isLocation && (window.location.href = ctx.canonicalPath);
      }

      /**
       * Escapes RegExp characters in the given string.
       *
       * @param {string} s
       * @api private
       */
      function escapeRegExp(s) {
        return s.replace(/([.+*?=^!:${}()[\]|/\\])/g, '\\$1');
      }

      /**
       * Initialize a new "request" `Context`
       * with the given `path` and optional initial `state`.
       *
       * @constructor
       * @param {string} path
       * @param {Object=} state
       * @api public
       */

      function Context(path, state, pageInstance) {
        var _page = this.page = pageInstance || page;
        var window = _page._window;
        var hashbang = _page._hashbang;

        var pageBase = _page._getBase();
        if ('/' === path[0] && 0 !== path.indexOf(pageBase)) path = pageBase + (hashbang ? '#!' : '') + path;
        var i = path.indexOf('?');

        this.canonicalPath = path;
        var re = new RegExp('^' + escapeRegExp(pageBase));
        this.path = path.replace(re, '') || '/';
        if (hashbang) this.path = this.path.replace('#!', '') || '/';

        this.title = (hasDocument && window.document.title);
        this.state = state || {};
        this.state.path = path;
        this.querystring = ~i ? _page._decodeURLEncodedURIComponent(path.slice(i + 1)) : '';
        this.pathname = _page._decodeURLEncodedURIComponent(~i ? path.slice(0, i) : path);
        this.params = {};

        // fragment
        this.hash = '';
        if (!hashbang) {
          if (!~this.path.indexOf('#')) return;
          var parts = this.path.split('#');
          this.path = this.pathname = parts[0];
          this.hash = _page._decodeURLEncodedURIComponent(parts[1]) || '';
          this.querystring = this.querystring.split('#')[0];
        }
      }

      /**
       * Push state.
       *
       * @api private
       */

      Context.prototype.pushState = function() {
        var page = this.page;
        var window = page._window;
        var hashbang = page._hashbang;

        page.len++;
        if (hasHistory) {
            window.history.pushState(this.state, this.title,
              hashbang && this.path !== '/' ? '#!' + this.path : this.canonicalPath);
        }
      };

      /**
       * Save the context state.
       *
       * @api public
       */

      Context.prototype.save = function() {
        var page = this.page;
        if (hasHistory) {
            page._window.history.replaceState(this.state, this.title,
              page._hashbang && this.path !== '/' ? '#!' + this.path : this.canonicalPath);
        }
      };

      /**
       * Initialize `Route` with the given HTTP `path`,
       * and an array of `callbacks` and `options`.
       *
       * Options:
       *
       *   - `sensitive`    enable case-sensitive routes
       *   - `strict`       enable strict matching for trailing slashes
       *
       * @constructor
       * @param {string} path
       * @param {Object=} options
       * @api private
       */

      function Route(path, options, page) {
        var _page = this.page = page || globalPage;
        var opts = options || {};
        opts.strict = opts.strict || _page._strict;
        this.path = (path === '*') ? '(.*)' : path;
        this.method = 'GET';
        this.regexp = pathToRegexp_1(this.path, this.keys = [], opts);
      }

      /**
       * Return route middleware with
       * the given callback `fn()`.
       *
       * @param {Function} fn
       * @return {Function}
       * @api public
       */

      Route.prototype.middleware = function(fn) {
        var self = this;
        return function(ctx, next) {
          if (self.match(ctx.path, ctx.params)) {
            ctx.routePath = self.path;
            return fn(ctx, next);
          }
          next();
        };
      };

      /**
       * Check if this route matches `path`, if so
       * populate `params`.
       *
       * @param {string} path
       * @param {Object} params
       * @return {boolean}
       * @api private
       */

      Route.prototype.match = function(path, params) {
        var keys = this.keys,
          qsIndex = path.indexOf('?'),
          pathname = ~qsIndex ? path.slice(0, qsIndex) : path,
          m = this.regexp.exec(decodeURIComponent(pathname));

        if (!m) return false;

        delete params[0];

        for (var i = 1, len = m.length; i < len; ++i) {
          var key = keys[i - 1];
          var val = this.page._decodeURLEncodedURIComponent(m[i]);
          if (val !== undefined || !(hasOwnProperty.call(params, key.name))) {
            params[key.name] = val;
          }
        }

        return true;
      };


      /**
       * Module exports.
       */

      var globalPage = createPage();
      var page_js = globalPage;
      var default_1 = globalPage;

    page_js.default = default_1;

    return page_js;

    })));
    });

    //@ts-check

    /**
     * @template State
     * @template {import("./types").BareduxInputMutations<State>} Mutations
     * @param { {state: State, mutations: Mutations} } _
     * @returns {import("./types").BareduxStore<State, Mutations>}
     */
    function Store$1({state: initialState, mutations}){
        
        let state = initialState;
        const subscribers = new Set();

        let callToSubscribersScheduled = false;
        function scheduleCallToSubscribers(){

            // schedule for next micro-task (or something like that)
            if(!callToSubscribersScheduled){
                callToSubscribersScheduled = true;
                Promise.resolve().then(() => {
                    for(const s of subscribers){
                        try{ 
                            s(state);
                        }
                        catch(e){
                            console.error('subscriber error', e);
                        }
                    }
                    callToSubscribersScheduled = false;
                });
            }
        }

        function makeSubscribleMutationWrapper(mutations, propSequence=[]){
            return new Proxy(
                mutations,
                {
                    get(mutations, name){
                        if(name in mutations){
                            return makeSubscribleMutationWrapper(mutations[name], [...propSequence, name])
                        }
                        else {
                            throw new TypeError(`No ${name} property in 'mutations.${propSequence.join('.')}'`)
                        }
                    },
                    apply(mutations, thisArg, argList){
                        // TODO : need to allow some logging plugin. Probably by defining other events
                        //console.log('apply trap', propSequence, argList)
        
                        if(typeof mutations !== 'function'){
                            throw new TypeError(`\`mutations.${propSequence.join('.')}\` is not a function`)
                        }
                        else {
                            const returnValue = Reflect.apply(mutations, undefined, [state, ...argList]);
                            if(returnValue !== undefined){
                                state = returnValue;
                            }
                            scheduleCallToSubscribers();
                            return returnValue
                        }
                    }
                }
            )
        }

        return {
            get state(){ return state },
            
            mutations: makeSubscribleMutationWrapper(mutations),

            subscribe(fn){
                subscribers.add(fn);
                return () => { subscribers.delete(fn); }
            }
        }
    }

    var justOnce = once;

    /*
    let i = 0;
    const getFirst = once(() => ++i);
    getFirst(); // 1
    getFirst(); // 1
    */

    function once(fn) {
      var called, value;

      if (typeof fn !== 'function') {
        throw new Error('expected a function but got ' + fn);
      }

      return function wrap() {
        if (called) {
          return value;
        }
        called = true;
        value = fn.apply(this, arguments);
        return value;
      };
    }

    (function(scope) {function B(r,e){var f;return r instanceof Buffer?f=r:f=Buffer.from(r.buffer,r.byteOffset,r.byteLength),f.toString(e)}var w=function(r){return Buffer.from(r)};function h(r){for(var e=0,f=Math.min(256*256,r.length+1),n=new Uint16Array(f),i=[],o=0;;){var t=e<r.length;if(!t||o>=f-1){var s=n.subarray(0,o),m=s;if(i.push(String.fromCharCode.apply(null,m)),!t)return i.join("");r=r.subarray(e),e=0,o=0;}var a=r[e++];if((a&128)===0)n[o++]=a;else if((a&224)===192){var d=r[e++]&63;n[o++]=(a&31)<<6|d;}else if((a&240)===224){var d=r[e++]&63,l=r[e++]&63;n[o++]=(a&31)<<12|d<<6|l;}else if((a&248)===240){var d=r[e++]&63,l=r[e++]&63,R=r[e++]&63,c=(a&7)<<18|d<<12|l<<6|R;c>65535&&(c-=65536,n[o++]=c>>>10&1023|55296,c=56320|c&1023),n[o++]=c;}}}function F(r){for(var e=0,f=r.length,n=0,i=Math.max(32,f+(f>>>1)+7),o=new Uint8Array(i>>>3<<3);e<f;){var t=r.charCodeAt(e++);if(t>=55296&&t<=56319){if(e<f){var s=r.charCodeAt(e);(s&64512)===56320&&(++e,t=((t&1023)<<10)+(s&1023)+65536);}if(t>=55296&&t<=56319)continue}if(n+4>o.length){i+=8,i*=1+e/r.length*2,i=i>>>3<<3;var m=new Uint8Array(i);m.set(o),o=m;}if((t&4294967168)===0){o[n++]=t;continue}else if((t&4294965248)===0)o[n++]=t>>>6&31|192;else if((t&4294901760)===0)o[n++]=t>>>12&15|224,o[n++]=t>>>6&63|128;else if((t&4292870144)===0)o[n++]=t>>>18&7|240,o[n++]=t>>>12&63|128,o[n++]=t>>>6&63|128;else continue;o[n++]=t&63|128;}return o.slice?o.slice(0,n):o.subarray(0,n)}var u="Failed to ",p=function(r,e,f){if(r)throw new Error("".concat(u).concat(e,": the '").concat(f,"' option is unsupported."))};var x=typeof Buffer=="function"&&Buffer.from;var A=x?w:F;function v(){this.encoding="utf-8";}v.prototype.encode=function(r,e){return p(e&&e.stream,"encode","stream"),A(r)};function U(r){var e;try{var f=new Blob([r],{type:"text/plain;charset=UTF-8"});e=URL.createObjectURL(f);var n=new XMLHttpRequest;return n.open("GET",e,!1),n.send(),n.responseText}finally{e&&URL.revokeObjectURL(e);}}var O=!x&&typeof Blob=="function"&&typeof URL=="function"&&typeof URL.createObjectURL=="function",S=["utf-8","utf8","unicode-1-1-utf-8"],T=h;x?T=B:O&&(T=function(r){try{return U(r)}catch(e){return h(r)}});var y="construct 'TextDecoder'",E="".concat(u," ").concat(y,": the ");function g(r,e){p(e&&e.fatal,y,"fatal"),r=r||"utf-8";var f;if(x?f=Buffer.isEncoding(r):f=S.indexOf(r.toLowerCase())!==-1,!f)throw new RangeError("".concat(E," encoding label provided ('").concat(r,"') is invalid."));this.encoding=r,this.fatal=!1,this.ignoreBOM=!1;}g.prototype.decode=function(r,e){p(e&&e.stream,"decode","stream");var f;return r instanceof Uint8Array?f=r:r.buffer instanceof ArrayBuffer?f=new Uint8Array(r.buffer):f=new Uint8Array(r),T(f,this.encoding)};scope.TextEncoder=scope.TextEncoder||v;scope.TextDecoder=scope.TextDecoder||g;
    }(typeof window !== 'undefined' ? window : (typeof commonjsGlobal !== 'undefined' ? commonjsGlobal : commonjsGlobal)));

    // Polyfill TextEncoder for MS Edge


    var browser = {
      encode: string => new TextEncoder().encode(string),
      decode: buffer => new TextDecoder().decode(buffer)
    };

    var justDebounceIt = debounce;

    function debounce(fn, wait, callFirst) {
      var timeout;
      return function() {
        if (!wait) {
          return fn.apply(this, arguments);
        }
        var context = this;
        var args = arguments;
        var callNow = callFirst && !timeout;
        clearTimeout(timeout);
        timeout = setTimeout(function() {
          timeout = null;
          if (!callNow) {
            return fn.apply(context, args);
          }
        }, wait);

        if (callNow) {
          return fn.apply(this, arguments);
        }
      };
    }

    function normalizePath$2(path) {
      if (path.length === 0) {
        return ".";
      }
      let parts = splitPath(path);
      parts = parts.reduce(reducer, []);
      return joinPath(...parts);
    }

    function resolvePath(...paths) {
      let result = '';
      for (let path of paths) {
        if (path.startsWith('/')) {
          result = path;
        } else {
          result = normalizePath$2(joinPath(result, path));
        }
      }
      return result;
    }

    function joinPath(...parts) {
      if (parts.length === 0) return "";
      let path = parts.join("/");
      // Replace consecutive '/'
      path = path.replace(/\/{2,}/g, "/");
      return path;
    }

    function splitPath(path) {
      if (path.length === 0) return [];
      if (path === "/") return ["/"];
      let parts = path.split("/");
      if (parts[parts.length - 1] === '') {
          parts.pop();
      }
      if (path[0] === "/") {
        // assert(parts[0] === '')
        parts[0] = "/";
      } else {
        if (parts[0] !== ".") {
          parts.unshift(".");
        }
      }
      return parts;
    }

    function dirname$1(path) {
      const last = path.lastIndexOf("/");
      if (last === -1) throw new Error(`Cannot get dirname of "${path}"`);
      if (last === 0) return "/";
      return path.slice(0, last);
    }

    function basename$1(path) {
      if (path === "/") throw new Error(`Cannot get basename of "${path}"`);
      const last = path.lastIndexOf("/");
      if (last === -1) return path;
      return path.slice(last + 1);
    }

    function reducer(ancestors, current) {
      // Initial condition
      if (ancestors.length === 0) {
        ancestors.push(current);
        return ancestors;
      }
      // assert(ancestors.length > 0)
      // assert(ancestors[0] === '.' || ancestors[0] === '/')

      // Collapse '.' references
      if (current === ".") return ancestors;

      // Collapse '..' references
      if (current === "..") {
        if (ancestors.length === 1) {
          if (ancestors[0] === "/") {
            throw new Error("Unable to normalize path - traverses above root directory");
          }
          // assert(ancestors[0] === '.')
          if (ancestors[0] === ".") {
            ancestors.push(current);
            return ancestors;
          }
        }
        // assert(ancestors.length > 1)
        if (ancestors[ancestors.length - 1] === "..") {
          ancestors.push("..");
          return ancestors;
        } else {
          ancestors.pop();
          return ancestors;
        }
      }

      ancestors.push(current);
      return ancestors;
    }

    var path_1 = {
      join: joinPath,
      normalize: normalizePath$2,
      split: splitPath,
      basename: basename$1,
      dirname: dirname$1,
      resolve: resolvePath,
    };

    function Err(name) {
      return class extends Error {
        constructor(...args) {
          super(...args);
          this.code = name;
          if (this.message) {
            this.message = name + ": " + this.message;
          } else {
            this.message = name;
          }
        }
      };
    }

    const EEXIST$1 = Err("EEXIST");
    const ENOENT$2 = Err("ENOENT");
    const ENOTDIR$1 = Err("ENOTDIR");
    const ENOTEMPTY$2 = Err("ENOTEMPTY");
    const ETIMEDOUT$1 = Err("ETIMEDOUT");

    var errors = { EEXIST: EEXIST$1, ENOENT: ENOENT$2, ENOTDIR: ENOTDIR$1, ENOTEMPTY: ENOTEMPTY$2, ETIMEDOUT: ETIMEDOUT$1 };

    const { EEXIST, ENOENT: ENOENT$1, ENOTDIR, ENOTEMPTY: ENOTEMPTY$1 } = errors;

    const STAT = 0;

    var CacheFS_1 = class CacheFS {
      constructor() {
      }
      _makeRoot(root = new Map()) {
        root.set(STAT, { mode: 0o777, type: "dir", size: 0, ino: 0, mtimeMs: Date.now() });
        return root
      }
      activate(superblock = null) {
        if (superblock === null) {
          this._root = new Map([["/", this._makeRoot()]]);
        } else if (typeof superblock === 'string') {
          this._root = new Map([["/", this._makeRoot(this.parse(superblock))]]);
        } else {
          this._root = superblock;
        }
      }
      get activated () {
        return !!this._root
      }
      deactivate () {
        this._root = void 0;
      }
      size () {
        // subtract 1 to ignore the root directory itself from the count.
        return this._countInodes(this._root.get("/")) - 1;
      }
      _countInodes(map) {
        let count = 1;
        for (let [key, val] of map) {
          if (key === STAT) continue;
          count += this._countInodes(val);
        }
        return count;
      }
      autoinc () {
        let val = this._maxInode(this._root.get("/")) + 1;
        return val;
      }
      _maxInode(map) {
        let max = map.get(STAT).ino;
        for (let [key, val] of map) {
          if (key === STAT) continue;
          max = Math.max(max, this._maxInode(val));
        }
        return max;
      }
      print(root = this._root.get("/")) {
        let str = "";
        const printTree = (root, indent) => {
          for (let [file, node] of root) {
            if (file === 0) continue;
            let stat = node.get(STAT);
            let mode = stat.mode.toString(8);
            str += `${"\t".repeat(indent)}${file}\t${mode}`;
            if (stat.type === "file") {
              str += `\t${stat.size}\t${stat.mtimeMs}\n`;
            } else {
              str += `\n`;
              printTree(node, indent + 1);
            }
          }
        };
        printTree(root, 0);
        return str;
      }
      parse(print) {
        let autoinc = 0;

        function mk(stat) {
          const ino = ++autoinc;
          // TODO: Use a better heuristic for determining whether file or dir
          const type = stat.length === 1 ? "dir" : "file";
          let [mode, size, mtimeMs] = stat;
          mode = parseInt(mode, 8);
          size = size ? parseInt(size) : 0;
          mtimeMs = mtimeMs ? parseInt(mtimeMs) : Date.now();
          return new Map([[STAT, { mode, type, size, mtimeMs, ino }]]);
        }

        let lines = print.trim().split("\n");
        let _root = this._makeRoot();
        let stack = [
          { indent: -1, node: _root },
          { indent: 0, node: null }
        ];
        for (let line of lines) {
          let prefix = line.match(/^\t*/)[0];
          let indent = prefix.length;
          line = line.slice(indent);
          let [filename, ...stat] = line.split("\t");
          let node = mk(stat);
          if (indent <= stack[stack.length - 1].indent) {
            while (indent <= stack[stack.length - 1].indent) {
              stack.pop();
            }
          }
          stack.push({ indent, node });
          let cd = stack[stack.length - 2].node;
          cd.set(filename, node);
        }
        return _root;
      }
      _lookup(filepath, follow = true) {
        let dir = this._root;
        let partialPath = '/';
        let parts = path_1.split(filepath);
        for (let i = 0; i < parts.length; ++ i) {
          let part = parts[i];
          dir = dir.get(part);
          if (!dir) throw new ENOENT$1(filepath);
          // Follow symlinks
          if (follow || i < parts.length - 1) {
            const stat = dir.get(STAT);
            if (stat.type === 'symlink') {
              let target = path_1.resolve(partialPath, stat.target);
              dir = this._lookup(target);
            }
            if (!partialPath) {
              partialPath = part;
            } else {
              partialPath = path_1.join(partialPath, part);
            }
          }
        }
        return dir;
      }
      mkdir(filepath, { mode }) {
        if (filepath === "/") throw new EEXIST();
        let dir = this._lookup(path_1.dirname(filepath));
        let basename = path_1.basename(filepath);
        if (dir.has(basename)) {
          throw new EEXIST();
        }
        let entry = new Map();
        let stat = {
          mode,
          type: "dir",
          size: 0,
          mtimeMs: Date.now(),
          ino: this.autoinc(),
        };
        entry.set(STAT, stat);
        dir.set(basename, entry);
      }
      rmdir(filepath) {
        let dir = this._lookup(filepath);
        if (dir.get(STAT).type !== 'dir') throw new ENOTDIR();
        // check it's empty (size should be 1 for just StatSym)
        if (dir.size > 1) throw new ENOTEMPTY$1();
        // remove from parent
        let parent = this._lookup(path_1.dirname(filepath));
        let basename = path_1.basename(filepath);
        parent.delete(basename);
      }
      readdir(filepath) {
        let dir = this._lookup(filepath);
        if (dir.get(STAT).type !== 'dir') throw new ENOTDIR();
        return [...dir.keys()].filter(key => typeof key === "string");
      }
      writeStat(filepath, size, { mode }) {
        let ino;
        try {
          let oldStat = this.stat(filepath);
          if (mode == null) {
            mode = oldStat.mode;
          }
          ino = oldStat.ino;
        } catch (err) {}
        if (mode == null) {
          mode = 0o666;
        }
        if (ino == null) {
          ino = this.autoinc();
        }
        let dir = this._lookup(path_1.dirname(filepath));
        let basename = path_1.basename(filepath);
        let stat = {
          mode,
          type: "file",
          size,
          mtimeMs: Date.now(),
          ino,
        };
        let entry = new Map();
        entry.set(STAT, stat);
        dir.set(basename, entry);
        return stat;
      }
      unlink(filepath) {
        // remove from parent
        let parent = this._lookup(path_1.dirname(filepath));
        let basename = path_1.basename(filepath);
        parent.delete(basename);
      }
      rename(oldFilepath, newFilepath) {
        let basename = path_1.basename(newFilepath);
        // Note: do both lookups before making any changes
        // so if lookup throws, we don't lose data (issue #23)
        // grab references
        let entry = this._lookup(oldFilepath);
        let destDir = this._lookup(path_1.dirname(newFilepath));
        // insert into new parent directory
        destDir.set(basename, entry);
        // remove from old parent directory
        this.unlink(oldFilepath);
      }
      stat(filepath) {
        return this._lookup(filepath).get(STAT);
      }
      lstat(filepath) {
        return this._lookup(filepath, false).get(STAT);
      }
      readlink(filepath) {
        return this._lookup(filepath, false).get(STAT).target;
      }
      symlink(target, filepath) {
        let ino, mode;
        try {
          let oldStat = this.stat(filepath);
          if (mode === null) {
            mode = oldStat.mode;
          }
          ino = oldStat.ino;
        } catch (err) {}
        if (mode == null) {
          mode = 0o120000;
        }
        if (ino == null) {
          ino = this.autoinc();
        }
        let dir = this._lookup(path_1.dirname(filepath));
        let basename = path_1.basename(filepath);
        let stat = {
          mode,
          type: "symlink",
          target,
          size: 0,
          mtimeMs: Date.now(),
          ino,
        };
        let entry = new Map();
        entry.set(STAT, stat);
        dir.set(basename, entry);
        return stat;
      }
      _du (dir) {
        let size = 0;
        for (const [name, entry] of dir.entries()) {
          if (name === STAT) {
            size += entry.size;
          } else {
            size += this._du(entry);
          }
        }
        return size;
      }
      du (filepath) {
        let dir = this._lookup(filepath);
        return this._du(dir);
      }
    };

    class Store {
        constructor(dbName = 'keyval-store', storeName = 'keyval') {
            this.storeName = storeName;
            this._dbName = dbName;
            this._storeName = storeName;
            this._init();
        }
        _init() {
            if (this._dbp) {
                return;
            }
            this._dbp = new Promise((resolve, reject) => {
                const openreq = indexedDB.open(this._dbName);
                openreq.onerror = () => reject(openreq.error);
                openreq.onsuccess = () => resolve(openreq.result);
                // First time setup: create an empty object store
                openreq.onupgradeneeded = () => {
                    openreq.result.createObjectStore(this._storeName);
                };
            });
        }
        _withIDBStore(type, callback) {
            this._init();
            return this._dbp.then(db => new Promise((resolve, reject) => {
                const transaction = db.transaction(this.storeName, type);
                transaction.oncomplete = () => resolve();
                transaction.onabort = transaction.onerror = () => reject(transaction.error);
                callback(transaction.objectStore(this.storeName));
            }));
        }
        _close() {
            this._init();
            return this._dbp.then(db => {
                db.close();
                this._dbp = undefined;
            });
        }
    }
    let store$1;
    function getDefaultStore() {
        if (!store$1)
            store$1 = new Store();
        return store$1;
    }
    function get(key, store = getDefaultStore()) {
        let req;
        return store._withIDBStore('readwrite', store => {
            req = store.get(key);
        }).then(() => req.result);
    }
    function set$1(key, value, store = getDefaultStore()) {
        return store._withIDBStore('readwrite', store => {
            store.put(value, key);
        });
    }
    function update$1(key, updater, store = getDefaultStore()) {
        return store._withIDBStore('readwrite', store => {
            const req = store.get(key);
            req.onsuccess = () => {
                store.put(updater(req.result), key);
            };
        });
    }
    function del(key, store = getDefaultStore()) {
        return store._withIDBStore('readwrite', store => {
            store.delete(key);
        });
    }
    function clear(store = getDefaultStore()) {
        return store._withIDBStore('readwrite', store => {
            store.clear();
        });
    }
    function keys(store = getDefaultStore()) {
        const keys = [];
        return store._withIDBStore('readwrite', store => {
            // This would be store.getAllKeys(), but it isn't supported by Edge or Safari.
            // And openKeyCursor isn't supported by Safari.
            (store.openKeyCursor || store.openCursor).call(store).onsuccess = function () {
                if (!this.result)
                    return;
                keys.push(this.result.key);
                this.result.continue();
            };
        }).then(() => keys);
    }
    function close(store = getDefaultStore()) {
        return store._close();
    }

    var idbKeyval = /*#__PURE__*/Object.freeze({
        __proto__: null,
        Store: Store,
        get: get,
        set: set$1,
        update: update$1,
        del: del,
        clear: clear,
        keys: keys,
        close: close
    });

    var idb = getCjsExportFromNamespace(idbKeyval);

    var IdbBackend_1 = class IdbBackend {
      constructor(dbname, storename) {
        this._database = dbname;
        this._storename = storename;
        this._store = new idb.Store(this._database, this._storename);
      }
      saveSuperblock(superblock) {
        return idb.set("!root", superblock, this._store);
      }
      loadSuperblock() {
        return idb.get("!root", this._store);
      }
      readFile(inode) {
        return idb.get(inode, this._store)
      }
      writeFile(inode, data) {
        return idb.set(inode, data, this._store)
      }
      unlink(inode) {
        return idb.del(inode, this._store)
      }
      wipe() {
        return idb.clear(this._store)
      }
      close() {
        return idb.close(this._store)
      }
    };

    var HttpBackend_1 = class HttpBackend {
      constructor(url) {
        this._url = url;
      }
      loadSuperblock() {
        return fetch(this._url + '/.superblock.txt').then(res => res.ok ? res.text() : null)
      }
      async readFile(filepath) {
        const res = await fetch(this._url + filepath);
        if (res.status === 200) {
          return res.arrayBuffer()
        } else {
          throw new Error('ENOENT')
        }
      }
      async sizeFile(filepath) {
        const res = await fetch(this._url + filepath, { method: 'HEAD' });
        if (res.status === 200) {
          return res.headers.get('content-length')
        } else {
          throw new Error('ENOENT')
        }
      }
    };

    const sleep = ms => new Promise(r => setTimeout(r, ms));

    var Mutex_1 = class Mutex {
      constructor(dbname, storename) {
        this._id = Math.random();
        this._database = dbname;
        this._storename = storename;
        this._store = new idb.Store(this._database, this._storename);
        this._lock = null;
      }
      async has ({ margin = 2000 } = {}) {
        if (this._lock && this._lock.holder === this._id) {
          const now = Date.now();
          if (this._lock.expires > now + margin) {
            return true
          } else {
            return await this.renew()
          }
        } else {
          return false
        }
      }
      // Returns true if successful
      async renew ({ ttl = 5000 } = {}) {
        let success;
        await idb.update("lock", (current) => {
          const now = Date.now();
          const expires = now + ttl;
          success = current && current.holder === this._id;
          this._lock = success ? { holder: this._id, expires } : current;
          return this._lock
        }, this._store);
        return success
      }
      // Returns true if successful
      async acquire ({ ttl = 5000 } = {}) {
        let success;
        let expired;
        let doubleLock;
        await idb.update("lock", (current) => {
          const now = Date.now();
          const expires = now + ttl;
          expired = current && current.expires < now;
          success = current === undefined || expired;
          doubleLock = current && current.holder === this._id;
          this._lock = success ? { holder: this._id, expires } : current;
          return this._lock
        }, this._store);
        if (doubleLock) {
          throw new Error('Mutex double-locked')
        }
        return success
      }
      // check at 10Hz, give up after 10 minutes
      async wait ({ interval = 100, limit = 6000, ttl } = {}) {
        while (limit--) {
          if (await this.acquire({ ttl })) return true
          await sleep(interval);
        }
        throw new Error('Mutex timeout')
      }
      // Returns true if successful
      async release ({ force = false } = {}) {
        let success;
        let doubleFree;
        let someoneElseHasIt;
        await idb.update("lock", (current) => {
          success = force || (current && current.holder === this._id);
          doubleFree = current === void 0;
          someoneElseHasIt = current && current.holder !== this._id;
          this._lock = success ? void 0 : current;
          return this._lock
        }, this._store);
        await idb.close(this._store);
        if (!success && !force) {
          if (doubleFree) throw new Error('Mutex double-freed')
          if (someoneElseHasIt) throw new Error('Mutex lost ownership')
        }
        return success
      }
    };

    var Mutex2 = class Mutex {
      constructor(name) {
        this._id = Math.random();
        this._database = name;
        this._has = false;
        this._release = null;
      }
      async has () {
        return this._has
      }
      // Returns true if successful
      async acquire () {
        return new Promise(resolve => {
          navigator.locks.request(this._database + "_lock", {ifAvailable: true}, lock => {
            this._has = !!lock;
            resolve(!!lock);
            return new Promise(resolve => {
              this._release = resolve;
            })
          }); 
        })
      }
      // Returns true if successful, gives up after 10 minutes
      async wait ({ timeout = 600000 } = {}) {
        return new Promise((resolve, reject) => {
          const controller = new AbortController();
          setTimeout(() => {
            controller.abort();
            reject(new Error('Mutex timeout'));
          }, timeout);
          navigator.locks.request(this._database + "_lock", {signal: controller.signal}, lock => {
            this._has = !!lock;
            resolve(!!lock);
            return new Promise(resolve => {
              this._release = resolve;
            })
          }); 
        })
      }
      // Returns true if successful
      async release ({ force = false } = {}) {
        this._has = false;
        if (this._release) {
          this._release();
        } else if (force) {
          navigator.locks.request(this._database + "_lock", {steal: true}, lock => true);
        }
      }
    };

    const { encode, decode } = browser;



    const { ENOENT, ENOTEMPTY, ETIMEDOUT } = errors;







    var DefaultBackend_1 = class DefaultBackend {
      constructor() {
        this.saveSuperblock = justDebounceIt(() => {
          this.flush();
        }, 500);
      }
      async init (name, {
        wipe,
        url,
        urlauto,
        fileDbName = name,
        db = null,
        fileStoreName = name + "_files",
        lockDbName = name + "_lock",
        lockStoreName = name + "_lock",
      } = {}) {
        this._name = name;
        this._idb = db || new IdbBackend_1(fileDbName, fileStoreName);
        this._mutex = navigator.locks ? new Mutex2(name) : new Mutex_1(lockDbName, lockStoreName);
        this._cache = new CacheFS_1(name);
        this._opts = { wipe, url };
        this._needsWipe = !!wipe;
        if (url) {
          this._http = new HttpBackend_1(url);
          this._urlauto = !!urlauto;
        }
      }
      async activate() {
        if (this._cache.activated) return
        // Wipe IDB if requested
        if (this._needsWipe) {
          this._needsWipe = false;
          await this._idb.wipe();
          await this._mutex.release({ force: true });
        }
        if (!(await this._mutex.has())) await this._mutex.wait();
        // Attempt to load FS from IDB backend
        const root = await this._idb.loadSuperblock();
        if (root) {
          this._cache.activate(root);
        } else if (this._http) {
          // If that failed, attempt to load FS from HTTP backend
          const text = await this._http.loadSuperblock();
          this._cache.activate(text);
          await this._saveSuperblock();
        } else {
          // If there is no HTTP backend, start with an empty filesystem
          this._cache.activate();
        }
        if (await this._mutex.has()) {
          return
        } else {
          throw new ETIMEDOUT()
        }
      }
      async deactivate() {
        if (await this._mutex.has()) {
          await this._saveSuperblock();
        }
        this._cache.deactivate();
        try {
          await this._mutex.release();
        } catch (e) {
          console.log(e);
        }
        await this._idb.close();
      }
      async _saveSuperblock() {
        if (this._cache.activated) {
          this._lastSavedAt = Date.now();
          await this._idb.saveSuperblock(this._cache._root);
        }
      }
      _writeStat(filepath, size, opts) {
        let dirparts = path_1.split(path_1.dirname(filepath));
        let dir = dirparts.shift();
        for (let dirpart of dirparts) {
          dir = path_1.join(dir, dirpart);
          try {
            this._cache.mkdir(dir, { mode: 0o777 });
          } catch (e) {}
        }
        return this._cache.writeStat(filepath, size, opts)
      }
      async readFile(filepath, opts) {
        const { encoding } = opts;
        if (encoding && encoding !== 'utf8') throw new Error('Only "utf8" encoding is supported in readFile');
        let data = null, stat = null;
        try {
          stat = this._cache.stat(filepath);
          data = await this._idb.readFile(stat.ino);
        } catch (e) {
          if (!this._urlauto) throw e
        }
        if (!data && this._http) {
          let lstat = this._cache.lstat(filepath);
          while (lstat.type === 'symlink') {
            filepath = path_1.resolve(path_1.dirname(filepath), lstat.target);
            lstat = this._cache.lstat(filepath);
          }
          data = await this._http.readFile(filepath);
        }
        if (data) {
          if (!stat || stat.size != data.byteLength) {
            stat = await this._writeStat(filepath, data.byteLength, { mode: stat ? stat.mode : 0o666 });
            this.saveSuperblock(); // debounced
          }
          if (encoding === "utf8") {
            data = decode(data);
          } else {
            data.toString = () => decode(data);
          }
        }
        if (!stat) throw new ENOENT(filepath)
        return data;
      }
      async writeFile(filepath, data, opts) {
        const { mode, encoding = "utf8" } = opts;
        if (typeof data === "string") {
          if (encoding !== "utf8") {
            throw new Error('Only "utf8" encoding is supported in writeFile');
          }
          data = encode(data);
        }
        const stat = await this._cache.writeStat(filepath, data.byteLength, { mode });
        await this._idb.writeFile(stat.ino, data);
      }
      async unlink(filepath, opts) {
        const stat = this._cache.lstat(filepath);
        this._cache.unlink(filepath);
        if (stat.type !== 'symlink') {
          await this._idb.unlink(stat.ino);
        }
      }
      readdir(filepath, opts) {
        return this._cache.readdir(filepath);
      }
      mkdir(filepath, opts) {
        const { mode = 0o777 } = opts;
        this._cache.mkdir(filepath, { mode });
      }
      rmdir(filepath, opts) {
        // Never allow deleting the root directory.
        if (filepath === "/") {
          throw new ENOTEMPTY();
        }
        this._cache.rmdir(filepath);
      }
      rename(oldFilepath, newFilepath) {
        this._cache.rename(oldFilepath, newFilepath);
      }
      stat(filepath, opts) {
        return this._cache.stat(filepath);
      }
      lstat(filepath, opts) {
        return this._cache.lstat(filepath);
      }
      readlink(filepath, opts) {
        return this._cache.readlink(filepath);
      }
      symlink(target, filepath) {
        this._cache.symlink(target, filepath);
      }
      async backFile(filepath, opts) {
        let size = await this._http.sizeFile(filepath);
        await this._writeStat(filepath, size, opts);
      }
      du(filepath) {
        return this._cache.du(filepath);
      }
      flush() {
        return this._saveSuperblock();
      }
    };

    var Stat_1 = class Stat {
      constructor(stats) {
        this.type = stats.type;
        this.mode = stats.mode;
        this.size = stats.size;
        this.ino = stats.ino;
        this.mtimeMs = stats.mtimeMs;
        this.ctimeMs = stats.ctimeMs || stats.mtimeMs;
        this.uid = 1;
        this.gid = 1;
        this.dev = 1;
      }
      isFile() {
        return this.type === "file";
      }
      isDirectory() {
        return this.type === "dir";
      }
      isSymbolicLink() {
        return this.type === "symlink";
      }
    };

    function cleanParamsFilepathOpts(filepath, opts, ...rest) {
      // normalize paths
      filepath = path_1.normalize(filepath);
      // strip out callbacks
      if (typeof opts === "undefined" || typeof opts === "function") {
        opts = {};
      }
      // expand string options to encoding options
      if (typeof opts === "string") {
        opts = {
          encoding: opts,
        };
      }
      return [filepath, opts, ...rest];
    }

    function cleanParamsFilepathDataOpts(filepath, data, opts, ...rest) {
      // normalize paths
      filepath = path_1.normalize(filepath);
      // strip out callbacks
      if (typeof opts === "undefined" || typeof opts === "function") {
        opts = {};
      }
      // expand string options to encoding options
      if (typeof opts === "string") {
        opts = {
          encoding: opts,
        };
      }
      return [filepath, data, opts, ...rest];
    }

    function cleanParamsFilepathFilepath(oldFilepath, newFilepath, ...rest) {
      // normalize paths
      return [path_1.normalize(oldFilepath), path_1.normalize(newFilepath), ...rest];
    }

    var PromisifiedFS_1 = class PromisifiedFS {
      constructor(name, options = {}) {
        this.init = this.init.bind(this);
        this.readFile = this._wrap(this.readFile, cleanParamsFilepathOpts, false);
        this.writeFile = this._wrap(this.writeFile, cleanParamsFilepathDataOpts, true);
        this.unlink = this._wrap(this.unlink, cleanParamsFilepathOpts, true);
        this.readdir = this._wrap(this.readdir, cleanParamsFilepathOpts, false);
        this.mkdir = this._wrap(this.mkdir, cleanParamsFilepathOpts, true);
        this.rmdir = this._wrap(this.rmdir, cleanParamsFilepathOpts, true);
        this.rename = this._wrap(this.rename, cleanParamsFilepathFilepath, true);
        this.stat = this._wrap(this.stat, cleanParamsFilepathOpts, false);
        this.lstat = this._wrap(this.lstat, cleanParamsFilepathOpts, false);
        this.readlink = this._wrap(this.readlink, cleanParamsFilepathOpts, false);
        this.symlink = this._wrap(this.symlink, cleanParamsFilepathFilepath, true);
        this.backFile = this._wrap(this.backFile, cleanParamsFilepathOpts, true);
        this.du = this._wrap(this.du, cleanParamsFilepathOpts, false);

        this._deactivationPromise = null;
        this._deactivationTimeout = null;
        this._activationPromise = null;

        this._operations = new Set();

        if (name) {
          this.init(name, options);
        }
      }
      async init (...args) {
        if (this._initPromiseResolve) await this._initPromise;
        this._initPromise = this._init(...args);
        return this._initPromise
      }
      async _init (name, options = {}) {
        await this._gracefulShutdown();
        if (this._activationPromise) await this._deactivate();

        if (this._backend && this._backend.destroy) {
          await this._backend.destroy();
        }
        this._backend = options.backend || new DefaultBackend_1();
        if (this._backend.init) {
          await this._backend.init(name, options);
        }

        if (this._initPromiseResolve) {
          this._initPromiseResolve();
          this._initPromiseResolve = null;
        }
        // The next comment starting with the "fs is initially activated when constructed"?
        // That can create contention for the mutex if two threads try to init at the same time
        // so I've added an option to disable that behavior.
        if (!options.defer) {
          // The fs is initially activated when constructed (in order to wipe/save the superblock)
          // This is not awaited, because that would create a cycle.
          this.stat('/');
        }
      }
      async _gracefulShutdown () {
        if (this._operations.size > 0) {
          this._isShuttingDown = true;
          await new Promise(resolve => this._gracefulShutdownResolve = resolve);
          this._isShuttingDown = false;
          this._gracefulShutdownResolve = null;
        }
      }
      _wrap (fn, paramCleaner, mutating) {
        return async (...args) => {
          args = paramCleaner(...args);
          let op = {
            name: fn.name,
            args,
          };
          this._operations.add(op);
          try {
            await this._activate();
            return await fn.apply(this, args)
          } finally {
            this._operations.delete(op);
            if (mutating) this._backend.saveSuperblock(); // this is debounced
            if (this._operations.size === 0) {
              if (!this._deactivationTimeout) clearTimeout(this._deactivationTimeout);
              this._deactivationTimeout = setTimeout(this._deactivate.bind(this), 500);
            }
          }
        }
      }
      async _activate() {
        if (!this._initPromise) console.warn(new Error(`Attempted to use LightningFS ${this._name} before it was initialized.`));
        await this._initPromise;
        if (this._deactivationTimeout) {
          clearTimeout(this._deactivationTimeout);
          this._deactivationTimeout = null;
        }
        if (this._deactivationPromise) await this._deactivationPromise;
        this._deactivationPromise = null;
        if (!this._activationPromise) {
          this._activationPromise = this._backend.activate ? this._backend.activate() : Promise.resolve();
        }
        await this._activationPromise;
      }
      async _deactivate() {
        if (this._activationPromise) await this._activationPromise;

        if (!this._deactivationPromise) {
          this._deactivationPromise = this._backend.deactivate ? this._backend.deactivate() : Promise.resolve();
        }
        this._activationPromise = null;
        if (this._gracefulShutdownResolve) this._gracefulShutdownResolve();
        return this._deactivationPromise
      }
      async readFile(filepath, opts) {
        return this._backend.readFile(filepath, opts);
      }
      async writeFile(filepath, data, opts) {
        await this._backend.writeFile(filepath, data, opts);
        return null
      }
      async unlink(filepath, opts) {
        await this._backend.unlink(filepath, opts);
        return null
      }
      async readdir(filepath, opts) {
        return this._backend.readdir(filepath, opts);
      }
      async mkdir(filepath, opts) {
        await this._backend.mkdir(filepath, opts);
        return null
      }
      async rmdir(filepath, opts) {
        await this._backend.rmdir(filepath, opts);
        return null;
      }
      async rename(oldFilepath, newFilepath) {
        await this._backend.rename(oldFilepath, newFilepath);
        return null;
      }
      async stat(filepath, opts) {
        const data = await this._backend.stat(filepath, opts);
        return new Stat_1(data);
      }
      async lstat(filepath, opts) {
        const data = await this._backend.lstat(filepath, opts);
        return new Stat_1(data);
      }
      async readlink(filepath, opts) {
        return this._backend.readlink(filepath, opts);
      }
      async symlink(target, filepath) {
        await this._backend.symlink(target, filepath);
        return null;
      }
      async backFile(filepath, opts) {
        await this._backend.backFile(filepath, opts);
        return null
      }
      async du(filepath) {
        return this._backend.du(filepath);
      }
      async flush() {
        return this._backend.flush();
      }
    };

    function wrapCallback (opts, cb) {
      if (typeof opts === "function") {
        cb = opts;
      }
      cb = justOnce(cb);
      const resolve = (...args) => cb(null, ...args);
      return [resolve, cb];
    }

    var src = class FS {
      constructor(...args) {
        this.promises = new PromisifiedFS_1(...args);
        // Needed so things don't break if you destructure fs and pass individual functions around
        this.init = this.init.bind(this);
        this.readFile = this.readFile.bind(this);
        this.writeFile = this.writeFile.bind(this);
        this.unlink = this.unlink.bind(this);
        this.readdir = this.readdir.bind(this);
        this.mkdir = this.mkdir.bind(this);
        this.rmdir = this.rmdir.bind(this);
        this.rename = this.rename.bind(this);
        this.stat = this.stat.bind(this);
        this.lstat = this.lstat.bind(this);
        this.readlink = this.readlink.bind(this);
        this.symlink = this.symlink.bind(this);
        this.backFile = this.backFile.bind(this);
        this.du = this.du.bind(this);
        this.flush = this.flush.bind(this);
      }
      init(name, options) {
        return this.promises.init(name, options)
      }
      readFile(filepath, opts, cb) {
        const [resolve, reject] = wrapCallback(opts, cb);
        this.promises.readFile(filepath, opts).then(resolve).catch(reject);
      }
      writeFile(filepath, data, opts, cb) {
        const [resolve, reject] = wrapCallback(opts, cb);
        this.promises.writeFile(filepath, data, opts).then(resolve).catch(reject);
      }
      unlink(filepath, opts, cb) {
        const [resolve, reject] = wrapCallback(opts, cb);
        this.promises.unlink(filepath, opts).then(resolve).catch(reject);
      }
      readdir(filepath, opts, cb) {
        const [resolve, reject] = wrapCallback(opts, cb);
        this.promises.readdir(filepath, opts).then(resolve).catch(reject);
      }
      mkdir(filepath, opts, cb) {
        const [resolve, reject] = wrapCallback(opts, cb);
        this.promises.mkdir(filepath, opts).then(resolve).catch(reject);
      }
      rmdir(filepath, opts, cb) {
        const [resolve, reject] = wrapCallback(opts, cb);
        this.promises.rmdir(filepath, opts).then(resolve).catch(reject);
      }
      rename(oldFilepath, newFilepath, cb) {
        const [resolve, reject] = wrapCallback(cb);
        this.promises.rename(oldFilepath, newFilepath).then(resolve).catch(reject);
      }
      stat(filepath, opts, cb) {
        const [resolve, reject] = wrapCallback(opts, cb);
        this.promises.stat(filepath).then(resolve).catch(reject);
      }
      lstat(filepath, opts, cb) {
        const [resolve, reject] = wrapCallback(opts, cb);
        this.promises.lstat(filepath).then(resolve).catch(reject);
      }
      readlink(filepath, opts, cb) {
        const [resolve, reject] = wrapCallback(opts, cb);
        this.promises.readlink(filepath).then(resolve).catch(reject);
      }
      symlink(target, filepath, cb) {
        const [resolve, reject] = wrapCallback(cb);
        this.promises.symlink(target, filepath).then(resolve).catch(reject);
      }
      backFile(filepath, opts, cb) {
        const [resolve, reject] = wrapCallback(opts, cb);
        this.promises.backFile(filepath, opts).then(resolve).catch(reject);
      }
      du(filepath, cb) {
        const [resolve, reject] = wrapCallback(cb);
        this.promises.du(filepath).then(resolve).catch(reject);
      }
      flush(cb) {
        const [resolve, reject] = wrapCallback(cb);
        this.promises.flush().then(resolve).catch(reject);
      }
    };

    var AsyncLock = function (opts) {
    	opts = opts || {};

    	this.Promise = opts.Promise || Promise;

    	// format: {key : [fn, fn]}
    	// queues[key] = null indicates no job running for key
    	this.queues = Object.create(null);

    	// lock is reentrant for same domain
    	this.domainReentrant = opts.domainReentrant || false;
    	if (this.domainReentrant) {
    		if (typeof process === 'undefined' || typeof process.domain === 'undefined') {
    			throw new Error(
    				'Domain-reentrant locks require `process.domain` to exist. Please flip `opts.domainReentrant = false`, ' +
    				'use a NodeJS version that still implements Domain, or install a browser polyfill.');
    		}
    		// domain of current running func {key : fn}
    		this.domains = Object.create(null);
    	}

    	this.timeout = opts.timeout || AsyncLock.DEFAULT_TIMEOUT;
    	this.maxOccupationTime = opts.maxOccupationTime || AsyncLock.DEFAULT_MAX_OCCUPATION_TIME;
    	this.maxExecutionTime = opts.maxExecutionTime || AsyncLock.DEFAULT_MAX_EXECUTION_TIME;
    	if (opts.maxPending === Infinity || (Number.isInteger(opts.maxPending) && opts.maxPending >= 0)) {
    		this.maxPending = opts.maxPending;
    	} else {
    		this.maxPending = AsyncLock.DEFAULT_MAX_PENDING;
    	}
    };

    AsyncLock.DEFAULT_TIMEOUT = 0; //Never
    AsyncLock.DEFAULT_MAX_OCCUPATION_TIME = 0; //Never
    AsyncLock.DEFAULT_MAX_EXECUTION_TIME = 0; //Never
    AsyncLock.DEFAULT_MAX_PENDING = 1000;

    /**
     * Acquire Locks
     *
     * @param {String|Array} key 	resource key or keys to lock
     * @param {function} fn 	async function
     * @param {function} cb 	callback function, otherwise will return a promise
     * @param {Object} opts 	options
     */
    AsyncLock.prototype.acquire = function (key, fn, cb, opts) {
    	if (Array.isArray(key)) {
    		return this._acquireBatch(key, fn, cb, opts);
    	}

    	if (typeof (fn) !== 'function') {
    		throw new Error('You must pass a function to execute');
    	}

    	// faux-deferred promise using new Promise() (as Promise.defer is deprecated)
    	var deferredResolve = null;
    	var deferredReject = null;
    	var deferred = null;

    	if (typeof (cb) !== 'function') {
    		opts = cb;
    		cb = null;

    		// will return a promise
    		deferred = new this.Promise(function(resolve, reject) {
    			deferredResolve = resolve;
    			deferredReject = reject;
    		});
    	}

    	opts = opts || {};

    	var resolved = false;
    	var timer = null;
    	var occupationTimer = null;
    	var executionTimer = null;
    	var self = this;

    	var done = function (locked, err, ret) {

    		if (occupationTimer) {
    			clearTimeout(occupationTimer);
    			occupationTimer = null;
    		}

    		if (executionTimer) {
    			clearTimeout(executionTimer);
    			executionTimer = null;
    		}

    		if (locked) {
    			if (!!self.queues[key] && self.queues[key].length === 0) {
    				delete self.queues[key];
    			}
    			if (self.domainReentrant) {
    				delete self.domains[key];
    			}
    		}

    		if (!resolved) {
    			if (!deferred) {
    				if (typeof (cb) === 'function') {
    					cb(err, ret);
    				}
    			}
    			else {
    				//promise mode
    				if (err) {
    					deferredReject(err);
    				}
    				else {
    					deferredResolve(ret);
    				}
    			}
    			resolved = true;
    		}

    		if (locked) {
    			//run next func
    			if (!!self.queues[key] && self.queues[key].length > 0) {
    				self.queues[key].shift()();
    			}
    		}
    	};

    	var exec = function (locked) {
    		if (resolved) { // may due to timed out
    			return done(locked);
    		}

    		if (timer) {
    			clearTimeout(timer);
    			timer = null;
    		}

    		if (self.domainReentrant && locked) {
    			self.domains[key] = process.domain;
    		}

    		var maxExecutionTime = opts.maxExecutionTime || self.maxExecutionTime;
    		if (maxExecutionTime) {
    			executionTimer = setTimeout(function () {
    				if (!!self.queues[key]) {
    					done(locked, new Error('Maximum execution time is exceeded ' + key));
    				}
    			}, maxExecutionTime);
    		}

    		// Callback mode
    		if (fn.length === 1) {
    			var called = false;
    			try {
    				fn(function (err, ret) {
    					if (!called) {
    						called = true;
    						done(locked, err, ret);
    					}
    				});
    			} catch (err) {
    				// catching error thrown in user function fn
    				if (!called) {
    					called = true;
    					done(locked, err);
    				}
    			}
    		}
    		else {
    			// Promise mode
    			self._promiseTry(function () {
    				return fn();
    			})
    			.then(function(ret){
    				done(locked, undefined, ret);
    			}, function(error){
    				done(locked, error);
    			});
    		}
    	};

    	if (self.domainReentrant && !!process.domain) {
    		exec = process.domain.bind(exec);
    	}

    	if (!self.queues[key]) {
    		self.queues[key] = [];
    		exec(true);
    	}
    	else if (self.domainReentrant && !!process.domain && process.domain === self.domains[key]) {
    		// If code is in the same domain of current running task, run it directly
    		// Since lock is re-enterable
    		exec(false);
    	}
    	else if (self.queues[key].length >= self.maxPending) {
    		done(false, new Error('Too many pending tasks in queue ' + key));
    	}
    	else {
    		var taskFn = function () {
    			exec(true);
    		};
    		if (opts.skipQueue) {
    			self.queues[key].unshift(taskFn);
    		} else {
    			self.queues[key].push(taskFn);
    		}

    		var timeout = opts.timeout || self.timeout;
    		if (timeout) {
    			timer = setTimeout(function () {
    				timer = null;
    				done(false, new Error('async-lock timed out in queue ' + key));
    			}, timeout);
    		}
    	}

    	var maxOccupationTime = opts.maxOccupationTime || self.maxOccupationTime;
    		if (maxOccupationTime) {
    			occupationTimer = setTimeout(function () {
    				if (!!self.queues[key]) {
    					done(false, new Error('Maximum occupation time is exceeded in queue ' + key));
    				}
    			}, maxOccupationTime);
    		}

    	if (deferred) {
    		return deferred;
    	}
    };

    /*
     * Below is how this function works:
     *
     * Equivalent code:
     * self.acquire(key1, function(cb){
     *     self.acquire(key2, function(cb){
     *         self.acquire(key3, fn, cb);
     *     }, cb);
     * }, cb);
     *
     * Equivalent code:
     * var fn3 = getFn(key3, fn);
     * var fn2 = getFn(key2, fn3);
     * var fn1 = getFn(key1, fn2);
     * fn1(cb);
     */
    AsyncLock.prototype._acquireBatch = function (keys, fn, cb, opts) {
    	if (typeof (cb) !== 'function') {
    		opts = cb;
    		cb = null;
    	}

    	var self = this;
    	var getFn = function (key, fn) {
    		return function (cb) {
    			self.acquire(key, fn, cb, opts);
    		};
    	};

    	var fnx = keys.reduceRight(function (prev, key) {
    		return getFn(key, prev);
    	}, fn);

    	if (typeof (cb) === 'function') {
    		fnx(cb);
    	}
    	else {
    		return new this.Promise(function (resolve, reject) {
    			// check for promise mode in case keys is empty array
    			if (fnx.length === 1) {
    				fnx(function (err, ret) {
    					if (err) {
    						reject(err);
    					}
    					else {
    						resolve(ret);
    					}
    				});
    			} else {
    				resolve(fnx());
    			}
    		});
    	}
    };

    /*
     *	Whether there is any running or pending asyncFunc
     *
     *	@param {String} key
     */
    AsyncLock.prototype.isBusy = function (key) {
    	if (!key) {
    		return Object.keys(this.queues).length > 0;
    	}
    	else {
    		return !!this.queues[key];
    	}
    };

    /**
     * Promise.try() implementation to become independent of Q-specific methods
     */
    AsyncLock.prototype._promiseTry = function(fn) {
    	try {
    		return this.Promise.resolve(fn());
    	} catch (e) {
    		return this.Promise.reject(e);
    	}
    };

    var lib$1 = AsyncLock;

    var asyncLock = lib$1;

    var inherits_browser = createCommonjsModule(function (module) {
    if (typeof Object.create === 'function') {
      // implementation from standard node.js 'util' module
      module.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
              value: ctor,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
        }
      };
    } else {
      // old school shim for old browsers
      module.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function () {};
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
      };
    }
    });

    var safeBuffer = createCommonjsModule(function (module, exports) {
    /* eslint-disable node/no-deprecated-api */

    var Buffer = buffer__default["default"].Buffer;

    // alternative to using Object.keys for old browsers
    function copyProps (src, dst) {
      for (var key in src) {
        dst[key] = src[key];
      }
    }
    if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
      module.exports = buffer__default["default"];
    } else {
      // Copy properties from require('buffer')
      copyProps(buffer__default["default"], exports);
      exports.Buffer = SafeBuffer;
    }

    function SafeBuffer (arg, encodingOrOffset, length) {
      return Buffer(arg, encodingOrOffset, length)
    }

    // Copy static methods from Buffer
    copyProps(Buffer, SafeBuffer);

    SafeBuffer.from = function (arg, encodingOrOffset, length) {
      if (typeof arg === 'number') {
        throw new TypeError('Argument must not be a number')
      }
      return Buffer(arg, encodingOrOffset, length)
    };

    SafeBuffer.alloc = function (size, fill, encoding) {
      if (typeof size !== 'number') {
        throw new TypeError('Argument must be a number')
      }
      var buf = Buffer(size);
      if (fill !== undefined) {
        if (typeof encoding === 'string') {
          buf.fill(fill, encoding);
        } else {
          buf.fill(fill);
        }
      } else {
        buf.fill(0);
      }
      return buf
    };

    SafeBuffer.allocUnsafe = function (size) {
      if (typeof size !== 'number') {
        throw new TypeError('Argument must be a number')
      }
      return Buffer(size)
    };

    SafeBuffer.allocUnsafeSlow = function (size) {
      if (typeof size !== 'number') {
        throw new TypeError('Argument must be a number')
      }
      return buffer__default["default"].SlowBuffer(size)
    };
    });
    safeBuffer.Buffer;

    var Buffer$2 = safeBuffer.Buffer;

    // prototype class for hash functions
    function Hash (blockSize, finalSize) {
      this._block = Buffer$2.alloc(blockSize);
      this._finalSize = finalSize;
      this._blockSize = blockSize;
      this._len = 0;
    }

    Hash.prototype.update = function (data, enc) {
      if (typeof data === 'string') {
        enc = enc || 'utf8';
        data = Buffer$2.from(data, enc);
      }

      var block = this._block;
      var blockSize = this._blockSize;
      var length = data.length;
      var accum = this._len;

      for (var offset = 0; offset < length;) {
        var assigned = accum % blockSize;
        var remainder = Math.min(length - offset, blockSize - assigned);

        for (var i = 0; i < remainder; i++) {
          block[assigned + i] = data[offset + i];
        }

        accum += remainder;
        offset += remainder;

        if ((accum % blockSize) === 0) {
          this._update(block);
        }
      }

      this._len += length;
      return this
    };

    Hash.prototype.digest = function (enc) {
      var rem = this._len % this._blockSize;

      this._block[rem] = 0x80;

      // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
      // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
      this._block.fill(0, rem + 1);

      if (rem >= this._finalSize) {
        this._update(this._block);
        this._block.fill(0);
      }

      var bits = this._len * 8;

      // uint32
      if (bits <= 0xffffffff) {
        this._block.writeUInt32BE(bits, this._blockSize - 4);

      // uint64
      } else {
        var lowBits = (bits & 0xffffffff) >>> 0;
        var highBits = (bits - lowBits) / 0x100000000;

        this._block.writeUInt32BE(highBits, this._blockSize - 8);
        this._block.writeUInt32BE(lowBits, this._blockSize - 4);
      }

      this._update(this._block);
      var hash = this._hash();

      return enc ? hash.toString(enc) : hash
    };

    Hash.prototype._update = function () {
      throw new Error('_update must be implemented by subclass')
    };

    var hash = Hash;

    /*
     * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
     * in FIPS PUB 180-1
     * Version 2.1a Copyright Paul Johnston 2000 - 2002.
     * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
     * Distributed under the BSD License
     * See http://pajhome.org.uk/crypt/md5 for details.
     */



    var Buffer$1 = safeBuffer.Buffer;

    var K = [
      0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
    ];

    var W = new Array(80);

    function Sha1 () {
      this.init();
      this._w = W;

      hash.call(this, 64, 56);
    }

    inherits_browser(Sha1, hash);

    Sha1.prototype.init = function () {
      this._a = 0x67452301;
      this._b = 0xefcdab89;
      this._c = 0x98badcfe;
      this._d = 0x10325476;
      this._e = 0xc3d2e1f0;

      return this
    };

    function rotl1 (num) {
      return (num << 1) | (num >>> 31)
    }

    function rotl5 (num) {
      return (num << 5) | (num >>> 27)
    }

    function rotl30 (num) {
      return (num << 30) | (num >>> 2)
    }

    function ft (s, b, c, d) {
      if (s === 0) return (b & c) | ((~b) & d)
      if (s === 2) return (b & c) | (b & d) | (c & d)
      return b ^ c ^ d
    }

    Sha1.prototype._update = function (M) {
      var W = this._w;

      var a = this._a | 0;
      var b = this._b | 0;
      var c = this._c | 0;
      var d = this._d | 0;
      var e = this._e | 0;

      for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4);
      for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]);

      for (var j = 0; j < 80; ++j) {
        var s = ~~(j / 20);
        var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0;

        e = d;
        d = c;
        c = rotl30(b);
        b = a;
        a = t;
      }

      this._a = (a + this._a) | 0;
      this._b = (b + this._b) | 0;
      this._c = (c + this._c) | 0;
      this._d = (d + this._d) | 0;
      this._e = (e + this._e) | 0;
    };

    Sha1.prototype._hash = function () {
      var H = Buffer$1.allocUnsafe(20);

      H.writeInt32BE(this._a | 0, 0);
      H.writeInt32BE(this._b | 0, 4);
      H.writeInt32BE(this._c | 0, 8);
      H.writeInt32BE(this._d | 0, 12);
      H.writeInt32BE(this._e | 0, 16);

      return H
    };

    var sha1 = Sha1;

    var crc32$1 = createCommonjsModule(function (module, exports) {
    (function (factory) {
    	/*jshint ignore:start */
    	/*eslint-disable */
    	if(typeof DO_NOT_EXPORT_CRC === 'undefined') {
    		{
    			factory(exports);
    		}
    	} else {
    		factory({});
    	}
    	/*eslint-enable */
    	/*jshint ignore:end */
    }(function(CRC32) {
    CRC32.version = '1.2.2';
    /*global Int32Array */
    function signed_crc_table() {
    	var c = 0, table = new Array(256);

    	for(var n =0; n != 256; ++n){
    		c = n;
    		c = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));
    		c = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));
    		c = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));
    		c = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));
    		c = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));
    		c = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));
    		c = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));
    		c = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));
    		table[n] = c;
    	}

    	return typeof Int32Array !== 'undefined' ? new Int32Array(table) : table;
    }

    var T0 = signed_crc_table();
    function slice_by_16_tables(T) {
    	var c = 0, v = 0, n = 0, table = typeof Int32Array !== 'undefined' ? new Int32Array(4096) : new Array(4096) ;

    	for(n = 0; n != 256; ++n) table[n] = T[n];
    	for(n = 0; n != 256; ++n) {
    		v = T[n];
    		for(c = 256 + n; c < 4096; c += 256) v = table[c] = (v >>> 8) ^ T[v & 0xFF];
    	}
    	var out = [];
    	for(n = 1; n != 16; ++n) out[n - 1] = typeof Int32Array !== 'undefined' ? table.subarray(n * 256, n * 256 + 256) : table.slice(n * 256, n * 256 + 256);
    	return out;
    }
    var TT = slice_by_16_tables(T0);
    var T1 = TT[0],  T2 = TT[1],  T3 = TT[2],  T4 = TT[3],  T5 = TT[4];
    var T6 = TT[5],  T7 = TT[6],  T8 = TT[7],  T9 = TT[8],  Ta = TT[9];
    var Tb = TT[10], Tc = TT[11], Td = TT[12], Te = TT[13], Tf = TT[14];
    function crc32_bstr(bstr, seed) {
    	var C = seed ^ -1;
    	for(var i = 0, L = bstr.length; i < L;) C = (C>>>8) ^ T0[(C^bstr.charCodeAt(i++))&0xFF];
    	return ~C;
    }

    function crc32_buf(B, seed) {
    	var C = seed ^ -1, L = B.length - 15, i = 0;
    	for(; i < L;) C =
    		Tf[B[i++] ^ (C & 255)] ^
    		Te[B[i++] ^ ((C >> 8) & 255)] ^
    		Td[B[i++] ^ ((C >> 16) & 255)] ^
    		Tc[B[i++] ^ (C >>> 24)] ^
    		Tb[B[i++]] ^ Ta[B[i++]] ^ T9[B[i++]] ^ T8[B[i++]] ^
    		T7[B[i++]] ^ T6[B[i++]] ^ T5[B[i++]] ^ T4[B[i++]] ^
    		T3[B[i++]] ^ T2[B[i++]] ^ T1[B[i++]] ^ T0[B[i++]];
    	L += 15;
    	while(i < L) C = (C>>>8) ^ T0[(C^B[i++])&0xFF];
    	return ~C;
    }

    function crc32_str(str, seed) {
    	var C = seed ^ -1;
    	for(var i = 0, L = str.length, c = 0, d = 0; i < L;) {
    		c = str.charCodeAt(i++);
    		if(c < 0x80) {
    			C = (C>>>8) ^ T0[(C^c)&0xFF];
    		} else if(c < 0x800) {
    			C = (C>>>8) ^ T0[(C ^ (192|((c>>6)&31)))&0xFF];
    			C = (C>>>8) ^ T0[(C ^ (128|(c&63)))&0xFF];
    		} else if(c >= 0xD800 && c < 0xE000) {
    			c = (c&1023)+64; d = str.charCodeAt(i++)&1023;
    			C = (C>>>8) ^ T0[(C ^ (240|((c>>8)&7)))&0xFF];
    			C = (C>>>8) ^ T0[(C ^ (128|((c>>2)&63)))&0xFF];
    			C = (C>>>8) ^ T0[(C ^ (128|((d>>6)&15)|((c&3)<<4)))&0xFF];
    			C = (C>>>8) ^ T0[(C ^ (128|(d&63)))&0xFF];
    		} else {
    			C = (C>>>8) ^ T0[(C ^ (224|((c>>12)&15)))&0xFF];
    			C = (C>>>8) ^ T0[(C ^ (128|((c>>6)&63)))&0xFF];
    			C = (C>>>8) ^ T0[(C ^ (128|(c&63)))&0xFF];
    		}
    	}
    	return ~C;
    }
    CRC32.table = T0;
    // $FlowIgnore
    CRC32.bstr = crc32_bstr;
    // $FlowIgnore
    CRC32.buf = crc32_buf;
    // $FlowIgnore
    CRC32.str = crc32_str;
    }));
    });

    var common$1 = createCommonjsModule(function (module, exports) {


    var TYPED_OK =  (typeof Uint8Array !== 'undefined') &&
                    (typeof Uint16Array !== 'undefined') &&
                    (typeof Int32Array !== 'undefined');

    function _has(obj, key) {
      return Object.prototype.hasOwnProperty.call(obj, key);
    }

    exports.assign = function (obj /*from1, from2, from3, ...*/) {
      var sources = Array.prototype.slice.call(arguments, 1);
      while (sources.length) {
        var source = sources.shift();
        if (!source) { continue; }

        if (typeof source !== 'object') {
          throw new TypeError(source + 'must be non-object');
        }

        for (var p in source) {
          if (_has(source, p)) {
            obj[p] = source[p];
          }
        }
      }

      return obj;
    };


    // reduce buffer size, avoiding mem copy
    exports.shrinkBuf = function (buf, size) {
      if (buf.length === size) { return buf; }
      if (buf.subarray) { return buf.subarray(0, size); }
      buf.length = size;
      return buf;
    };


    var fnTyped = {
      arraySet: function (dest, src, src_offs, len, dest_offs) {
        if (src.subarray && dest.subarray) {
          dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
          return;
        }
        // Fallback to ordinary array
        for (var i = 0; i < len; i++) {
          dest[dest_offs + i] = src[src_offs + i];
        }
      },
      // Join array of chunks to single array.
      flattenChunks: function (chunks) {
        var i, l, len, pos, chunk, result;

        // calculate data length
        len = 0;
        for (i = 0, l = chunks.length; i < l; i++) {
          len += chunks[i].length;
        }

        // join chunks
        result = new Uint8Array(len);
        pos = 0;
        for (i = 0, l = chunks.length; i < l; i++) {
          chunk = chunks[i];
          result.set(chunk, pos);
          pos += chunk.length;
        }

        return result;
      }
    };

    var fnUntyped = {
      arraySet: function (dest, src, src_offs, len, dest_offs) {
        for (var i = 0; i < len; i++) {
          dest[dest_offs + i] = src[src_offs + i];
        }
      },
      // Join array of chunks to single array.
      flattenChunks: function (chunks) {
        return [].concat.apply([], chunks);
      }
    };


    // Enable/Disable typed arrays use, for testing
    //
    exports.setTyped = function (on) {
      if (on) {
        exports.Buf8  = Uint8Array;
        exports.Buf16 = Uint16Array;
        exports.Buf32 = Int32Array;
        exports.assign(exports, fnTyped);
      } else {
        exports.Buf8  = Array;
        exports.Buf16 = Array;
        exports.Buf32 = Array;
        exports.assign(exports, fnUntyped);
      }
    };

    exports.setTyped(TYPED_OK);
    });
    common$1.assign;
    common$1.shrinkBuf;
    common$1.setTyped;
    common$1.Buf8;
    common$1.Buf16;
    common$1.Buf32;

    // (C) 1995-2013 Jean-loup Gailly and Mark Adler
    // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
    //
    // This software is provided 'as-is', without any express or implied
    // warranty. In no event will the authors be held liable for any damages
    // arising from the use of this software.
    //
    // Permission is granted to anyone to use this software for any purpose,
    // including commercial applications, and to alter it and redistribute it
    // freely, subject to the following restrictions:
    //
    // 1. The origin of this software must not be misrepresented; you must not
    //   claim that you wrote the original software. If you use this software
    //   in a product, an acknowledgment in the product documentation would be
    //   appreciated but is not required.
    // 2. Altered source versions must be plainly marked as such, and must not be
    //   misrepresented as being the original software.
    // 3. This notice may not be removed or altered from any source distribution.

    /* eslint-disable space-unary-ops */



    /* Public constants ==========================================================*/
    /* ===========================================================================*/


    //var Z_FILTERED          = 1;
    //var Z_HUFFMAN_ONLY      = 2;
    //var Z_RLE               = 3;
    var Z_FIXED$1               = 4;
    //var Z_DEFAULT_STRATEGY  = 0;

    /* Possible values of the data_type field (though see inflate()) */
    var Z_BINARY              = 0;
    var Z_TEXT                = 1;
    //var Z_ASCII             = 1; // = Z_TEXT
    var Z_UNKNOWN$1             = 2;

    /*============================================================================*/


    function zero$1(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }

    // From zutil.h

    var STORED_BLOCK = 0;
    var STATIC_TREES = 1;
    var DYN_TREES    = 2;
    /* The three kinds of block type */

    var MIN_MATCH$1    = 3;
    var MAX_MATCH$1    = 258;
    /* The minimum and maximum match lengths */

    // From deflate.h
    /* ===========================================================================
     * Internal compression state.
     */

    var LENGTH_CODES$1  = 29;
    /* number of length codes, not counting the special END_BLOCK code */

    var LITERALS$1      = 256;
    /* number of literal bytes 0..255 */

    var L_CODES$1       = LITERALS$1 + 1 + LENGTH_CODES$1;
    /* number of Literal or Length codes, including the END_BLOCK code */

    var D_CODES$1       = 30;
    /* number of distance codes */

    var BL_CODES$1      = 19;
    /* number of codes used to transfer the bit lengths */

    var HEAP_SIZE$1     = 2 * L_CODES$1 + 1;
    /* maximum heap size */

    var MAX_BITS$1      = 15;
    /* All codes must not exceed MAX_BITS bits */

    var Buf_size      = 16;
    /* size of bit buffer in bi_buf */


    /* ===========================================================================
     * Constants
     */

    var MAX_BL_BITS = 7;
    /* Bit length codes must not exceed MAX_BL_BITS bits */

    var END_BLOCK   = 256;
    /* end of block literal code */

    var REP_3_6     = 16;
    /* repeat previous bit length 3-6 times (2 bits of repeat count) */

    var REPZ_3_10   = 17;
    /* repeat a zero length 3-10 times  (3 bits of repeat count) */

    var REPZ_11_138 = 18;
    /* repeat a zero length 11-138 times  (7 bits of repeat count) */

    /* eslint-disable comma-spacing,array-bracket-spacing */
    var extra_lbits =   /* extra bits for each length code */
      [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];

    var extra_dbits =   /* extra bits for each distance code */
      [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];

    var extra_blbits =  /* extra bits for each bit length code */
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];

    var bl_order =
      [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
    /* eslint-enable comma-spacing,array-bracket-spacing */

    /* The lengths of the bit length codes are sent in order of decreasing
     * probability, to avoid transmitting the lengths for unused bit length codes.
     */

    /* ===========================================================================
     * Local data. These are initialized only once.
     */

    // We pre-fill arrays with 0 to avoid uninitialized gaps

    var DIST_CODE_LEN = 512; /* see definition of array dist_code below */

    // !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1
    var static_ltree  = new Array((L_CODES$1 + 2) * 2);
    zero$1(static_ltree);
    /* The static literal tree. Since the bit lengths are imposed, there is no
     * need for the L_CODES extra codes used during heap construction. However
     * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
     * below).
     */

    var static_dtree  = new Array(D_CODES$1 * 2);
    zero$1(static_dtree);
    /* The static distance tree. (Actually a trivial tree since all codes use
     * 5 bits.)
     */

    var _dist_code    = new Array(DIST_CODE_LEN);
    zero$1(_dist_code);
    /* Distance codes. The first 256 values correspond to the distances
     * 3 .. 258, the last 256 values correspond to the top 8 bits of
     * the 15 bit distances.
     */

    var _length_code  = new Array(MAX_MATCH$1 - MIN_MATCH$1 + 1);
    zero$1(_length_code);
    /* length code for each normalized match length (0 == MIN_MATCH) */

    var base_length   = new Array(LENGTH_CODES$1);
    zero$1(base_length);
    /* First normalized length for each code (0 = MIN_MATCH) */

    var base_dist     = new Array(D_CODES$1);
    zero$1(base_dist);
    /* First normalized distance for each code (0 = distance of 1) */


    function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {

      this.static_tree  = static_tree;  /* static tree or NULL */
      this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */
      this.extra_base   = extra_base;   /* base index for extra_bits */
      this.elems        = elems;        /* max number of elements in the tree */
      this.max_length   = max_length;   /* max bit length for the codes */

      // show if `static_tree` has data or dummy - needed for monomorphic objects
      this.has_stree    = static_tree && static_tree.length;
    }


    var static_l_desc;
    var static_d_desc;
    var static_bl_desc;


    function TreeDesc(dyn_tree, stat_desc) {
      this.dyn_tree = dyn_tree;     /* the dynamic tree */
      this.max_code = 0;            /* largest code with non zero frequency */
      this.stat_desc = stat_desc;   /* the corresponding static tree */
    }



    function d_code(dist) {
      return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
    }


    /* ===========================================================================
     * Output a short LSB first on the stream.
     * IN assertion: there is enough room in pendingBuf.
     */
    function put_short(s, w) {
    //    put_byte(s, (uch)((w) & 0xff));
    //    put_byte(s, (uch)((ush)(w) >> 8));
      s.pending_buf[s.pending++] = (w) & 0xff;
      s.pending_buf[s.pending++] = (w >>> 8) & 0xff;
    }


    /* ===========================================================================
     * Send a value on a given number of bits.
     * IN assertion: length <= 16 and value fits in length bits.
     */
    function send_bits(s, value, length) {
      if (s.bi_valid > (Buf_size - length)) {
        s.bi_buf |= (value << s.bi_valid) & 0xffff;
        put_short(s, s.bi_buf);
        s.bi_buf = value >> (Buf_size - s.bi_valid);
        s.bi_valid += length - Buf_size;
      } else {
        s.bi_buf |= (value << s.bi_valid) & 0xffff;
        s.bi_valid += length;
      }
    }


    function send_code(s, c, tree) {
      send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);
    }


    /* ===========================================================================
     * Reverse the first len bits of a code, using straightforward code (a faster
     * method would use a table)
     * IN assertion: 1 <= len <= 15
     */
    function bi_reverse(code, len) {
      var res = 0;
      do {
        res |= code & 1;
        code >>>= 1;
        res <<= 1;
      } while (--len > 0);
      return res >>> 1;
    }


    /* ===========================================================================
     * Flush the bit buffer, keeping at most 7 bits in it.
     */
    function bi_flush(s) {
      if (s.bi_valid === 16) {
        put_short(s, s.bi_buf);
        s.bi_buf = 0;
        s.bi_valid = 0;

      } else if (s.bi_valid >= 8) {
        s.pending_buf[s.pending++] = s.bi_buf & 0xff;
        s.bi_buf >>= 8;
        s.bi_valid -= 8;
      }
    }


    /* ===========================================================================
     * Compute the optimal bit lengths for a tree and update the total bit length
     * for the current block.
     * IN assertion: the fields freq and dad are set, heap[heap_max] and
     *    above are the tree nodes sorted by increasing frequency.
     * OUT assertions: the field len is set to the optimal bit length, the
     *     array bl_count contains the frequencies for each bit length.
     *     The length opt_len is updated; static_len is also updated if stree is
     *     not null.
     */
    function gen_bitlen(s, desc)
    //    deflate_state *s;
    //    tree_desc *desc;    /* the tree descriptor */
    {
      var tree            = desc.dyn_tree;
      var max_code        = desc.max_code;
      var stree           = desc.stat_desc.static_tree;
      var has_stree       = desc.stat_desc.has_stree;
      var extra           = desc.stat_desc.extra_bits;
      var base            = desc.stat_desc.extra_base;
      var max_length      = desc.stat_desc.max_length;
      var h;              /* heap index */
      var n, m;           /* iterate over the tree elements */
      var bits;           /* bit length */
      var xbits;          /* extra bits */
      var f;              /* frequency */
      var overflow = 0;   /* number of elements with bit length too large */

      for (bits = 0; bits <= MAX_BITS$1; bits++) {
        s.bl_count[bits] = 0;
      }

      /* In a first pass, compute the optimal bit lengths (which may
       * overflow in the case of the bit length tree).
       */
      tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */

      for (h = s.heap_max + 1; h < HEAP_SIZE$1; h++) {
        n = s.heap[h];
        bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;
        if (bits > max_length) {
          bits = max_length;
          overflow++;
        }
        tree[n * 2 + 1]/*.Len*/ = bits;
        /* We overwrite tree[n].Dad which is no longer needed */

        if (n > max_code) { continue; } /* not a leaf node */

        s.bl_count[bits]++;
        xbits = 0;
        if (n >= base) {
          xbits = extra[n - base];
        }
        f = tree[n * 2]/*.Freq*/;
        s.opt_len += f * (bits + xbits);
        if (has_stree) {
          s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);
        }
      }
      if (overflow === 0) { return; }

      // Trace((stderr,"\nbit length overflow\n"));
      /* This happens for example on obj2 and pic of the Calgary corpus */

      /* Find the first bit length which could increase: */
      do {
        bits = max_length - 1;
        while (s.bl_count[bits] === 0) { bits--; }
        s.bl_count[bits]--;      /* move one leaf down the tree */
        s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */
        s.bl_count[max_length]--;
        /* The brother of the overflow item also moves one step up,
         * but this does not affect bl_count[max_length]
         */
        overflow -= 2;
      } while (overflow > 0);

      /* Now recompute all bit lengths, scanning in increasing frequency.
       * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
       * lengths instead of fixing only the wrong ones. This idea is taken
       * from 'ar' written by Haruhiko Okumura.)
       */
      for (bits = max_length; bits !== 0; bits--) {
        n = s.bl_count[bits];
        while (n !== 0) {
          m = s.heap[--h];
          if (m > max_code) { continue; }
          if (tree[m * 2 + 1]/*.Len*/ !== bits) {
            // Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
            s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;
            tree[m * 2 + 1]/*.Len*/ = bits;
          }
          n--;
        }
      }
    }


    /* ===========================================================================
     * Generate the codes for a given tree and bit counts (which need not be
     * optimal).
     * IN assertion: the array bl_count contains the bit length statistics for
     * the given tree and the field len is set for all tree elements.
     * OUT assertion: the field code is set for all tree elements of non
     *     zero code length.
     */
    function gen_codes(tree, max_code, bl_count)
    //    ct_data *tree;             /* the tree to decorate */
    //    int max_code;              /* largest code with non zero frequency */
    //    ushf *bl_count;            /* number of codes at each bit length */
    {
      var next_code = new Array(MAX_BITS$1 + 1); /* next code value for each bit length */
      var code = 0;              /* running code value */
      var bits;                  /* bit index */
      var n;                     /* code index */

      /* The distribution counts are first used to generate the code values
       * without bit reversal.
       */
      for (bits = 1; bits <= MAX_BITS$1; bits++) {
        next_code[bits] = code = (code + bl_count[bits - 1]) << 1;
      }
      /* Check that the bit counts in bl_count are consistent. The last code
       * must be all ones.
       */
      //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
      //        "inconsistent bit counts");
      //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));

      for (n = 0;  n <= max_code; n++) {
        var len = tree[n * 2 + 1]/*.Len*/;
        if (len === 0) { continue; }
        /* Now reverse the bits */
        tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);

        //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
        //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
      }
    }


    /* ===========================================================================
     * Initialize the various 'constant' tables.
     */
    function tr_static_init() {
      var n;        /* iterates over tree elements */
      var bits;     /* bit counter */
      var length;   /* length value */
      var code;     /* code value */
      var dist;     /* distance index */
      var bl_count = new Array(MAX_BITS$1 + 1);
      /* number of codes at each bit length for an optimal tree */

      // do check in _tr_init()
      //if (static_init_done) return;

      /* For some embedded targets, global variables are not initialized: */
    /*#ifdef NO_INIT_GLOBAL_POINTERS
      static_l_desc.static_tree = static_ltree;
      static_l_desc.extra_bits = extra_lbits;
      static_d_desc.static_tree = static_dtree;
      static_d_desc.extra_bits = extra_dbits;
      static_bl_desc.extra_bits = extra_blbits;
    #endif*/

      /* Initialize the mapping length (0..255) -> length code (0..28) */
      length = 0;
      for (code = 0; code < LENGTH_CODES$1 - 1; code++) {
        base_length[code] = length;
        for (n = 0; n < (1 << extra_lbits[code]); n++) {
          _length_code[length++] = code;
        }
      }
      //Assert (length == 256, "tr_static_init: length != 256");
      /* Note that the length 255 (match length 258) can be represented
       * in two different ways: code 284 + 5 bits or code 285, so we
       * overwrite length_code[255] to use the best encoding:
       */
      _length_code[length - 1] = code;

      /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
      dist = 0;
      for (code = 0; code < 16; code++) {
        base_dist[code] = dist;
        for (n = 0; n < (1 << extra_dbits[code]); n++) {
          _dist_code[dist++] = code;
        }
      }
      //Assert (dist == 256, "tr_static_init: dist != 256");
      dist >>= 7; /* from now on, all distances are divided by 128 */
      for (; code < D_CODES$1; code++) {
        base_dist[code] = dist << 7;
        for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {
          _dist_code[256 + dist++] = code;
        }
      }
      //Assert (dist == 256, "tr_static_init: 256+dist != 512");

      /* Construct the codes of the static literal tree */
      for (bits = 0; bits <= MAX_BITS$1; bits++) {
        bl_count[bits] = 0;
      }

      n = 0;
      while (n <= 143) {
        static_ltree[n * 2 + 1]/*.Len*/ = 8;
        n++;
        bl_count[8]++;
      }
      while (n <= 255) {
        static_ltree[n * 2 + 1]/*.Len*/ = 9;
        n++;
        bl_count[9]++;
      }
      while (n <= 279) {
        static_ltree[n * 2 + 1]/*.Len*/ = 7;
        n++;
        bl_count[7]++;
      }
      while (n <= 287) {
        static_ltree[n * 2 + 1]/*.Len*/ = 8;
        n++;
        bl_count[8]++;
      }
      /* Codes 286 and 287 do not exist, but we must include them in the
       * tree construction to get a canonical Huffman tree (longest code
       * all ones)
       */
      gen_codes(static_ltree, L_CODES$1 + 1, bl_count);

      /* The static distance tree is trivial: */
      for (n = 0; n < D_CODES$1; n++) {
        static_dtree[n * 2 + 1]/*.Len*/ = 5;
        static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);
      }

      // Now data ready and we can init static trees
      static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS$1 + 1, L_CODES$1, MAX_BITS$1);
      static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES$1, MAX_BITS$1);
      static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES$1, MAX_BL_BITS);

      //static_init_done = true;
    }


    /* ===========================================================================
     * Initialize a new block.
     */
    function init_block(s) {
      var n; /* iterates over tree elements */

      /* Initialize the trees. */
      for (n = 0; n < L_CODES$1;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }
      for (n = 0; n < D_CODES$1;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }
      for (n = 0; n < BL_CODES$1; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }

      s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;
      s.opt_len = s.static_len = 0;
      s.last_lit = s.matches = 0;
    }


    /* ===========================================================================
     * Flush the bit buffer and align the output on a byte boundary
     */
    function bi_windup(s)
    {
      if (s.bi_valid > 8) {
        put_short(s, s.bi_buf);
      } else if (s.bi_valid > 0) {
        //put_byte(s, (Byte)s->bi_buf);
        s.pending_buf[s.pending++] = s.bi_buf;
      }
      s.bi_buf = 0;
      s.bi_valid = 0;
    }

    /* ===========================================================================
     * Copy a stored block, storing first the length and its
     * one's complement if requested.
     */
    function copy_block(s, buf, len, header)
    //DeflateState *s;
    //charf    *buf;    /* the input data */
    //unsigned len;     /* its length */
    //int      header;  /* true if block header must be written */
    {
      bi_windup(s);        /* align on byte boundary */

      if (header) {
        put_short(s, len);
        put_short(s, ~len);
      }
    //  while (len--) {
    //    put_byte(s, *buf++);
    //  }
      common$1.arraySet(s.pending_buf, s.window, buf, len, s.pending);
      s.pending += len;
    }

    /* ===========================================================================
     * Compares to subtrees, using the tree depth as tie breaker when
     * the subtrees have equal frequency. This minimizes the worst case length.
     */
    function smaller(tree, n, m, depth) {
      var _n2 = n * 2;
      var _m2 = m * 2;
      return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||
             (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));
    }

    /* ===========================================================================
     * Restore the heap property by moving down the tree starting at node k,
     * exchanging a node with the smallest of its two sons if necessary, stopping
     * when the heap property is re-established (each father smaller than its
     * two sons).
     */
    function pqdownheap(s, tree, k)
    //    deflate_state *s;
    //    ct_data *tree;  /* the tree to restore */
    //    int k;               /* node to move down */
    {
      var v = s.heap[k];
      var j = k << 1;  /* left son of k */
      while (j <= s.heap_len) {
        /* Set j to the smallest of the two sons: */
        if (j < s.heap_len &&
          smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
          j++;
        }
        /* Exit if v is smaller than both sons */
        if (smaller(tree, v, s.heap[j], s.depth)) { break; }

        /* Exchange v with the smallest son */
        s.heap[k] = s.heap[j];
        k = j;

        /* And continue down the tree, setting j to the left son of k */
        j <<= 1;
      }
      s.heap[k] = v;
    }


    // inlined manually
    // var SMALLEST = 1;

    /* ===========================================================================
     * Send the block data compressed using the given Huffman trees
     */
    function compress_block(s, ltree, dtree)
    //    deflate_state *s;
    //    const ct_data *ltree; /* literal tree */
    //    const ct_data *dtree; /* distance tree */
    {
      var dist;           /* distance of matched string */
      var lc;             /* match length or unmatched char (if dist == 0) */
      var lx = 0;         /* running index in l_buf */
      var code;           /* the code to send */
      var extra;          /* number of extra bits to send */

      if (s.last_lit !== 0) {
        do {
          dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);
          lc = s.pending_buf[s.l_buf + lx];
          lx++;

          if (dist === 0) {
            send_code(s, lc, ltree); /* send a literal byte */
            //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
          } else {
            /* Here, lc is the match length - MIN_MATCH */
            code = _length_code[lc];
            send_code(s, code + LITERALS$1 + 1, ltree); /* send the length code */
            extra = extra_lbits[code];
            if (extra !== 0) {
              lc -= base_length[code];
              send_bits(s, lc, extra);       /* send the extra length bits */
            }
            dist--; /* dist is now the match distance - 1 */
            code = d_code(dist);
            //Assert (code < D_CODES, "bad d_code");

            send_code(s, code, dtree);       /* send the distance code */
            extra = extra_dbits[code];
            if (extra !== 0) {
              dist -= base_dist[code];
              send_bits(s, dist, extra);   /* send the extra distance bits */
            }
          } /* literal or match pair ? */

          /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
          //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
          //       "pendingBuf overflow");

        } while (lx < s.last_lit);
      }

      send_code(s, END_BLOCK, ltree);
    }


    /* ===========================================================================
     * Construct one Huffman tree and assigns the code bit strings and lengths.
     * Update the total bit length for the current block.
     * IN assertion: the field freq is set for all tree elements.
     * OUT assertions: the fields len and code are set to the optimal bit length
     *     and corresponding code. The length opt_len is updated; static_len is
     *     also updated if stree is not null. The field max_code is set.
     */
    function build_tree(s, desc)
    //    deflate_state *s;
    //    tree_desc *desc; /* the tree descriptor */
    {
      var tree     = desc.dyn_tree;
      var stree    = desc.stat_desc.static_tree;
      var has_stree = desc.stat_desc.has_stree;
      var elems    = desc.stat_desc.elems;
      var n, m;          /* iterate over heap elements */
      var max_code = -1; /* largest code with non zero frequency */
      var node;          /* new node being created */

      /* Construct the initial heap, with least frequent element in
       * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
       * heap[0] is not used.
       */
      s.heap_len = 0;
      s.heap_max = HEAP_SIZE$1;

      for (n = 0; n < elems; n++) {
        if (tree[n * 2]/*.Freq*/ !== 0) {
          s.heap[++s.heap_len] = max_code = n;
          s.depth[n] = 0;

        } else {
          tree[n * 2 + 1]/*.Len*/ = 0;
        }
      }

      /* The pkzip format requires that at least one distance code exists,
       * and that at least one bit should be sent even if there is only one
       * possible code. So to avoid special checks later on we force at least
       * two codes of non zero frequency.
       */
      while (s.heap_len < 2) {
        node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);
        tree[node * 2]/*.Freq*/ = 1;
        s.depth[node] = 0;
        s.opt_len--;

        if (has_stree) {
          s.static_len -= stree[node * 2 + 1]/*.Len*/;
        }
        /* node is 0 or 1 so it does not have extra bits */
      }
      desc.max_code = max_code;

      /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
       * establish sub-heaps of increasing lengths:
       */
      for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }

      /* Construct the Huffman tree by repeatedly combining the least two
       * frequent nodes.
       */
      node = elems;              /* next internal node of the tree */
      do {
        //pqremove(s, tree, n);  /* n = node of least frequency */
        /*** pqremove ***/
        n = s.heap[1/*SMALLEST*/];
        s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];
        pqdownheap(s, tree, 1/*SMALLEST*/);
        /***/

        m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */

        s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */
        s.heap[--s.heap_max] = m;

        /* Create a new node father of n and m */
        tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;
        s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
        tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;

        /* and insert the new node in the heap */
        s.heap[1/*SMALLEST*/] = node++;
        pqdownheap(s, tree, 1/*SMALLEST*/);

      } while (s.heap_len >= 2);

      s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];

      /* At this point, the fields freq and dad are set. We can now
       * generate the bit lengths.
       */
      gen_bitlen(s, desc);

      /* The field len is now set, we can generate the bit codes */
      gen_codes(tree, max_code, s.bl_count);
    }


    /* ===========================================================================
     * Scan a literal or distance tree to determine the frequencies of the codes
     * in the bit length tree.
     */
    function scan_tree(s, tree, max_code)
    //    deflate_state *s;
    //    ct_data *tree;   /* the tree to be scanned */
    //    int max_code;    /* and its largest code of non zero frequency */
    {
      var n;                     /* iterates over all tree elements */
      var prevlen = -1;          /* last emitted length */
      var curlen;                /* length of current code */

      var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

      var count = 0;             /* repeat count of the current code */
      var max_count = 7;         /* max repeat count */
      var min_count = 4;         /* min repeat count */

      if (nextlen === 0) {
        max_count = 138;
        min_count = 3;
      }
      tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */

      for (n = 0; n <= max_code; n++) {
        curlen = nextlen;
        nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

        if (++count < max_count && curlen === nextlen) {
          continue;

        } else if (count < min_count) {
          s.bl_tree[curlen * 2]/*.Freq*/ += count;

        } else if (curlen !== 0) {

          if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }
          s.bl_tree[REP_3_6 * 2]/*.Freq*/++;

        } else if (count <= 10) {
          s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;

        } else {
          s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;
        }

        count = 0;
        prevlen = curlen;

        if (nextlen === 0) {
          max_count = 138;
          min_count = 3;

        } else if (curlen === nextlen) {
          max_count = 6;
          min_count = 3;

        } else {
          max_count = 7;
          min_count = 4;
        }
      }
    }


    /* ===========================================================================
     * Send a literal or distance tree in compressed form, using the codes in
     * bl_tree.
     */
    function send_tree(s, tree, max_code)
    //    deflate_state *s;
    //    ct_data *tree; /* the tree to be scanned */
    //    int max_code;       /* and its largest code of non zero frequency */
    {
      var n;                     /* iterates over all tree elements */
      var prevlen = -1;          /* last emitted length */
      var curlen;                /* length of current code */

      var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

      var count = 0;             /* repeat count of the current code */
      var max_count = 7;         /* max repeat count */
      var min_count = 4;         /* min repeat count */

      /* tree[max_code+1].Len = -1; */  /* guard already set */
      if (nextlen === 0) {
        max_count = 138;
        min_count = 3;
      }

      for (n = 0; n <= max_code; n++) {
        curlen = nextlen;
        nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

        if (++count < max_count && curlen === nextlen) {
          continue;

        } else if (count < min_count) {
          do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);

        } else if (curlen !== 0) {
          if (curlen !== prevlen) {
            send_code(s, curlen, s.bl_tree);
            count--;
          }
          //Assert(count >= 3 && count <= 6, " 3_6?");
          send_code(s, REP_3_6, s.bl_tree);
          send_bits(s, count - 3, 2);

        } else if (count <= 10) {
          send_code(s, REPZ_3_10, s.bl_tree);
          send_bits(s, count - 3, 3);

        } else {
          send_code(s, REPZ_11_138, s.bl_tree);
          send_bits(s, count - 11, 7);
        }

        count = 0;
        prevlen = curlen;
        if (nextlen === 0) {
          max_count = 138;
          min_count = 3;

        } else if (curlen === nextlen) {
          max_count = 6;
          min_count = 3;

        } else {
          max_count = 7;
          min_count = 4;
        }
      }
    }


    /* ===========================================================================
     * Construct the Huffman tree for the bit lengths and return the index in
     * bl_order of the last bit length code to send.
     */
    function build_bl_tree(s) {
      var max_blindex;  /* index of last bit length code of non zero freq */

      /* Determine the bit length frequencies for literal and distance trees */
      scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
      scan_tree(s, s.dyn_dtree, s.d_desc.max_code);

      /* Build the bit length tree: */
      build_tree(s, s.bl_desc);
      /* opt_len now includes the length of the tree representations, except
       * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
       */

      /* Determine the number of bit length codes to send. The pkzip format
       * requires that at least 4 bit length codes be sent. (appnote.txt says
       * 3 but the actual value used is 4.)
       */
      for (max_blindex = BL_CODES$1 - 1; max_blindex >= 3; max_blindex--) {
        if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {
          break;
        }
      }
      /* Update opt_len to include the bit length tree and counts */
      s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
      //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
      //        s->opt_len, s->static_len));

      return max_blindex;
    }


    /* ===========================================================================
     * Send the header for a block using dynamic Huffman trees: the counts, the
     * lengths of the bit length codes, the literal tree and the distance tree.
     * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
     */
    function send_all_trees(s, lcodes, dcodes, blcodes)
    //    deflate_state *s;
    //    int lcodes, dcodes, blcodes; /* number of codes for each tree */
    {
      var rank;                    /* index in bl_order */

      //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
      //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
      //        "too many codes");
      //Tracev((stderr, "\nbl counts: "));
      send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */
      send_bits(s, dcodes - 1,   5);
      send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */
      for (rank = 0; rank < blcodes; rank++) {
        //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
        send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);
      }
      //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));

      send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */
      //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

      send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */
      //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
    }


    /* ===========================================================================
     * Check if the data type is TEXT or BINARY, using the following algorithm:
     * - TEXT if the two conditions below are satisfied:
     *    a) There are no non-portable control characters belonging to the
     *       "black list" (0..6, 14..25, 28..31).
     *    b) There is at least one printable character belonging to the
     *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
     * - BINARY otherwise.
     * - The following partially-portable control characters form a
     *   "gray list" that is ignored in this detection algorithm:
     *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
     * IN assertion: the fields Freq of dyn_ltree are set.
     */
    function detect_data_type(s) {
      /* black_mask is the bit mask of black-listed bytes
       * set bits 0..6, 14..25, and 28..31
       * 0xf3ffc07f = binary 11110011111111111100000001111111
       */
      var black_mask = 0xf3ffc07f;
      var n;

      /* Check for non-textual ("black-listed") bytes. */
      for (n = 0; n <= 31; n++, black_mask >>>= 1) {
        if ((black_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {
          return Z_BINARY;
        }
      }

      /* Check for textual ("white-listed") bytes. */
      if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||
          s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {
        return Z_TEXT;
      }
      for (n = 32; n < LITERALS$1; n++) {
        if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {
          return Z_TEXT;
        }
      }

      /* There are no "black-listed" or "white-listed" bytes:
       * this stream either is empty or has tolerated ("gray-listed") bytes only.
       */
      return Z_BINARY;
    }


    var static_init_done = false;

    /* ===========================================================================
     * Initialize the tree data structures for a new zlib stream.
     */
    function _tr_init(s)
    {

      if (!static_init_done) {
        tr_static_init();
        static_init_done = true;
      }

      s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);
      s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);
      s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);

      s.bi_buf = 0;
      s.bi_valid = 0;

      /* Initialize the first block of the first file: */
      init_block(s);
    }


    /* ===========================================================================
     * Send a stored block
     */
    function _tr_stored_block(s, buf, stored_len, last)
    //DeflateState *s;
    //charf *buf;       /* input block */
    //ulg stored_len;   /* length of input block */
    //int last;         /* one if this is the last block for a file */
    {
      send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */
      copy_block(s, buf, stored_len, true); /* with header */
    }


    /* ===========================================================================
     * Send one empty static block to give enough lookahead for inflate.
     * This takes 10 bits, of which 7 may remain in the bit buffer.
     */
    function _tr_align(s) {
      send_bits(s, STATIC_TREES << 1, 3);
      send_code(s, END_BLOCK, static_ltree);
      bi_flush(s);
    }


    /* ===========================================================================
     * Determine the best encoding for the current block: dynamic trees, static
     * trees or store, and output the encoded block to the zip file.
     */
    function _tr_flush_block(s, buf, stored_len, last)
    //DeflateState *s;
    //charf *buf;       /* input block, or NULL if too old */
    //ulg stored_len;   /* length of input block */
    //int last;         /* one if this is the last block for a file */
    {
      var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */
      var max_blindex = 0;        /* index of last bit length code of non zero freq */

      /* Build the Huffman trees unless a stored block is forced */
      if (s.level > 0) {

        /* Check if the file is binary or text */
        if (s.strm.data_type === Z_UNKNOWN$1) {
          s.strm.data_type = detect_data_type(s);
        }

        /* Construct the literal and distance trees */
        build_tree(s, s.l_desc);
        // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
        //        s->static_len));

        build_tree(s, s.d_desc);
        // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
        //        s->static_len));
        /* At this point, opt_len and static_len are the total bit lengths of
         * the compressed block data, excluding the tree representations.
         */

        /* Build the bit length tree for the above two trees, and get the index
         * in bl_order of the last bit length code to send.
         */
        max_blindex = build_bl_tree(s);

        /* Determine the best encoding. Compute the block lengths in bytes. */
        opt_lenb = (s.opt_len + 3 + 7) >>> 3;
        static_lenb = (s.static_len + 3 + 7) >>> 3;

        // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
        //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
        //        s->last_lit));

        if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }

      } else {
        // Assert(buf != (char*)0, "lost buf");
        opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
      }

      if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {
        /* 4: two words for the lengths */

        /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
         * Otherwise we can't have processed more than WSIZE input bytes since
         * the last block flush, because compression would have been
         * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
         * transform a block into a stored block.
         */
        _tr_stored_block(s, buf, stored_len, last);

      } else if (s.strategy === Z_FIXED$1 || static_lenb === opt_lenb) {

        send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
        compress_block(s, static_ltree, static_dtree);

      } else {
        send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
        send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
        compress_block(s, s.dyn_ltree, s.dyn_dtree);
      }
      // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
      /* The above check is made mod 2^32, for files larger than 512 MB
       * and uLong implemented on 32 bits.
       */
      init_block(s);

      if (last) {
        bi_windup(s);
      }
      // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
      //       s->compressed_len-7*last));
    }

    /* ===========================================================================
     * Save the match info and tally the frequency counts. Return true if
     * the current block must be flushed.
     */
    function _tr_tally(s, dist, lc)
    //    deflate_state *s;
    //    unsigned dist;  /* distance of matched string */
    //    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
    {
      //var out_length, in_length, dcode;

      s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;
      s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;

      s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;
      s.last_lit++;

      if (dist === 0) {
        /* lc is the unmatched char */
        s.dyn_ltree[lc * 2]/*.Freq*/++;
      } else {
        s.matches++;
        /* Here, lc is the match length - MIN_MATCH */
        dist--;             /* dist = match distance - 1 */
        //Assert((ush)dist < (ush)MAX_DIST(s) &&
        //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
        //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

        s.dyn_ltree[(_length_code[lc] + LITERALS$1 + 1) * 2]/*.Freq*/++;
        s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;
      }

    // (!) This block is disabled in zlib defaults,
    // don't enable it for binary compatibility

    //#ifdef TRUNCATE_BLOCK
    //  /* Try to guess if it is profitable to stop the current block here */
    //  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
    //    /* Compute an upper bound for the compressed length */
    //    out_length = s.last_lit*8;
    //    in_length = s.strstart - s.block_start;
    //
    //    for (dcode = 0; dcode < D_CODES; dcode++) {
    //      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
    //    }
    //    out_length >>>= 3;
    //    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
    //    //       s->last_lit, in_length, out_length,
    //    //       100L - out_length*100L/in_length));
    //    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
    //      return true;
    //    }
    //  }
    //#endif

      return (s.last_lit === s.lit_bufsize - 1);
      /* We avoid equality with lit_bufsize because of wraparound at 64K
       * on 16 bit machines and because stored blocks are restricted to
       * 64K-1 bytes.
       */
    }

    var _tr_init_1  = _tr_init;
    var _tr_stored_block_1 = _tr_stored_block;
    var _tr_flush_block_1  = _tr_flush_block;
    var _tr_tally_1 = _tr_tally;
    var _tr_align_1 = _tr_align;

    var trees = {
    	_tr_init: _tr_init_1,
    	_tr_stored_block: _tr_stored_block_1,
    	_tr_flush_block: _tr_flush_block_1,
    	_tr_tally: _tr_tally_1,
    	_tr_align: _tr_align_1
    };

    // Note: adler32 takes 12% for level 0 and 2% for level 6.
    // It isn't worth it to make additional optimizations as in original.
    // Small size is preferable.

    // (C) 1995-2013 Jean-loup Gailly and Mark Adler
    // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
    //
    // This software is provided 'as-is', without any express or implied
    // warranty. In no event will the authors be held liable for any damages
    // arising from the use of this software.
    //
    // Permission is granted to anyone to use this software for any purpose,
    // including commercial applications, and to alter it and redistribute it
    // freely, subject to the following restrictions:
    //
    // 1. The origin of this software must not be misrepresented; you must not
    //   claim that you wrote the original software. If you use this software
    //   in a product, an acknowledgment in the product documentation would be
    //   appreciated but is not required.
    // 2. Altered source versions must be plainly marked as such, and must not be
    //   misrepresented as being the original software.
    // 3. This notice may not be removed or altered from any source distribution.

    function adler32(adler, buf, len, pos) {
      var s1 = (adler & 0xffff) |0,
          s2 = ((adler >>> 16) & 0xffff) |0,
          n = 0;

      while (len !== 0) {
        // Set limit ~ twice less than 5552, to keep
        // s2 in 31-bits, because we force signed ints.
        // in other case %= will fail.
        n = len > 2000 ? 2000 : len;
        len -= n;

        do {
          s1 = (s1 + buf[pos++]) |0;
          s2 = (s2 + s1) |0;
        } while (--n);

        s1 %= 65521;
        s2 %= 65521;
      }

      return (s1 | (s2 << 16)) |0;
    }


    var adler32_1 = adler32;

    // Note: we can't get significant speed boost here.
    // So write code to minimize size - no pregenerated tables
    // and array tools dependencies.

    // (C) 1995-2013 Jean-loup Gailly and Mark Adler
    // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
    //
    // This software is provided 'as-is', without any express or implied
    // warranty. In no event will the authors be held liable for any damages
    // arising from the use of this software.
    //
    // Permission is granted to anyone to use this software for any purpose,
    // including commercial applications, and to alter it and redistribute it
    // freely, subject to the following restrictions:
    //
    // 1. The origin of this software must not be misrepresented; you must not
    //   claim that you wrote the original software. If you use this software
    //   in a product, an acknowledgment in the product documentation would be
    //   appreciated but is not required.
    // 2. Altered source versions must be plainly marked as such, and must not be
    //   misrepresented as being the original software.
    // 3. This notice may not be removed or altered from any source distribution.

    // Use ordinary array, since untyped makes no boost here
    function makeTable() {
      var c, table = [];

      for (var n = 0; n < 256; n++) {
        c = n;
        for (var k = 0; k < 8; k++) {
          c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
        }
        table[n] = c;
      }

      return table;
    }

    // Create table on load. Just 255 signed longs. Not a problem.
    var crcTable = makeTable();


    function crc32(crc, buf, len, pos) {
      var t = crcTable,
          end = pos + len;

      crc ^= -1;

      for (var i = pos; i < end; i++) {
        crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
      }

      return (crc ^ (-1)); // >>> 0;
    }


    var crc32_1 = crc32;

    // (C) 1995-2013 Jean-loup Gailly and Mark Adler
    // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
    //
    // This software is provided 'as-is', without any express or implied
    // warranty. In no event will the authors be held liable for any damages
    // arising from the use of this software.
    //
    // Permission is granted to anyone to use this software for any purpose,
    // including commercial applications, and to alter it and redistribute it
    // freely, subject to the following restrictions:
    //
    // 1. The origin of this software must not be misrepresented; you must not
    //   claim that you wrote the original software. If you use this software
    //   in a product, an acknowledgment in the product documentation would be
    //   appreciated but is not required.
    // 2. Altered source versions must be plainly marked as such, and must not be
    //   misrepresented as being the original software.
    // 3. This notice may not be removed or altered from any source distribution.

    var messages = {
      2:      'need dictionary',     /* Z_NEED_DICT       2  */
      1:      'stream end',          /* Z_STREAM_END      1  */
      0:      '',                    /* Z_OK              0  */
      '-1':   'file error',          /* Z_ERRNO         (-1) */
      '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */
      '-3':   'data error',          /* Z_DATA_ERROR    (-3) */
      '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */
      '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */
      '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */
    };

    // (C) 1995-2013 Jean-loup Gailly and Mark Adler
    // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
    //
    // This software is provided 'as-is', without any express or implied
    // warranty. In no event will the authors be held liable for any damages
    // arising from the use of this software.
    //
    // Permission is granted to anyone to use this software for any purpose,
    // including commercial applications, and to alter it and redistribute it
    // freely, subject to the following restrictions:
    //
    // 1. The origin of this software must not be misrepresented; you must not
    //   claim that you wrote the original software. If you use this software
    //   in a product, an acknowledgment in the product documentation would be
    //   appreciated but is not required.
    // 2. Altered source versions must be plainly marked as such, and must not be
    //   misrepresented as being the original software.
    // 3. This notice may not be removed or altered from any source distribution.







    /* Public constants ==========================================================*/
    /* ===========================================================================*/


    /* Allowed flush values; see deflate() and inflate() below for details */
    var Z_NO_FLUSH$1      = 0;
    var Z_PARTIAL_FLUSH = 1;
    //var Z_SYNC_FLUSH    = 2;
    var Z_FULL_FLUSH    = 3;
    var Z_FINISH$2        = 4;
    var Z_BLOCK$1         = 5;
    //var Z_TREES         = 6;


    /* Return codes for the compression/decompression functions. Negative values
     * are errors, positive values are used for special but normal events.
     */
    var Z_OK$2            = 0;
    var Z_STREAM_END$2    = 1;
    //var Z_NEED_DICT     = 2;
    //var Z_ERRNO         = -1;
    var Z_STREAM_ERROR$1  = -2;
    var Z_DATA_ERROR$1    = -3;
    //var Z_MEM_ERROR     = -4;
    var Z_BUF_ERROR$1     = -5;
    //var Z_VERSION_ERROR = -6;


    /* compression levels */
    //var Z_NO_COMPRESSION      = 0;
    //var Z_BEST_SPEED          = 1;
    //var Z_BEST_COMPRESSION    = 9;
    var Z_DEFAULT_COMPRESSION$1 = -1;


    var Z_FILTERED            = 1;
    var Z_HUFFMAN_ONLY        = 2;
    var Z_RLE                 = 3;
    var Z_FIXED               = 4;
    var Z_DEFAULT_STRATEGY$1    = 0;

    /* Possible values of the data_type field (though see inflate()) */
    //var Z_BINARY              = 0;
    //var Z_TEXT                = 1;
    //var Z_ASCII               = 1; // = Z_TEXT
    var Z_UNKNOWN             = 2;


    /* The deflate compression method */
    var Z_DEFLATED$2  = 8;

    /*============================================================================*/


    var MAX_MEM_LEVEL = 9;
    /* Maximum value for memLevel in deflateInit2 */
    var MAX_WBITS$1 = 15;
    /* 32K LZ77 window */
    var DEF_MEM_LEVEL = 8;


    var LENGTH_CODES  = 29;
    /* number of length codes, not counting the special END_BLOCK code */
    var LITERALS      = 256;
    /* number of literal bytes 0..255 */
    var L_CODES       = LITERALS + 1 + LENGTH_CODES;
    /* number of Literal or Length codes, including the END_BLOCK code */
    var D_CODES       = 30;
    /* number of distance codes */
    var BL_CODES      = 19;
    /* number of codes used to transfer the bit lengths */
    var HEAP_SIZE     = 2 * L_CODES + 1;
    /* maximum heap size */
    var MAX_BITS  = 15;
    /* All codes must not exceed MAX_BITS bits */

    var MIN_MATCH = 3;
    var MAX_MATCH = 258;
    var MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);

    var PRESET_DICT = 0x20;

    var INIT_STATE = 42;
    var EXTRA_STATE = 69;
    var NAME_STATE = 73;
    var COMMENT_STATE = 91;
    var HCRC_STATE = 103;
    var BUSY_STATE = 113;
    var FINISH_STATE = 666;

    var BS_NEED_MORE      = 1; /* block not completed, need more input or more output */
    var BS_BLOCK_DONE     = 2; /* block flush performed */
    var BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */
    var BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */

    var OS_CODE = 0x03; // Unix :) . Don't detect, use this default.

    function err(strm, errorCode) {
      strm.msg = messages[errorCode];
      return errorCode;
    }

    function rank(f) {
      return ((f) << 1) - ((f) > 4 ? 9 : 0);
    }

    function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }


    /* =========================================================================
     * Flush as much pending output as possible. All deflate() output goes
     * through this function so some applications may wish to modify it
     * to avoid allocating a large strm->output buffer and copying into it.
     * (See also read_buf()).
     */
    function flush_pending(strm) {
      var s = strm.state;

      //_tr_flush_bits(s);
      var len = s.pending;
      if (len > strm.avail_out) {
        len = strm.avail_out;
      }
      if (len === 0) { return; }

      common$1.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
      strm.next_out += len;
      s.pending_out += len;
      strm.total_out += len;
      strm.avail_out -= len;
      s.pending -= len;
      if (s.pending === 0) {
        s.pending_out = 0;
      }
    }


    function flush_block_only(s, last) {
      trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);
      s.block_start = s.strstart;
      flush_pending(s.strm);
    }


    function put_byte(s, b) {
      s.pending_buf[s.pending++] = b;
    }


    /* =========================================================================
     * Put a short in the pending buffer. The 16-bit value is put in MSB order.
     * IN assertion: the stream state is correct and there is enough room in
     * pending_buf.
     */
    function putShortMSB(s, b) {
    //  put_byte(s, (Byte)(b >> 8));
    //  put_byte(s, (Byte)(b & 0xff));
      s.pending_buf[s.pending++] = (b >>> 8) & 0xff;
      s.pending_buf[s.pending++] = b & 0xff;
    }


    /* ===========================================================================
     * Read a new buffer from the current input stream, update the adler32
     * and total number of bytes read.  All deflate() input goes through
     * this function so some applications may wish to modify it to avoid
     * allocating a large strm->input buffer and copying from it.
     * (See also flush_pending()).
     */
    function read_buf(strm, buf, start, size) {
      var len = strm.avail_in;

      if (len > size) { len = size; }
      if (len === 0) { return 0; }

      strm.avail_in -= len;

      // zmemcpy(buf, strm->next_in, len);
      common$1.arraySet(buf, strm.input, strm.next_in, len, start);
      if (strm.state.wrap === 1) {
        strm.adler = adler32_1(strm.adler, buf, len, start);
      }

      else if (strm.state.wrap === 2) {
        strm.adler = crc32_1(strm.adler, buf, len, start);
      }

      strm.next_in += len;
      strm.total_in += len;

      return len;
    }


    /* ===========================================================================
     * Set match_start to the longest match starting at the given string and
     * return its length. Matches shorter or equal to prev_length are discarded,
     * in which case the result is equal to prev_length and match_start is
     * garbage.
     * IN assertions: cur_match is the head of the hash chain for the current
     *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
     * OUT assertion: the match length is not greater than s->lookahead.
     */
    function longest_match(s, cur_match) {
      var chain_length = s.max_chain_length;      /* max hash chain length */
      var scan = s.strstart; /* current string */
      var match;                       /* matched string */
      var len;                           /* length of current match */
      var best_len = s.prev_length;              /* best match length so far */
      var nice_match = s.nice_match;             /* stop if match long enough */
      var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?
          s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;

      var _win = s.window; // shortcut

      var wmask = s.w_mask;
      var prev  = s.prev;

      /* Stop when cur_match becomes <= limit. To simplify the code,
       * we prevent matches with the string of window index 0.
       */

      var strend = s.strstart + MAX_MATCH;
      var scan_end1  = _win[scan + best_len - 1];
      var scan_end   = _win[scan + best_len];

      /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
       * It is easy to get rid of this optimization if necessary.
       */
      // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

      /* Do not waste too much time if we already have a good match: */
      if (s.prev_length >= s.good_match) {
        chain_length >>= 2;
      }
      /* Do not look for matches beyond the end of the input. This is necessary
       * to make deflate deterministic.
       */
      if (nice_match > s.lookahead) { nice_match = s.lookahead; }

      // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");

      do {
        // Assert(cur_match < s->strstart, "no future");
        match = cur_match;

        /* Skip to next match if the match length cannot increase
         * or if the match length is less than 2.  Note that the checks below
         * for insufficient lookahead only occur occasionally for performance
         * reasons.  Therefore uninitialized memory will be accessed, and
         * conditional jumps will be made that depend on those values.
         * However the length of the match is limited to the lookahead, so
         * the output of deflate is not affected by the uninitialized values.
         */

        if (_win[match + best_len]     !== scan_end  ||
            _win[match + best_len - 1] !== scan_end1 ||
            _win[match]                !== _win[scan] ||
            _win[++match]              !== _win[scan + 1]) {
          continue;
        }

        /* The check at best_len-1 can be removed because it will be made
         * again later. (This heuristic is not always a win.)
         * It is not necessary to compare scan[2] and match[2] since they
         * are always equal when the other bytes match, given that
         * the hash keys are equal and that HASH_BITS >= 8.
         */
        scan += 2;
        match++;
        // Assert(*scan == *match, "match[2]?");

        /* We check for insufficient lookahead only every 8th comparison;
         * the 256th check will be made at strstart+258.
         */
        do {
          /*jshint noempty:false*/
        } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
                 _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
                 _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
                 _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
                 scan < strend);

        // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");

        len = MAX_MATCH - (strend - scan);
        scan = strend - MAX_MATCH;

        if (len > best_len) {
          s.match_start = cur_match;
          best_len = len;
          if (len >= nice_match) {
            break;
          }
          scan_end1  = _win[scan + best_len - 1];
          scan_end   = _win[scan + best_len];
        }
      } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);

      if (best_len <= s.lookahead) {
        return best_len;
      }
      return s.lookahead;
    }


    /* ===========================================================================
     * Fill the window when the lookahead becomes insufficient.
     * Updates strstart and lookahead.
     *
     * IN assertion: lookahead < MIN_LOOKAHEAD
     * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
     *    At least one byte has been read, or avail_in == 0; reads are
     *    performed for at least two bytes (required for the zip translate_eol
     *    option -- not supported here).
     */
    function fill_window(s) {
      var _w_size = s.w_size;
      var p, n, m, more, str;

      //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

      do {
        more = s.window_size - s.lookahead - s.strstart;

        // JS ints have 32 bit, block below not needed
        /* Deal with !@#$% 64K limit: */
        //if (sizeof(int) <= 2) {
        //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
        //        more = wsize;
        //
        //  } else if (more == (unsigned)(-1)) {
        //        /* Very unlikely, but possible on 16 bit machine if
        //         * strstart == 0 && lookahead == 1 (input done a byte at time)
        //         */
        //        more--;
        //    }
        //}


        /* If the window is almost full and there is insufficient lookahead,
         * move the upper half to the lower one to make room in the upper half.
         */
        if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {

          common$1.arraySet(s.window, s.window, _w_size, _w_size, 0);
          s.match_start -= _w_size;
          s.strstart -= _w_size;
          /* we now have strstart >= MAX_DIST */
          s.block_start -= _w_size;

          /* Slide the hash table (could be avoided with 32 bit values
           at the expense of memory usage). We slide even when level == 0
           to keep the hash table consistent if we switch back to level > 0
           later. (Using level 0 permanently is not an optimal usage of
           zlib, so we don't care about this pathological case.)
           */

          n = s.hash_size;
          p = n;
          do {
            m = s.head[--p];
            s.head[p] = (m >= _w_size ? m - _w_size : 0);
          } while (--n);

          n = _w_size;
          p = n;
          do {
            m = s.prev[--p];
            s.prev[p] = (m >= _w_size ? m - _w_size : 0);
            /* If n is not on any hash chain, prev[n] is garbage but
             * its value will never be used.
             */
          } while (--n);

          more += _w_size;
        }
        if (s.strm.avail_in === 0) {
          break;
        }

        /* If there was no sliding:
         *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
         *    more == window_size - lookahead - strstart
         * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
         * => more >= window_size - 2*WSIZE + 2
         * In the BIG_MEM or MMAP case (not yet supported),
         *   window_size == input_size + MIN_LOOKAHEAD  &&
         *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
         * Otherwise, window_size == 2*WSIZE so more >= 2.
         * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
         */
        //Assert(more >= 2, "more < 2");
        n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
        s.lookahead += n;

        /* Initialize the hash value now that we have some input: */
        if (s.lookahead + s.insert >= MIN_MATCH) {
          str = s.strstart - s.insert;
          s.ins_h = s.window[str];

          /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;
    //#if MIN_MATCH != 3
    //        Call update_hash() MIN_MATCH-3 more times
    //#endif
          while (s.insert) {
            /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
            s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

            s.prev[str & s.w_mask] = s.head[s.ins_h];
            s.head[s.ins_h] = str;
            str++;
            s.insert--;
            if (s.lookahead + s.insert < MIN_MATCH) {
              break;
            }
          }
        }
        /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
         * but this is not important since only literal bytes will be emitted.
         */

      } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);

      /* If the WIN_INIT bytes after the end of the current data have never been
       * written, then zero those bytes in order to avoid memory check reports of
       * the use of uninitialized (or uninitialised as Julian writes) bytes by
       * the longest match routines.  Update the high water mark for the next
       * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
       * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
       */
    //  if (s.high_water < s.window_size) {
    //    var curr = s.strstart + s.lookahead;
    //    var init = 0;
    //
    //    if (s.high_water < curr) {
    //      /* Previous high water mark below current data -- zero WIN_INIT
    //       * bytes or up to end of window, whichever is less.
    //       */
    //      init = s.window_size - curr;
    //      if (init > WIN_INIT)
    //        init = WIN_INIT;
    //      zmemzero(s->window + curr, (unsigned)init);
    //      s->high_water = curr + init;
    //    }
    //    else if (s->high_water < (ulg)curr + WIN_INIT) {
    //      /* High water mark at or above current data, but below current data
    //       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
    //       * to end of window, whichever is less.
    //       */
    //      init = (ulg)curr + WIN_INIT - s->high_water;
    //      if (init > s->window_size - s->high_water)
    //        init = s->window_size - s->high_water;
    //      zmemzero(s->window + s->high_water, (unsigned)init);
    //      s->high_water += init;
    //    }
    //  }
    //
    //  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
    //    "not enough room for search");
    }

    /* ===========================================================================
     * Copy without compression as much as possible from the input stream, return
     * the current block state.
     * This function does not insert new strings in the dictionary since
     * uncompressible data is probably not useful. This function is used
     * only for the level=0 compression option.
     * NOTE: this function should be optimized to avoid extra copying from
     * window to pending_buf.
     */
    function deflate_stored(s, flush) {
      /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
       * to pending_buf_size, and each stored block has a 5 byte header:
       */
      var max_block_size = 0xffff;

      if (max_block_size > s.pending_buf_size - 5) {
        max_block_size = s.pending_buf_size - 5;
      }

      /* Copy as much as possible from input to output: */
      for (;;) {
        /* Fill the window as much as possible: */
        if (s.lookahead <= 1) {

          //Assert(s->strstart < s->w_size+MAX_DIST(s) ||
          //  s->block_start >= (long)s->w_size, "slide too late");
    //      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
    //        s.block_start >= s.w_size)) {
    //        throw  new Error("slide too late");
    //      }

          fill_window(s);
          if (s.lookahead === 0 && flush === Z_NO_FLUSH$1) {
            return BS_NEED_MORE;
          }

          if (s.lookahead === 0) {
            break;
          }
          /* flush the current block */
        }
        //Assert(s->block_start >= 0L, "block gone");
    //    if (s.block_start < 0) throw new Error("block gone");

        s.strstart += s.lookahead;
        s.lookahead = 0;

        /* Emit a stored block if pending_buf will be full: */
        var max_start = s.block_start + max_block_size;

        if (s.strstart === 0 || s.strstart >= max_start) {
          /* strstart == 0 is possible when wraparound on 16-bit machine */
          s.lookahead = s.strstart - max_start;
          s.strstart = max_start;
          /*** FLUSH_BLOCK(s, 0); ***/
          flush_block_only(s, false);
          if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
          /***/


        }
        /* Flush if we may have to slide, otherwise block_start may become
         * negative and the data will be gone:
         */
        if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {
          /*** FLUSH_BLOCK(s, 0); ***/
          flush_block_only(s, false);
          if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
          /***/
        }
      }

      s.insert = 0;

      if (flush === Z_FINISH$2) {
        /*** FLUSH_BLOCK(s, 1); ***/
        flush_block_only(s, true);
        if (s.strm.avail_out === 0) {
          return BS_FINISH_STARTED;
        }
        /***/
        return BS_FINISH_DONE;
      }

      if (s.strstart > s.block_start) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }

      return BS_NEED_MORE;
    }

    /* ===========================================================================
     * Compress as much as possible from the input stream, return the current
     * block state.
     * This function does not perform lazy evaluation of matches and inserts
     * new strings in the dictionary only for unmatched strings or for short
     * matches. It is used only for the fast compression options.
     */
    function deflate_fast(s, flush) {
      var hash_head;        /* head of the hash chain */
      var bflush;           /* set if current block must be flushed */

      for (;;) {
        /* Make sure that we always have enough lookahead, except
         * at the end of the input file. We need MAX_MATCH bytes
         * for the next match, plus MIN_MATCH bytes to insert the
         * string following the next match.
         */
        if (s.lookahead < MIN_LOOKAHEAD) {
          fill_window(s);
          if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH$1) {
            return BS_NEED_MORE;
          }
          if (s.lookahead === 0) {
            break; /* flush the current block */
          }
        }

        /* Insert the string window[strstart .. strstart+2] in the
         * dictionary, and set hash_head to the head of the hash chain:
         */
        hash_head = 0/*NIL*/;
        if (s.lookahead >= MIN_MATCH) {
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
        }

        /* Find the longest match, discarding those <= prev_length.
         * At this point we have always match_length < MIN_MATCH
         */
        if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {
          /* To simplify the code, we prevent matches with the string
           * of window index 0 (in particular we have to avoid a match
           * of the string with itself at the start of the input file).
           */
          s.match_length = longest_match(s, hash_head);
          /* longest_match() sets match_start */
        }
        if (s.match_length >= MIN_MATCH) {
          // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

          /*** _tr_tally_dist(s, s.strstart - s.match_start,
                         s.match_length - MIN_MATCH, bflush); ***/
          bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);

          s.lookahead -= s.match_length;

          /* Insert new strings in the hash table only if the match length
           * is not too large. This saves time but degrades compression.
           */
          if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {
            s.match_length--; /* string at strstart already in table */
            do {
              s.strstart++;
              /*** INSERT_STRING(s, s.strstart, hash_head); ***/
              s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
              hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
              s.head[s.ins_h] = s.strstart;
              /***/
              /* strstart never exceeds WSIZE-MAX_MATCH, so there are
               * always MIN_MATCH bytes ahead.
               */
            } while (--s.match_length !== 0);
            s.strstart++;
          } else
          {
            s.strstart += s.match_length;
            s.match_length = 0;
            s.ins_h = s.window[s.strstart];
            /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
            s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;

    //#if MIN_MATCH != 3
    //                Call UPDATE_HASH() MIN_MATCH-3 more times
    //#endif
            /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
             * matter since it will be recomputed at next deflate call.
             */
          }
        } else {
          /* No match, output a literal byte */
          //Tracevv((stderr,"%c", s.window[s.strstart]));
          /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
          bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

          s.lookahead--;
          s.strstart++;
        }
        if (bflush) {
          /*** FLUSH_BLOCK(s, 0); ***/
          flush_block_only(s, false);
          if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
          /***/
        }
      }
      s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);
      if (flush === Z_FINISH$2) {
        /*** FLUSH_BLOCK(s, 1); ***/
        flush_block_only(s, true);
        if (s.strm.avail_out === 0) {
          return BS_FINISH_STARTED;
        }
        /***/
        return BS_FINISH_DONE;
      }
      if (s.last_lit) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }
      return BS_BLOCK_DONE;
    }

    /* ===========================================================================
     * Same as above, but achieves better compression. We use a lazy
     * evaluation for matches: a match is finally adopted only if there is
     * no better match at the next window position.
     */
    function deflate_slow(s, flush) {
      var hash_head;          /* head of hash chain */
      var bflush;              /* set if current block must be flushed */

      var max_insert;

      /* Process the input block. */
      for (;;) {
        /* Make sure that we always have enough lookahead, except
         * at the end of the input file. We need MAX_MATCH bytes
         * for the next match, plus MIN_MATCH bytes to insert the
         * string following the next match.
         */
        if (s.lookahead < MIN_LOOKAHEAD) {
          fill_window(s);
          if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH$1) {
            return BS_NEED_MORE;
          }
          if (s.lookahead === 0) { break; } /* flush the current block */
        }

        /* Insert the string window[strstart .. strstart+2] in the
         * dictionary, and set hash_head to the head of the hash chain:
         */
        hash_head = 0/*NIL*/;
        if (s.lookahead >= MIN_MATCH) {
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
        }

        /* Find the longest match, discarding those <= prev_length.
         */
        s.prev_length = s.match_length;
        s.prev_match = s.match_start;
        s.match_length = MIN_MATCH - 1;

        if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&
            s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {
          /* To simplify the code, we prevent matches with the string
           * of window index 0 (in particular we have to avoid a match
           * of the string with itself at the start of the input file).
           */
          s.match_length = longest_match(s, hash_head);
          /* longest_match() sets match_start */

          if (s.match_length <= 5 &&
             (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {

            /* If prev_match is also MIN_MATCH, match_start is garbage
             * but we will ignore the current match anyway.
             */
            s.match_length = MIN_MATCH - 1;
          }
        }
        /* If there was a match at the previous step and the current
         * match is not better, output the previous match:
         */
        if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
          max_insert = s.strstart + s.lookahead - MIN_MATCH;
          /* Do not insert strings in hash table beyond this. */

          //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

          /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
                         s.prev_length - MIN_MATCH, bflush);***/
          bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
          /* Insert in hash table all strings up to the end of the match.
           * strstart-1 and strstart are already inserted. If there is not
           * enough lookahead, the last two strings are not inserted in
           * the hash table.
           */
          s.lookahead -= s.prev_length - 1;
          s.prev_length -= 2;
          do {
            if (++s.strstart <= max_insert) {
              /*** INSERT_STRING(s, s.strstart, hash_head); ***/
              s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
              hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
              s.head[s.ins_h] = s.strstart;
              /***/
            }
          } while (--s.prev_length !== 0);
          s.match_available = 0;
          s.match_length = MIN_MATCH - 1;
          s.strstart++;

          if (bflush) {
            /*** FLUSH_BLOCK(s, 0); ***/
            flush_block_only(s, false);
            if (s.strm.avail_out === 0) {
              return BS_NEED_MORE;
            }
            /***/
          }

        } else if (s.match_available) {
          /* If there was no match at the previous position, output a
           * single literal. If there was a match but the current match
           * is longer, truncate the previous match to a single literal.
           */
          //Tracevv((stderr,"%c", s->window[s->strstart-1]));
          /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
          bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

          if (bflush) {
            /*** FLUSH_BLOCK_ONLY(s, 0) ***/
            flush_block_only(s, false);
            /***/
          }
          s.strstart++;
          s.lookahead--;
          if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
        } else {
          /* There is no previous match to compare with, wait for
           * the next step to decide.
           */
          s.match_available = 1;
          s.strstart++;
          s.lookahead--;
        }
      }
      //Assert (flush != Z_NO_FLUSH, "no flush?");
      if (s.match_available) {
        //Tracevv((stderr,"%c", s->window[s->strstart-1]));
        /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
        bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

        s.match_available = 0;
      }
      s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
      if (flush === Z_FINISH$2) {
        /*** FLUSH_BLOCK(s, 1); ***/
        flush_block_only(s, true);
        if (s.strm.avail_out === 0) {
          return BS_FINISH_STARTED;
        }
        /***/
        return BS_FINISH_DONE;
      }
      if (s.last_lit) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }

      return BS_BLOCK_DONE;
    }


    /* ===========================================================================
     * For Z_RLE, simply look for runs of bytes, generate matches only of distance
     * one.  Do not maintain a hash table.  (It will be regenerated if this run of
     * deflate switches away from Z_RLE.)
     */
    function deflate_rle(s, flush) {
      var bflush;            /* set if current block must be flushed */
      var prev;              /* byte at distance one to match */
      var scan, strend;      /* scan goes up to strend for length of run */

      var _win = s.window;

      for (;;) {
        /* Make sure that we always have enough lookahead, except
         * at the end of the input file. We need MAX_MATCH bytes
         * for the longest run, plus one for the unrolled loop.
         */
        if (s.lookahead <= MAX_MATCH) {
          fill_window(s);
          if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH$1) {
            return BS_NEED_MORE;
          }
          if (s.lookahead === 0) { break; } /* flush the current block */
        }

        /* See how many times the previous byte repeats */
        s.match_length = 0;
        if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
          scan = s.strstart - 1;
          prev = _win[scan];
          if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
            strend = s.strstart + MAX_MATCH;
            do {
              /*jshint noempty:false*/
            } while (prev === _win[++scan] && prev === _win[++scan] &&
                     prev === _win[++scan] && prev === _win[++scan] &&
                     prev === _win[++scan] && prev === _win[++scan] &&
                     prev === _win[++scan] && prev === _win[++scan] &&
                     scan < strend);
            s.match_length = MAX_MATCH - (strend - scan);
            if (s.match_length > s.lookahead) {
              s.match_length = s.lookahead;
            }
          }
          //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
        }

        /* Emit match if have run of MIN_MATCH or longer, else emit literal */
        if (s.match_length >= MIN_MATCH) {
          //check_match(s, s.strstart, s.strstart - 1, s.match_length);

          /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
          bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);

          s.lookahead -= s.match_length;
          s.strstart += s.match_length;
          s.match_length = 0;
        } else {
          /* No match, output a literal byte */
          //Tracevv((stderr,"%c", s->window[s->strstart]));
          /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
          bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

          s.lookahead--;
          s.strstart++;
        }
        if (bflush) {
          /*** FLUSH_BLOCK(s, 0); ***/
          flush_block_only(s, false);
          if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
          /***/
        }
      }
      s.insert = 0;
      if (flush === Z_FINISH$2) {
        /*** FLUSH_BLOCK(s, 1); ***/
        flush_block_only(s, true);
        if (s.strm.avail_out === 0) {
          return BS_FINISH_STARTED;
        }
        /***/
        return BS_FINISH_DONE;
      }
      if (s.last_lit) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }
      return BS_BLOCK_DONE;
    }

    /* ===========================================================================
     * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
     * (It will be regenerated if this run of deflate switches away from Huffman.)
     */
    function deflate_huff(s, flush) {
      var bflush;             /* set if current block must be flushed */

      for (;;) {
        /* Make sure that we have a literal to write. */
        if (s.lookahead === 0) {
          fill_window(s);
          if (s.lookahead === 0) {
            if (flush === Z_NO_FLUSH$1) {
              return BS_NEED_MORE;
            }
            break;      /* flush the current block */
          }
        }

        /* Output a literal byte */
        s.match_length = 0;
        //Tracevv((stderr,"%c", s->window[s->strstart]));
        /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
        bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
        s.lookahead--;
        s.strstart++;
        if (bflush) {
          /*** FLUSH_BLOCK(s, 0); ***/
          flush_block_only(s, false);
          if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
          /***/
        }
      }
      s.insert = 0;
      if (flush === Z_FINISH$2) {
        /*** FLUSH_BLOCK(s, 1); ***/
        flush_block_only(s, true);
        if (s.strm.avail_out === 0) {
          return BS_FINISH_STARTED;
        }
        /***/
        return BS_FINISH_DONE;
      }
      if (s.last_lit) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }
      return BS_BLOCK_DONE;
    }

    /* Values for max_lazy_match, good_match and max_chain_length, depending on
     * the desired pack level (0..9). The values given below have been tuned to
     * exclude worst case performance for pathological files. Better values may be
     * found for specific files.
     */
    function Config(good_length, max_lazy, nice_length, max_chain, func) {
      this.good_length = good_length;
      this.max_lazy = max_lazy;
      this.nice_length = nice_length;
      this.max_chain = max_chain;
      this.func = func;
    }

    var configuration_table;

    configuration_table = [
      /*      good lazy nice chain */
      new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */
      new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */
      new Config(4, 5, 16, 8, deflate_fast),           /* 2 */
      new Config(4, 6, 32, 32, deflate_fast),          /* 3 */

      new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */
      new Config(8, 16, 32, 32, deflate_slow),         /* 5 */
      new Config(8, 16, 128, 128, deflate_slow),       /* 6 */
      new Config(8, 32, 128, 256, deflate_slow),       /* 7 */
      new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */
      new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */
    ];


    /* ===========================================================================
     * Initialize the "longest match" routines for a new zlib stream
     */
    function lm_init(s) {
      s.window_size = 2 * s.w_size;

      /*** CLEAR_HASH(s); ***/
      zero(s.head); // Fill with NIL (= 0);

      /* Set the default configuration parameters:
       */
      s.max_lazy_match = configuration_table[s.level].max_lazy;
      s.good_match = configuration_table[s.level].good_length;
      s.nice_match = configuration_table[s.level].nice_length;
      s.max_chain_length = configuration_table[s.level].max_chain;

      s.strstart = 0;
      s.block_start = 0;
      s.lookahead = 0;
      s.insert = 0;
      s.match_length = s.prev_length = MIN_MATCH - 1;
      s.match_available = 0;
      s.ins_h = 0;
    }


    function DeflateState() {
      this.strm = null;            /* pointer back to this zlib stream */
      this.status = 0;            /* as the name implies */
      this.pending_buf = null;      /* output still pending */
      this.pending_buf_size = 0;  /* size of pending_buf */
      this.pending_out = 0;       /* next pending byte to output to the stream */
      this.pending = 0;           /* nb of bytes in the pending buffer */
      this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
      this.gzhead = null;         /* gzip header information to write */
      this.gzindex = 0;           /* where in extra, name, or comment */
      this.method = Z_DEFLATED$2; /* can only be DEFLATED */
      this.last_flush = -1;   /* value of flush param for previous deflate call */

      this.w_size = 0;  /* LZ77 window size (32K by default) */
      this.w_bits = 0;  /* log2(w_size)  (8..16) */
      this.w_mask = 0;  /* w_size - 1 */

      this.window = null;
      /* Sliding window. Input bytes are read into the second half of the window,
       * and move to the first half later to keep a dictionary of at least wSize
       * bytes. With this organization, matches are limited to a distance of
       * wSize-MAX_MATCH bytes, but this ensures that IO is always
       * performed with a length multiple of the block size.
       */

      this.window_size = 0;
      /* Actual size of window: 2*wSize, except when the user input buffer
       * is directly used as sliding window.
       */

      this.prev = null;
      /* Link to older string with same hash index. To limit the size of this
       * array to 64K, this link is maintained only for the last 32K strings.
       * An index in this array is thus a window index modulo 32K.
       */

      this.head = null;   /* Heads of the hash chains or NIL. */

      this.ins_h = 0;       /* hash index of string to be inserted */
      this.hash_size = 0;   /* number of elements in hash table */
      this.hash_bits = 0;   /* log2(hash_size) */
      this.hash_mask = 0;   /* hash_size-1 */

      this.hash_shift = 0;
      /* Number of bits by which ins_h must be shifted at each input
       * step. It must be such that after MIN_MATCH steps, the oldest
       * byte no longer takes part in the hash key, that is:
       *   hash_shift * MIN_MATCH >= hash_bits
       */

      this.block_start = 0;
      /* Window position at the beginning of the current output block. Gets
       * negative when the window is moved backwards.
       */

      this.match_length = 0;      /* length of best match */
      this.prev_match = 0;        /* previous match */
      this.match_available = 0;   /* set if previous match exists */
      this.strstart = 0;          /* start of string to insert */
      this.match_start = 0;       /* start of matching string */
      this.lookahead = 0;         /* number of valid bytes ahead in window */

      this.prev_length = 0;
      /* Length of the best match at previous step. Matches not greater than this
       * are discarded. This is used in the lazy match evaluation.
       */

      this.max_chain_length = 0;
      /* To speed up deflation, hash chains are never searched beyond this
       * length.  A higher limit improves compression ratio but degrades the
       * speed.
       */

      this.max_lazy_match = 0;
      /* Attempt to find a better match only when the current match is strictly
       * smaller than this value. This mechanism is used only for compression
       * levels >= 4.
       */
      // That's alias to max_lazy_match, don't use directly
      //this.max_insert_length = 0;
      /* Insert new strings in the hash table only if the match length is not
       * greater than this length. This saves time but degrades compression.
       * max_insert_length is used only for compression levels <= 3.
       */

      this.level = 0;     /* compression level (1..9) */
      this.strategy = 0;  /* favor or force Huffman coding*/

      this.good_match = 0;
      /* Use a faster search when the previous match is longer than this */

      this.nice_match = 0; /* Stop searching when current match exceeds this */

                  /* used by trees.c: */

      /* Didn't use ct_data typedef below to suppress compiler warning */

      // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
      // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
      // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */

      // Use flat array of DOUBLE size, with interleaved fata,
      // because JS does not support effective
      this.dyn_ltree  = new common$1.Buf16(HEAP_SIZE * 2);
      this.dyn_dtree  = new common$1.Buf16((2 * D_CODES + 1) * 2);
      this.bl_tree    = new common$1.Buf16((2 * BL_CODES + 1) * 2);
      zero(this.dyn_ltree);
      zero(this.dyn_dtree);
      zero(this.bl_tree);

      this.l_desc   = null;         /* desc. for literal tree */
      this.d_desc   = null;         /* desc. for distance tree */
      this.bl_desc  = null;         /* desc. for bit length tree */

      //ush bl_count[MAX_BITS+1];
      this.bl_count = new common$1.Buf16(MAX_BITS + 1);
      /* number of codes at each bit length for an optimal tree */

      //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
      this.heap = new common$1.Buf16(2 * L_CODES + 1);  /* heap used to build the Huffman trees */
      zero(this.heap);

      this.heap_len = 0;               /* number of elements in the heap */
      this.heap_max = 0;               /* element of largest frequency */
      /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
       * The same heap array is used to build all trees.
       */

      this.depth = new common$1.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];
      zero(this.depth);
      /* Depth of each subtree used as tie breaker for trees of equal frequency
       */

      this.l_buf = 0;          /* buffer index for literals or lengths */

      this.lit_bufsize = 0;
      /* Size of match buffer for literals/lengths.  There are 4 reasons for
       * limiting lit_bufsize to 64K:
       *   - frequencies can be kept in 16 bit counters
       *   - if compression is not successful for the first block, all input
       *     data is still in the window so we can still emit a stored block even
       *     when input comes from standard input.  (This can also be done for
       *     all blocks if lit_bufsize is not greater than 32K.)
       *   - if compression is not successful for a file smaller than 64K, we can
       *     even emit a stored file instead of a stored block (saving 5 bytes).
       *     This is applicable only for zip (not gzip or zlib).
       *   - creating new Huffman trees less frequently may not provide fast
       *     adaptation to changes in the input data statistics. (Take for
       *     example a binary file with poorly compressible code followed by
       *     a highly compressible string table.) Smaller buffer sizes give
       *     fast adaptation but have of course the overhead of transmitting
       *     trees more frequently.
       *   - I can't count above 4
       */

      this.last_lit = 0;      /* running index in l_buf */

      this.d_buf = 0;
      /* Buffer index for distances. To simplify the code, d_buf and l_buf have
       * the same number of elements. To use different lengths, an extra flag
       * array would be necessary.
       */

      this.opt_len = 0;       /* bit length of current block with optimal trees */
      this.static_len = 0;    /* bit length of current block with static trees */
      this.matches = 0;       /* number of string matches in current block */
      this.insert = 0;        /* bytes at end of window left to insert */


      this.bi_buf = 0;
      /* Output buffer. bits are inserted starting at the bottom (least
       * significant bits).
       */
      this.bi_valid = 0;
      /* Number of valid bits in bi_buf.  All bits above the last valid bit
       * are always zero.
       */

      // Used for window memory init. We safely ignore it for JS. That makes
      // sense only for pointers and memory check tools.
      //this.high_water = 0;
      /* High water mark offset in window for initialized bytes -- bytes above
       * this are set to zero in order to avoid memory check warnings when
       * longest match routines access bytes past the input.  This is then
       * updated to the new high water mark.
       */
    }


    function deflateResetKeep(strm) {
      var s;

      if (!strm || !strm.state) {
        return err(strm, Z_STREAM_ERROR$1);
      }

      strm.total_in = strm.total_out = 0;
      strm.data_type = Z_UNKNOWN;

      s = strm.state;
      s.pending = 0;
      s.pending_out = 0;

      if (s.wrap < 0) {
        s.wrap = -s.wrap;
        /* was made negative by deflate(..., Z_FINISH); */
      }
      s.status = (s.wrap ? INIT_STATE : BUSY_STATE);
      strm.adler = (s.wrap === 2) ?
        0  // crc32(0, Z_NULL, 0)
      :
        1; // adler32(0, Z_NULL, 0)
      s.last_flush = Z_NO_FLUSH$1;
      trees._tr_init(s);
      return Z_OK$2;
    }


    function deflateReset(strm) {
      var ret = deflateResetKeep(strm);
      if (ret === Z_OK$2) {
        lm_init(strm.state);
      }
      return ret;
    }


    function deflateSetHeader(strm, head) {
      if (!strm || !strm.state) { return Z_STREAM_ERROR$1; }
      if (strm.state.wrap !== 2) { return Z_STREAM_ERROR$1; }
      strm.state.gzhead = head;
      return Z_OK$2;
    }


    function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
      if (!strm) { // === Z_NULL
        return Z_STREAM_ERROR$1;
      }
      var wrap = 1;

      if (level === Z_DEFAULT_COMPRESSION$1) {
        level = 6;
      }

      if (windowBits < 0) { /* suppress zlib wrapper */
        wrap = 0;
        windowBits = -windowBits;
      }

      else if (windowBits > 15) {
        wrap = 2;           /* write gzip wrapper instead */
        windowBits -= 16;
      }


      if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED$2 ||
        windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
        strategy < 0 || strategy > Z_FIXED) {
        return err(strm, Z_STREAM_ERROR$1);
      }


      if (windowBits === 8) {
        windowBits = 9;
      }
      /* until 256-byte window bug fixed */

      var s = new DeflateState();

      strm.state = s;
      s.strm = strm;

      s.wrap = wrap;
      s.gzhead = null;
      s.w_bits = windowBits;
      s.w_size = 1 << s.w_bits;
      s.w_mask = s.w_size - 1;

      s.hash_bits = memLevel + 7;
      s.hash_size = 1 << s.hash_bits;
      s.hash_mask = s.hash_size - 1;
      s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);

      s.window = new common$1.Buf8(s.w_size * 2);
      s.head = new common$1.Buf16(s.hash_size);
      s.prev = new common$1.Buf16(s.w_size);

      // Don't need mem init magic for JS.
      //s.high_water = 0;  /* nothing written to s->window yet */

      s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

      s.pending_buf_size = s.lit_bufsize * 4;

      //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);
      //s->pending_buf = (uchf *) overlay;
      s.pending_buf = new common$1.Buf8(s.pending_buf_size);

      // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)
      //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);
      s.d_buf = 1 * s.lit_bufsize;

      //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;
      s.l_buf = (1 + 2) * s.lit_bufsize;

      s.level = level;
      s.strategy = strategy;
      s.method = method;

      return deflateReset(strm);
    }

    function deflateInit(strm, level) {
      return deflateInit2(strm, level, Z_DEFLATED$2, MAX_WBITS$1, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY$1);
    }


    function deflate$2(strm, flush) {
      var old_flush, s;
      var beg, val; // for gzip header write only

      if (!strm || !strm.state ||
        flush > Z_BLOCK$1 || flush < 0) {
        return strm ? err(strm, Z_STREAM_ERROR$1) : Z_STREAM_ERROR$1;
      }

      s = strm.state;

      if (!strm.output ||
          (!strm.input && strm.avail_in !== 0) ||
          (s.status === FINISH_STATE && flush !== Z_FINISH$2)) {
        return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR$1 : Z_STREAM_ERROR$1);
      }

      s.strm = strm; /* just in case */
      old_flush = s.last_flush;
      s.last_flush = flush;

      /* Write the header */
      if (s.status === INIT_STATE) {

        if (s.wrap === 2) { // GZIP header
          strm.adler = 0;  //crc32(0L, Z_NULL, 0);
          put_byte(s, 31);
          put_byte(s, 139);
          put_byte(s, 8);
          if (!s.gzhead) { // s->gzhead == Z_NULL
            put_byte(s, 0);
            put_byte(s, 0);
            put_byte(s, 0);
            put_byte(s, 0);
            put_byte(s, 0);
            put_byte(s, s.level === 9 ? 2 :
                        (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                         4 : 0));
            put_byte(s, OS_CODE);
            s.status = BUSY_STATE;
          }
          else {
            put_byte(s, (s.gzhead.text ? 1 : 0) +
                        (s.gzhead.hcrc ? 2 : 0) +
                        (!s.gzhead.extra ? 0 : 4) +
                        (!s.gzhead.name ? 0 : 8) +
                        (!s.gzhead.comment ? 0 : 16)
            );
            put_byte(s, s.gzhead.time & 0xff);
            put_byte(s, (s.gzhead.time >> 8) & 0xff);
            put_byte(s, (s.gzhead.time >> 16) & 0xff);
            put_byte(s, (s.gzhead.time >> 24) & 0xff);
            put_byte(s, s.level === 9 ? 2 :
                        (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                         4 : 0));
            put_byte(s, s.gzhead.os & 0xff);
            if (s.gzhead.extra && s.gzhead.extra.length) {
              put_byte(s, s.gzhead.extra.length & 0xff);
              put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);
            }
            if (s.gzhead.hcrc) {
              strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending, 0);
            }
            s.gzindex = 0;
            s.status = EXTRA_STATE;
          }
        }
        else // DEFLATE header
        {
          var header = (Z_DEFLATED$2 + ((s.w_bits - 8) << 4)) << 8;
          var level_flags = -1;

          if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
            level_flags = 0;
          } else if (s.level < 6) {
            level_flags = 1;
          } else if (s.level === 6) {
            level_flags = 2;
          } else {
            level_flags = 3;
          }
          header |= (level_flags << 6);
          if (s.strstart !== 0) { header |= PRESET_DICT; }
          header += 31 - (header % 31);

          s.status = BUSY_STATE;
          putShortMSB(s, header);

          /* Save the adler32 of the preset dictionary: */
          if (s.strstart !== 0) {
            putShortMSB(s, strm.adler >>> 16);
            putShortMSB(s, strm.adler & 0xffff);
          }
          strm.adler = 1; // adler32(0L, Z_NULL, 0);
        }
      }

    //#ifdef GZIP
      if (s.status === EXTRA_STATE) {
        if (s.gzhead.extra/* != Z_NULL*/) {
          beg = s.pending;  /* start of bytes to update crc */

          while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {
            if (s.pending === s.pending_buf_size) {
              if (s.gzhead.hcrc && s.pending > beg) {
                strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
              }
              flush_pending(strm);
              beg = s.pending;
              if (s.pending === s.pending_buf_size) {
                break;
              }
            }
            put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);
            s.gzindex++;
          }
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          if (s.gzindex === s.gzhead.extra.length) {
            s.gzindex = 0;
            s.status = NAME_STATE;
          }
        }
        else {
          s.status = NAME_STATE;
        }
      }
      if (s.status === NAME_STATE) {
        if (s.gzhead.name/* != Z_NULL*/) {
          beg = s.pending;  /* start of bytes to update crc */
          //int val;

          do {
            if (s.pending === s.pending_buf_size) {
              if (s.gzhead.hcrc && s.pending > beg) {
                strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
              }
              flush_pending(strm);
              beg = s.pending;
              if (s.pending === s.pending_buf_size) {
                val = 1;
                break;
              }
            }
            // JS specific: little magic to add zero terminator to end of string
            if (s.gzindex < s.gzhead.name.length) {
              val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
            } else {
              val = 0;
            }
            put_byte(s, val);
          } while (val !== 0);

          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          if (val === 0) {
            s.gzindex = 0;
            s.status = COMMENT_STATE;
          }
        }
        else {
          s.status = COMMENT_STATE;
        }
      }
      if (s.status === COMMENT_STATE) {
        if (s.gzhead.comment/* != Z_NULL*/) {
          beg = s.pending;  /* start of bytes to update crc */
          //int val;

          do {
            if (s.pending === s.pending_buf_size) {
              if (s.gzhead.hcrc && s.pending > beg) {
                strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
              }
              flush_pending(strm);
              beg = s.pending;
              if (s.pending === s.pending_buf_size) {
                val = 1;
                break;
              }
            }
            // JS specific: little magic to add zero terminator to end of string
            if (s.gzindex < s.gzhead.comment.length) {
              val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
            } else {
              val = 0;
            }
            put_byte(s, val);
          } while (val !== 0);

          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          if (val === 0) {
            s.status = HCRC_STATE;
          }
        }
        else {
          s.status = HCRC_STATE;
        }
      }
      if (s.status === HCRC_STATE) {
        if (s.gzhead.hcrc) {
          if (s.pending + 2 > s.pending_buf_size) {
            flush_pending(strm);
          }
          if (s.pending + 2 <= s.pending_buf_size) {
            put_byte(s, strm.adler & 0xff);
            put_byte(s, (strm.adler >> 8) & 0xff);
            strm.adler = 0; //crc32(0L, Z_NULL, 0);
            s.status = BUSY_STATE;
          }
        }
        else {
          s.status = BUSY_STATE;
        }
      }
    //#endif

      /* Flush as much pending output as possible */
      if (s.pending !== 0) {
        flush_pending(strm);
        if (strm.avail_out === 0) {
          /* Since avail_out is 0, deflate will be called again with
           * more output space, but possibly with both pending and
           * avail_in equal to zero. There won't be anything to do,
           * but this is not an error situation so make sure we
           * return OK instead of BUF_ERROR at next call of deflate:
           */
          s.last_flush = -1;
          return Z_OK$2;
        }

        /* Make sure there is something to do and avoid duplicate consecutive
         * flushes. For repeated and useless calls with Z_FINISH, we keep
         * returning Z_STREAM_END instead of Z_BUF_ERROR.
         */
      } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&
        flush !== Z_FINISH$2) {
        return err(strm, Z_BUF_ERROR$1);
      }

      /* User must not provide more input after the first FINISH: */
      if (s.status === FINISH_STATE && strm.avail_in !== 0) {
        return err(strm, Z_BUF_ERROR$1);
      }

      /* Start a new block or continue the current one.
       */
      if (strm.avail_in !== 0 || s.lookahead !== 0 ||
        (flush !== Z_NO_FLUSH$1 && s.status !== FINISH_STATE)) {
        var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :
          (s.strategy === Z_RLE ? deflate_rle(s, flush) :
            configuration_table[s.level].func(s, flush));

        if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
          s.status = FINISH_STATE;
        }
        if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
          if (strm.avail_out === 0) {
            s.last_flush = -1;
            /* avoid BUF_ERROR next call, see above */
          }
          return Z_OK$2;
          /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
           * of deflate should use the same flush parameter to make sure
           * that the flush is complete. So we don't have to output an
           * empty block here, this will be done at next call. This also
           * ensures that for a very small output buffer, we emit at most
           * one empty block.
           */
        }
        if (bstate === BS_BLOCK_DONE) {
          if (flush === Z_PARTIAL_FLUSH) {
            trees._tr_align(s);
          }
          else if (flush !== Z_BLOCK$1) { /* FULL_FLUSH or SYNC_FLUSH */

            trees._tr_stored_block(s, 0, 0, false);
            /* For a full flush, this empty block will be recognized
             * as a special marker by inflate_sync().
             */
            if (flush === Z_FULL_FLUSH) {
              /*** CLEAR_HASH(s); ***/             /* forget history */
              zero(s.head); // Fill with NIL (= 0);

              if (s.lookahead === 0) {
                s.strstart = 0;
                s.block_start = 0;
                s.insert = 0;
              }
            }
          }
          flush_pending(strm);
          if (strm.avail_out === 0) {
            s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */
            return Z_OK$2;
          }
        }
      }
      //Assert(strm->avail_out > 0, "bug2");
      //if (strm.avail_out <= 0) { throw new Error("bug2");}

      if (flush !== Z_FINISH$2) { return Z_OK$2; }
      if (s.wrap <= 0) { return Z_STREAM_END$2; }

      /* Write the trailer */
      if (s.wrap === 2) {
        put_byte(s, strm.adler & 0xff);
        put_byte(s, (strm.adler >> 8) & 0xff);
        put_byte(s, (strm.adler >> 16) & 0xff);
        put_byte(s, (strm.adler >> 24) & 0xff);
        put_byte(s, strm.total_in & 0xff);
        put_byte(s, (strm.total_in >> 8) & 0xff);
        put_byte(s, (strm.total_in >> 16) & 0xff);
        put_byte(s, (strm.total_in >> 24) & 0xff);
      }
      else
      {
        putShortMSB(s, strm.adler >>> 16);
        putShortMSB(s, strm.adler & 0xffff);
      }

      flush_pending(strm);
      /* If avail_out is zero, the application will call deflate again
       * to flush the rest.
       */
      if (s.wrap > 0) { s.wrap = -s.wrap; }
      /* write the trailer only once! */
      return s.pending !== 0 ? Z_OK$2 : Z_STREAM_END$2;
    }

    function deflateEnd(strm) {
      var status;

      if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
        return Z_STREAM_ERROR$1;
      }

      status = strm.state.status;
      if (status !== INIT_STATE &&
        status !== EXTRA_STATE &&
        status !== NAME_STATE &&
        status !== COMMENT_STATE &&
        status !== HCRC_STATE &&
        status !== BUSY_STATE &&
        status !== FINISH_STATE
      ) {
        return err(strm, Z_STREAM_ERROR$1);
      }

      strm.state = null;

      return status === BUSY_STATE ? err(strm, Z_DATA_ERROR$1) : Z_OK$2;
    }


    /* =========================================================================
     * Initializes the compression dictionary from the given byte
     * sequence without producing any compressed output.
     */
    function deflateSetDictionary(strm, dictionary) {
      var dictLength = dictionary.length;

      var s;
      var str, n;
      var wrap;
      var avail;
      var next;
      var input;
      var tmpDict;

      if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
        return Z_STREAM_ERROR$1;
      }

      s = strm.state;
      wrap = s.wrap;

      if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {
        return Z_STREAM_ERROR$1;
      }

      /* when using zlib wrappers, compute Adler-32 for provided dictionary */
      if (wrap === 1) {
        /* adler32(strm->adler, dictionary, dictLength); */
        strm.adler = adler32_1(strm.adler, dictionary, dictLength, 0);
      }

      s.wrap = 0;   /* avoid computing Adler-32 in read_buf */

      /* if dictionary would fill window, just replace the history */
      if (dictLength >= s.w_size) {
        if (wrap === 0) {            /* already empty otherwise */
          /*** CLEAR_HASH(s); ***/
          zero(s.head); // Fill with NIL (= 0);
          s.strstart = 0;
          s.block_start = 0;
          s.insert = 0;
        }
        /* use the tail */
        // dictionary = dictionary.slice(dictLength - s.w_size);
        tmpDict = new common$1.Buf8(s.w_size);
        common$1.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);
        dictionary = tmpDict;
        dictLength = s.w_size;
      }
      /* insert dictionary into window and hash */
      avail = strm.avail_in;
      next = strm.next_in;
      input = strm.input;
      strm.avail_in = dictLength;
      strm.next_in = 0;
      strm.input = dictionary;
      fill_window(s);
      while (s.lookahead >= MIN_MATCH) {
        str = s.strstart;
        n = s.lookahead - (MIN_MATCH - 1);
        do {
          /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

          s.prev[str & s.w_mask] = s.head[s.ins_h];

          s.head[s.ins_h] = str;
          str++;
        } while (--n);
        s.strstart = str;
        s.lookahead = MIN_MATCH - 1;
        fill_window(s);
      }
      s.strstart += s.lookahead;
      s.block_start = s.strstart;
      s.insert = s.lookahead;
      s.lookahead = 0;
      s.match_length = s.prev_length = MIN_MATCH - 1;
      s.match_available = 0;
      strm.next_in = next;
      strm.input = input;
      strm.avail_in = avail;
      s.wrap = wrap;
      return Z_OK$2;
    }


    var deflateInit_1 = deflateInit;
    var deflateInit2_1 = deflateInit2;
    var deflateReset_1 = deflateReset;
    var deflateResetKeep_1 = deflateResetKeep;
    var deflateSetHeader_1 = deflateSetHeader;
    var deflate_2$1 = deflate$2;
    var deflateEnd_1 = deflateEnd;
    var deflateSetDictionary_1 = deflateSetDictionary;
    var deflateInfo = 'pako deflate (from Nodeca project)';

    /* Not implemented
    exports.deflateBound = deflateBound;
    exports.deflateCopy = deflateCopy;
    exports.deflateParams = deflateParams;
    exports.deflatePending = deflatePending;
    exports.deflatePrime = deflatePrime;
    exports.deflateTune = deflateTune;
    */

    var deflate_1$1 = {
    	deflateInit: deflateInit_1,
    	deflateInit2: deflateInit2_1,
    	deflateReset: deflateReset_1,
    	deflateResetKeep: deflateResetKeep_1,
    	deflateSetHeader: deflateSetHeader_1,
    	deflate: deflate_2$1,
    	deflateEnd: deflateEnd_1,
    	deflateSetDictionary: deflateSetDictionary_1,
    	deflateInfo: deflateInfo
    };

    // Quick check if we can use fast array to bin string conversion
    //
    // - apply(Array) can fail on Android 2.2
    // - apply(Uint8Array) can fail on iOS 5.1 Safari
    //
    var STR_APPLY_OK = true;
    var STR_APPLY_UIA_OK = true;

    try { String.fromCharCode.apply(null, [ 0 ]); } catch (__) { STR_APPLY_OK = false; }
    try { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }


    // Table with utf8 lengths (calculated by first byte of sequence)
    // Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,
    // because max possible codepoint is 0x10ffff
    var _utf8len = new common$1.Buf8(256);
    for (var q = 0; q < 256; q++) {
      _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);
    }
    _utf8len[254] = _utf8len[254] = 1; // Invalid sequence start


    // convert string to array (typed, when possible)
    var string2buf = function (str) {
      var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;

      // count binary size
      for (m_pos = 0; m_pos < str_len; m_pos++) {
        c = str.charCodeAt(m_pos);
        if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
          c2 = str.charCodeAt(m_pos + 1);
          if ((c2 & 0xfc00) === 0xdc00) {
            c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
            m_pos++;
          }
        }
        buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;
      }

      // allocate buffer
      buf = new common$1.Buf8(buf_len);

      // convert
      for (i = 0, m_pos = 0; i < buf_len; m_pos++) {
        c = str.charCodeAt(m_pos);
        if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
          c2 = str.charCodeAt(m_pos + 1);
          if ((c2 & 0xfc00) === 0xdc00) {
            c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
            m_pos++;
          }
        }
        if (c < 0x80) {
          /* one byte */
          buf[i++] = c;
        } else if (c < 0x800) {
          /* two bytes */
          buf[i++] = 0xC0 | (c >>> 6);
          buf[i++] = 0x80 | (c & 0x3f);
        } else if (c < 0x10000) {
          /* three bytes */
          buf[i++] = 0xE0 | (c >>> 12);
          buf[i++] = 0x80 | (c >>> 6 & 0x3f);
          buf[i++] = 0x80 | (c & 0x3f);
        } else {
          /* four bytes */
          buf[i++] = 0xf0 | (c >>> 18);
          buf[i++] = 0x80 | (c >>> 12 & 0x3f);
          buf[i++] = 0x80 | (c >>> 6 & 0x3f);
          buf[i++] = 0x80 | (c & 0x3f);
        }
      }

      return buf;
    };

    // Helper (used in 2 places)
    function buf2binstring(buf, len) {
      // On Chrome, the arguments in a function call that are allowed is `65534`.
      // If the length of the buffer is smaller than that, we can use this optimization,
      // otherwise we will take a slower path.
      if (len < 65534) {
        if ((buf.subarray && STR_APPLY_UIA_OK) || (!buf.subarray && STR_APPLY_OK)) {
          return String.fromCharCode.apply(null, common$1.shrinkBuf(buf, len));
        }
      }

      var result = '';
      for (var i = 0; i < len; i++) {
        result += String.fromCharCode(buf[i]);
      }
      return result;
    }


    // Convert byte array to binary string
    var buf2binstring_1 = function (buf) {
      return buf2binstring(buf, buf.length);
    };


    // Convert binary string (typed, when possible)
    var binstring2buf = function (str) {
      var buf = new common$1.Buf8(str.length);
      for (var i = 0, len = buf.length; i < len; i++) {
        buf[i] = str.charCodeAt(i);
      }
      return buf;
    };


    // convert array to string
    var buf2string = function (buf, max) {
      var i, out, c, c_len;
      var len = max || buf.length;

      // Reserve max possible length (2 words per char)
      // NB: by unknown reasons, Array is significantly faster for
      //     String.fromCharCode.apply than Uint16Array.
      var utf16buf = new Array(len * 2);

      for (out = 0, i = 0; i < len;) {
        c = buf[i++];
        // quick process ascii
        if (c < 0x80) { utf16buf[out++] = c; continue; }

        c_len = _utf8len[c];
        // skip 5 & 6 byte codes
        if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }

        // apply mask on first byte
        c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;
        // join the rest
        while (c_len > 1 && i < len) {
          c = (c << 6) | (buf[i++] & 0x3f);
          c_len--;
        }

        // terminated by end of string?
        if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }

        if (c < 0x10000) {
          utf16buf[out++] = c;
        } else {
          c -= 0x10000;
          utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);
          utf16buf[out++] = 0xdc00 | (c & 0x3ff);
        }
      }

      return buf2binstring(utf16buf, out);
    };


    // Calculate max possible position in utf8 buffer,
    // that will not break sequence. If that's not possible
    // - (very small limits) return max size as is.
    //
    // buf[] - utf8 bytes array
    // max   - length limit (mandatory);
    var utf8border = function (buf, max) {
      var pos;

      max = max || buf.length;
      if (max > buf.length) { max = buf.length; }

      // go back from last position, until start of sequence found
      pos = max - 1;
      while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }

      // Very small and broken sequence,
      // return max, because we should return something anyway.
      if (pos < 0) { return max; }

      // If we came to start of buffer - that means buffer is too small,
      // return max too.
      if (pos === 0) { return max; }

      return (pos + _utf8len[buf[pos]] > max) ? pos : max;
    };

    var strings = {
    	string2buf: string2buf,
    	buf2binstring: buf2binstring_1,
    	binstring2buf: binstring2buf,
    	buf2string: buf2string,
    	utf8border: utf8border
    };

    // (C) 1995-2013 Jean-loup Gailly and Mark Adler
    // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
    //
    // This software is provided 'as-is', without any express or implied
    // warranty. In no event will the authors be held liable for any damages
    // arising from the use of this software.
    //
    // Permission is granted to anyone to use this software for any purpose,
    // including commercial applications, and to alter it and redistribute it
    // freely, subject to the following restrictions:
    //
    // 1. The origin of this software must not be misrepresented; you must not
    //   claim that you wrote the original software. If you use this software
    //   in a product, an acknowledgment in the product documentation would be
    //   appreciated but is not required.
    // 2. Altered source versions must be plainly marked as such, and must not be
    //   misrepresented as being the original software.
    // 3. This notice may not be removed or altered from any source distribution.

    function ZStream() {
      /* next input byte */
      this.input = null; // JS specific, because we have no pointers
      this.next_in = 0;
      /* number of bytes available at input */
      this.avail_in = 0;
      /* total number of input bytes read so far */
      this.total_in = 0;
      /* next output byte should be put there */
      this.output = null; // JS specific, because we have no pointers
      this.next_out = 0;
      /* remaining free space at output */
      this.avail_out = 0;
      /* total number of bytes output so far */
      this.total_out = 0;
      /* last error message, NULL if no error */
      this.msg = ''/*Z_NULL*/;
      /* not visible by applications */
      this.state = null;
      /* best guess about the data type: binary or text */
      this.data_type = 2/*Z_UNKNOWN*/;
      /* adler32 value of the uncompressed data */
      this.adler = 0;
    }

    var zstream = ZStream;

    var toString$1 = Object.prototype.toString;

    /* Public constants ==========================================================*/
    /* ===========================================================================*/

    var Z_NO_FLUSH      = 0;
    var Z_FINISH$1        = 4;

    var Z_OK$1            = 0;
    var Z_STREAM_END$1    = 1;
    var Z_SYNC_FLUSH    = 2;

    var Z_DEFAULT_COMPRESSION = -1;

    var Z_DEFAULT_STRATEGY    = 0;

    var Z_DEFLATED$1  = 8;

    /* ===========================================================================*/


    /**
     * class Deflate
     *
     * Generic JS-style wrapper for zlib calls. If you don't need
     * streaming behaviour - use more simple functions: [[deflate]],
     * [[deflateRaw]] and [[gzip]].
     **/

    /* internal
     * Deflate.chunks -> Array
     *
     * Chunks of output data, if [[Deflate#onData]] not overridden.
     **/

    /**
     * Deflate.result -> Uint8Array|Array
     *
     * Compressed result, generated by default [[Deflate#onData]]
     * and [[Deflate#onEnd]] handlers. Filled after you push last chunk
     * (call [[Deflate#push]] with `Z_FINISH` / `true` param)  or if you
     * push a chunk with explicit flush (call [[Deflate#push]] with
     * `Z_SYNC_FLUSH` param).
     **/

    /**
     * Deflate.err -> Number
     *
     * Error code after deflate finished. 0 (Z_OK) on success.
     * You will not need it in real life, because deflate errors
     * are possible only on wrong options or bad `onData` / `onEnd`
     * custom handlers.
     **/

    /**
     * Deflate.msg -> String
     *
     * Error message, if [[Deflate.err]] != 0
     **/


    /**
     * new Deflate(options)
     * - options (Object): zlib deflate options.
     *
     * Creates new deflator instance with specified params. Throws exception
     * on bad params. Supported options:
     *
     * - `level`
     * - `windowBits`
     * - `memLevel`
     * - `strategy`
     * - `dictionary`
     *
     * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
     * for more information on these.
     *
     * Additional options, for internal needs:
     *
     * - `chunkSize` - size of generated data chunks (16K by default)
     * - `raw` (Boolean) - do raw deflate
     * - `gzip` (Boolean) - create gzip wrapper
     * - `to` (String) - if equal to 'string', then result will be "binary string"
     *    (each char code [0..255])
     * - `header` (Object) - custom header for gzip
     *   - `text` (Boolean) - true if compressed data believed to be text
     *   - `time` (Number) - modification time, unix timestamp
     *   - `os` (Number) - operation system code
     *   - `extra` (Array) - array of bytes with extra data (max 65536)
     *   - `name` (String) - file name (binary string)
     *   - `comment` (String) - comment (binary string)
     *   - `hcrc` (Boolean) - true if header crc should be added
     *
     * ##### Example:
     *
     * ```javascript
     * var pako = require('pako')
     *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
     *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
     *
     * var deflate = new pako.Deflate({ level: 3});
     *
     * deflate.push(chunk1, false);
     * deflate.push(chunk2, true);  // true -> last chunk
     *
     * if (deflate.err) { throw new Error(deflate.err); }
     *
     * console.log(deflate.result);
     * ```
     **/
    function Deflate(options) {
      if (!(this instanceof Deflate)) return new Deflate(options);

      this.options = common$1.assign({
        level: Z_DEFAULT_COMPRESSION,
        method: Z_DEFLATED$1,
        chunkSize: 16384,
        windowBits: 15,
        memLevel: 8,
        strategy: Z_DEFAULT_STRATEGY,
        to: ''
      }, options || {});

      var opt = this.options;

      if (opt.raw && (opt.windowBits > 0)) {
        opt.windowBits = -opt.windowBits;
      }

      else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {
        opt.windowBits += 16;
      }

      this.err    = 0;      // error code, if happens (0 = Z_OK)
      this.msg    = '';     // error message
      this.ended  = false;  // used to avoid multiple onEnd() calls
      this.chunks = [];     // chunks of compressed data

      this.strm = new zstream();
      this.strm.avail_out = 0;

      var status = deflate_1$1.deflateInit2(
        this.strm,
        opt.level,
        opt.method,
        opt.windowBits,
        opt.memLevel,
        opt.strategy
      );

      if (status !== Z_OK$1) {
        throw new Error(messages[status]);
      }

      if (opt.header) {
        deflate_1$1.deflateSetHeader(this.strm, opt.header);
      }

      if (opt.dictionary) {
        var dict;
        // Convert data if needed
        if (typeof opt.dictionary === 'string') {
          // If we need to compress text, change encoding to utf8.
          dict = strings.string2buf(opt.dictionary);
        } else if (toString$1.call(opt.dictionary) === '[object ArrayBuffer]') {
          dict = new Uint8Array(opt.dictionary);
        } else {
          dict = opt.dictionary;
        }

        status = deflate_1$1.deflateSetDictionary(this.strm, dict);

        if (status !== Z_OK$1) {
          throw new Error(messages[status]);
        }

        this._dict_set = true;
      }
    }

    /**
     * Deflate#push(data[, mode]) -> Boolean
     * - data (Uint8Array|Array|ArrayBuffer|String): input data. Strings will be
     *   converted to utf8 byte sequence.
     * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
     *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.
     *
     * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with
     * new compressed chunks. Returns `true` on success. The last data block must have
     * mode Z_FINISH (or `true`). That will flush internal pending buffers and call
     * [[Deflate#onEnd]]. For interim explicit flushes (without ending the stream) you
     * can use mode Z_SYNC_FLUSH, keeping the compression context.
     *
     * On fail call [[Deflate#onEnd]] with error code and return false.
     *
     * We strongly recommend to use `Uint8Array` on input for best speed (output
     * array format is detected automatically). Also, don't skip last param and always
     * use the same type in your code (boolean or number). That will improve JS speed.
     *
     * For regular `Array`-s make sure all elements are [0..255].
     *
     * ##### Example
     *
     * ```javascript
     * push(chunk, false); // push one of data chunks
     * ...
     * push(chunk, true);  // push last chunk
     * ```
     **/
    Deflate.prototype.push = function (data, mode) {
      var strm = this.strm;
      var chunkSize = this.options.chunkSize;
      var status, _mode;

      if (this.ended) { return false; }

      _mode = (mode === ~~mode) ? mode : ((mode === true) ? Z_FINISH$1 : Z_NO_FLUSH);

      // Convert data if needed
      if (typeof data === 'string') {
        // If we need to compress text, change encoding to utf8.
        strm.input = strings.string2buf(data);
      } else if (toString$1.call(data) === '[object ArrayBuffer]') {
        strm.input = new Uint8Array(data);
      } else {
        strm.input = data;
      }

      strm.next_in = 0;
      strm.avail_in = strm.input.length;

      do {
        if (strm.avail_out === 0) {
          strm.output = new common$1.Buf8(chunkSize);
          strm.next_out = 0;
          strm.avail_out = chunkSize;
        }
        status = deflate_1$1.deflate(strm, _mode);    /* no bad return value */

        if (status !== Z_STREAM_END$1 && status !== Z_OK$1) {
          this.onEnd(status);
          this.ended = true;
          return false;
        }
        if (strm.avail_out === 0 || (strm.avail_in === 0 && (_mode === Z_FINISH$1 || _mode === Z_SYNC_FLUSH))) {
          if (this.options.to === 'string') {
            this.onData(strings.buf2binstring(common$1.shrinkBuf(strm.output, strm.next_out)));
          } else {
            this.onData(common$1.shrinkBuf(strm.output, strm.next_out));
          }
        }
      } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END$1);

      // Finalize on the last chunk.
      if (_mode === Z_FINISH$1) {
        status = deflate_1$1.deflateEnd(this.strm);
        this.onEnd(status);
        this.ended = true;
        return status === Z_OK$1;
      }

      // callback interim results if Z_SYNC_FLUSH.
      if (_mode === Z_SYNC_FLUSH) {
        this.onEnd(Z_OK$1);
        strm.avail_out = 0;
        return true;
      }

      return true;
    };


    /**
     * Deflate#onData(chunk) -> Void
     * - chunk (Uint8Array|Array|String): output data. Type of array depends
     *   on js engine support. When string output requested, each chunk
     *   will be string.
     *
     * By default, stores data blocks in `chunks[]` property and glue
     * those in `onEnd`. Override this handler, if you need another behaviour.
     **/
    Deflate.prototype.onData = function (chunk) {
      this.chunks.push(chunk);
    };


    /**
     * Deflate#onEnd(status) -> Void
     * - status (Number): deflate status. 0 (Z_OK) on success,
     *   other if not.
     *
     * Called once after you tell deflate that the input stream is
     * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)
     * or if an error happened. By default - join collected chunks,
     * free memory and fill `results` / `err` properties.
     **/
    Deflate.prototype.onEnd = function (status) {
      // On success - join
      if (status === Z_OK$1) {
        if (this.options.to === 'string') {
          this.result = this.chunks.join('');
        } else {
          this.result = common$1.flattenChunks(this.chunks);
        }
      }
      this.chunks = [];
      this.err = status;
      this.msg = this.strm.msg;
    };


    /**
     * deflate(data[, options]) -> Uint8Array|Array|String
     * - data (Uint8Array|Array|String): input data to compress.
     * - options (Object): zlib deflate options.
     *
     * Compress `data` with deflate algorithm and `options`.
     *
     * Supported options are:
     *
     * - level
     * - windowBits
     * - memLevel
     * - strategy
     * - dictionary
     *
     * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
     * for more information on these.
     *
     * Sugar (options):
     *
     * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
     *   negative windowBits implicitly.
     * - `to` (String) - if equal to 'string', then result will be "binary string"
     *    (each char code [0..255])
     *
     * ##### Example:
     *
     * ```javascript
     * var pako = require('pako')
     *   , data = Uint8Array([1,2,3,4,5,6,7,8,9]);
     *
     * console.log(pako.deflate(data));
     * ```
     **/
    function deflate$1(input, options) {
      var deflator = new Deflate(options);

      deflator.push(input, true);

      // That will never happens, if you don't cheat with options :)
      if (deflator.err) { throw deflator.msg || messages[deflator.err]; }

      return deflator.result;
    }


    /**
     * deflateRaw(data[, options]) -> Uint8Array|Array|String
     * - data (Uint8Array|Array|String): input data to compress.
     * - options (Object): zlib deflate options.
     *
     * The same as [[deflate]], but creates raw data, without wrapper
     * (header and adler32 crc).
     **/
    function deflateRaw(input, options) {
      options = options || {};
      options.raw = true;
      return deflate$1(input, options);
    }


    /**
     * gzip(data[, options]) -> Uint8Array|Array|String
     * - data (Uint8Array|Array|String): input data to compress.
     * - options (Object): zlib deflate options.
     *
     * The same as [[deflate]], but create gzip wrapper instead of
     * deflate one.
     **/
    function gzip(input, options) {
      options = options || {};
      options.gzip = true;
      return deflate$1(input, options);
    }


    var Deflate_1 = Deflate;
    var deflate_2 = deflate$1;
    var deflateRaw_1 = deflateRaw;
    var gzip_1 = gzip;

    var deflate_1 = {
    	Deflate: Deflate_1,
    	deflate: deflate_2,
    	deflateRaw: deflateRaw_1,
    	gzip: gzip_1
    };

    // (C) 1995-2013 Jean-loup Gailly and Mark Adler
    // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
    //
    // This software is provided 'as-is', without any express or implied
    // warranty. In no event will the authors be held liable for any damages
    // arising from the use of this software.
    //
    // Permission is granted to anyone to use this software for any purpose,
    // including commercial applications, and to alter it and redistribute it
    // freely, subject to the following restrictions:
    //
    // 1. The origin of this software must not be misrepresented; you must not
    //   claim that you wrote the original software. If you use this software
    //   in a product, an acknowledgment in the product documentation would be
    //   appreciated but is not required.
    // 2. Altered source versions must be plainly marked as such, and must not be
    //   misrepresented as being the original software.
    // 3. This notice may not be removed or altered from any source distribution.

    // See state defs from inflate.js
    var BAD$1 = 30;       /* got a data error -- remain here until reset */
    var TYPE$1 = 12;      /* i: waiting for type bits, including last-flag bit */

    /*
       Decode literal, length, and distance codes and write out the resulting
       literal and match bytes until either not enough input or output is
       available, an end-of-block is encountered, or a data error is encountered.
       When large enough input and output buffers are supplied to inflate(), for
       example, a 16K input buffer and a 64K output buffer, more than 95% of the
       inflate execution time is spent in this routine.

       Entry assumptions:

            state.mode === LEN
            strm.avail_in >= 6
            strm.avail_out >= 258
            start >= strm.avail_out
            state.bits < 8

       On return, state.mode is one of:

            LEN -- ran out of enough output space or enough available input
            TYPE -- reached end of block code, inflate() to interpret next block
            BAD -- error in block data

       Notes:

        - The maximum input bits used by a length/distance pair is 15 bits for the
          length code, 5 bits for the length extra, 15 bits for the distance code,
          and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
          Therefore if strm.avail_in >= 6, then there is enough input to avoid
          checking for available input while decoding.

        - The maximum bytes that a single length/distance pair can output is 258
          bytes, which is the maximum length that can be coded.  inflate_fast()
          requires strm.avail_out >= 258 for each loop to avoid checking for
          output space.
     */
    var inffast = function inflate_fast(strm, start) {
      var state;
      var _in;                    /* local strm.input */
      var last;                   /* have enough input while in < last */
      var _out;                   /* local strm.output */
      var beg;                    /* inflate()'s initial strm.output */
      var end;                    /* while out < end, enough space available */
    //#ifdef INFLATE_STRICT
      var dmax;                   /* maximum distance from zlib header */
    //#endif
      var wsize;                  /* window size or zero if not using window */
      var whave;                  /* valid bytes in the window */
      var wnext;                  /* window write index */
      // Use `s_window` instead `window`, avoid conflict with instrumentation tools
      var s_window;               /* allocated sliding window, if wsize != 0 */
      var hold;                   /* local strm.hold */
      var bits;                   /* local strm.bits */
      var lcode;                  /* local strm.lencode */
      var dcode;                  /* local strm.distcode */
      var lmask;                  /* mask for first level of length codes */
      var dmask;                  /* mask for first level of distance codes */
      var here;                   /* retrieved table entry */
      var op;                     /* code bits, operation, extra bits, or */
                                  /*  window position, window bytes to copy */
      var len;                    /* match length, unused bytes */
      var dist;                   /* match distance */
      var from;                   /* where to copy match from */
      var from_source;


      var input, output; // JS specific, because we have no pointers

      /* copy state to local variables */
      state = strm.state;
      //here = state.here;
      _in = strm.next_in;
      input = strm.input;
      last = _in + (strm.avail_in - 5);
      _out = strm.next_out;
      output = strm.output;
      beg = _out - (start - strm.avail_out);
      end = _out + (strm.avail_out - 257);
    //#ifdef INFLATE_STRICT
      dmax = state.dmax;
    //#endif
      wsize = state.wsize;
      whave = state.whave;
      wnext = state.wnext;
      s_window = state.window;
      hold = state.hold;
      bits = state.bits;
      lcode = state.lencode;
      dcode = state.distcode;
      lmask = (1 << state.lenbits) - 1;
      dmask = (1 << state.distbits) - 1;


      /* decode literals and length/distances until end-of-block or not enough
         input data or output space */

      top:
      do {
        if (bits < 15) {
          hold += input[_in++] << bits;
          bits += 8;
          hold += input[_in++] << bits;
          bits += 8;
        }

        here = lcode[hold & lmask];

        dolen:
        for (;;) { // Goto emulation
          op = here >>> 24/*here.bits*/;
          hold >>>= op;
          bits -= op;
          op = (here >>> 16) & 0xff/*here.op*/;
          if (op === 0) {                          /* literal */
            //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
            //        "inflate:         literal '%c'\n" :
            //        "inflate:         literal 0x%02x\n", here.val));
            output[_out++] = here & 0xffff/*here.val*/;
          }
          else if (op & 16) {                     /* length base */
            len = here & 0xffff/*here.val*/;
            op &= 15;                           /* number of extra bits */
            if (op) {
              if (bits < op) {
                hold += input[_in++] << bits;
                bits += 8;
              }
              len += hold & ((1 << op) - 1);
              hold >>>= op;
              bits -= op;
            }
            //Tracevv((stderr, "inflate:         length %u\n", len));
            if (bits < 15) {
              hold += input[_in++] << bits;
              bits += 8;
              hold += input[_in++] << bits;
              bits += 8;
            }
            here = dcode[hold & dmask];

            dodist:
            for (;;) { // goto emulation
              op = here >>> 24/*here.bits*/;
              hold >>>= op;
              bits -= op;
              op = (here >>> 16) & 0xff/*here.op*/;

              if (op & 16) {                      /* distance base */
                dist = here & 0xffff/*here.val*/;
                op &= 15;                       /* number of extra bits */
                if (bits < op) {
                  hold += input[_in++] << bits;
                  bits += 8;
                  if (bits < op) {
                    hold += input[_in++] << bits;
                    bits += 8;
                  }
                }
                dist += hold & ((1 << op) - 1);
    //#ifdef INFLATE_STRICT
                if (dist > dmax) {
                  strm.msg = 'invalid distance too far back';
                  state.mode = BAD$1;
                  break top;
                }
    //#endif
                hold >>>= op;
                bits -= op;
                //Tracevv((stderr, "inflate:         distance %u\n", dist));
                op = _out - beg;                /* max distance in output */
                if (dist > op) {                /* see if copy from window */
                  op = dist - op;               /* distance back in window */
                  if (op > whave) {
                    if (state.sane) {
                      strm.msg = 'invalid distance too far back';
                      state.mode = BAD$1;
                      break top;
                    }

    // (!) This block is disabled in zlib defaults,
    // don't enable it for binary compatibility
    //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
    //                if (len <= op - whave) {
    //                  do {
    //                    output[_out++] = 0;
    //                  } while (--len);
    //                  continue top;
    //                }
    //                len -= op - whave;
    //                do {
    //                  output[_out++] = 0;
    //                } while (--op > whave);
    //                if (op === 0) {
    //                  from = _out - dist;
    //                  do {
    //                    output[_out++] = output[from++];
    //                  } while (--len);
    //                  continue top;
    //                }
    //#endif
                  }
                  from = 0; // window index
                  from_source = s_window;
                  if (wnext === 0) {           /* very common case */
                    from += wsize - op;
                    if (op < len) {         /* some from window */
                      len -= op;
                      do {
                        output[_out++] = s_window[from++];
                      } while (--op);
                      from = _out - dist;  /* rest from output */
                      from_source = output;
                    }
                  }
                  else if (wnext < op) {      /* wrap around window */
                    from += wsize + wnext - op;
                    op -= wnext;
                    if (op < len) {         /* some from end of window */
                      len -= op;
                      do {
                        output[_out++] = s_window[from++];
                      } while (--op);
                      from = 0;
                      if (wnext < len) {  /* some from start of window */
                        op = wnext;
                        len -= op;
                        do {
                          output[_out++] = s_window[from++];
                        } while (--op);
                        from = _out - dist;      /* rest from output */
                        from_source = output;
                      }
                    }
                  }
                  else {                      /* contiguous in window */
                    from += wnext - op;
                    if (op < len) {         /* some from window */
                      len -= op;
                      do {
                        output[_out++] = s_window[from++];
                      } while (--op);
                      from = _out - dist;  /* rest from output */
                      from_source = output;
                    }
                  }
                  while (len > 2) {
                    output[_out++] = from_source[from++];
                    output[_out++] = from_source[from++];
                    output[_out++] = from_source[from++];
                    len -= 3;
                  }
                  if (len) {
                    output[_out++] = from_source[from++];
                    if (len > 1) {
                      output[_out++] = from_source[from++];
                    }
                  }
                }
                else {
                  from = _out - dist;          /* copy direct from output */
                  do {                        /* minimum length is three */
                    output[_out++] = output[from++];
                    output[_out++] = output[from++];
                    output[_out++] = output[from++];
                    len -= 3;
                  } while (len > 2);
                  if (len) {
                    output[_out++] = output[from++];
                    if (len > 1) {
                      output[_out++] = output[from++];
                    }
                  }
                }
              }
              else if ((op & 64) === 0) {          /* 2nd level distance code */
                here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
                continue dodist;
              }
              else {
                strm.msg = 'invalid distance code';
                state.mode = BAD$1;
                break top;
              }

              break; // need to emulate goto via "continue"
            }
          }
          else if ((op & 64) === 0) {              /* 2nd level length code */
            here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
            continue dolen;
          }
          else if (op & 32) {                     /* end-of-block */
            //Tracevv((stderr, "inflate:         end of block\n"));
            state.mode = TYPE$1;
            break top;
          }
          else {
            strm.msg = 'invalid literal/length code';
            state.mode = BAD$1;
            break top;
          }

          break; // need to emulate goto via "continue"
        }
      } while (_in < last && _out < end);

      /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
      len = bits >> 3;
      _in -= len;
      bits -= len << 3;
      hold &= (1 << bits) - 1;

      /* update state and return */
      strm.next_in = _in;
      strm.next_out = _out;
      strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
      strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
      state.hold = hold;
      state.bits = bits;
      return;
    };

    // (C) 1995-2013 Jean-loup Gailly and Mark Adler
    // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
    //
    // This software is provided 'as-is', without any express or implied
    // warranty. In no event will the authors be held liable for any damages
    // arising from the use of this software.
    //
    // Permission is granted to anyone to use this software for any purpose,
    // including commercial applications, and to alter it and redistribute it
    // freely, subject to the following restrictions:
    //
    // 1. The origin of this software must not be misrepresented; you must not
    //   claim that you wrote the original software. If you use this software
    //   in a product, an acknowledgment in the product documentation would be
    //   appreciated but is not required.
    // 2. Altered source versions must be plainly marked as such, and must not be
    //   misrepresented as being the original software.
    // 3. This notice may not be removed or altered from any source distribution.



    var MAXBITS = 15;
    var ENOUGH_LENS$1 = 852;
    var ENOUGH_DISTS$1 = 592;
    //var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

    var CODES$1 = 0;
    var LENS$1 = 1;
    var DISTS$1 = 2;

    var lbase = [ /* Length codes 257..285 base */
      3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
      35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
    ];

    var lext = [ /* Length codes 257..285 extra */
      16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
      19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
    ];

    var dbase = [ /* Distance codes 0..29 base */
      1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
      257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
      8193, 12289, 16385, 24577, 0, 0
    ];

    var dext = [ /* Distance codes 0..29 extra */
      16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
      23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
      28, 28, 29, 29, 64, 64
    ];

    var inftrees = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)
    {
      var bits = opts.bits;
          //here = opts.here; /* table entry for duplication */

      var len = 0;               /* a code's length in bits */
      var sym = 0;               /* index of code symbols */
      var min = 0, max = 0;          /* minimum and maximum code lengths */
      var root = 0;              /* number of index bits for root table */
      var curr = 0;              /* number of index bits for current table */
      var drop = 0;              /* code bits to drop for sub-table */
      var left = 0;                   /* number of prefix codes available */
      var used = 0;              /* code entries in table used */
      var huff = 0;              /* Huffman code */
      var incr;              /* for incrementing code, index */
      var fill;              /* index for replicating entries */
      var low;               /* low bits for current root entry */
      var mask;              /* mask for low root bits */
      var next;             /* next available space in table */
      var base = null;     /* base value table to use */
      var base_index = 0;
    //  var shoextra;    /* extra bits table to use */
      var end;                    /* use base and extra for symbol > end */
      var count = new common$1.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
      var offs = new common$1.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
      var extra = null;
      var extra_index = 0;

      var here_bits, here_op, here_val;

      /*
       Process a set of code lengths to create a canonical Huffman code.  The
       code lengths are lens[0..codes-1].  Each length corresponds to the
       symbols 0..codes-1.  The Huffman code is generated by first sorting the
       symbols by length from short to long, and retaining the symbol order
       for codes with equal lengths.  Then the code starts with all zero bits
       for the first code of the shortest length, and the codes are integer
       increments for the same length, and zeros are appended as the length
       increases.  For the deflate format, these bits are stored backwards
       from their more natural integer increment ordering, and so when the
       decoding tables are built in the large loop below, the integer codes
       are incremented backwards.

       This routine assumes, but does not check, that all of the entries in
       lens[] are in the range 0..MAXBITS.  The caller must assure this.
       1..MAXBITS is interpreted as that code length.  zero means that that
       symbol does not occur in this code.

       The codes are sorted by computing a count of codes for each length,
       creating from that a table of starting indices for each length in the
       sorted table, and then entering the symbols in order in the sorted
       table.  The sorted table is work[], with that space being provided by
       the caller.

       The length counts are used for other purposes as well, i.e. finding
       the minimum and maximum length codes, determining if there are any
       codes at all, checking for a valid set of lengths, and looking ahead
       at length counts to determine sub-table sizes when building the
       decoding tables.
       */

      /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
      for (len = 0; len <= MAXBITS; len++) {
        count[len] = 0;
      }
      for (sym = 0; sym < codes; sym++) {
        count[lens[lens_index + sym]]++;
      }

      /* bound code lengths, force root to be within code lengths */
      root = bits;
      for (max = MAXBITS; max >= 1; max--) {
        if (count[max] !== 0) { break; }
      }
      if (root > max) {
        root = max;
      }
      if (max === 0) {                     /* no symbols to code at all */
        //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
        //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
        //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
        table[table_index++] = (1 << 24) | (64 << 16) | 0;


        //table.op[opts.table_index] = 64;
        //table.bits[opts.table_index] = 1;
        //table.val[opts.table_index++] = 0;
        table[table_index++] = (1 << 24) | (64 << 16) | 0;

        opts.bits = 1;
        return 0;     /* no symbols, but wait for decoding to report error */
      }
      for (min = 1; min < max; min++) {
        if (count[min] !== 0) { break; }
      }
      if (root < min) {
        root = min;
      }

      /* check for an over-subscribed or incomplete set of lengths */
      left = 1;
      for (len = 1; len <= MAXBITS; len++) {
        left <<= 1;
        left -= count[len];
        if (left < 0) {
          return -1;
        }        /* over-subscribed */
      }
      if (left > 0 && (type === CODES$1 || max !== 1)) {
        return -1;                      /* incomplete set */
      }

      /* generate offsets into symbol table for each length for sorting */
      offs[1] = 0;
      for (len = 1; len < MAXBITS; len++) {
        offs[len + 1] = offs[len] + count[len];
      }

      /* sort symbols by length, by symbol order within each length */
      for (sym = 0; sym < codes; sym++) {
        if (lens[lens_index + sym] !== 0) {
          work[offs[lens[lens_index + sym]]++] = sym;
        }
      }

      /*
       Create and fill in decoding tables.  In this loop, the table being
       filled is at next and has curr index bits.  The code being used is huff
       with length len.  That code is converted to an index by dropping drop
       bits off of the bottom.  For codes where len is less than drop + curr,
       those top drop + curr - len bits are incremented through all values to
       fill the table with replicated entries.

       root is the number of index bits for the root table.  When len exceeds
       root, sub-tables are created pointed to by the root entry with an index
       of the low root bits of huff.  This is saved in low to check for when a
       new sub-table should be started.  drop is zero when the root table is
       being filled, and drop is root when sub-tables are being filled.

       When a new sub-table is needed, it is necessary to look ahead in the
       code lengths to determine what size sub-table is needed.  The length
       counts are used for this, and so count[] is decremented as codes are
       entered in the tables.

       used keeps track of how many table entries have been allocated from the
       provided *table space.  It is checked for LENS and DIST tables against
       the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
       the initial root table size constants.  See the comments in inftrees.h
       for more information.

       sym increments through all symbols, and the loop terminates when
       all codes of length max, i.e. all codes, have been processed.  This
       routine permits incomplete codes, so another loop after this one fills
       in the rest of the decoding tables with invalid code markers.
       */

      /* set up for code type */
      // poor man optimization - use if-else instead of switch,
      // to avoid deopts in old v8
      if (type === CODES$1) {
        base = extra = work;    /* dummy value--not used */
        end = 19;

      } else if (type === LENS$1) {
        base = lbase;
        base_index -= 257;
        extra = lext;
        extra_index -= 257;
        end = 256;

      } else {                    /* DISTS */
        base = dbase;
        extra = dext;
        end = -1;
      }

      /* initialize opts for loop */
      huff = 0;                   /* starting code */
      sym = 0;                    /* starting code symbol */
      len = min;                  /* starting code length */
      next = table_index;              /* current table to fill in */
      curr = root;                /* current table index bits */
      drop = 0;                   /* current bits to drop from code for index */
      low = -1;                   /* trigger new sub-table when len > root */
      used = 1 << root;          /* use root table entries */
      mask = used - 1;            /* mask for comparing low */

      /* check available table space */
      if ((type === LENS$1 && used > ENOUGH_LENS$1) ||
        (type === DISTS$1 && used > ENOUGH_DISTS$1)) {
        return 1;
      }

      /* process all codes and make table entries */
      for (;;) {
        /* create table entry */
        here_bits = len - drop;
        if (work[sym] < end) {
          here_op = 0;
          here_val = work[sym];
        }
        else if (work[sym] > end) {
          here_op = extra[extra_index + work[sym]];
          here_val = base[base_index + work[sym]];
        }
        else {
          here_op = 32 + 64;         /* end of block */
          here_val = 0;
        }

        /* replicate for those indices with low len bits equal to huff */
        incr = 1 << (len - drop);
        fill = 1 << curr;
        min = fill;                 /* save offset to next table */
        do {
          fill -= incr;
          table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;
        } while (fill !== 0);

        /* backwards increment the len-bit code huff */
        incr = 1 << (len - 1);
        while (huff & incr) {
          incr >>= 1;
        }
        if (incr !== 0) {
          huff &= incr - 1;
          huff += incr;
        } else {
          huff = 0;
        }

        /* go to next symbol, update count, len */
        sym++;
        if (--count[len] === 0) {
          if (len === max) { break; }
          len = lens[lens_index + work[sym]];
        }

        /* create new sub-table if needed */
        if (len > root && (huff & mask) !== low) {
          /* if first time, transition to sub-tables */
          if (drop === 0) {
            drop = root;
          }

          /* increment past last table */
          next += min;            /* here min is 1 << curr */

          /* determine length of next table */
          curr = len - drop;
          left = 1 << curr;
          while (curr + drop < max) {
            left -= count[curr + drop];
            if (left <= 0) { break; }
            curr++;
            left <<= 1;
          }

          /* check for enough space */
          used += 1 << curr;
          if ((type === LENS$1 && used > ENOUGH_LENS$1) ||
            (type === DISTS$1 && used > ENOUGH_DISTS$1)) {
            return 1;
          }

          /* point entry in root table to sub-table */
          low = huff & mask;
          /*table.op[low] = curr;
          table.bits[low] = root;
          table.val[low] = next - opts.table_index;*/
          table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;
        }
      }

      /* fill in remaining table entry if code is incomplete (guaranteed to have
       at most one remaining entry, since if the code is incomplete, the
       maximum code length that was allowed to get this far is one bit) */
      if (huff !== 0) {
        //table.op[next + huff] = 64;            /* invalid code marker */
        //table.bits[next + huff] = len - drop;
        //table.val[next + huff] = 0;
        table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;
      }

      /* set return parameters */
      //opts.table_index += used;
      opts.bits = root;
      return 0;
    };

    // (C) 1995-2013 Jean-loup Gailly and Mark Adler
    // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
    //
    // This software is provided 'as-is', without any express or implied
    // warranty. In no event will the authors be held liable for any damages
    // arising from the use of this software.
    //
    // Permission is granted to anyone to use this software for any purpose,
    // including commercial applications, and to alter it and redistribute it
    // freely, subject to the following restrictions:
    //
    // 1. The origin of this software must not be misrepresented; you must not
    //   claim that you wrote the original software. If you use this software
    //   in a product, an acknowledgment in the product documentation would be
    //   appreciated but is not required.
    // 2. Altered source versions must be plainly marked as such, and must not be
    //   misrepresented as being the original software.
    // 3. This notice may not be removed or altered from any source distribution.







    var CODES = 0;
    var LENS = 1;
    var DISTS = 2;

    /* Public constants ==========================================================*/
    /* ===========================================================================*/


    /* Allowed flush values; see deflate() and inflate() below for details */
    //var Z_NO_FLUSH      = 0;
    //var Z_PARTIAL_FLUSH = 1;
    //var Z_SYNC_FLUSH    = 2;
    //var Z_FULL_FLUSH    = 3;
    var Z_FINISH        = 4;
    var Z_BLOCK         = 5;
    var Z_TREES         = 6;


    /* Return codes for the compression/decompression functions. Negative values
     * are errors, positive values are used for special but normal events.
     */
    var Z_OK            = 0;
    var Z_STREAM_END    = 1;
    var Z_NEED_DICT     = 2;
    //var Z_ERRNO         = -1;
    var Z_STREAM_ERROR  = -2;
    var Z_DATA_ERROR    = -3;
    var Z_MEM_ERROR     = -4;
    var Z_BUF_ERROR     = -5;
    //var Z_VERSION_ERROR = -6;

    /* The deflate compression method */
    var Z_DEFLATED  = 8;


    /* STATES ====================================================================*/
    /* ===========================================================================*/


    var    HEAD = 1;       /* i: waiting for magic header */
    var    FLAGS = 2;      /* i: waiting for method and flags (gzip) */
    var    TIME = 3;       /* i: waiting for modification time (gzip) */
    var    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */
    var    EXLEN = 5;      /* i: waiting for extra length (gzip) */
    var    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */
    var    NAME = 7;       /* i: waiting for end of file name (gzip) */
    var    COMMENT = 8;    /* i: waiting for end of comment (gzip) */
    var    HCRC = 9;       /* i: waiting for header crc (gzip) */
    var    DICTID = 10;    /* i: waiting for dictionary check value */
    var    DICT = 11;      /* waiting for inflateSetDictionary() call */
    var        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */
    var        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */
    var        STORED = 14;    /* i: waiting for stored size (length and complement) */
    var        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */
    var        COPY = 16;      /* i/o: waiting for input or output to copy stored block */
    var        TABLE = 17;     /* i: waiting for dynamic block table lengths */
    var        LENLENS = 18;   /* i: waiting for code length code lengths */
    var        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */
    var            LEN_ = 20;      /* i: same as LEN below, but only first time in */
    var            LEN = 21;       /* i: waiting for length/lit/eob code */
    var            LENEXT = 22;    /* i: waiting for length extra bits */
    var            DIST = 23;      /* i: waiting for distance code */
    var            DISTEXT = 24;   /* i: waiting for distance extra bits */
    var            MATCH = 25;     /* o: waiting for output space to copy string */
    var            LIT = 26;       /* o: waiting for output space to write literal */
    var    CHECK = 27;     /* i: waiting for 32-bit check value */
    var    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */
    var    DONE = 29;      /* finished check, done -- remain here until reset */
    var    BAD = 30;       /* got a data error -- remain here until reset */
    var    MEM = 31;       /* got an inflate() memory error -- remain here until reset */
    var    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */

    /* ===========================================================================*/



    var ENOUGH_LENS = 852;
    var ENOUGH_DISTS = 592;
    //var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);

    var MAX_WBITS = 15;
    /* 32K LZ77 window */
    var DEF_WBITS = MAX_WBITS;


    function zswap32(q) {
      return  (((q >>> 24) & 0xff) +
              ((q >>> 8) & 0xff00) +
              ((q & 0xff00) << 8) +
              ((q & 0xff) << 24));
    }


    function InflateState() {
      this.mode = 0;             /* current inflate mode */
      this.last = false;          /* true if processing last block */
      this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
      this.havedict = false;      /* true if dictionary provided */
      this.flags = 0;             /* gzip header method and flags (0 if zlib) */
      this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */
      this.check = 0;             /* protected copy of check value */
      this.total = 0;             /* protected copy of output count */
      // TODO: may be {}
      this.head = null;           /* where to save gzip header information */

      /* sliding window */
      this.wbits = 0;             /* log base 2 of requested window size */
      this.wsize = 0;             /* window size or zero if not using window */
      this.whave = 0;             /* valid bytes in the window */
      this.wnext = 0;             /* window write index */
      this.window = null;         /* allocated sliding window, if needed */

      /* bit accumulator */
      this.hold = 0;              /* input bit accumulator */
      this.bits = 0;              /* number of bits in "in" */

      /* for string and stored block copying */
      this.length = 0;            /* literal or length of data to copy */
      this.offset = 0;            /* distance back to copy string from */

      /* for table and code decoding */
      this.extra = 0;             /* extra bits needed */

      /* fixed and dynamic code tables */
      this.lencode = null;          /* starting table for length/literal codes */
      this.distcode = null;         /* starting table for distance codes */
      this.lenbits = 0;           /* index bits for lencode */
      this.distbits = 0;          /* index bits for distcode */

      /* dynamic table building */
      this.ncode = 0;             /* number of code length code lengths */
      this.nlen = 0;              /* number of length code lengths */
      this.ndist = 0;             /* number of distance code lengths */
      this.have = 0;              /* number of code lengths in lens[] */
      this.next = null;              /* next available space in codes[] */

      this.lens = new common$1.Buf16(320); /* temporary storage for code lengths */
      this.work = new common$1.Buf16(288); /* work area for code table building */

      /*
       because we don't have pointers in js, we use lencode and distcode directly
       as buffers so we don't need codes
      */
      //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */
      this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */
      this.distdyn = null;             /* dynamic table for distance codes (JS specific) */
      this.sane = 0;                   /* if false, allow invalid distance too far */
      this.back = 0;                   /* bits back of last unprocessed length/lit */
      this.was = 0;                    /* initial length of match */
    }

    function inflateResetKeep(strm) {
      var state;

      if (!strm || !strm.state) { return Z_STREAM_ERROR; }
      state = strm.state;
      strm.total_in = strm.total_out = state.total = 0;
      strm.msg = ''; /*Z_NULL*/
      if (state.wrap) {       /* to support ill-conceived Java test suite */
        strm.adler = state.wrap & 1;
      }
      state.mode = HEAD;
      state.last = 0;
      state.havedict = 0;
      state.dmax = 32768;
      state.head = null/*Z_NULL*/;
      state.hold = 0;
      state.bits = 0;
      //state.lencode = state.distcode = state.next = state.codes;
      state.lencode = state.lendyn = new common$1.Buf32(ENOUGH_LENS);
      state.distcode = state.distdyn = new common$1.Buf32(ENOUGH_DISTS);

      state.sane = 1;
      state.back = -1;
      //Tracev((stderr, "inflate: reset\n"));
      return Z_OK;
    }

    function inflateReset(strm) {
      var state;

      if (!strm || !strm.state) { return Z_STREAM_ERROR; }
      state = strm.state;
      state.wsize = 0;
      state.whave = 0;
      state.wnext = 0;
      return inflateResetKeep(strm);

    }

    function inflateReset2(strm, windowBits) {
      var wrap;
      var state;

      /* get the state */
      if (!strm || !strm.state) { return Z_STREAM_ERROR; }
      state = strm.state;

      /* extract wrap request from windowBits parameter */
      if (windowBits < 0) {
        wrap = 0;
        windowBits = -windowBits;
      }
      else {
        wrap = (windowBits >> 4) + 1;
        if (windowBits < 48) {
          windowBits &= 15;
        }
      }

      /* set number of window bits, free window if different */
      if (windowBits && (windowBits < 8 || windowBits > 15)) {
        return Z_STREAM_ERROR;
      }
      if (state.window !== null && state.wbits !== windowBits) {
        state.window = null;
      }

      /* update state and reset the rest of it */
      state.wrap = wrap;
      state.wbits = windowBits;
      return inflateReset(strm);
    }

    function inflateInit2(strm, windowBits) {
      var ret;
      var state;

      if (!strm) { return Z_STREAM_ERROR; }
      //strm.msg = Z_NULL;                 /* in case we return an error */

      state = new InflateState();

      //if (state === Z_NULL) return Z_MEM_ERROR;
      //Tracev((stderr, "inflate: allocated\n"));
      strm.state = state;
      state.window = null/*Z_NULL*/;
      ret = inflateReset2(strm, windowBits);
      if (ret !== Z_OK) {
        strm.state = null/*Z_NULL*/;
      }
      return ret;
    }

    function inflateInit(strm) {
      return inflateInit2(strm, DEF_WBITS);
    }


    /*
     Return state with length and distance decoding tables and index sizes set to
     fixed code decoding.  Normally this returns fixed tables from inffixed.h.
     If BUILDFIXED is defined, then instead this routine builds the tables the
     first time it's called, and returns those tables the first time and
     thereafter.  This reduces the size of the code by about 2K bytes, in
     exchange for a little execution time.  However, BUILDFIXED should not be
     used for threaded applications, since the rewriting of the tables and virgin
     may not be thread-safe.
     */
    var virgin = true;

    var lenfix, distfix; // We have no pointers in JS, so keep tables separate

    function fixedtables(state) {
      /* build fixed huffman tables if first call (may not be thread safe) */
      if (virgin) {
        var sym;

        lenfix = new common$1.Buf32(512);
        distfix = new common$1.Buf32(32);

        /* literal/length table */
        sym = 0;
        while (sym < 144) { state.lens[sym++] = 8; }
        while (sym < 256) { state.lens[sym++] = 9; }
        while (sym < 280) { state.lens[sym++] = 7; }
        while (sym < 288) { state.lens[sym++] = 8; }

        inftrees(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });

        /* distance table */
        sym = 0;
        while (sym < 32) { state.lens[sym++] = 5; }

        inftrees(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });

        /* do this just once */
        virgin = false;
      }

      state.lencode = lenfix;
      state.lenbits = 9;
      state.distcode = distfix;
      state.distbits = 5;
    }


    /*
     Update the window with the last wsize (normally 32K) bytes written before
     returning.  If window does not exist yet, create it.  This is only called
     when a window is already in use, or when output has been written during this
     inflate call, but the end of the deflate stream has not been reached yet.
     It is also called to create a window for dictionary data when a dictionary
     is loaded.

     Providing output buffers larger than 32K to inflate() should provide a speed
     advantage, since only the last 32K of output is copied to the sliding window
     upon return from inflate(), and since all distances after the first 32K of
     output will fall in the output data, making match copies simpler and faster.
     The advantage may be dependent on the size of the processor's data caches.
     */
    function updatewindow(strm, src, end, copy) {
      var dist;
      var state = strm.state;

      /* if it hasn't been done already, allocate space for the window */
      if (state.window === null) {
        state.wsize = 1 << state.wbits;
        state.wnext = 0;
        state.whave = 0;

        state.window = new common$1.Buf8(state.wsize);
      }

      /* copy state->wsize or less output bytes into the circular window */
      if (copy >= state.wsize) {
        common$1.arraySet(state.window, src, end - state.wsize, state.wsize, 0);
        state.wnext = 0;
        state.whave = state.wsize;
      }
      else {
        dist = state.wsize - state.wnext;
        if (dist > copy) {
          dist = copy;
        }
        //zmemcpy(state->window + state->wnext, end - copy, dist);
        common$1.arraySet(state.window, src, end - copy, dist, state.wnext);
        copy -= dist;
        if (copy) {
          //zmemcpy(state->window, end - copy, copy);
          common$1.arraySet(state.window, src, end - copy, copy, 0);
          state.wnext = copy;
          state.whave = state.wsize;
        }
        else {
          state.wnext += dist;
          if (state.wnext === state.wsize) { state.wnext = 0; }
          if (state.whave < state.wsize) { state.whave += dist; }
        }
      }
      return 0;
    }

    function inflate$2(strm, flush) {
      var state;
      var input, output;          // input/output buffers
      var next;                   /* next input INDEX */
      var put;                    /* next output INDEX */
      var have, left;             /* available input and output */
      var hold;                   /* bit buffer */
      var bits;                   /* bits in bit buffer */
      var _in, _out;              /* save starting available input and output */
      var copy;                   /* number of stored or match bytes to copy */
      var from;                   /* where to copy match bytes from */
      var from_source;
      var here = 0;               /* current decoding table entry */
      var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
      //var last;                   /* parent table entry */
      var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
      var len;                    /* length to copy for repeats, bits to drop */
      var ret;                    /* return code */
      var hbuf = new common$1.Buf8(4);    /* buffer for gzip header crc calculation */
      var opts;

      var n; // temporary var for NEED_BITS

      var order = /* permutation of code lengths */
        [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];


      if (!strm || !strm.state || !strm.output ||
          (!strm.input && strm.avail_in !== 0)) {
        return Z_STREAM_ERROR;
      }

      state = strm.state;
      if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */


      //--- LOAD() ---
      put = strm.next_out;
      output = strm.output;
      left = strm.avail_out;
      next = strm.next_in;
      input = strm.input;
      have = strm.avail_in;
      hold = state.hold;
      bits = state.bits;
      //---

      _in = have;
      _out = left;
      ret = Z_OK;

      inf_leave: // goto emulation
      for (;;) {
        switch (state.mode) {
          case HEAD:
            if (state.wrap === 0) {
              state.mode = TYPEDO;
              break;
            }
            //=== NEEDBITS(16);
            while (bits < 16) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */
              state.check = 0/*crc32(0L, Z_NULL, 0)*/;
              //=== CRC2(state.check, hold);
              hbuf[0] = hold & 0xff;
              hbuf[1] = (hold >>> 8) & 0xff;
              state.check = crc32_1(state.check, hbuf, 2, 0);
              //===//

              //=== INITBITS();
              hold = 0;
              bits = 0;
              //===//
              state.mode = FLAGS;
              break;
            }
            state.flags = 0;           /* expect zlib header */
            if (state.head) {
              state.head.done = false;
            }
            if (!(state.wrap & 1) ||   /* check if zlib header allowed */
              (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {
              strm.msg = 'incorrect header check';
              state.mode = BAD;
              break;
            }
            if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {
              strm.msg = 'unknown compression method';
              state.mode = BAD;
              break;
            }
            //--- DROPBITS(4) ---//
            hold >>>= 4;
            bits -= 4;
            //---//
            len = (hold & 0x0f)/*BITS(4)*/ + 8;
            if (state.wbits === 0) {
              state.wbits = len;
            }
            else if (len > state.wbits) {
              strm.msg = 'invalid window size';
              state.mode = BAD;
              break;
            }
            state.dmax = 1 << len;
            //Tracev((stderr, "inflate:   zlib header ok\n"));
            strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
            state.mode = hold & 0x200 ? DICTID : TYPE;
            //=== INITBITS();
            hold = 0;
            bits = 0;
            //===//
            break;
          case FLAGS:
            //=== NEEDBITS(16); */
            while (bits < 16) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            state.flags = hold;
            if ((state.flags & 0xff) !== Z_DEFLATED) {
              strm.msg = 'unknown compression method';
              state.mode = BAD;
              break;
            }
            if (state.flags & 0xe000) {
              strm.msg = 'unknown header flags set';
              state.mode = BAD;
              break;
            }
            if (state.head) {
              state.head.text = ((hold >> 8) & 1);
            }
            if (state.flags & 0x0200) {
              //=== CRC2(state.check, hold);
              hbuf[0] = hold & 0xff;
              hbuf[1] = (hold >>> 8) & 0xff;
              state.check = crc32_1(state.check, hbuf, 2, 0);
              //===//
            }
            //=== INITBITS();
            hold = 0;
            bits = 0;
            //===//
            state.mode = TIME;
            /* falls through */
          case TIME:
            //=== NEEDBITS(32); */
            while (bits < 32) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            if (state.head) {
              state.head.time = hold;
            }
            if (state.flags & 0x0200) {
              //=== CRC4(state.check, hold)
              hbuf[0] = hold & 0xff;
              hbuf[1] = (hold >>> 8) & 0xff;
              hbuf[2] = (hold >>> 16) & 0xff;
              hbuf[3] = (hold >>> 24) & 0xff;
              state.check = crc32_1(state.check, hbuf, 4, 0);
              //===
            }
            //=== INITBITS();
            hold = 0;
            bits = 0;
            //===//
            state.mode = OS;
            /* falls through */
          case OS:
            //=== NEEDBITS(16); */
            while (bits < 16) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            if (state.head) {
              state.head.xflags = (hold & 0xff);
              state.head.os = (hold >> 8);
            }
            if (state.flags & 0x0200) {
              //=== CRC2(state.check, hold);
              hbuf[0] = hold & 0xff;
              hbuf[1] = (hold >>> 8) & 0xff;
              state.check = crc32_1(state.check, hbuf, 2, 0);
              //===//
            }
            //=== INITBITS();
            hold = 0;
            bits = 0;
            //===//
            state.mode = EXLEN;
            /* falls through */
          case EXLEN:
            if (state.flags & 0x0400) {
              //=== NEEDBITS(16); */
              while (bits < 16) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              state.length = hold;
              if (state.head) {
                state.head.extra_len = hold;
              }
              if (state.flags & 0x0200) {
                //=== CRC2(state.check, hold);
                hbuf[0] = hold & 0xff;
                hbuf[1] = (hold >>> 8) & 0xff;
                state.check = crc32_1(state.check, hbuf, 2, 0);
                //===//
              }
              //=== INITBITS();
              hold = 0;
              bits = 0;
              //===//
            }
            else if (state.head) {
              state.head.extra = null/*Z_NULL*/;
            }
            state.mode = EXTRA;
            /* falls through */
          case EXTRA:
            if (state.flags & 0x0400) {
              copy = state.length;
              if (copy > have) { copy = have; }
              if (copy) {
                if (state.head) {
                  len = state.head.extra_len - state.length;
                  if (!state.head.extra) {
                    // Use untyped array for more convenient processing later
                    state.head.extra = new Array(state.head.extra_len);
                  }
                  common$1.arraySet(
                    state.head.extra,
                    input,
                    next,
                    // extra field is limited to 65536 bytes
                    // - no need for additional size check
                    copy,
                    /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
                    len
                  );
                  //zmemcpy(state.head.extra + len, next,
                  //        len + copy > state.head.extra_max ?
                  //        state.head.extra_max - len : copy);
                }
                if (state.flags & 0x0200) {
                  state.check = crc32_1(state.check, input, copy, next);
                }
                have -= copy;
                next += copy;
                state.length -= copy;
              }
              if (state.length) { break inf_leave; }
            }
            state.length = 0;
            state.mode = NAME;
            /* falls through */
          case NAME:
            if (state.flags & 0x0800) {
              if (have === 0) { break inf_leave; }
              copy = 0;
              do {
                // TODO: 2 or 1 bytes?
                len = input[next + copy++];
                /* use constant limit because in js we should not preallocate memory */
                if (state.head && len &&
                    (state.length < 65536 /*state.head.name_max*/)) {
                  state.head.name += String.fromCharCode(len);
                }
              } while (len && copy < have);

              if (state.flags & 0x0200) {
                state.check = crc32_1(state.check, input, copy, next);
              }
              have -= copy;
              next += copy;
              if (len) { break inf_leave; }
            }
            else if (state.head) {
              state.head.name = null;
            }
            state.length = 0;
            state.mode = COMMENT;
            /* falls through */
          case COMMENT:
            if (state.flags & 0x1000) {
              if (have === 0) { break inf_leave; }
              copy = 0;
              do {
                len = input[next + copy++];
                /* use constant limit because in js we should not preallocate memory */
                if (state.head && len &&
                    (state.length < 65536 /*state.head.comm_max*/)) {
                  state.head.comment += String.fromCharCode(len);
                }
              } while (len && copy < have);
              if (state.flags & 0x0200) {
                state.check = crc32_1(state.check, input, copy, next);
              }
              have -= copy;
              next += copy;
              if (len) { break inf_leave; }
            }
            else if (state.head) {
              state.head.comment = null;
            }
            state.mode = HCRC;
            /* falls through */
          case HCRC:
            if (state.flags & 0x0200) {
              //=== NEEDBITS(16); */
              while (bits < 16) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              if (hold !== (state.check & 0xffff)) {
                strm.msg = 'header crc mismatch';
                state.mode = BAD;
                break;
              }
              //=== INITBITS();
              hold = 0;
              bits = 0;
              //===//
            }
            if (state.head) {
              state.head.hcrc = ((state.flags >> 9) & 1);
              state.head.done = true;
            }
            strm.adler = state.check = 0;
            state.mode = TYPE;
            break;
          case DICTID:
            //=== NEEDBITS(32); */
            while (bits < 32) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            strm.adler = state.check = zswap32(hold);
            //=== INITBITS();
            hold = 0;
            bits = 0;
            //===//
            state.mode = DICT;
            /* falls through */
          case DICT:
            if (state.havedict === 0) {
              //--- RESTORE() ---
              strm.next_out = put;
              strm.avail_out = left;
              strm.next_in = next;
              strm.avail_in = have;
              state.hold = hold;
              state.bits = bits;
              //---
              return Z_NEED_DICT;
            }
            strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
            state.mode = TYPE;
            /* falls through */
          case TYPE:
            if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }
            /* falls through */
          case TYPEDO:
            if (state.last) {
              //--- BYTEBITS() ---//
              hold >>>= bits & 7;
              bits -= bits & 7;
              //---//
              state.mode = CHECK;
              break;
            }
            //=== NEEDBITS(3); */
            while (bits < 3) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            state.last = (hold & 0x01)/*BITS(1)*/;
            //--- DROPBITS(1) ---//
            hold >>>= 1;
            bits -= 1;
            //---//

            switch ((hold & 0x03)/*BITS(2)*/) {
              case 0:                             /* stored block */
                //Tracev((stderr, "inflate:     stored block%s\n",
                //        state.last ? " (last)" : ""));
                state.mode = STORED;
                break;
              case 1:                             /* fixed block */
                fixedtables(state);
                //Tracev((stderr, "inflate:     fixed codes block%s\n",
                //        state.last ? " (last)" : ""));
                state.mode = LEN_;             /* decode codes */
                if (flush === Z_TREES) {
                  //--- DROPBITS(2) ---//
                  hold >>>= 2;
                  bits -= 2;
                  //---//
                  break inf_leave;
                }
                break;
              case 2:                             /* dynamic block */
                //Tracev((stderr, "inflate:     dynamic codes block%s\n",
                //        state.last ? " (last)" : ""));
                state.mode = TABLE;
                break;
              case 3:
                strm.msg = 'invalid block type';
                state.mode = BAD;
            }
            //--- DROPBITS(2) ---//
            hold >>>= 2;
            bits -= 2;
            //---//
            break;
          case STORED:
            //--- BYTEBITS() ---// /* go to byte boundary */
            hold >>>= bits & 7;
            bits -= bits & 7;
            //---//
            //=== NEEDBITS(32); */
            while (bits < 32) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
              strm.msg = 'invalid stored block lengths';
              state.mode = BAD;
              break;
            }
            state.length = hold & 0xffff;
            //Tracev((stderr, "inflate:       stored length %u\n",
            //        state.length));
            //=== INITBITS();
            hold = 0;
            bits = 0;
            //===//
            state.mode = COPY_;
            if (flush === Z_TREES) { break inf_leave; }
            /* falls through */
          case COPY_:
            state.mode = COPY;
            /* falls through */
          case COPY:
            copy = state.length;
            if (copy) {
              if (copy > have) { copy = have; }
              if (copy > left) { copy = left; }
              if (copy === 0) { break inf_leave; }
              //--- zmemcpy(put, next, copy); ---
              common$1.arraySet(output, input, next, copy, put);
              //---//
              have -= copy;
              next += copy;
              left -= copy;
              put += copy;
              state.length -= copy;
              break;
            }
            //Tracev((stderr, "inflate:       stored end\n"));
            state.mode = TYPE;
            break;
          case TABLE:
            //=== NEEDBITS(14); */
            while (bits < 14) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;
            //--- DROPBITS(5) ---//
            hold >>>= 5;
            bits -= 5;
            //---//
            state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;
            //--- DROPBITS(5) ---//
            hold >>>= 5;
            bits -= 5;
            //---//
            state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;
            //--- DROPBITS(4) ---//
            hold >>>= 4;
            bits -= 4;
            //---//
    //#ifndef PKZIP_BUG_WORKAROUND
            if (state.nlen > 286 || state.ndist > 30) {
              strm.msg = 'too many length or distance symbols';
              state.mode = BAD;
              break;
            }
    //#endif
            //Tracev((stderr, "inflate:       table sizes ok\n"));
            state.have = 0;
            state.mode = LENLENS;
            /* falls through */
          case LENLENS:
            while (state.have < state.ncode) {
              //=== NEEDBITS(3);
              while (bits < 3) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);
              //--- DROPBITS(3) ---//
              hold >>>= 3;
              bits -= 3;
              //---//
            }
            while (state.have < 19) {
              state.lens[order[state.have++]] = 0;
            }
            // We have separate tables & no pointers. 2 commented lines below not needed.
            //state.next = state.codes;
            //state.lencode = state.next;
            // Switch to use dynamic table
            state.lencode = state.lendyn;
            state.lenbits = 7;

            opts = { bits: state.lenbits };
            ret = inftrees(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
            state.lenbits = opts.bits;

            if (ret) {
              strm.msg = 'invalid code lengths set';
              state.mode = BAD;
              break;
            }
            //Tracev((stderr, "inflate:       code lengths ok\n"));
            state.have = 0;
            state.mode = CODELENS;
            /* falls through */
          case CODELENS:
            while (state.have < state.nlen + state.ndist) {
              for (;;) {
                here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/
                here_bits = here >>> 24;
                here_op = (here >>> 16) & 0xff;
                here_val = here & 0xffff;

                if ((here_bits) <= bits) { break; }
                //--- PULLBYTE() ---//
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
                //---//
              }
              if (here_val < 16) {
                //--- DROPBITS(here.bits) ---//
                hold >>>= here_bits;
                bits -= here_bits;
                //---//
                state.lens[state.have++] = here_val;
              }
              else {
                if (here_val === 16) {
                  //=== NEEDBITS(here.bits + 2);
                  n = here_bits + 2;
                  while (bits < n) {
                    if (have === 0) { break inf_leave; }
                    have--;
                    hold += input[next++] << bits;
                    bits += 8;
                  }
                  //===//
                  //--- DROPBITS(here.bits) ---//
                  hold >>>= here_bits;
                  bits -= here_bits;
                  //---//
                  if (state.have === 0) {
                    strm.msg = 'invalid bit length repeat';
                    state.mode = BAD;
                    break;
                  }
                  len = state.lens[state.have - 1];
                  copy = 3 + (hold & 0x03);//BITS(2);
                  //--- DROPBITS(2) ---//
                  hold >>>= 2;
                  bits -= 2;
                  //---//
                }
                else if (here_val === 17) {
                  //=== NEEDBITS(here.bits + 3);
                  n = here_bits + 3;
                  while (bits < n) {
                    if (have === 0) { break inf_leave; }
                    have--;
                    hold += input[next++] << bits;
                    bits += 8;
                  }
                  //===//
                  //--- DROPBITS(here.bits) ---//
                  hold >>>= here_bits;
                  bits -= here_bits;
                  //---//
                  len = 0;
                  copy = 3 + (hold & 0x07);//BITS(3);
                  //--- DROPBITS(3) ---//
                  hold >>>= 3;
                  bits -= 3;
                  //---//
                }
                else {
                  //=== NEEDBITS(here.bits + 7);
                  n = here_bits + 7;
                  while (bits < n) {
                    if (have === 0) { break inf_leave; }
                    have--;
                    hold += input[next++] << bits;
                    bits += 8;
                  }
                  //===//
                  //--- DROPBITS(here.bits) ---//
                  hold >>>= here_bits;
                  bits -= here_bits;
                  //---//
                  len = 0;
                  copy = 11 + (hold & 0x7f);//BITS(7);
                  //--- DROPBITS(7) ---//
                  hold >>>= 7;
                  bits -= 7;
                  //---//
                }
                if (state.have + copy > state.nlen + state.ndist) {
                  strm.msg = 'invalid bit length repeat';
                  state.mode = BAD;
                  break;
                }
                while (copy--) {
                  state.lens[state.have++] = len;
                }
              }
            }

            /* handle error breaks in while */
            if (state.mode === BAD) { break; }

            /* check for end-of-block code (better have one) */
            if (state.lens[256] === 0) {
              strm.msg = 'invalid code -- missing end-of-block';
              state.mode = BAD;
              break;
            }

            /* build code tables -- note: do not change the lenbits or distbits
               values here (9 and 6) without reading the comments in inftrees.h
               concerning the ENOUGH constants, which depend on those values */
            state.lenbits = 9;

            opts = { bits: state.lenbits };
            ret = inftrees(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
            // We have separate tables & no pointers. 2 commented lines below not needed.
            // state.next_index = opts.table_index;
            state.lenbits = opts.bits;
            // state.lencode = state.next;

            if (ret) {
              strm.msg = 'invalid literal/lengths set';
              state.mode = BAD;
              break;
            }

            state.distbits = 6;
            //state.distcode.copy(state.codes);
            // Switch to use dynamic table
            state.distcode = state.distdyn;
            opts = { bits: state.distbits };
            ret = inftrees(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
            // We have separate tables & no pointers. 2 commented lines below not needed.
            // state.next_index = opts.table_index;
            state.distbits = opts.bits;
            // state.distcode = state.next;

            if (ret) {
              strm.msg = 'invalid distances set';
              state.mode = BAD;
              break;
            }
            //Tracev((stderr, 'inflate:       codes ok\n'));
            state.mode = LEN_;
            if (flush === Z_TREES) { break inf_leave; }
            /* falls through */
          case LEN_:
            state.mode = LEN;
            /* falls through */
          case LEN:
            if (have >= 6 && left >= 258) {
              //--- RESTORE() ---
              strm.next_out = put;
              strm.avail_out = left;
              strm.next_in = next;
              strm.avail_in = have;
              state.hold = hold;
              state.bits = bits;
              //---
              inffast(strm, _out);
              //--- LOAD() ---
              put = strm.next_out;
              output = strm.output;
              left = strm.avail_out;
              next = strm.next_in;
              input = strm.input;
              have = strm.avail_in;
              hold = state.hold;
              bits = state.bits;
              //---

              if (state.mode === TYPE) {
                state.back = -1;
              }
              break;
            }
            state.back = 0;
            for (;;) {
              here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/
              here_bits = here >>> 24;
              here_op = (here >>> 16) & 0xff;
              here_val = here & 0xffff;

              if (here_bits <= bits) { break; }
              //--- PULLBYTE() ---//
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
              //---//
            }
            if (here_op && (here_op & 0xf0) === 0) {
              last_bits = here_bits;
              last_op = here_op;
              last_val = here_val;
              for (;;) {
                here = state.lencode[last_val +
                        ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
                here_bits = here >>> 24;
                here_op = (here >>> 16) & 0xff;
                here_val = here & 0xffff;

                if ((last_bits + here_bits) <= bits) { break; }
                //--- PULLBYTE() ---//
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
                //---//
              }
              //--- DROPBITS(last.bits) ---//
              hold >>>= last_bits;
              bits -= last_bits;
              //---//
              state.back += last_bits;
            }
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            state.back += here_bits;
            state.length = here_val;
            if (here_op === 0) {
              //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
              //        "inflate:         literal '%c'\n" :
              //        "inflate:         literal 0x%02x\n", here.val));
              state.mode = LIT;
              break;
            }
            if (here_op & 32) {
              //Tracevv((stderr, "inflate:         end of block\n"));
              state.back = -1;
              state.mode = TYPE;
              break;
            }
            if (here_op & 64) {
              strm.msg = 'invalid literal/length code';
              state.mode = BAD;
              break;
            }
            state.extra = here_op & 15;
            state.mode = LENEXT;
            /* falls through */
          case LENEXT:
            if (state.extra) {
              //=== NEEDBITS(state.extra);
              n = state.extra;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
              //--- DROPBITS(state.extra) ---//
              hold >>>= state.extra;
              bits -= state.extra;
              //---//
              state.back += state.extra;
            }
            //Tracevv((stderr, "inflate:         length %u\n", state.length));
            state.was = state.length;
            state.mode = DIST;
            /* falls through */
          case DIST:
            for (;;) {
              here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/
              here_bits = here >>> 24;
              here_op = (here >>> 16) & 0xff;
              here_val = here & 0xffff;

              if ((here_bits) <= bits) { break; }
              //--- PULLBYTE() ---//
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
              //---//
            }
            if ((here_op & 0xf0) === 0) {
              last_bits = here_bits;
              last_op = here_op;
              last_val = here_val;
              for (;;) {
                here = state.distcode[last_val +
                        ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
                here_bits = here >>> 24;
                here_op = (here >>> 16) & 0xff;
                here_val = here & 0xffff;

                if ((last_bits + here_bits) <= bits) { break; }
                //--- PULLBYTE() ---//
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
                //---//
              }
              //--- DROPBITS(last.bits) ---//
              hold >>>= last_bits;
              bits -= last_bits;
              //---//
              state.back += last_bits;
            }
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            state.back += here_bits;
            if (here_op & 64) {
              strm.msg = 'invalid distance code';
              state.mode = BAD;
              break;
            }
            state.offset = here_val;
            state.extra = (here_op) & 15;
            state.mode = DISTEXT;
            /* falls through */
          case DISTEXT:
            if (state.extra) {
              //=== NEEDBITS(state.extra);
              n = state.extra;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
              //--- DROPBITS(state.extra) ---//
              hold >>>= state.extra;
              bits -= state.extra;
              //---//
              state.back += state.extra;
            }
    //#ifdef INFLATE_STRICT
            if (state.offset > state.dmax) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD;
              break;
            }
    //#endif
            //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
            state.mode = MATCH;
            /* falls through */
          case MATCH:
            if (left === 0) { break inf_leave; }
            copy = _out - left;
            if (state.offset > copy) {         /* copy from window */
              copy = state.offset - copy;
              if (copy > state.whave) {
                if (state.sane) {
                  strm.msg = 'invalid distance too far back';
                  state.mode = BAD;
                  break;
                }
    // (!) This block is disabled in zlib defaults,
    // don't enable it for binary compatibility
    //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
    //          Trace((stderr, "inflate.c too far\n"));
    //          copy -= state.whave;
    //          if (copy > state.length) { copy = state.length; }
    //          if (copy > left) { copy = left; }
    //          left -= copy;
    //          state.length -= copy;
    //          do {
    //            output[put++] = 0;
    //          } while (--copy);
    //          if (state.length === 0) { state.mode = LEN; }
    //          break;
    //#endif
              }
              if (copy > state.wnext) {
                copy -= state.wnext;
                from = state.wsize - copy;
              }
              else {
                from = state.wnext - copy;
              }
              if (copy > state.length) { copy = state.length; }
              from_source = state.window;
            }
            else {                              /* copy from output */
              from_source = output;
              from = put - state.offset;
              copy = state.length;
            }
            if (copy > left) { copy = left; }
            left -= copy;
            state.length -= copy;
            do {
              output[put++] = from_source[from++];
            } while (--copy);
            if (state.length === 0) { state.mode = LEN; }
            break;
          case LIT:
            if (left === 0) { break inf_leave; }
            output[put++] = state.length;
            left--;
            state.mode = LEN;
            break;
          case CHECK:
            if (state.wrap) {
              //=== NEEDBITS(32);
              while (bits < 32) {
                if (have === 0) { break inf_leave; }
                have--;
                // Use '|' instead of '+' to make sure that result is signed
                hold |= input[next++] << bits;
                bits += 8;
              }
              //===//
              _out -= left;
              strm.total_out += _out;
              state.total += _out;
              if (_out) {
                strm.adler = state.check =
                    /*UPDATE(state.check, put - _out, _out);*/
                    (state.flags ? crc32_1(state.check, output, _out, put - _out) : adler32_1(state.check, output, _out, put - _out));

              }
              _out = left;
              // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
              if ((state.flags ? hold : zswap32(hold)) !== state.check) {
                strm.msg = 'incorrect data check';
                state.mode = BAD;
                break;
              }
              //=== INITBITS();
              hold = 0;
              bits = 0;
              //===//
              //Tracev((stderr, "inflate:   check matches trailer\n"));
            }
            state.mode = LENGTH;
            /* falls through */
          case LENGTH:
            if (state.wrap && state.flags) {
              //=== NEEDBITS(32);
              while (bits < 32) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              if (hold !== (state.total & 0xffffffff)) {
                strm.msg = 'incorrect length check';
                state.mode = BAD;
                break;
              }
              //=== INITBITS();
              hold = 0;
              bits = 0;
              //===//
              //Tracev((stderr, "inflate:   length matches trailer\n"));
            }
            state.mode = DONE;
            /* falls through */
          case DONE:
            ret = Z_STREAM_END;
            break inf_leave;
          case BAD:
            ret = Z_DATA_ERROR;
            break inf_leave;
          case MEM:
            return Z_MEM_ERROR;
          case SYNC:
            /* falls through */
          default:
            return Z_STREAM_ERROR;
        }
      }

      // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

      /*
         Return from inflate(), updating the total counts and the check value.
         If there was no progress during the inflate() call, return a buffer
         error.  Call updatewindow() to create and/or update the window state.
         Note: a memory error from inflate() is non-recoverable.
       */

      //--- RESTORE() ---
      strm.next_out = put;
      strm.avail_out = left;
      strm.next_in = next;
      strm.avail_in = have;
      state.hold = hold;
      state.bits = bits;
      //---

      if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&
                          (state.mode < CHECK || flush !== Z_FINISH))) {
        if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) ;
      }
      _in -= strm.avail_in;
      _out -= strm.avail_out;
      strm.total_in += _in;
      strm.total_out += _out;
      state.total += _out;
      if (state.wrap && _out) {
        strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
          (state.flags ? crc32_1(state.check, output, _out, strm.next_out - _out) : adler32_1(state.check, output, _out, strm.next_out - _out));
      }
      strm.data_type = state.bits + (state.last ? 64 : 0) +
                        (state.mode === TYPE ? 128 : 0) +
                        (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
      if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {
        ret = Z_BUF_ERROR;
      }
      return ret;
    }

    function inflateEnd(strm) {

      if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {
        return Z_STREAM_ERROR;
      }

      var state = strm.state;
      if (state.window) {
        state.window = null;
      }
      strm.state = null;
      return Z_OK;
    }

    function inflateGetHeader(strm, head) {
      var state;

      /* check state */
      if (!strm || !strm.state) { return Z_STREAM_ERROR; }
      state = strm.state;
      if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }

      /* save header structure */
      state.head = head;
      head.done = false;
      return Z_OK;
    }

    function inflateSetDictionary(strm, dictionary) {
      var dictLength = dictionary.length;

      var state;
      var dictid;
      var ret;

      /* check state */
      if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR; }
      state = strm.state;

      if (state.wrap !== 0 && state.mode !== DICT) {
        return Z_STREAM_ERROR;
      }

      /* check for correct dictionary identifier */
      if (state.mode === DICT) {
        dictid = 1; /* adler32(0, null, 0)*/
        /* dictid = adler32(dictid, dictionary, dictLength); */
        dictid = adler32_1(dictid, dictionary, dictLength, 0);
        if (dictid !== state.check) {
          return Z_DATA_ERROR;
        }
      }
      /* copy dictionary to window using updatewindow(), which will amend the
       existing dictionary if appropriate */
      ret = updatewindow(strm, dictionary, dictLength, dictLength);
      if (ret) {
        state.mode = MEM;
        return Z_MEM_ERROR;
      }
      state.havedict = 1;
      // Tracev((stderr, "inflate:   dictionary set\n"));
      return Z_OK;
    }

    var inflateReset_1 = inflateReset;
    var inflateReset2_1 = inflateReset2;
    var inflateResetKeep_1 = inflateResetKeep;
    var inflateInit_1 = inflateInit;
    var inflateInit2_1 = inflateInit2;
    var inflate_2$1 = inflate$2;
    var inflateEnd_1 = inflateEnd;
    var inflateGetHeader_1 = inflateGetHeader;
    var inflateSetDictionary_1 = inflateSetDictionary;
    var inflateInfo = 'pako inflate (from Nodeca project)';

    /* Not implemented
    exports.inflateCopy = inflateCopy;
    exports.inflateGetDictionary = inflateGetDictionary;
    exports.inflateMark = inflateMark;
    exports.inflatePrime = inflatePrime;
    exports.inflateSync = inflateSync;
    exports.inflateSyncPoint = inflateSyncPoint;
    exports.inflateUndermine = inflateUndermine;
    */

    var inflate_1$1 = {
    	inflateReset: inflateReset_1,
    	inflateReset2: inflateReset2_1,
    	inflateResetKeep: inflateResetKeep_1,
    	inflateInit: inflateInit_1,
    	inflateInit2: inflateInit2_1,
    	inflate: inflate_2$1,
    	inflateEnd: inflateEnd_1,
    	inflateGetHeader: inflateGetHeader_1,
    	inflateSetDictionary: inflateSetDictionary_1,
    	inflateInfo: inflateInfo
    };

    // (C) 1995-2013 Jean-loup Gailly and Mark Adler
    // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
    //
    // This software is provided 'as-is', without any express or implied
    // warranty. In no event will the authors be held liable for any damages
    // arising from the use of this software.
    //
    // Permission is granted to anyone to use this software for any purpose,
    // including commercial applications, and to alter it and redistribute it
    // freely, subject to the following restrictions:
    //
    // 1. The origin of this software must not be misrepresented; you must not
    //   claim that you wrote the original software. If you use this software
    //   in a product, an acknowledgment in the product documentation would be
    //   appreciated but is not required.
    // 2. Altered source versions must be plainly marked as such, and must not be
    //   misrepresented as being the original software.
    // 3. This notice may not be removed or altered from any source distribution.

    var constants = {

      /* Allowed flush values; see deflate() and inflate() below for details */
      Z_NO_FLUSH:         0,
      Z_PARTIAL_FLUSH:    1,
      Z_SYNC_FLUSH:       2,
      Z_FULL_FLUSH:       3,
      Z_FINISH:           4,
      Z_BLOCK:            5,
      Z_TREES:            6,

      /* Return codes for the compression/decompression functions. Negative values
      * are errors, positive values are used for special but normal events.
      */
      Z_OK:               0,
      Z_STREAM_END:       1,
      Z_NEED_DICT:        2,
      Z_ERRNO:           -1,
      Z_STREAM_ERROR:    -2,
      Z_DATA_ERROR:      -3,
      //Z_MEM_ERROR:     -4,
      Z_BUF_ERROR:       -5,
      //Z_VERSION_ERROR: -6,

      /* compression levels */
      Z_NO_COMPRESSION:         0,
      Z_BEST_SPEED:             1,
      Z_BEST_COMPRESSION:       9,
      Z_DEFAULT_COMPRESSION:   -1,


      Z_FILTERED:               1,
      Z_HUFFMAN_ONLY:           2,
      Z_RLE:                    3,
      Z_FIXED:                  4,
      Z_DEFAULT_STRATEGY:       0,

      /* Possible values of the data_type field (though see inflate()) */
      Z_BINARY:                 0,
      Z_TEXT:                   1,
      //Z_ASCII:                1, // = Z_TEXT (deprecated)
      Z_UNKNOWN:                2,

      /* The deflate compression method */
      Z_DEFLATED:               8
      //Z_NULL:                 null // Use -1 or null inline, depending on var type
    };
    constants.Z_NO_FLUSH;
    constants.Z_PARTIAL_FLUSH;
    constants.Z_SYNC_FLUSH;
    constants.Z_FULL_FLUSH;
    constants.Z_FINISH;
    constants.Z_BLOCK;
    constants.Z_TREES;
    constants.Z_OK;
    constants.Z_STREAM_END;
    constants.Z_NEED_DICT;
    constants.Z_ERRNO;
    constants.Z_STREAM_ERROR;
    constants.Z_DATA_ERROR;
    constants.Z_BUF_ERROR;
    constants.Z_NO_COMPRESSION;
    constants.Z_BEST_SPEED;
    constants.Z_BEST_COMPRESSION;
    constants.Z_DEFAULT_COMPRESSION;
    constants.Z_FILTERED;
    constants.Z_HUFFMAN_ONLY;
    constants.Z_RLE;
    constants.Z_FIXED;
    constants.Z_DEFAULT_STRATEGY;
    constants.Z_BINARY;
    constants.Z_TEXT;
    constants.Z_UNKNOWN;
    constants.Z_DEFLATED;

    // (C) 1995-2013 Jean-loup Gailly and Mark Adler
    // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
    //
    // This software is provided 'as-is', without any express or implied
    // warranty. In no event will the authors be held liable for any damages
    // arising from the use of this software.
    //
    // Permission is granted to anyone to use this software for any purpose,
    // including commercial applications, and to alter it and redistribute it
    // freely, subject to the following restrictions:
    //
    // 1. The origin of this software must not be misrepresented; you must not
    //   claim that you wrote the original software. If you use this software
    //   in a product, an acknowledgment in the product documentation would be
    //   appreciated but is not required.
    // 2. Altered source versions must be plainly marked as such, and must not be
    //   misrepresented as being the original software.
    // 3. This notice may not be removed or altered from any source distribution.

    function GZheader() {
      /* true if compressed data believed to be text */
      this.text       = 0;
      /* modification time */
      this.time       = 0;
      /* extra flags (not used when writing a gzip file) */
      this.xflags     = 0;
      /* operating system */
      this.os         = 0;
      /* pointer to extra field or Z_NULL if none */
      this.extra      = null;
      /* extra field length (valid if extra != Z_NULL) */
      this.extra_len  = 0; // Actually, we don't need it in JS,
                           // but leave for few code modifications

      //
      // Setup limits is not necessary because in js we should not preallocate memory
      // for inflate use constant limit in 65536 bytes
      //

      /* space at extra (only when reading header) */
      // this.extra_max  = 0;
      /* pointer to zero-terminated file name or Z_NULL */
      this.name       = '';
      /* space at name (only when reading header) */
      // this.name_max   = 0;
      /* pointer to zero-terminated comment or Z_NULL */
      this.comment    = '';
      /* space at comment (only when reading header) */
      // this.comm_max   = 0;
      /* true if there was or will be a header crc */
      this.hcrc       = 0;
      /* true when done reading gzip header (not used when writing a gzip file) */
      this.done       = false;
    }

    var gzheader = GZheader;

    var toString = Object.prototype.toString;

    /**
     * class Inflate
     *
     * Generic JS-style wrapper for zlib calls. If you don't need
     * streaming behaviour - use more simple functions: [[inflate]]
     * and [[inflateRaw]].
     **/

    /* internal
     * inflate.chunks -> Array
     *
     * Chunks of output data, if [[Inflate#onData]] not overridden.
     **/

    /**
     * Inflate.result -> Uint8Array|Array|String
     *
     * Uncompressed result, generated by default [[Inflate#onData]]
     * and [[Inflate#onEnd]] handlers. Filled after you push last chunk
     * (call [[Inflate#push]] with `Z_FINISH` / `true` param) or if you
     * push a chunk with explicit flush (call [[Inflate#push]] with
     * `Z_SYNC_FLUSH` param).
     **/

    /**
     * Inflate.err -> Number
     *
     * Error code after inflate finished. 0 (Z_OK) on success.
     * Should be checked if broken data possible.
     **/

    /**
     * Inflate.msg -> String
     *
     * Error message, if [[Inflate.err]] != 0
     **/


    /**
     * new Inflate(options)
     * - options (Object): zlib inflate options.
     *
     * Creates new inflator instance with specified params. Throws exception
     * on bad params. Supported options:
     *
     * - `windowBits`
     * - `dictionary`
     *
     * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
     * for more information on these.
     *
     * Additional options, for internal needs:
     *
     * - `chunkSize` - size of generated data chunks (16K by default)
     * - `raw` (Boolean) - do raw inflate
     * - `to` (String) - if equal to 'string', then result will be converted
     *   from utf8 to utf16 (javascript) string. When string output requested,
     *   chunk length can differ from `chunkSize`, depending on content.
     *
     * By default, when no options set, autodetect deflate/gzip data format via
     * wrapper header.
     *
     * ##### Example:
     *
     * ```javascript
     * var pako = require('pako')
     *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
     *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
     *
     * var inflate = new pako.Inflate({ level: 3});
     *
     * inflate.push(chunk1, false);
     * inflate.push(chunk2, true);  // true -> last chunk
     *
     * if (inflate.err) { throw new Error(inflate.err); }
     *
     * console.log(inflate.result);
     * ```
     **/
    function Inflate(options) {
      if (!(this instanceof Inflate)) return new Inflate(options);

      this.options = common$1.assign({
        chunkSize: 16384,
        windowBits: 0,
        to: ''
      }, options || {});

      var opt = this.options;

      // Force window size for `raw` data, if not set directly,
      // because we have no header for autodetect.
      if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {
        opt.windowBits = -opt.windowBits;
        if (opt.windowBits === 0) { opt.windowBits = -15; }
      }

      // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate
      if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&
          !(options && options.windowBits)) {
        opt.windowBits += 32;
      }

      // Gzip header has no info about windows size, we can do autodetect only
      // for deflate. So, if window size not set, force it to max when gzip possible
      if ((opt.windowBits > 15) && (opt.windowBits < 48)) {
        // bit 3 (16) -> gzipped data
        // bit 4 (32) -> autodetect gzip/deflate
        if ((opt.windowBits & 15) === 0) {
          opt.windowBits |= 15;
        }
      }

      this.err    = 0;      // error code, if happens (0 = Z_OK)
      this.msg    = '';     // error message
      this.ended  = false;  // used to avoid multiple onEnd() calls
      this.chunks = [];     // chunks of compressed data

      this.strm   = new zstream();
      this.strm.avail_out = 0;

      var status  = inflate_1$1.inflateInit2(
        this.strm,
        opt.windowBits
      );

      if (status !== constants.Z_OK) {
        throw new Error(messages[status]);
      }

      this.header = new gzheader();

      inflate_1$1.inflateGetHeader(this.strm, this.header);

      // Setup dictionary
      if (opt.dictionary) {
        // Convert data if needed
        if (typeof opt.dictionary === 'string') {
          opt.dictionary = strings.string2buf(opt.dictionary);
        } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {
          opt.dictionary = new Uint8Array(opt.dictionary);
        }
        if (opt.raw) { //In raw mode we need to set the dictionary early
          status = inflate_1$1.inflateSetDictionary(this.strm, opt.dictionary);
          if (status !== constants.Z_OK) {
            throw new Error(messages[status]);
          }
        }
      }
    }

    /**
     * Inflate#push(data[, mode]) -> Boolean
     * - data (Uint8Array|Array|ArrayBuffer|String): input data
     * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
     *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.
     *
     * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with
     * new output chunks. Returns `true` on success. The last data block must have
     * mode Z_FINISH (or `true`). That will flush internal pending buffers and call
     * [[Inflate#onEnd]]. For interim explicit flushes (without ending the stream) you
     * can use mode Z_SYNC_FLUSH, keeping the decompression context.
     *
     * On fail call [[Inflate#onEnd]] with error code and return false.
     *
     * We strongly recommend to use `Uint8Array` on input for best speed (output
     * format is detected automatically). Also, don't skip last param and always
     * use the same type in your code (boolean or number). That will improve JS speed.
     *
     * For regular `Array`-s make sure all elements are [0..255].
     *
     * ##### Example
     *
     * ```javascript
     * push(chunk, false); // push one of data chunks
     * ...
     * push(chunk, true);  // push last chunk
     * ```
     **/
    Inflate.prototype.push = function (data, mode) {
      var strm = this.strm;
      var chunkSize = this.options.chunkSize;
      var dictionary = this.options.dictionary;
      var status, _mode;
      var next_out_utf8, tail, utf8str;

      // Flag to properly process Z_BUF_ERROR on testing inflate call
      // when we check that all output data was flushed.
      var allowBufError = false;

      if (this.ended) { return false; }
      _mode = (mode === ~~mode) ? mode : ((mode === true) ? constants.Z_FINISH : constants.Z_NO_FLUSH);

      // Convert data if needed
      if (typeof data === 'string') {
        // Only binary strings can be decompressed on practice
        strm.input = strings.binstring2buf(data);
      } else if (toString.call(data) === '[object ArrayBuffer]') {
        strm.input = new Uint8Array(data);
      } else {
        strm.input = data;
      }

      strm.next_in = 0;
      strm.avail_in = strm.input.length;

      do {
        if (strm.avail_out === 0) {
          strm.output = new common$1.Buf8(chunkSize);
          strm.next_out = 0;
          strm.avail_out = chunkSize;
        }

        status = inflate_1$1.inflate(strm, constants.Z_NO_FLUSH);    /* no bad return value */

        if (status === constants.Z_NEED_DICT && dictionary) {
          status = inflate_1$1.inflateSetDictionary(this.strm, dictionary);
        }

        if (status === constants.Z_BUF_ERROR && allowBufError === true) {
          status = constants.Z_OK;
          allowBufError = false;
        }

        if (status !== constants.Z_STREAM_END && status !== constants.Z_OK) {
          this.onEnd(status);
          this.ended = true;
          return false;
        }

        if (strm.next_out) {
          if (strm.avail_out === 0 || status === constants.Z_STREAM_END || (strm.avail_in === 0 && (_mode === constants.Z_FINISH || _mode === constants.Z_SYNC_FLUSH))) {

            if (this.options.to === 'string') {

              next_out_utf8 = strings.utf8border(strm.output, strm.next_out);

              tail = strm.next_out - next_out_utf8;
              utf8str = strings.buf2string(strm.output, next_out_utf8);

              // move tail
              strm.next_out = tail;
              strm.avail_out = chunkSize - tail;
              if (tail) { common$1.arraySet(strm.output, strm.output, next_out_utf8, tail, 0); }

              this.onData(utf8str);

            } else {
              this.onData(common$1.shrinkBuf(strm.output, strm.next_out));
            }
          }
        }

        // When no more input data, we should check that internal inflate buffers
        // are flushed. The only way to do it when avail_out = 0 - run one more
        // inflate pass. But if output data not exists, inflate return Z_BUF_ERROR.
        // Here we set flag to process this error properly.
        //
        // NOTE. Deflate does not return error in this case and does not needs such
        // logic.
        if (strm.avail_in === 0 && strm.avail_out === 0) {
          allowBufError = true;
        }

      } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== constants.Z_STREAM_END);

      if (status === constants.Z_STREAM_END) {
        _mode = constants.Z_FINISH;
      }

      // Finalize on the last chunk.
      if (_mode === constants.Z_FINISH) {
        status = inflate_1$1.inflateEnd(this.strm);
        this.onEnd(status);
        this.ended = true;
        return status === constants.Z_OK;
      }

      // callback interim results if Z_SYNC_FLUSH.
      if (_mode === constants.Z_SYNC_FLUSH) {
        this.onEnd(constants.Z_OK);
        strm.avail_out = 0;
        return true;
      }

      return true;
    };


    /**
     * Inflate#onData(chunk) -> Void
     * - chunk (Uint8Array|Array|String): output data. Type of array depends
     *   on js engine support. When string output requested, each chunk
     *   will be string.
     *
     * By default, stores data blocks in `chunks[]` property and glue
     * those in `onEnd`. Override this handler, if you need another behaviour.
     **/
    Inflate.prototype.onData = function (chunk) {
      this.chunks.push(chunk);
    };


    /**
     * Inflate#onEnd(status) -> Void
     * - status (Number): inflate status. 0 (Z_OK) on success,
     *   other if not.
     *
     * Called either after you tell inflate that the input stream is
     * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)
     * or if an error happened. By default - join collected chunks,
     * free memory and fill `results` / `err` properties.
     **/
    Inflate.prototype.onEnd = function (status) {
      // On success - join
      if (status === constants.Z_OK) {
        if (this.options.to === 'string') {
          // Glue & convert here, until we teach pako to send
          // utf8 aligned strings to onData
          this.result = this.chunks.join('');
        } else {
          this.result = common$1.flattenChunks(this.chunks);
        }
      }
      this.chunks = [];
      this.err = status;
      this.msg = this.strm.msg;
    };


    /**
     * inflate(data[, options]) -> Uint8Array|Array|String
     * - data (Uint8Array|Array|String): input data to decompress.
     * - options (Object): zlib inflate options.
     *
     * Decompress `data` with inflate/ungzip and `options`. Autodetect
     * format via wrapper header by default. That's why we don't provide
     * separate `ungzip` method.
     *
     * Supported options are:
     *
     * - windowBits
     *
     * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
     * for more information.
     *
     * Sugar (options):
     *
     * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
     *   negative windowBits implicitly.
     * - `to` (String) - if equal to 'string', then result will be converted
     *   from utf8 to utf16 (javascript) string. When string output requested,
     *   chunk length can differ from `chunkSize`, depending on content.
     *
     *
     * ##### Example:
     *
     * ```javascript
     * var pako = require('pako')
     *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])
     *   , output;
     *
     * try {
     *   output = pako.inflate(input);
     * } catch (err)
     *   console.log(err);
     * }
     * ```
     **/
    function inflate$1(input, options) {
      var inflator = new Inflate(options);

      inflator.push(input, true);

      // That will never happens, if you don't cheat with options :)
      if (inflator.err) { throw inflator.msg || messages[inflator.err]; }

      return inflator.result;
    }


    /**
     * inflateRaw(data[, options]) -> Uint8Array|Array|String
     * - data (Uint8Array|Array|String): input data to decompress.
     * - options (Object): zlib inflate options.
     *
     * The same as [[inflate]], but creates raw data, without wrapper
     * (header and adler32 crc).
     **/
    function inflateRaw(input, options) {
      options = options || {};
      options.raw = true;
      return inflate$1(input, options);
    }


    /**
     * ungzip(data[, options]) -> Uint8Array|Array|String
     * - data (Uint8Array|Array|String): input data to decompress.
     * - options (Object): zlib inflate options.
     *
     * Just shortcut to [[inflate]], because it autodetects format
     * by header.content. Done for convenience.
     **/


    var Inflate_1 = Inflate;
    var inflate_2 = inflate$1;
    var inflateRaw_1 = inflateRaw;
    var ungzip  = inflate$1;

    var inflate_1 = {
    	Inflate: Inflate_1,
    	inflate: inflate_2,
    	inflateRaw: inflateRaw_1,
    	ungzip: ungzip
    };

    var assign$1    = common$1.assign;





    var pako = {};

    assign$1(pako, deflate_1, inflate_1, constants);

    var pako_1 = pako;

    const processFn = (fn, options) => function (...args) {
    	const P = options.promiseModule;

    	return new P((resolve, reject) => {
    		if (options.multiArgs) {
    			args.push((...result) => {
    				if (options.errorFirst) {
    					if (result[0]) {
    						reject(result);
    					} else {
    						result.shift();
    						resolve(result);
    					}
    				} else {
    					resolve(result);
    				}
    			});
    		} else if (options.errorFirst) {
    			args.push((error, result) => {
    				if (error) {
    					reject(error);
    				} else {
    					resolve(result);
    				}
    			});
    		} else {
    			args.push(resolve);
    		}

    		fn.apply(this, args);
    	});
    };

    var pify = (input, options) => {
    	options = Object.assign({
    		exclude: [/.+(Sync|Stream)$/],
    		errorFirst: true,
    		promiseModule: Promise
    	}, options);

    	const objType = typeof input;
    	if (!(input !== null && (objType === 'object' || objType === 'function'))) {
    		throw new TypeError(`Expected \`input\` to be a \`Function\` or \`Object\`, got \`${input === null ? 'null' : objType}\``);
    	}

    	const filter = key => {
    		const match = pattern => typeof pattern === 'string' ? key === pattern : pattern.test(key);
    		return options.include ? options.include.some(match) : !options.exclude.some(match);
    	};

    	let ret;
    	if (objType === 'function') {
    		ret = function (...args) {
    			return options.excludeMain ? input(...args) : processFn(input, options).apply(this, args);
    		};
    	} else {
    		ret = Object.create(Object.getPrototypeOf(input));
    	}

    	for (const key in input) { // eslint-disable-line guard-for-in
    		const property = input[key];
    		ret[key] = typeof property === 'function' && filter(key) ? processFn(property, options) : property;
    	}

    	return ret;
    };

    // A simple implementation of make-array
    function makeArray (subject) {
      return Array.isArray(subject)
        ? subject
        : [subject]
    }

    const EMPTY = '';
    const SPACE = ' ';
    const ESCAPE = '\\';
    const REGEX_TEST_BLANK_LINE = /^\s+$/;
    const REGEX_INVALID_TRAILING_BACKSLASH = /(?:[^\\]|^)\\$/;
    const REGEX_REPLACE_LEADING_EXCAPED_EXCLAMATION = /^\\!/;
    const REGEX_REPLACE_LEADING_EXCAPED_HASH = /^\\#/;
    const REGEX_SPLITALL_CRLF = /\r?\n/g;
    // /foo,
    // ./foo,
    // ../foo,
    // .
    // ..
    const REGEX_TEST_INVALID_PATH = /^\.*\/|^\.+$/;

    const SLASH = '/';

    // Do not use ternary expression here, since "istanbul ignore next" is buggy
    let TMP_KEY_IGNORE = 'node-ignore';
    /* istanbul ignore else */
    if (typeof Symbol !== 'undefined') {
      TMP_KEY_IGNORE = Symbol.for('node-ignore');
    }
    const KEY_IGNORE = TMP_KEY_IGNORE;

    const define = (object, key, value) =>
      Object.defineProperty(object, key, {value});

    const REGEX_REGEXP_RANGE = /([0-z])-([0-z])/g;

    const RETURN_FALSE = () => false;

    // Sanitize the range of a regular expression
    // The cases are complicated, see test cases for details
    const sanitizeRange = range => range.replace(
      REGEX_REGEXP_RANGE,
      (match, from, to) => from.charCodeAt(0) <= to.charCodeAt(0)
        ? match
        // Invalid range (out of order) which is ok for gitignore rules but
        //   fatal for JavaScript regular expression, so eliminate it.
        : EMPTY
    );

    // See fixtures #59
    const cleanRangeBackSlash = slashes => {
      const {length} = slashes;
      return slashes.slice(0, length - length % 2)
    };

    // > If the pattern ends with a slash,
    // > it is removed for the purpose of the following description,
    // > but it would only find a match with a directory.
    // > In other words, foo/ will match a directory foo and paths underneath it,
    // > but will not match a regular file or a symbolic link foo
    // >  (this is consistent with the way how pathspec works in general in Git).
    // '`foo/`' will not match regular file '`foo`' or symbolic link '`foo`'
    // -> ignore-rules will not deal with it, because it costs extra `fs.stat` call
    //      you could use option `mark: true` with `glob`

    // '`foo/`' should not continue with the '`..`'
    const REPLACERS = [

      // > Trailing spaces are ignored unless they are quoted with backslash ("\")
      [
        // (a\ ) -> (a )
        // (a  ) -> (a)
        // (a \ ) -> (a  )
        /\\?\s+$/,
        match => match.indexOf('\\') === 0
          ? SPACE
          : EMPTY
      ],

      // replace (\ ) with ' '
      [
        /\\\s/g,
        () => SPACE
      ],

      // Escape metacharacters
      // which is written down by users but means special for regular expressions.

      // > There are 12 characters with special meanings:
      // > - the backslash \,
      // > - the caret ^,
      // > - the dollar sign $,
      // > - the period or dot .,
      // > - the vertical bar or pipe symbol |,
      // > - the question mark ?,
      // > - the asterisk or star *,
      // > - the plus sign +,
      // > - the opening parenthesis (,
      // > - the closing parenthesis ),
      // > - and the opening square bracket [,
      // > - the opening curly brace {,
      // > These special characters are often called "metacharacters".
      [
        /[\\$.|*+(){^]/g,
        match => `\\${match}`
      ],

      [
        // > a question mark (?) matches a single character
        /(?!\\)\?/g,
        () => '[^/]'
      ],

      // leading slash
      [

        // > A leading slash matches the beginning of the pathname.
        // > For example, "/*.c" matches "cat-file.c" but not "mozilla-sha1/sha1.c".
        // A leading slash matches the beginning of the pathname
        /^\//,
        () => '^'
      ],

      // replace special metacharacter slash after the leading slash
      [
        /\//g,
        () => '\\/'
      ],

      [
        // > A leading "**" followed by a slash means match in all directories.
        // > For example, "**/foo" matches file or directory "foo" anywhere,
        // > the same as pattern "foo".
        // > "**/foo/bar" matches file or directory "bar" anywhere that is directly
        // >   under directory "foo".
        // Notice that the '*'s have been replaced as '\\*'
        /^\^*\\\*\\\*\\\//,

        // '**/foo' <-> 'foo'
        () => '^(?:.*\\/)?'
      ],

      // starting
      [
        // there will be no leading '/'
        //   (which has been replaced by section "leading slash")
        // If starts with '**', adding a '^' to the regular expression also works
        /^(?=[^^])/,
        function startingReplacer () {
          // If has a slash `/` at the beginning or middle
          return !/\/(?!$)/.test(this)
            // > Prior to 2.22.1
            // > If the pattern does not contain a slash /,
            // >   Git treats it as a shell glob pattern
            // Actually, if there is only a trailing slash,
            //   git also treats it as a shell glob pattern

            // After 2.22.1 (compatible but clearer)
            // > If there is a separator at the beginning or middle (or both)
            // > of the pattern, then the pattern is relative to the directory
            // > level of the particular .gitignore file itself.
            // > Otherwise the pattern may also match at any level below
            // > the .gitignore level.
            ? '(?:^|\\/)'

            // > Otherwise, Git treats the pattern as a shell glob suitable for
            // >   consumption by fnmatch(3)
            : '^'
        }
      ],

      // two globstars
      [
        // Use lookahead assertions so that we could match more than one `'/**'`
        /\\\/\\\*\\\*(?=\\\/|$)/g,

        // Zero, one or several directories
        // should not use '*', or it will be replaced by the next replacer

        // Check if it is not the last `'/**'`
        (_, index, str) => index + 6 < str.length

          // case: /**/
          // > A slash followed by two consecutive asterisks then a slash matches
          // >   zero or more directories.
          // > For example, "a/**/b" matches "a/b", "a/x/b", "a/x/y/b" and so on.
          // '/**/'
          ? '(?:\\/[^\\/]+)*'

          // case: /**
          // > A trailing `"/**"` matches everything inside.

          // #21: everything inside but it should not include the current folder
          : '\\/.+'
      ],

      // normal intermediate wildcards
      [
        // Never replace escaped '*'
        // ignore rule '\*' will match the path '*'

        // 'abc.*/' -> go
        // 'abc.*'  -> skip this rule,
        //    coz trailing single wildcard will be handed by [trailing wildcard]
        /(^|[^\\]+)(\\\*)+(?=.+)/g,

        // '*.js' matches '.js'
        // '*.js' doesn't match 'abc'
        (_, p1, p2) => {
          // 1.
          // > An asterisk "*" matches anything except a slash.
          // 2.
          // > Other consecutive asterisks are considered regular asterisks
          // > and will match according to the previous rules.
          const unescaped = p2.replace(/\\\*/g, '[^\\/]*');
          return p1 + unescaped
        }
      ],

      [
        // unescape, revert step 3 except for back slash
        // For example, if a user escape a '\\*',
        // after step 3, the result will be '\\\\\\*'
        /\\\\\\(?=[$.|*+(){^])/g,
        () => ESCAPE
      ],

      [
        // '\\\\' -> '\\'
        /\\\\/g,
        () => ESCAPE
      ],

      [
        // > The range notation, e.g. [a-zA-Z],
        // > can be used to match one of the characters in a range.

        // `\` is escaped by step 3
        /(\\)?\[([^\]/]*?)(\\*)($|\])/g,
        (match, leadEscape, range, endEscape, close) => leadEscape === ESCAPE
          // '\\[bar]' -> '\\\\[bar\\]'
          ? `\\[${range}${cleanRangeBackSlash(endEscape)}${close}`
          : close === ']'
            ? endEscape.length % 2 === 0
              // A normal case, and it is a range notation
              // '[bar]'
              // '[bar\\\\]'
              ? `[${sanitizeRange(range)}${endEscape}]`
              // Invalid range notaton
              // '[bar\\]' -> '[bar\\\\]'
              : '[]'
            : '[]'
      ],

      // ending
      [
        // 'js' will not match 'js.'
        // 'ab' will not match 'abc'
        /(?:[^*])$/,

        // WTF!
        // https://git-scm.com/docs/gitignore
        // changes in [2.22.1](https://git-scm.com/docs/gitignore/2.22.1)
        // which re-fixes #24, #38

        // > If there is a separator at the end of the pattern then the pattern
        // > will only match directories, otherwise the pattern can match both
        // > files and directories.

        // 'js*' will not match 'a.js'
        // 'js/' will not match 'a.js'
        // 'js' will match 'a.js' and 'a.js/'
        match => /\/$/.test(match)
          // foo/ will not match 'foo'
          ? `${match}$`
          // foo matches 'foo' and 'foo/'
          : `${match}(?=$|\\/$)`
      ],

      // trailing wildcard
      [
        /(\^|\\\/)?\\\*$/,
        (_, p1) => {
          const prefix = p1
            // '\^':
            // '/*' does not match EMPTY
            // '/*' does not match everything

            // '\\\/':
            // 'abc/*' does not match 'abc/'
            ? `${p1}[^/]+`

            // 'a*' matches 'a'
            // 'a*' matches 'aa'
            : '[^/]*';

          return `${prefix}(?=$|\\/$)`
        }
      ],
    ];

    // A simple cache, because an ignore rule only has only one certain meaning
    const regexCache = Object.create(null);

    // @param {pattern}
    const makeRegex = (pattern, ignoreCase) => {
      let source = regexCache[pattern];

      if (!source) {
        source = REPLACERS.reduce(
          (prev, current) => prev.replace(current[0], current[1].bind(pattern)),
          pattern
        );
        regexCache[pattern] = source;
      }

      return ignoreCase
        ? new RegExp(source, 'i')
        : new RegExp(source)
    };

    const isString = subject => typeof subject === 'string';

    // > A blank line matches no files, so it can serve as a separator for readability.
    const checkPattern = pattern => pattern
      && isString(pattern)
      && !REGEX_TEST_BLANK_LINE.test(pattern)
      && !REGEX_INVALID_TRAILING_BACKSLASH.test(pattern)

      // > A line starting with # serves as a comment.
      && pattern.indexOf('#') !== 0;

    const splitPattern = pattern => pattern.split(REGEX_SPLITALL_CRLF);

    class IgnoreRule {
      constructor (
        origin,
        pattern,
        negative,
        regex
      ) {
        this.origin = origin;
        this.pattern = pattern;
        this.negative = negative;
        this.regex = regex;
      }
    }

    const createRule = (pattern, ignoreCase) => {
      const origin = pattern;
      let negative = false;

      // > An optional prefix "!" which negates the pattern;
      if (pattern.indexOf('!') === 0) {
        negative = true;
        pattern = pattern.substr(1);
      }

      pattern = pattern
      // > Put a backslash ("\") in front of the first "!" for patterns that
      // >   begin with a literal "!", for example, `"\!important!.txt"`.
      .replace(REGEX_REPLACE_LEADING_EXCAPED_EXCLAMATION, '!')
      // > Put a backslash ("\") in front of the first hash for patterns that
      // >   begin with a hash.
      .replace(REGEX_REPLACE_LEADING_EXCAPED_HASH, '#');

      const regex = makeRegex(pattern, ignoreCase);

      return new IgnoreRule(
        origin,
        pattern,
        negative,
        regex
      )
    };

    const throwError$1 = (message, Ctor) => {
      throw new Ctor(message)
    };

    const checkPath = (path, originalPath, doThrow) => {
      if (!isString(path)) {
        return doThrow(
          `path must be a string, but got \`${originalPath}\``,
          TypeError
        )
      }

      // We don't know if we should ignore EMPTY, so throw
      if (!path) {
        return doThrow(`path must not be empty`, TypeError)
      }

      // Check if it is a relative path
      if (checkPath.isNotRelative(path)) {
        const r = '`path.relative()`d';
        return doThrow(
          `path should be a ${r} string, but got "${originalPath}"`,
          RangeError
        )
      }

      return true
    };

    const isNotRelative = path => REGEX_TEST_INVALID_PATH.test(path);

    checkPath.isNotRelative = isNotRelative;
    checkPath.convert = p => p;

    class Ignore {
      constructor ({
        ignorecase = true,
        ignoreCase = ignorecase,
        allowRelativePaths = false
      } = {}) {
        define(this, KEY_IGNORE, true);

        this._rules = [];
        this._ignoreCase = ignoreCase;
        this._allowRelativePaths = allowRelativePaths;
        this._initCache();
      }

      _initCache () {
        this._ignoreCache = Object.create(null);
        this._testCache = Object.create(null);
      }

      _addPattern (pattern) {
        // #32
        if (pattern && pattern[KEY_IGNORE]) {
          this._rules = this._rules.concat(pattern._rules);
          this._added = true;
          return
        }

        if (checkPattern(pattern)) {
          const rule = createRule(pattern, this._ignoreCase);
          this._added = true;
          this._rules.push(rule);
        }
      }

      // @param {Array<string> | string | Ignore} pattern
      add (pattern) {
        this._added = false;

        makeArray(
          isString(pattern)
            ? splitPattern(pattern)
            : pattern
        ).forEach(this._addPattern, this);

        // Some rules have just added to the ignore,
        // making the behavior changed.
        if (this._added) {
          this._initCache();
        }

        return this
      }

      // legacy
      addPattern (pattern) {
        return this.add(pattern)
      }

      //          |           ignored : unignored
      // negative |   0:0   |   0:1   |   1:0   |   1:1
      // -------- | ------- | ------- | ------- | --------
      //     0    |  TEST   |  TEST   |  SKIP   |    X
      //     1    |  TESTIF |  SKIP   |  TEST   |    X

      // - SKIP: always skip
      // - TEST: always test
      // - TESTIF: only test if checkUnignored
      // - X: that never happen

      // @param {boolean} whether should check if the path is unignored,
      //   setting `checkUnignored` to `false` could reduce additional
      //   path matching.

      // @returns {TestResult} true if a file is ignored
      _testOne (path, checkUnignored) {
        let ignored = false;
        let unignored = false;

        this._rules.forEach(rule => {
          const {negative} = rule;
          if (
            unignored === negative && ignored !== unignored
            || negative && !ignored && !unignored && !checkUnignored
          ) {
            return
          }

          const matched = rule.regex.test(path);

          if (matched) {
            ignored = !negative;
            unignored = negative;
          }
        });

        return {
          ignored,
          unignored
        }
      }

      // @returns {TestResult}
      _test (originalPath, cache, checkUnignored, slices) {
        const path = originalPath
          // Supports nullable path
          && checkPath.convert(originalPath);

        checkPath(
          path,
          originalPath,
          this._allowRelativePaths
            ? RETURN_FALSE
            : throwError$1
        );

        return this._t(path, cache, checkUnignored, slices)
      }

      _t (path, cache, checkUnignored, slices) {
        if (path in cache) {
          return cache[path]
        }

        if (!slices) {
          // path/to/a.js
          // ['path', 'to', 'a.js']
          slices = path.split(SLASH);
        }

        slices.pop();

        // If the path has no parent directory, just test it
        if (!slices.length) {
          return cache[path] = this._testOne(path, checkUnignored)
        }

        const parent = this._t(
          slices.join(SLASH) + SLASH,
          cache,
          checkUnignored,
          slices
        );

        // If the path contains a parent directory, check the parent first
        return cache[path] = parent.ignored
          // > It is not possible to re-include a file if a parent directory of
          // >   that file is excluded.
          ? parent
          : this._testOne(path, checkUnignored)
      }

      ignores (path) {
        return this._test(path, this._ignoreCache, false).ignored
      }

      createFilter () {
        return path => !this.ignores(path)
      }

      filter (paths) {
        return makeArray(paths).filter(this.createFilter())
      }

      // @returns {TestResult}
      test (path) {
        return this._test(path, this._testCache, true)
      }
    }

    const factory = options => new Ignore(options);

    const isPathValid = path =>
      checkPath(path && checkPath.convert(path), path, RETURN_FALSE);

    factory.isPathValid = isPathValid;

    // Fixes typescript
    factory.default = factory;

    var ignore = factory;

    // Windows
    // --------------------------------------------------------------
    /* istanbul ignore if */
    if (
      // Detect `process` so that it can run in browsers.
      typeof process !== 'undefined'
      && (
        process.env && process.env.IGNORE_TEST_WIN32
        || process.platform === 'win32'
      )
    ) {
      /* eslint no-control-regex: "off" */
      const makePosix = str => /^\\\\\?\\/.test(str)
      || /["<>|\u0000-\u001F]+/u.test(str)
        ? str
        : str.replace(/\\/g, '/');

      checkPath.convert = makePosix;

      // 'C:\\foo'     <- 'C:\\foo' has been converted to 'C:/'
      // 'd:\\foo'
      const REGIX_IS_WINDOWS_PATH_ABSOLUTE = /^[a-z]:\//i;
      checkPath.isNotRelative = path =>
        REGIX_IS_WINDOWS_PATH_ABSOLUTE.test(path)
        || isNotRelative(path);
    }

    function escapeRegExp(string) {
      return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'); // $& means the whole matched string
    }

    function replaceAll(str, search, replacement) {
      search = search instanceof RegExp ? search : new RegExp(escapeRegExp(search), 'g');

      return str.replace(search, replacement);
    }

    var CleanGitRef = {
      clean: function clean(value) {
        if (typeof value !== 'string') {
          throw new Error('Expected a string, received: ' + value);
        }

        value = replaceAll(value, './', '/');
        value = replaceAll(value, '..', '.');
        value = replaceAll(value, ' ', '-');
        value = replaceAll(value, /^[~^:?*\\\-]/g, '');
        value = replaceAll(value, /[~^:?*\\]/g, '-');
        value = replaceAll(value, /[~^:?*\\\-]$/g, '');
        value = replaceAll(value, '@{', '-');
        value = replaceAll(value, /\.$/g, '');
        value = replaceAll(value, /\/$/g, '');
        value = replaceAll(value, /\.lock$/g, '');
        return value;
      }
    };

    var lib = CleanGitRef;

    /*
     * URL: https://github.com/cubicdaiya/onp
     *
     * Copyright (c) 2013 Tatsuhiko Kubo <cubicdaiya@gmail.com>
     *
     *  Permission is hereby granted, free of charge, to any person obtaining a copy
     *  of this software and associated documentation files (the "Software"), to deal
     *  in the Software without restriction, including without limitation the rights
     *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     *  copies of the Software, and to permit persons to whom the Software is
     *  furnished to do so, subject to the following conditions:
     *
     *  The above copyright notice and this permission notice shall be included in
     *  all copies or substantial portions of the Software.
     *
     *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     *  THE SOFTWARE.
     */

    /**
     * The algorithm implemented here is based on "An O(NP) Sequence Comparison Algorithm"
     * by described by Sun Wu, Udi Manber and Gene Myers
    */
    var onp = function (a_, b_) {
        var a          = a_,
            b          = b_,
            m          = a.length,
            n          = b.length,
            reverse    = false,
            ed         = null,
            offset     = m + 1,
            path       = [],
            pathposi   = [],
            ses        = [],
            lcs        = "",
            SES_DELETE = -1,
            SES_COMMON = 0,
            SES_ADD    = 1;

        var tmp1,
            tmp2;

        var init = function () {
            if (m >= n) {
                tmp1    = a;
                tmp2    = m;
                a       = b;
                b       = tmp1;
                m       = n;
                n       = tmp2;
                reverse = true;
                offset = m + 1;
            }
        };

        var P = function (x, y, k) {
            return {
                'x' : x,
                'y' : y,
                'k' : k,
            };
        };

        var seselem = function (elem, t) {
            return {
                'elem' : elem,
                't'    : t,
            };
        };

        var snake = function (k, p, pp) {
            var r, x, y;
            if (p > pp) {
                r = path[k-1+offset];
            } else {
                r = path[k+1+offset];
            }

            y = Math.max(p, pp);
            x = y - k;
            while (x < m && y < n && a[x] === b[y]) {
                ++x;
                ++y;
            }

            path[k+offset] = pathposi.length;
            pathposi[pathposi.length] = new P(x, y, r);
            return y;
        };

        var recordseq = function (epc) {
            var px_idx, py_idx, i;
            px_idx = py_idx = 0;
            for (i=epc.length-1;i>=0;--i) {
                while(px_idx < epc[i].x || py_idx < epc[i].y) {
                    if (epc[i].y - epc[i].x > py_idx - px_idx) {
                        if (reverse) {
                            ses[ses.length] = new seselem(b[py_idx], SES_DELETE);
                        } else {
                            ses[ses.length] = new seselem(b[py_idx], SES_ADD);
                        }
                        ++py_idx;
                    } else if (epc[i].y - epc[i].x < py_idx - px_idx) {
                        if (reverse) {
                            ses[ses.length] = new seselem(a[px_idx], SES_ADD);
                        } else {
                            ses[ses.length] = new seselem(a[px_idx], SES_DELETE);
                        }
                        ++px_idx;
                    } else {
                        ses[ses.length] = new seselem(a[px_idx], SES_COMMON);
                        lcs += a[px_idx];
                        ++px_idx;
                        ++py_idx;
                    }
                }
            }
        };

        init();

        return {
            SES_DELETE : -1,
            SES_COMMON :  0,
            SES_ADD    :  1,
            editdistance : function () {
                return ed;
            },
            getlcs : function () {
                return lcs;
            },
            getses : function () {
                return ses;
            },
            compose : function () {
                var delta, size, fp, p, r, epc, i, k;
                delta  = n - m;
                size   = m + n + 3;
                fp     = {};
                for (i=0;i<size;++i) {
                    fp[i] = -1;
                    path[i] = -1;
                }
                p = -1;
                do {
                    ++p;
                    for (k=-p;k<=delta-1;++k) {
                        fp[k+offset] = snake(k, fp[k-1+offset]+1, fp[k+1+offset]);
                    }
                    for (k=delta+p;k>=delta+1;--k) {
                        fp[k+offset] = snake(k, fp[k-1+offset]+1, fp[k+1+offset]);
                    }
                    fp[delta+offset] = snake(delta, fp[delta-1+offset]+1, fp[delta+1+offset]);
                } while (fp[delta+offset] !== n);

                ed = delta + 2 * p;

                r = path[delta+offset];

                epc  = [];
                while (r !== -1) {
                    epc[epc.length] = new P(pathposi[r].x, pathposi[r].y, null);
                    r = pathposi[r].k;
                }
                recordseq(epc);
            }
        };
    };

    // Copyright (c) 2006, 2008 Tony Garnock-Jones <tonyg@lshift.net>
    // Copyright (c) 2006, 2008 LShift Ltd. <query@lshift.net>
    //
    // Permission is hereby granted, free of charge, to any person
    // obtaining a copy of this software and associated documentation files
    // (the "Software"), to deal in the Software without restriction,
    // including without limitation the rights to use, copy, modify, merge,
    // publish, distribute, sublicense, and/or sell copies of the Software,
    // and to permit persons to whom the Software is furnished to do so,
    // subject to the following conditions:
    //
    // The above copyright notice and this permission notice shall be
    // included in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    // EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
    // NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
    // BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
    // ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
    // CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    // SOFTWARE.



    function longestCommonSubsequence(file1, file2) {
      var diff = new onp(file1, file2);
      diff.compose();
      var ses = diff.getses();

      var root;
      var prev;
      var file1RevIdx = file1.length - 1,
          file2RevIdx = file2.length - 1;
      for (var i = ses.length - 1; i >= 0; --i) {
          if (ses[i].t === diff.SES_COMMON) {
            if (prev) {
              prev.chain = {
                file1index: file1RevIdx,
                file2index: file2RevIdx,
                chain: null
              };
              prev = prev.chain;
            } else {
              root = {
                file1index: file1RevIdx,
                file2index: file2RevIdx,
                chain: null
              };
              prev = root;
            }
            file1RevIdx--;
            file2RevIdx--;
          } else if (ses[i].t === diff.SES_DELETE) {
            file1RevIdx--;
          } else if (ses[i].t === diff.SES_ADD) {
            file2RevIdx--;
          }
      }

      var tail = {
        file1index: -1,
        file2index: -1,
        chain: null
      };

      if (!prev) {
        return tail;
      }

      prev.chain = tail;

      return root;
    }

    function diffIndices(file1, file2) {
      // We apply the LCS to give a simple representation of the
      // offsets and lengths of mismatched chunks in the input
      // files. This is used by diff3_merge_indices below.

      var result = [];
      var tail1 = file1.length;
      var tail2 = file2.length;

      for (var candidate = longestCommonSubsequence(file1, file2); candidate !== null; candidate = candidate.chain) {
        var mismatchLength1 = tail1 - candidate.file1index - 1;
        var mismatchLength2 = tail2 - candidate.file2index - 1;
        tail1 = candidate.file1index;
        tail2 = candidate.file2index;

        if (mismatchLength1 || mismatchLength2) {
          result.push({
            file1: [tail1 + 1, mismatchLength1],
            file2: [tail2 + 1, mismatchLength2]
          });
        }
      }

      result.reverse();
      return result;
    }

    function diff3MergeIndices(a, o, b) {
      // Given three files, A, O, and B, where both A and B are
      // independently derived from O, returns a fairly complicated
      // internal representation of merge decisions it's taken. The
      // interested reader may wish to consult
      //
      // Sanjeev Khanna, Keshav Kunal, and Benjamin C. Pierce. "A
      // Formal Investigation of Diff3." In Arvind and Prasad,
      // editors, Foundations of Software Technology and Theoretical
      // Computer Science (FSTTCS), December 2007.
      //
      // (http://www.cis.upenn.edu/~bcpierce/papers/diff3-short.pdf)
      var i;

      var m1 = diffIndices(o, a);
      var m2 = diffIndices(o, b);

      var hunks = [];

      function addHunk(h, side) {
        hunks.push([h.file1[0], side, h.file1[1], h.file2[0], h.file2[1]]);
      }
      for (i = 0; i < m1.length; i++) {
        addHunk(m1[i], 0);
      }
      for (i = 0; i < m2.length; i++) {
        addHunk(m2[i], 2);
      }
      hunks.sort(function(x, y) {
        return x[0] - y[0]
      });

      var result = [];
      var commonOffset = 0;

      function copyCommon(targetOffset) {
        if (targetOffset > commonOffset) {
          result.push([1, commonOffset, targetOffset - commonOffset]);
          commonOffset = targetOffset;
        }
      }

      for (var hunkIndex = 0; hunkIndex < hunks.length; hunkIndex++) {
        var firstHunkIndex = hunkIndex;
        var hunk = hunks[hunkIndex];
        var regionLhs = hunk[0];
        var regionRhs = regionLhs + hunk[2];
        while (hunkIndex < hunks.length - 1) {
          var maybeOverlapping = hunks[hunkIndex + 1];
          var maybeLhs = maybeOverlapping[0];
          if (maybeLhs > regionRhs) break;
          regionRhs = Math.max(regionRhs, maybeLhs + maybeOverlapping[2]);
          hunkIndex++;
        }

        copyCommon(regionLhs);
        if (firstHunkIndex == hunkIndex) {
          // The "overlap" was only one hunk long, meaning that
          // there's no conflict here. Either a and o were the
          // same, or b and o were the same.
          if (hunk[4] > 0) {
            result.push([hunk[1], hunk[3], hunk[4]]);
          }
        } else {
          // A proper conflict. Determine the extents of the
          // regions involved from a, o and b. Effectively merge
          // all the hunks on the left into one giant hunk, and
          // do the same for the right; then, correct for skew
          // in the regions of o that each side changed, and
          // report appropriate spans for the three sides.
          var regions = {
            0: [a.length, -1, o.length, -1],
            2: [b.length, -1, o.length, -1]
          };
          for (i = firstHunkIndex; i <= hunkIndex; i++) {
            hunk = hunks[i];
            var side = hunk[1];
            var r = regions[side];
            var oLhs = hunk[0];
            var oRhs = oLhs + hunk[2];
            var abLhs = hunk[3];
            var abRhs = abLhs + hunk[4];
            r[0] = Math.min(abLhs, r[0]);
            r[1] = Math.max(abRhs, r[1]);
            r[2] = Math.min(oLhs, r[2]);
            r[3] = Math.max(oRhs, r[3]);
          }
          var aLhs = regions[0][0] + (regionLhs - regions[0][2]);
          var aRhs = regions[0][1] + (regionRhs - regions[0][3]);
          var bLhs = regions[2][0] + (regionLhs - regions[2][2]);
          var bRhs = regions[2][1] + (regionRhs - regions[2][3]);
          result.push([-1,
            aLhs, aRhs - aLhs,
            regionLhs, regionRhs - regionLhs,
            bLhs, bRhs - bLhs
          ]);
        }
        commonOffset = regionRhs;
      }

      copyCommon(o.length);
      return result;
    }

    function diff3Merge(a, o, b) {
      // Applies the output of Diff.diff3_merge_indices to actually
      // construct the merged file; the returned result alternates
      // between "ok" and "conflict" blocks.

      var result = [];
      var files = [a, o, b];
      var indices = diff3MergeIndices(a, o, b);

      var okLines = [];

      function flushOk() {
        if (okLines.length) {
          result.push({
            ok: okLines
          });
        }
        okLines = [];
      }

      function pushOk(xs) {
        for (var j = 0; j < xs.length; j++) {
          okLines.push(xs[j]);
        }
      }

      function isTrueConflict(rec) {
        if (rec[2] != rec[6]) return true;
        var aoff = rec[1];
        var boff = rec[5];
        for (var j = 0; j < rec[2]; j++) {
          if (a[j + aoff] != b[j + boff]) return true;
        }
        return false;
      }

      for (var i = 0; i < indices.length; i++) {
        var x = indices[i];
        var side = x[0];
        if (side == -1) {
          if (!isTrueConflict(x)) {
            pushOk(files[0].slice(x[1], x[1] + x[2]));
          } else {
            flushOk();
            result.push({
              conflict: {
                a: a.slice(x[1], x[1] + x[2]),
                aIndex: x[1],
                o: o.slice(x[3], x[3] + x[4]),
                oIndex: x[3],
                b: b.slice(x[5], x[5] + x[6]),
                bIndex: x[5]
              }
            });
          }
        } else {
          pushOk(files[side].slice(x[1], x[1] + x[2]));
        }
      }

      flushOk();
      return result;
    }

    var diff3 = diff3Merge;

    /**
     * @typedef {Object} GitProgressEvent
     * @property {string} phase
     * @property {number} loaded
     * @property {number} total
     */

    /**
     * @callback ProgressCallback
     * @param {GitProgressEvent} progress
     * @returns {void | Promise<void>}
     */

    /**
     * @typedef {Object} GitHttpRequest
     * @property {string} url - The URL to request
     * @property {string} [method='GET'] - The HTTP method to use
     * @property {Object<string, string>} [headers={}] - Headers to include in the HTTP request
     * @property {Object} [agent] - An HTTP or HTTPS agent that manages connections for the HTTP client (Node.js only)
     * @property {AsyncIterableIterator<Uint8Array>} [body] - An async iterator of Uint8Arrays that make up the body of POST requests
     * @property {ProgressCallback} [onProgress] - Reserved for future use (emitting `GitProgressEvent`s)
     * @property {object} [signal] - Reserved for future use (canceling a request)
     */

    /**
     * @typedef {Object} GitHttpResponse
     * @property {string} url - The final URL that was fetched after any redirects
     * @property {string} [method] - The HTTP method that was used
     * @property {Object<string, string>} [headers] - HTTP response headers
     * @property {AsyncIterableIterator<Uint8Array>} [body] - An async iterator of Uint8Arrays that make up the body of the response
     * @property {number} statusCode - The HTTP status code
     * @property {string} statusMessage - The HTTP status message
     */

    /**
     * @callback HttpFetch
     * @param {GitHttpRequest} request
     * @returns {Promise<GitHttpResponse>}
     */

    /**
     * @typedef {Object} HttpClient
     * @property {HttpFetch} request
     */

    /**
     * A git commit object.
     *
     * @typedef {Object} CommitObject
     * @property {string} message Commit message
     * @property {string} tree SHA-1 object id of corresponding file tree
     * @property {string[]} parent an array of zero or more SHA-1 object ids
     * @property {Object} author
     * @property {string} author.name The author's name
     * @property {string} author.email The author's email
     * @property {number} author.timestamp UTC Unix timestamp in seconds
     * @property {number} author.timezoneOffset Timezone difference from UTC in minutes
     * @property {Object} committer
     * @property {string} committer.name The committer's name
     * @property {string} committer.email The committer's email
     * @property {number} committer.timestamp UTC Unix timestamp in seconds
     * @property {number} committer.timezoneOffset Timezone difference from UTC in minutes
     * @property {string} [gpgsig] PGP signature (if present)
     */

    /**
     * An entry from a git tree object. Files are called 'blobs' and directories are called 'trees'.
     *
     * @typedef {Object} TreeEntry
     * @property {string} mode the 6 digit hexadecimal mode
     * @property {string} path the name of the file or directory
     * @property {string} oid the SHA-1 object id of the blob or tree
     * @property {'commit'|'blob'|'tree'} type the type of object
     */

    /**
     * A git tree object. Trees represent a directory snapshot.
     *
     * @typedef {TreeEntry[]} TreeObject
     */

    /**
     * A git annotated tag object.
     *
     * @typedef {Object} TagObject
     * @property {string} object SHA-1 object id of object being tagged
     * @property {'blob' | 'tree' | 'commit' | 'tag'} type the type of the object being tagged
     * @property {string} tag the tag name
     * @property {Object} tagger
     * @property {string} tagger.name the tagger's name
     * @property {string} tagger.email the tagger's email
     * @property {number} tagger.timestamp UTC Unix timestamp in seconds
     * @property {number} tagger.timezoneOffset timezone difference from UTC in minutes
     * @property {string} message tag message
     * @property {string} [gpgsig] PGP signature (if present)
     */

    /**
     * @typedef {Object} ReadCommitResult
     * @property {string} oid - SHA-1 object id of this commit
     * @property {CommitObject} commit - the parsed commit object
     * @property {string} payload - PGP signing payload
     */

    /**
     * @typedef {Object} ServerRef - This object has the following schema:
     * @property {string} ref - The name of the ref
     * @property {string} oid - The SHA-1 object id the ref points to
     * @property {string} [target] - The target ref pointed to by a symbolic ref
     * @property {string} [peeled] - If the oid is the SHA-1 object id of an annotated tag, this is the SHA-1 object id that the annotated tag points to
     */

    /**
     * @typedef Walker
     * @property {Symbol} Symbol('GitWalkerSymbol')
     */

    /**
     * Normalized subset of filesystem `stat` data:
     *
     * @typedef {Object} Stat
     * @property {number} ctimeSeconds
     * @property {number} ctimeNanoseconds
     * @property {number} mtimeSeconds
     * @property {number} mtimeNanoseconds
     * @property {number} dev
     * @property {number} ino
     * @property {number} mode
     * @property {number} uid
     * @property {number} gid
     * @property {number} size
     */

    /**
     * The `WalkerEntry` is an interface that abstracts computing many common tree / blob stats.
     *
     * @typedef {Object} WalkerEntry
     * @property {function(): Promise<'tree'|'blob'|'special'|'commit'>} type
     * @property {function(): Promise<number>} mode
     * @property {function(): Promise<string>} oid
     * @property {function(): Promise<Uint8Array|void>} content
     * @property {function(): Promise<Stat>} stat
     */

    /**
     * @typedef {Object} CallbackFsClient
     * @property {function} readFile - https://nodejs.org/api/fs.html#fs_fs_readfile_path_options_callback
     * @property {function} writeFile - https://nodejs.org/api/fs.html#fs_fs_writefile_file_data_options_callback
     * @property {function} unlink - https://nodejs.org/api/fs.html#fs_fs_unlink_path_callback
     * @property {function} readdir - https://nodejs.org/api/fs.html#fs_fs_readdir_path_options_callback
     * @property {function} mkdir - https://nodejs.org/api/fs.html#fs_fs_mkdir_path_mode_callback
     * @property {function} rmdir - https://nodejs.org/api/fs.html#fs_fs_rmdir_path_callback
     * @property {function} stat - https://nodejs.org/api/fs.html#fs_fs_stat_path_options_callback
     * @property {function} lstat - https://nodejs.org/api/fs.html#fs_fs_lstat_path_options_callback
     * @property {function} [readlink] - https://nodejs.org/api/fs.html#fs_fs_readlink_path_options_callback
     * @property {function} [symlink] - https://nodejs.org/api/fs.html#fs_fs_symlink_target_path_type_callback
     * @property {function} [chmod] - https://nodejs.org/api/fs.html#fs_fs_chmod_path_mode_callback
     */

    /**
     * @typedef {Object} PromiseFsClient
     * @property {Object} promises
     * @property {function} promises.readFile - https://nodejs.org/api/fs.html#fs_fspromises_readfile_path_options
     * @property {function} promises.writeFile - https://nodejs.org/api/fs.html#fs_fspromises_writefile_file_data_options
     * @property {function} promises.unlink - https://nodejs.org/api/fs.html#fs_fspromises_unlink_path
     * @property {function} promises.readdir - https://nodejs.org/api/fs.html#fs_fspromises_readdir_path_options
     * @property {function} promises.mkdir - https://nodejs.org/api/fs.html#fs_fspromises_mkdir_path_options
     * @property {function} promises.rmdir - https://nodejs.org/api/fs.html#fs_fspromises_rmdir_path
     * @property {function} promises.stat - https://nodejs.org/api/fs.html#fs_fspromises_stat_path_options
     * @property {function} promises.lstat - https://nodejs.org/api/fs.html#fs_fspromises_lstat_path_options
     * @property {function} [promises.readlink] - https://nodejs.org/api/fs.html#fs_fspromises_readlink_path_options
     * @property {function} [promises.symlink] - https://nodejs.org/api/fs.html#fs_fspromises_symlink_target_path_type
     * @property {function} [promises.chmod] - https://nodejs.org/api/fs.html#fs_fspromises_chmod_path_mode
     */

    /**
     * @typedef {CallbackFsClient | PromiseFsClient} FsClient
     */

    /**
     * @callback MessageCallback
     * @param {string} message
     * @returns {void | Promise<void>}
     */

    /**
     * @typedef {Object} GitAuth
     * @property {string} [username]
     * @property {string} [password]
     * @property {Object<string, string>} [headers]
     * @property {boolean} [cancel] Tells git to throw a `UserCanceledError` (instead of an `HttpError`).
     */

    /**
     * @callback AuthCallback
     * @param {string} url
     * @param {GitAuth} auth Might have some values if the URL itself originally contained a username or password.
     * @returns {GitAuth | void | Promise<GitAuth | void>}
     */

    /**
     * @callback AuthFailureCallback
     * @param {string} url
     * @param {GitAuth} auth The credentials that failed
     * @returns {GitAuth | void | Promise<GitAuth | void>}
     */

    /**
     * @callback AuthSuccessCallback
     * @param {string} url
     * @param {GitAuth} auth
     * @returns {void | Promise<void>}
     */

    /**
     * @typedef {Object} SignParams
     * @property {string} payload - a plaintext message
     * @property {string} secretKey - an 'ASCII armor' encoded PGP key (technically can actually contain _multiple_ keys)
     */

    /**
     * @callback SignCallback
     * @param {SignParams} args
     * @return {{signature: string} | Promise<{signature: string}>} - an 'ASCII armor' encoded "detached" signature
     */

    /**
     * @typedef {Object} MergeDriverParams
     * @property {Array<string>} branches
     * @property {Array<string>} contents
     * @property {string} path
     */

    /**
     * @callback MergeDriverCallback
     * @param {MergeDriverParams} args
     * @return {{cleanMerge: boolean, mergedText: string} | Promise<{cleanMerge: boolean, mergedText: string}>}
     */

    /**
     * @callback WalkerMap
     * @param {string} filename
     * @param {WalkerEntry[]} entries
     * @returns {Promise<any>}
     */

    /**
     * @callback WalkerReduce
     * @param {any} parent
     * @param {any[]} children
     * @returns {Promise<any>}
     */

    /**
     * @callback WalkerIterateCallback
     * @param {WalkerEntry[]} entries
     * @returns {Promise<any[]>}
     */

    /**
     * @callback WalkerIterate
     * @param {WalkerIterateCallback} walk
     * @param {IterableIterator<WalkerEntry[]>} children
     * @returns {Promise<any[]>}
     */

    /**
     * @typedef {Object} RefUpdateStatus
     * @property {boolean} ok
     * @property {string} error
     */

    /**
     * @typedef {Object} PushResult
     * @property {boolean} ok
     * @property {?string} error
     * @property {Object<string, RefUpdateStatus>} refs
     * @property {Object<string, string>} [headers]
     */

    /**
     * @typedef {0|1} HeadStatus
     */

    /**
     * @typedef {0|1|2} WorkdirStatus
     */

    /**
     * @typedef {0|1|2|3} StageStatus
     */

    /**
     * @typedef {[string, HeadStatus, WorkdirStatus, StageStatus]} StatusRow
     */

    class BaseError extends Error {
      constructor(message) {
        super(message);
        // Setting this here allows TS to infer that all git errors have a `caller` property and
        // that its type is string.
        this.caller = '';
      }

      toJSON() {
        // Error objects aren't normally serializable. So we do something about that.
        return {
          code: this.code,
          data: this.data,
          caller: this.caller,
          message: this.message,
          stack: this.stack,
        }
      }

      fromJSON(json) {
        const e = new BaseError(json.message);
        e.code = json.code;
        e.data = json.data;
        e.caller = json.caller;
        e.stack = json.stack;
        return e
      }

      get isIsomorphicGitError() {
        return true
      }
    }

    class UnmergedPathsError extends BaseError {
      /**
       * @param {Array<string>} filepaths
       */
      constructor(filepaths) {
        super(
          `Modifying the index is not possible because you have unmerged files: ${filepaths.toString}. Fix them up in the work tree, and then use 'git add/rm as appropriate to mark resolution and make a commit.`
        );
        this.code = this.name = UnmergedPathsError.code;
        this.data = { filepaths };
      }
    }
    /** @type {'UnmergedPathsError'} */
    UnmergedPathsError.code = 'UnmergedPathsError';

    class InternalError extends BaseError {
      /**
       * @param {string} message
       */
      constructor(message) {
        super(
          `An internal error caused this command to fail. Please file a bug report at https://github.com/isomorphic-git/isomorphic-git/issues with this error message: ${message}`
        );
        this.code = this.name = InternalError.code;
        this.data = { message };
      }
    }
    /** @type {'InternalError'} */
    InternalError.code = 'InternalError';

    class UnsafeFilepathError extends BaseError {
      /**
       * @param {string} filepath
       */
      constructor(filepath) {
        super(`The filepath "${filepath}" contains unsafe character sequences`);
        this.code = this.name = UnsafeFilepathError.code;
        this.data = { filepath };
      }
    }
    /** @type {'UnsafeFilepathError'} */
    UnsafeFilepathError.code = 'UnsafeFilepathError';

    // Modeled after https://github.com/tjfontaine/node-buffercursor
    // but with the goal of being much lighter weight.
    class BufferCursor {
      constructor(buffer) {
        this.buffer = buffer;
        this._start = 0;
      }

      eof() {
        return this._start >= this.buffer.length
      }

      tell() {
        return this._start
      }

      seek(n) {
        this._start = n;
      }

      slice(n) {
        const r = this.buffer.slice(this._start, this._start + n);
        this._start += n;
        return r
      }

      toString(enc, length) {
        const r = this.buffer.toString(enc, this._start, this._start + length);
        this._start += length;
        return r
      }

      write(value, length, enc) {
        const r = this.buffer.write(value, this._start, length, enc);
        this._start += length;
        return r
      }

      copy(source, start, end) {
        const r = source.copy(this.buffer, this._start, start, end);
        this._start += r;
        return r
      }

      readUInt8() {
        const r = this.buffer.readUInt8(this._start);
        this._start += 1;
        return r
      }

      writeUInt8(value) {
        const r = this.buffer.writeUInt8(value, this._start);
        this._start += 1;
        return r
      }

      readUInt16BE() {
        const r = this.buffer.readUInt16BE(this._start);
        this._start += 2;
        return r
      }

      writeUInt16BE(value) {
        const r = this.buffer.writeUInt16BE(value, this._start);
        this._start += 2;
        return r
      }

      readUInt32BE() {
        const r = this.buffer.readUInt32BE(this._start);
        this._start += 4;
        return r
      }

      writeUInt32BE(value) {
        const r = this.buffer.writeUInt32BE(value, this._start);
        this._start += 4;
        return r
      }
    }

    function compareStrings(a, b) {
      // https://stackoverflow.com/a/40355107/2168416
      return -(a < b) || +(a > b)
    }

    function comparePath(a, b) {
      // https://stackoverflow.com/a/40355107/2168416
      return compareStrings(a.path, b.path)
    }

    /**
     * From https://github.com/git/git/blob/master/Documentation/technical/index-format.txt
     *
     * 32-bit mode, split into (high to low bits)
     *
     *  4-bit object type
     *    valid values in binary are 1000 (regular file), 1010 (symbolic link)
     *    and 1110 (gitlink)
     *
     *  3-bit unused
     *
     *  9-bit unix permission. Only 0755 and 0644 are valid for regular files.
     *  Symbolic links and gitlinks have value 0 in this field.
     */
    function normalizeMode(mode) {
      // Note: BrowserFS will use -1 for "unknown"
      // I need to make it non-negative for these bitshifts to work.
      let type = mode > 0 ? mode >> 12 : 0;
      // If it isn't valid, assume it as a "regular file"
      // 0100 = directory
      // 1000 = regular file
      // 1010 = symlink
      // 1110 = gitlink
      if (
        type !== 0b0100 &&
        type !== 0b1000 &&
        type !== 0b1010 &&
        type !== 0b1110
      ) {
        type = 0b1000;
      }
      let permissions = mode & 0o777;
      // Is the file executable? then 755. Else 644.
      if (permissions & 0b001001001) {
        permissions = 0o755;
      } else {
        permissions = 0o644;
      }
      // If it's not a regular file, scrub all permissions
      if (type !== 0b1000) permissions = 0;
      return (type << 12) + permissions
    }

    const MAX_UINT32 = 2 ** 32;

    function SecondsNanoseconds(
      givenSeconds,
      givenNanoseconds,
      milliseconds,
      date
    ) {
      if (givenSeconds !== undefined && givenNanoseconds !== undefined) {
        return [givenSeconds, givenNanoseconds]
      }
      if (milliseconds === undefined) {
        milliseconds = date.valueOf();
      }
      const seconds = Math.floor(milliseconds / 1000);
      const nanoseconds = (milliseconds - seconds * 1000) * 1000000;
      return [seconds, nanoseconds]
    }

    function normalizeStats(e) {
      const [ctimeSeconds, ctimeNanoseconds] = SecondsNanoseconds(
        e.ctimeSeconds,
        e.ctimeNanoseconds,
        e.ctimeMs,
        e.ctime
      );
      const [mtimeSeconds, mtimeNanoseconds] = SecondsNanoseconds(
        e.mtimeSeconds,
        e.mtimeNanoseconds,
        e.mtimeMs,
        e.mtime
      );

      return {
        ctimeSeconds: ctimeSeconds % MAX_UINT32,
        ctimeNanoseconds: ctimeNanoseconds % MAX_UINT32,
        mtimeSeconds: mtimeSeconds % MAX_UINT32,
        mtimeNanoseconds: mtimeNanoseconds % MAX_UINT32,
        dev: e.dev % MAX_UINT32,
        ino: e.ino % MAX_UINT32,
        mode: normalizeMode(e.mode % MAX_UINT32),
        uid: e.uid % MAX_UINT32,
        gid: e.gid % MAX_UINT32,
        // size of -1 happens over a BrowserFS HTTP Backend that doesn't serve Content-Length headers
        // (like the Karma webserver) because BrowserFS HTTP Backend uses HTTP HEAD requests to do fs.stat
        size: e.size > -1 ? e.size % MAX_UINT32 : 0,
      }
    }

    function toHex(buffer) {
      let hex = '';
      for (const byte of new Uint8Array(buffer)) {
        if (byte < 16) hex += '0';
        hex += byte.toString(16);
      }
      return hex
    }

    /* eslint-env node, browser */

    let supportsSubtleSHA1 = null;

    async function shasum(buffer) {
      if (supportsSubtleSHA1 === null) {
        supportsSubtleSHA1 = await testSubtleSHA1();
      }
      return supportsSubtleSHA1 ? subtleSHA1(buffer) : shasumSync(buffer)
    }

    // This is modeled after @dominictarr's "shasum" module,
    // but without the 'json-stable-stringify' dependency and
    // extra type-casting features.
    function shasumSync(buffer) {
      return new sha1().update(buffer).digest('hex')
    }

    async function subtleSHA1(buffer) {
      const hash = await crypto.subtle.digest('SHA-1', buffer);
      return toHex(hash)
    }

    async function testSubtleSHA1() {
      // I'm using a rather crude method of progressive enhancement, because
      // some browsers that have crypto.subtle.digest don't actually implement SHA-1.
      try {
        const hash = await subtleSHA1(new Uint8Array([]));
        if (hash === 'da39a3ee5e6b4b0d3255bfef95601890afd80709') return true
      } catch (_) {
        // no bother
      }
      return false
    }

    // Extract 1-bit assume-valid, 1-bit extended flag, 2-bit merge state flag, 12-bit path length flag
    function parseCacheEntryFlags(bits) {
      return {
        assumeValid: Boolean(bits & 0b1000000000000000),
        extended: Boolean(bits & 0b0100000000000000),
        stage: (bits & 0b0011000000000000) >> 12,
        nameLength: bits & 0b0000111111111111,
      }
    }

    function renderCacheEntryFlags(entry) {
      const flags = entry.flags;
      // 1-bit extended flag (must be zero in version 2)
      flags.extended = false;
      // 12-bit name length if the length is less than 0xFFF; otherwise 0xFFF
      // is stored in this field.
      flags.nameLength = Math.min(Buffer.from(entry.path).length, 0xfff);
      return (
        (flags.assumeValid ? 0b1000000000000000 : 0) +
        (flags.extended ? 0b0100000000000000 : 0) +
        ((flags.stage & 0b11) << 12) +
        (flags.nameLength & 0b111111111111)
      )
    }

    class GitIndex {
      /*::
       _entries: Map<string, CacheEntry>
       _dirty: boolean // Used to determine if index needs to be saved to filesystem
       */
      constructor(entries, unmergedPaths) {
        this._dirty = false;
        this._unmergedPaths = unmergedPaths || new Set();
        this._entries = entries || new Map();
      }

      _addEntry(entry) {
        if (entry.flags.stage === 0) {
          entry.stages = [entry];
          this._entries.set(entry.path, entry);
          this._unmergedPaths.delete(entry.path);
        } else {
          let existingEntry = this._entries.get(entry.path);
          if (!existingEntry) {
            this._entries.set(entry.path, entry);
            existingEntry = entry;
          }
          existingEntry.stages[entry.flags.stage] = entry;
          this._unmergedPaths.add(entry.path);
        }
      }

      static async from(buffer) {
        if (Buffer.isBuffer(buffer)) {
          return GitIndex.fromBuffer(buffer)
        } else if (buffer === null) {
          return new GitIndex(null)
        } else {
          throw new InternalError('invalid type passed to GitIndex.from')
        }
      }

      static async fromBuffer(buffer) {
        if (buffer.length === 0) {
          throw new InternalError('Index file is empty (.git/index)')
        }

        const index = new GitIndex();
        const reader = new BufferCursor(buffer);
        const magic = reader.toString('utf8', 4);
        if (magic !== 'DIRC') {
          throw new InternalError(`Invalid dircache magic file number: ${magic}`)
        }

        // Verify shasum after we ensured that the file has a magic number
        const shaComputed = await shasum(buffer.slice(0, -20));
        const shaClaimed = buffer.slice(-20).toString('hex');
        if (shaClaimed !== shaComputed) {
          throw new InternalError(
            `Invalid checksum in GitIndex buffer: expected ${shaClaimed} but saw ${shaComputed}`
          )
        }

        const version = reader.readUInt32BE();
        if (version !== 2) {
          throw new InternalError(`Unsupported dircache version: ${version}`)
        }
        const numEntries = reader.readUInt32BE();
        let i = 0;
        while (!reader.eof() && i < numEntries) {
          const entry = {};
          entry.ctimeSeconds = reader.readUInt32BE();
          entry.ctimeNanoseconds = reader.readUInt32BE();
          entry.mtimeSeconds = reader.readUInt32BE();
          entry.mtimeNanoseconds = reader.readUInt32BE();
          entry.dev = reader.readUInt32BE();
          entry.ino = reader.readUInt32BE();
          entry.mode = reader.readUInt32BE();
          entry.uid = reader.readUInt32BE();
          entry.gid = reader.readUInt32BE();
          entry.size = reader.readUInt32BE();
          entry.oid = reader.slice(20).toString('hex');
          const flags = reader.readUInt16BE();
          entry.flags = parseCacheEntryFlags(flags);
          // TODO: handle if (version === 3 && entry.flags.extended)
          const pathlength = buffer.indexOf(0, reader.tell() + 1) - reader.tell();
          if (pathlength < 1) {
            throw new InternalError(`Got a path length of: ${pathlength}`)
          }
          // TODO: handle pathnames larger than 12 bits
          entry.path = reader.toString('utf8', pathlength);

          // Prevent malicious paths like "..\foo"
          if (entry.path.includes('..\\') || entry.path.includes('../')) {
            throw new UnsafeFilepathError(entry.path)
          }

          // The next bit is awkward. We expect 1 to 8 null characters
          // such that the total size of the entry is a multiple of 8 bits.
          // (Hence subtract 12 bytes for the header.)
          let padding = 8 - ((reader.tell() - 12) % 8);
          if (padding === 0) padding = 8;
          while (padding--) {
            const tmp = reader.readUInt8();
            if (tmp !== 0) {
              throw new InternalError(
                `Expected 1-8 null characters but got '${tmp}' after ${entry.path}`
              )
            } else if (reader.eof()) {
              throw new InternalError('Unexpected end of file')
            }
          }
          // end of awkward part
          entry.stages = [];

          index._addEntry(entry);

          i++;
        }
        return index
      }

      get unmergedPaths() {
        return [...this._unmergedPaths]
      }

      get entries() {
        return [...this._entries.values()].sort(comparePath)
      }

      get entriesMap() {
        return this._entries
      }

      get entriesFlat() {
        return [...this.entries].flatMap(entry => {
          return entry.stages.length > 1 ? entry.stages.filter(x => x) : entry
        })
      }

      *[Symbol.iterator]() {
        for (const entry of this.entries) {
          yield entry;
        }
      }

      insert({ filepath, stats, oid, stage = 0 }) {
        if (!stats) {
          stats = {
            ctimeSeconds: 0,
            ctimeNanoseconds: 0,
            mtimeSeconds: 0,
            mtimeNanoseconds: 0,
            dev: 0,
            ino: 0,
            mode: 0,
            uid: 0,
            gid: 0,
            size: 0,
          };
        }
        stats = normalizeStats(stats);
        const bfilepath = Buffer.from(filepath);
        const entry = {
          ctimeSeconds: stats.ctimeSeconds,
          ctimeNanoseconds: stats.ctimeNanoseconds,
          mtimeSeconds: stats.mtimeSeconds,
          mtimeNanoseconds: stats.mtimeNanoseconds,
          dev: stats.dev,
          ino: stats.ino,
          // We provide a fallback value for `mode` here because not all fs
          // implementations assign it, but we use it in GitTree.
          // '100644' is for a "regular non-executable file"
          mode: stats.mode || 0o100644,
          uid: stats.uid,
          gid: stats.gid,
          size: stats.size,
          path: filepath,
          oid: oid,
          flags: {
            assumeValid: false,
            extended: false,
            stage,
            nameLength: bfilepath.length < 0xfff ? bfilepath.length : 0xfff,
          },
          stages: [],
        };

        this._addEntry(entry);

        this._dirty = true;
      }

      delete({ filepath }) {
        if (this._entries.has(filepath)) {
          this._entries.delete(filepath);
        } else {
          for (const key of this._entries.keys()) {
            if (key.startsWith(filepath + '/')) {
              this._entries.delete(key);
            }
          }
        }

        if (this._unmergedPaths.has(filepath)) {
          this._unmergedPaths.delete(filepath);
        }
        this._dirty = true;
      }

      clear() {
        this._entries.clear();
        this._dirty = true;
      }

      has({ filepath }) {
        return this._entries.has(filepath)
      }

      render() {
        return this.entries
          .map(entry => `${entry.mode.toString(8)} ${entry.oid}    ${entry.path}`)
          .join('\n')
      }

      static async _entryToBuffer(entry) {
        const bpath = Buffer.from(entry.path);
        // the fixed length + the filename + at least one null char => align by 8
        const length = Math.ceil((62 + bpath.length + 1) / 8) * 8;
        const written = Buffer.alloc(length);
        const writer = new BufferCursor(written);
        const stat = normalizeStats(entry);
        writer.writeUInt32BE(stat.ctimeSeconds);
        writer.writeUInt32BE(stat.ctimeNanoseconds);
        writer.writeUInt32BE(stat.mtimeSeconds);
        writer.writeUInt32BE(stat.mtimeNanoseconds);
        writer.writeUInt32BE(stat.dev);
        writer.writeUInt32BE(stat.ino);
        writer.writeUInt32BE(stat.mode);
        writer.writeUInt32BE(stat.uid);
        writer.writeUInt32BE(stat.gid);
        writer.writeUInt32BE(stat.size);
        writer.write(entry.oid, 20, 'hex');
        writer.writeUInt16BE(renderCacheEntryFlags(entry));
        writer.write(entry.path, bpath.length, 'utf8');
        return written
      }

      async toObject() {
        const header = Buffer.alloc(12);
        const writer = new BufferCursor(header);
        writer.write('DIRC', 4, 'utf8');
        writer.writeUInt32BE(2);
        writer.writeUInt32BE(this.entriesFlat.length);

        let entryBuffers = [];
        for (const entry of this.entries) {
          entryBuffers.push(GitIndex._entryToBuffer(entry));
          if (entry.stages.length > 1) {
            for (const stage of entry.stages) {
              if (stage && stage !== entry) {
                entryBuffers.push(GitIndex._entryToBuffer(stage));
              }
            }
          }
        }
        entryBuffers = await Promise.all(entryBuffers);

        const body = Buffer.concat(entryBuffers);
        const main = Buffer.concat([header, body]);
        const sum = await shasum(main);
        return Buffer.concat([main, Buffer.from(sum, 'hex')])
      }
    }

    function compareStats(entry, stats) {
      // Comparison based on the description in Paragraph 4 of
      // https://www.kernel.org/pub/software/scm/git/docs/technical/racy-git.txt
      const e = normalizeStats(entry);
      const s = normalizeStats(stats);
      const staleness =
        e.mode !== s.mode ||
        e.mtimeSeconds !== s.mtimeSeconds ||
        e.ctimeSeconds !== s.ctimeSeconds ||
        e.uid !== s.uid ||
        e.gid !== s.gid ||
        e.ino !== s.ino ||
        e.size !== s.size;
      return staleness
    }

    // import LockManager from 'travix-lock-manager'

    // import Lock from '../utils.js'

    // const lm = new LockManager()
    let lock = null;

    const IndexCache = Symbol('IndexCache');

    function createCache() {
      return {
        map: new Map(),
        stats: new Map(),
      }
    }

    async function updateCachedIndexFile(fs, filepath, cache) {
      const stat = await fs.lstat(filepath);
      const rawIndexFile = await fs.read(filepath);
      const index = await GitIndex.from(rawIndexFile);
      // cache the GitIndex object so we don't need to re-read it every time.
      cache.map.set(filepath, index);
      // Save the stat data for the index so we know whether the cached file is stale (modified by an outside process).
      cache.stats.set(filepath, stat);
    }

    // Determine whether our copy of the index file is stale
    async function isIndexStale(fs, filepath, cache) {
      const savedStats = cache.stats.get(filepath);
      if (savedStats === undefined) return true
      const currStats = await fs.lstat(filepath);
      if (savedStats === null) return false
      if (currStats === null) return false
      return compareStats(savedStats, currStats)
    }

    class GitIndexManager {
      /**
       *
       * @param {object} opts
       * @param {import('../models/FileSystem.js').FileSystem} opts.fs
       * @param {string} opts.gitdir
       * @param {object} opts.cache
       * @param {bool} opts.allowUnmerged
       * @param {function(GitIndex): any} closure
       */
      static async acquire({ fs, gitdir, cache, allowUnmerged = true }, closure) {
        if (!cache[IndexCache]) cache[IndexCache] = createCache();

        const filepath = `${gitdir}/index`;
        if (lock === null) lock = new asyncLock({ maxPending: Infinity });
        let result;
        let unmergedPaths = [];
        await lock.acquire(filepath, async () => {
          // Acquire a file lock while we're reading the index
          // to make sure other processes aren't writing to it
          // simultaneously, which could result in a corrupted index.
          // const fileLock = await Lock(filepath)
          if (await isIndexStale(fs, filepath, cache[IndexCache])) {
            await updateCachedIndexFile(fs, filepath, cache[IndexCache]);
          }
          const index = cache[IndexCache].map.get(filepath);
          unmergedPaths = index.unmergedPaths;

          if (unmergedPaths.length && !allowUnmerged)
            throw new UnmergedPathsError(unmergedPaths)

          result = await closure(index);
          if (index._dirty) {
            // Acquire a file lock while we're writing the index file
            // let fileLock = await Lock(filepath)
            const buffer = await index.toObject();
            await fs.write(filepath, buffer);
            // Update cached stat value
            cache[IndexCache].stats.set(filepath, await fs.lstat(filepath));
            index._dirty = false;
          }
        });

        return result
      }
    }

    function basename(path) {
      const last = Math.max(path.lastIndexOf('/'), path.lastIndexOf('\\'));
      if (last > -1) {
        path = path.slice(last + 1);
      }
      return path
    }

    function dirname(path) {
      const last = Math.max(path.lastIndexOf('/'), path.lastIndexOf('\\'));
      if (last === -1) return '.'
      if (last === 0) return '/'
      return path.slice(0, last)
    }

    /*::
    type Node = {
      type: string,
      fullpath: string,
      basename: string,
      metadata: Object, // mode, oid
      parent?: Node,
      children: Array<Node>
    }
    */

    function flatFileListToDirectoryStructure(files) {
      const inodes = new Map();
      const mkdir = function(name) {
        if (!inodes.has(name)) {
          const dir = {
            type: 'tree',
            fullpath: name,
            basename: basename(name),
            metadata: {},
            children: [],
          };
          inodes.set(name, dir);
          // This recursively generates any missing parent folders.
          // We do it after we've added the inode to the set so that
          // we don't recurse infinitely trying to create the root '.' dirname.
          dir.parent = mkdir(dirname(name));
          if (dir.parent && dir.parent !== dir) dir.parent.children.push(dir);
        }
        return inodes.get(name)
      };

      const mkfile = function(name, metadata) {
        if (!inodes.has(name)) {
          const file = {
            type: 'blob',
            fullpath: name,
            basename: basename(name),
            metadata: metadata,
            // This recursively generates any missing parent folders.
            parent: mkdir(dirname(name)),
            children: [],
          };
          if (file.parent) file.parent.children.push(file);
          inodes.set(name, file);
        }
        return inodes.get(name)
      };

      mkdir('.');
      for (const file of files) {
        mkfile(file.path, file);
      }
      return inodes
    }

    /**
     *
     * @param {number} mode
     */
    function mode2type(mode) {
      // prettier-ignore
      switch (mode) {
        case 0o040000: return 'tree'
        case 0o100644: return 'blob'
        case 0o100755: return 'blob'
        case 0o120000: return 'blob'
        case 0o160000: return 'commit'
      }
      throw new InternalError(`Unexpected GitTree entry mode: ${mode.toString(8)}`)
    }

    class GitWalkerIndex {
      constructor({ fs, gitdir, cache }) {
        this.treePromise = GitIndexManager.acquire(
          { fs, gitdir, cache },
          async function(index) {
            return flatFileListToDirectoryStructure(index.entries)
          }
        );
        const walker = this;
        this.ConstructEntry = class StageEntry {
          constructor(fullpath) {
            this._fullpath = fullpath;
            this._type = false;
            this._mode = false;
            this._stat = false;
            this._oid = false;
          }

          async type() {
            return walker.type(this)
          }

          async mode() {
            return walker.mode(this)
          }

          async stat() {
            return walker.stat(this)
          }

          async content() {
            return walker.content(this)
          }

          async oid() {
            return walker.oid(this)
          }
        };
      }

      async readdir(entry) {
        const filepath = entry._fullpath;
        const tree = await this.treePromise;
        const inode = tree.get(filepath);
        if (!inode) return null
        if (inode.type === 'blob') return null
        if (inode.type !== 'tree') {
          throw new Error(`ENOTDIR: not a directory, scandir '${filepath}'`)
        }
        const names = inode.children.map(inode => inode.fullpath);
        names.sort(compareStrings);
        return names
      }

      async type(entry) {
        if (entry._type === false) {
          await entry.stat();
        }
        return entry._type
      }

      async mode(entry) {
        if (entry._mode === false) {
          await entry.stat();
        }
        return entry._mode
      }

      async stat(entry) {
        if (entry._stat === false) {
          const tree = await this.treePromise;
          const inode = tree.get(entry._fullpath);
          if (!inode) {
            throw new Error(
              `ENOENT: no such file or directory, lstat '${entry._fullpath}'`
            )
          }
          const stats = inode.type === 'tree' ? {} : normalizeStats(inode.metadata);
          entry._type = inode.type === 'tree' ? 'tree' : mode2type(stats.mode);
          entry._mode = stats.mode;
          if (inode.type === 'tree') {
            entry._stat = undefined;
          } else {
            entry._stat = stats;
          }
        }
        return entry._stat
      }

      async content(_entry) {
        // Cannot get content for an index entry
      }

      async oid(entry) {
        if (entry._oid === false) {
          const tree = await this.treePromise;
          const inode = tree.get(entry._fullpath);
          entry._oid = inode.metadata.oid;
        }
        return entry._oid
      }
    }

    // This is part of an elaborate system to facilitate code-splitting / tree-shaking.
    // commands/walk.js can depend on only this, and the actual Walker classes exported
    // can be opaque - only having a single property (this symbol) that is not enumerable,
    // and thus the constructor can be passed as an argument to walk while being "unusable"
    // outside of it.
    const GitWalkSymbol = Symbol('GitWalkSymbol');

    // @ts-check

    /**
     * @returns {Walker}
     */
    function STAGE() {
      const o = Object.create(null);
      Object.defineProperty(o, GitWalkSymbol, {
        value: function({ fs, gitdir, cache }) {
          return new GitWalkerIndex({ fs, gitdir, cache })
        },
      });
      Object.freeze(o);
      return o
    }

    // @ts-check

    class NotFoundError extends BaseError {
      /**
       * @param {string} what
       */
      constructor(what) {
        super(`Could not find ${what}.`);
        this.code = this.name = NotFoundError.code;
        this.data = { what };
      }
    }
    /** @type {'NotFoundError'} */
    NotFoundError.code = 'NotFoundError';

    class ObjectTypeError extends BaseError {
      /**
       * @param {string} oid
       * @param {'blob'|'commit'|'tag'|'tree'} actual
       * @param {'blob'|'commit'|'tag'|'tree'} expected
       * @param {string} [filepath]
       */
      constructor(oid, actual, expected, filepath) {
        super(
          `Object ${oid} ${
        filepath ? `at ${filepath}` : ''
      }was anticipated to be a ${expected} but it is a ${actual}.`
        );
        this.code = this.name = ObjectTypeError.code;
        this.data = { oid, actual, expected, filepath };
      }
    }
    /** @type {'ObjectTypeError'} */
    ObjectTypeError.code = 'ObjectTypeError';

    class InvalidOidError extends BaseError {
      /**
       * @param {string} value
       */
      constructor(value) {
        super(`Expected a 40-char hex object id but saw "${value}".`);
        this.code = this.name = InvalidOidError.code;
        this.data = { value };
      }
    }
    /** @type {'InvalidOidError'} */
    InvalidOidError.code = 'InvalidOidError';

    class NoRefspecError extends BaseError {
      /**
       * @param {string} remote
       */
      constructor(remote) {
        super(`Could not find a fetch refspec for remote "${remote}". Make sure the config file has an entry like the following:
[remote "${remote}"]
\tfetch = +refs/heads/*:refs/remotes/origin/*
`);
        this.code = this.name = NoRefspecError.code;
        this.data = { remote };
      }
    }
    /** @type {'NoRefspecError'} */
    NoRefspecError.code = 'NoRefspecError';

    class GitPackedRefs {
      constructor(text) {
        this.refs = new Map();
        this.parsedConfig = [];
        if (text) {
          let key = null;
          this.parsedConfig = text
            .trim()
            .split('\n')
            .map(line => {
              if (/^\s*#/.test(line)) {
                return { line, comment: true }
              }
              const i = line.indexOf(' ');
              if (line.startsWith('^')) {
                // This is a oid for the commit associated with the annotated tag immediately preceding this line.
                // Trim off the '^'
                const value = line.slice(1);
                // The tagname^{} syntax is based on the output of `git show-ref --tags -d`
                this.refs.set(key + '^{}', value);
                return { line, ref: key, peeled: value }
              } else {
                // This is an oid followed by the ref name
                const value = line.slice(0, i);
                key = line.slice(i + 1);
                this.refs.set(key, value);
                return { line, ref: key, oid: value }
              }
            });
        }
        return this
      }

      static from(text) {
        return new GitPackedRefs(text)
      }

      delete(ref) {
        this.parsedConfig = this.parsedConfig.filter(entry => entry.ref !== ref);
        this.refs.delete(ref);
      }

      toString() {
        return this.parsedConfig.map(({ line }) => line).join('\n') + '\n'
      }
    }

    class GitRefSpec {
      constructor({ remotePath, localPath, force, matchPrefix }) {
        Object.assign(this, {
          remotePath,
          localPath,
          force,
          matchPrefix,
        });
      }

      static from(refspec) {
        const [
          forceMatch,
          remotePath,
          remoteGlobMatch,
          localPath,
          localGlobMatch,
        ] = refspec.match(/^(\+?)(.*?)(\*?):(.*?)(\*?)$/).slice(1);
        const force = forceMatch === '+';
        const remoteIsGlob = remoteGlobMatch === '*';
        const localIsGlob = localGlobMatch === '*';
        // validate
        // TODO: Make this check more nuanced, and depend on whether this is a fetch refspec or a push refspec
        if (remoteIsGlob !== localIsGlob) {
          throw new InternalError('Invalid refspec')
        }
        return new GitRefSpec({
          remotePath,
          localPath,
          force,
          matchPrefix: remoteIsGlob,
        })
        // TODO: We need to run resolveRef on both paths to expand them to their full name.
      }

      translate(remoteBranch) {
        if (this.matchPrefix) {
          if (remoteBranch.startsWith(this.remotePath)) {
            return this.localPath + remoteBranch.replace(this.remotePath, '')
          }
        } else {
          if (remoteBranch === this.remotePath) return this.localPath
        }
        return null
      }

      reverseTranslate(localBranch) {
        if (this.matchPrefix) {
          if (localBranch.startsWith(this.localPath)) {
            return this.remotePath + localBranch.replace(this.localPath, '')
          }
        } else {
          if (localBranch === this.localPath) return this.remotePath
        }
        return null
      }
    }

    class GitRefSpecSet {
      constructor(rules = []) {
        this.rules = rules;
      }

      static from(refspecs) {
        const rules = [];
        for (const refspec of refspecs) {
          rules.push(GitRefSpec.from(refspec)); // might throw
        }
        return new GitRefSpecSet(rules)
      }

      add(refspec) {
        const rule = GitRefSpec.from(refspec); // might throw
        this.rules.push(rule);
      }

      translate(remoteRefs) {
        const result = [];
        for (const rule of this.rules) {
          for (const remoteRef of remoteRefs) {
            const localRef = rule.translate(remoteRef);
            if (localRef) {
              result.push([remoteRef, localRef]);
            }
          }
        }
        return result
      }

      translateOne(remoteRef) {
        let result = null;
        for (const rule of this.rules) {
          const localRef = rule.translate(remoteRef);
          if (localRef) {
            result = localRef;
          }
        }
        return result
      }

      localNamespaces() {
        return this.rules
          .filter(rule => rule.matchPrefix)
          .map(rule => rule.localPath.replace(/\/$/, ''))
      }
    }

    function compareRefNames(a, b) {
      // https://stackoverflow.com/a/40355107/2168416
      const _a = a.replace(/\^\{\}$/, '');
      const _b = b.replace(/\^\{\}$/, '');
      const tmp = -(_a < _b) || +(_a > _b);
      if (tmp === 0) {
        return a.endsWith('^{}') ? 1 : -1
      }
      return tmp
    }

    function normalizePath(path) {
      return path
        .replace(/\/\.\//g, '/') // Replace '/./' with '/'
        .replace(/\/{2,}/g, '/') // Replace consecutive '/'
        .replace(/^\/\.$/, '/') // if path === '/.' return '/'
        .replace(/^\.\/$/, '.') // if path === './' return '.'
        .replace(/^\.\//, '') // Remove leading './'
        .replace(/\/\.$/, '') // Remove trailing '/.'
        .replace(/(.+)\/$/, '$1') // Remove trailing '/'
        .replace(/^$/, '.') // if path === '' return '.'
    }

    // For some reason path.posix.join is undefined in webpack

    function join(...parts) {
      return normalizePath(parts.map(normalizePath).join('/'))
    }

    // This is straight from parse_unit_factor in config.c of canonical git
    const num = val => {
      val = val.toLowerCase();
      let n = parseInt(val);
      if (val.endsWith('k')) n *= 1024;
      if (val.endsWith('m')) n *= 1024 * 1024;
      if (val.endsWith('g')) n *= 1024 * 1024 * 1024;
      return n
    };

    // This is straight from git_parse_maybe_bool_text in config.c of canonical git
    const bool$1 = val => {
      val = val.trim().toLowerCase();
      if (val === 'true' || val === 'yes' || val === 'on') return true
      if (val === 'false' || val === 'no' || val === 'off') return false
      throw Error(
        `Expected 'true', 'false', 'yes', 'no', 'on', or 'off', but got ${val}`
      )
    };

    const schema$1 = {
      core: {
        filemode: bool$1,
        bare: bool$1,
        logallrefupdates: bool$1,
        symlinks: bool$1,
        ignorecase: bool$1,
        bigFileThreshold: num,
      },
    };

    // https://git-scm.com/docs/git-config#_syntax

    // section starts with [ and ends with ]
    // section is alphanumeric (ASCII) with - and .
    // section is case insensitive
    // subsection is optionnal
    // subsection is specified after section and one or more spaces
    // subsection is specified between double quotes
    const SECTION_LINE_REGEX = /^\[([A-Za-z0-9-.]+)(?: "(.*)")?\]$/;
    const SECTION_REGEX = /^[A-Za-z0-9-.]+$/;

    // variable lines contain a name, and equal sign and then a value
    // variable lines can also only contain a name (the implicit value is a boolean true)
    // variable name is alphanumeric (ASCII) with -
    // variable name starts with an alphabetic character
    // variable name is case insensitive
    const VARIABLE_LINE_REGEX = /^([A-Za-z][A-Za-z-]*)(?: *= *(.*))?$/;
    const VARIABLE_NAME_REGEX = /^[A-Za-z][A-Za-z-]*$/;

    const VARIABLE_VALUE_COMMENT_REGEX = /^(.*?)( *[#;].*)$/;

    const extractSectionLine = line => {
      const matches = SECTION_LINE_REGEX.exec(line);
      if (matches != null) {
        const [section, subsection] = matches.slice(1);
        return [section, subsection]
      }
      return null
    };

    const extractVariableLine = line => {
      const matches = VARIABLE_LINE_REGEX.exec(line);
      if (matches != null) {
        const [name, rawValue = 'true'] = matches.slice(1);
        const valueWithoutComments = removeComments(rawValue);
        const valueWithoutQuotes = removeQuotes(valueWithoutComments);
        return [name, valueWithoutQuotes]
      }
      return null
    };

    const removeComments = rawValue => {
      const commentMatches = VARIABLE_VALUE_COMMENT_REGEX.exec(rawValue);
      if (commentMatches == null) {
        return rawValue
      }
      const [valueWithoutComment, comment] = commentMatches.slice(1);
      // if odd number of quotes before and after comment => comment is escaped
      if (
        hasOddNumberOfQuotes(valueWithoutComment) &&
        hasOddNumberOfQuotes(comment)
      ) {
        return `${valueWithoutComment}${comment}`
      }
      return valueWithoutComment
    };

    const hasOddNumberOfQuotes = text => {
      const numberOfQuotes = (text.match(/(?:^|[^\\])"/g) || []).length;
      return numberOfQuotes % 2 !== 0
    };

    const removeQuotes = text => {
      return text.split('').reduce((newText, c, idx, text) => {
        const isQuote = c === '"' && text[idx - 1] !== '\\';
        const isEscapeForQuote = c === '\\' && text[idx + 1] === '"';
        if (isQuote || isEscapeForQuote) {
          return newText
        }
        return newText + c
      }, '')
    };

    const lower = text => {
      return text != null ? text.toLowerCase() : null
    };

    const getPath = (section, subsection, name) => {
      return [lower(section), subsection, lower(name)]
        .filter(a => a != null)
        .join('.')
    };

    const normalizePath$1 = path => {
      const pathSegments = path.split('.');
      const section = pathSegments.shift();
      const name = pathSegments.pop();
      const subsection = pathSegments.length ? pathSegments.join('.') : undefined;

      return {
        section,
        subsection,
        name,
        path: getPath(section, subsection, name),
        sectionPath: getPath(section, subsection, null),
      }
    };

    const findLastIndex = (array, callback) => {
      return array.reduce((lastIndex, item, index) => {
        return callback(item) ? index : lastIndex
      }, -1)
    };

    // Note: there are a LOT of edge cases that aren't covered (e.g. keys in sections that also
    // have subsections, [include] directives, etc.
    class GitConfig {
      constructor(text) {
        let section = null;
        let subsection = null;
        this.parsedConfig = text.split('\n').map(line => {
          let name = null;
          let value = null;

          const trimmedLine = line.trim();
          const extractedSection = extractSectionLine(trimmedLine);
          const isSection = extractedSection != null;
          if (isSection) {
    [section, subsection] = extractedSection;
          } else {
            const extractedVariable = extractVariableLine(trimmedLine);
            const isVariable = extractedVariable != null;
            if (isVariable) {
    [name, value] = extractedVariable;
            }
          }

          const path = getPath(section, subsection, name);
          return { line, isSection, section, subsection, name, value, path }
        });
      }

      static from(text) {
        return new GitConfig(text)
      }

      async get(path, getall = false) {
        const normalizedPath = normalizePath$1(path).path;
        const allValues = this.parsedConfig
          .filter(config => config.path === normalizedPath)
          .map(({ section, name, value }) => {
            const fn = schema$1[section] && schema$1[section][name];
            return fn ? fn(value) : value
          });
        return getall ? allValues : allValues.pop()
      }

      async getall(path) {
        return this.get(path, true)
      }

      async getSubsections(section) {
        return this.parsedConfig
          .filter(config => config.section === section && config.isSection)
          .map(config => config.subsection)
      }

      async deleteSection(section, subsection) {
        this.parsedConfig = this.parsedConfig.filter(
          config =>
            !(config.section === section && config.subsection === subsection)
        );
      }

      async append(path, value) {
        return this.set(path, value, true)
      }

      async set(path, value, append = false) {
        const {
          section,
          subsection,
          name,
          path: normalizedPath,
          sectionPath,
        } = normalizePath$1(path);
        const configIndex = findLastIndex(
          this.parsedConfig,
          config => config.path === normalizedPath
        );
        if (value == null) {
          if (configIndex !== -1) {
            this.parsedConfig.splice(configIndex, 1);
          }
        } else {
          if (configIndex !== -1) {
            const config = this.parsedConfig[configIndex];
            // Name should be overwritten in case the casing changed
            const modifiedConfig = Object.assign({}, config, {
              name,
              value,
              modified: true,
            });
            if (append) {
              this.parsedConfig.splice(configIndex + 1, 0, modifiedConfig);
            } else {
              this.parsedConfig[configIndex] = modifiedConfig;
            }
          } else {
            const sectionIndex = this.parsedConfig.findIndex(
              config => config.path === sectionPath
            );
            const newConfig = {
              section,
              subsection,
              name,
              value,
              modified: true,
              path: normalizedPath,
            };
            if (SECTION_REGEX.test(section) && VARIABLE_NAME_REGEX.test(name)) {
              if (sectionIndex >= 0) {
                // Reuse existing section
                this.parsedConfig.splice(sectionIndex + 1, 0, newConfig);
              } else {
                // Add a new section
                const newSection = {
                  section,
                  subsection,
                  modified: true,
                  path: sectionPath,
                };
                this.parsedConfig.push(newSection, newConfig);
              }
            }
          }
        }
      }

      toString() {
        return this.parsedConfig
          .map(({ line, section, subsection, name, value, modified = false }) => {
            if (!modified) {
              return line
            }
            if (name != null && value != null) {
              if (typeof value === 'string' && /[#;]/.test(value)) {
                // A `#` or `;` symbol denotes a comment, so we have to wrap it in double quotes
                return `\t${name} = "${value}"`
              }
              return `\t${name} = ${value}`
            }
            if (subsection != null) {
              return `[${section} "${subsection}"]`
            }
            return `[${section}]`
          })
          .join('\n')
      }
    }

    class GitConfigManager {
      static async get({ fs, gitdir }) {
        // We can improve efficiency later if needed.
        // TODO: read from full list of git config files
        const text = await fs.read(`${gitdir}/config`, { encoding: 'utf8' });
        return GitConfig.from(text)
      }

      static async save({ fs, gitdir, config }) {
        // We can improve efficiency later if needed.
        // TODO: handle saving to the correct global/user/repo location
        await fs.write(`${gitdir}/config`, config.toString(), {
          encoding: 'utf8',
        });
      }
    }

    // This is a convenience wrapper for reading and writing files in the 'refs' directory.

    // @see https://git-scm.com/docs/git-rev-parse.html#_specifying_revisions
    const refpaths = ref => [
      `${ref}`,
      `refs/${ref}`,
      `refs/tags/${ref}`,
      `refs/heads/${ref}`,
      `refs/remotes/${ref}`,
      `refs/remotes/${ref}/HEAD`,
    ];

    // @see https://git-scm.com/docs/gitrepository-layout
    const GIT_FILES = ['config', 'description', 'index', 'shallow', 'commondir'];

    class GitRefManager {
      static async updateRemoteRefs({
        fs,
        gitdir,
        remote,
        refs,
        symrefs,
        tags,
        refspecs = undefined,
        prune = false,
        pruneTags = false,
      }) {
        // Validate input
        for (const value of refs.values()) {
          if (!value.match(/[0-9a-f]{40}/)) {
            throw new InvalidOidError(value)
          }
        }
        const config = await GitConfigManager.get({ fs, gitdir });
        if (!refspecs) {
          refspecs = await config.getall(`remote.${remote}.fetch`);
          if (refspecs.length === 0) {
            throw new NoRefspecError(remote)
          }
          // There's some interesting behavior with HEAD that doesn't follow the refspec.
          refspecs.unshift(`+HEAD:refs/remotes/${remote}/HEAD`);
        }
        const refspec = GitRefSpecSet.from(refspecs);
        const actualRefsToWrite = new Map();
        // Delete all current tags if the pruneTags argument is true.
        if (pruneTags) {
          const tags = await GitRefManager.listRefs({
            fs,
            gitdir,
            filepath: 'refs/tags',
          });
          await GitRefManager.deleteRefs({
            fs,
            gitdir,
            refs: tags.map(tag => `refs/tags/${tag}`),
          });
        }
        // Add all tags if the fetch tags argument is true.
        if (tags) {
          for (const serverRef of refs.keys()) {
            if (serverRef.startsWith('refs/tags') && !serverRef.endsWith('^{}')) {
              // Git's behavior is to only fetch tags that do not conflict with tags already present.
              if (!(await GitRefManager.exists({ fs, gitdir, ref: serverRef }))) {
                // Always use the object id of the tag itself, and not the peeled object id.
                const oid = refs.get(serverRef);
                actualRefsToWrite.set(serverRef, oid);
              }
            }
          }
        }
        // Combine refs and symrefs giving symrefs priority
        const refTranslations = refspec.translate([...refs.keys()]);
        for (const [serverRef, translatedRef] of refTranslations) {
          const value = refs.get(serverRef);
          actualRefsToWrite.set(translatedRef, value);
        }
        const symrefTranslations = refspec.translate([...symrefs.keys()]);
        for (const [serverRef, translatedRef] of symrefTranslations) {
          const value = symrefs.get(serverRef);
          const symtarget = refspec.translateOne(value);
          if (symtarget) {
            actualRefsToWrite.set(translatedRef, `ref: ${symtarget}`);
          }
        }
        // If `prune` argument is true, clear out the existing local refspec roots
        const pruned = [];
        if (prune) {
          for (const filepath of refspec.localNamespaces()) {
            const refs = (
              await GitRefManager.listRefs({
                fs,
                gitdir,
                filepath,
              })
            ).map(file => `${filepath}/${file}`);
            for (const ref of refs) {
              if (!actualRefsToWrite.has(ref)) {
                pruned.push(ref);
              }
            }
          }
          if (pruned.length > 0) {
            await GitRefManager.deleteRefs({ fs, gitdir, refs: pruned });
          }
        }
        // Update files
        // TODO: For large repos with a history of thousands of pull requests
        // (i.e. gitlab-ce) it would be vastly more efficient to write them
        // to .git/packed-refs.
        // The trick is to make sure we a) don't write a packed ref that is
        // already shadowed by a loose ref and b) don't loose any refs already
        // in packed-refs. Doing this efficiently may be difficult. A
        // solution that might work is
        // a) load the current packed-refs file
        // b) add actualRefsToWrite, overriding the existing values if present
        // c) enumerate all the loose refs currently in .git/refs/remotes/${remote}
        // d) overwrite their value with the new value.
        // Examples of refs we need to avoid writing in loose format for efficieny's sake
        // are .git/refs/remotes/origin/refs/remotes/remote_mirror_3059
        // and .git/refs/remotes/origin/refs/merge-requests
        for (const [key, value] of actualRefsToWrite) {
          await fs.write(join(gitdir, key), `${value.trim()}\n`, 'utf8');
        }
        return { pruned }
      }

      // TODO: make this less crude?
      static async writeRef({ fs, gitdir, ref, value }) {
        // Validate input
        if (!value.match(/[0-9a-f]{40}/)) {
          throw new InvalidOidError(value)
        }
        await fs.write(join(gitdir, ref), `${value.trim()}\n`, 'utf8');
      }

      static async writeSymbolicRef({ fs, gitdir, ref, value }) {
        await fs.write(join(gitdir, ref), 'ref: ' + `${value.trim()}\n`, 'utf8');
      }

      static async deleteRef({ fs, gitdir, ref }) {
        return GitRefManager.deleteRefs({ fs, gitdir, refs: [ref] })
      }

      static async deleteRefs({ fs, gitdir, refs }) {
        // Delete regular ref
        await Promise.all(refs.map(ref => fs.rm(join(gitdir, ref))));
        // Delete any packed ref
        let text = await fs.read(`${gitdir}/packed-refs`, { encoding: 'utf8' });
        const packed = GitPackedRefs.from(text);
        const beforeSize = packed.refs.size;
        for (const ref of refs) {
          if (packed.refs.has(ref)) {
            packed.delete(ref);
          }
        }
        if (packed.refs.size < beforeSize) {
          text = packed.toString();
          await fs.write(`${gitdir}/packed-refs`, text, { encoding: 'utf8' });
        }
      }

      /**
       * @param {object} args
       * @param {import('../models/FileSystem.js').FileSystem} args.fs
       * @param {string} args.gitdir
       * @param {string} args.ref
       * @param {number} [args.depth]
       * @returns {Promise<string>}
       */
      static async resolve({ fs, gitdir, ref, depth = undefined }) {
        if (depth !== undefined) {
          depth--;
          if (depth === -1) {
            return ref
          }
        }
        let sha;
        // Is it a ref pointer?
        if (ref.startsWith('ref: ')) {
          ref = ref.slice('ref: '.length);
          return GitRefManager.resolve({ fs, gitdir, ref, depth })
        }
        // Is it a complete and valid SHA?
        if (ref.length === 40 && /[0-9a-f]{40}/.test(ref)) {
          return ref
        }
        // We need to alternate between the file system and the packed-refs
        const packedMap = await GitRefManager.packedRefs({ fs, gitdir });
        // Look in all the proper paths, in this order
        const allpaths = refpaths(ref).filter(p => !GIT_FILES.includes(p)); // exclude git system files (#709)

        for (const ref of allpaths) {
          sha =
            (await fs.read(`${gitdir}/${ref}`, { encoding: 'utf8' })) ||
            packedMap.get(ref);
          if (sha) {
            return GitRefManager.resolve({ fs, gitdir, ref: sha.trim(), depth })
          }
        }
        // Do we give up?
        throw new NotFoundError(ref)
      }

      static async exists({ fs, gitdir, ref }) {
        try {
          await GitRefManager.expand({ fs, gitdir, ref });
          return true
        } catch (err) {
          return false
        }
      }

      static async expand({ fs, gitdir, ref }) {
        // Is it a complete and valid SHA?
        if (ref.length === 40 && /[0-9a-f]{40}/.test(ref)) {
          return ref
        }
        // We need to alternate between the file system and the packed-refs
        const packedMap = await GitRefManager.packedRefs({ fs, gitdir });
        // Look in all the proper paths, in this order
        const allpaths = refpaths(ref);
        for (const ref of allpaths) {
          if (await fs.exists(`${gitdir}/${ref}`)) return ref
          if (packedMap.has(ref)) return ref
        }
        // Do we give up?
        throw new NotFoundError(ref)
      }

      static async expandAgainstMap({ ref, map }) {
        // Look in all the proper paths, in this order
        const allpaths = refpaths(ref);
        for (const ref of allpaths) {
          if (await map.has(ref)) return ref
        }
        // Do we give up?
        throw new NotFoundError(ref)
      }

      static resolveAgainstMap({ ref, fullref = ref, depth = undefined, map }) {
        if (depth !== undefined) {
          depth--;
          if (depth === -1) {
            return { fullref, oid: ref }
          }
        }
        // Is it a ref pointer?
        if (ref.startsWith('ref: ')) {
          ref = ref.slice('ref: '.length);
          return GitRefManager.resolveAgainstMap({ ref, fullref, depth, map })
        }
        // Is it a complete and valid SHA?
        if (ref.length === 40 && /[0-9a-f]{40}/.test(ref)) {
          return { fullref, oid: ref }
        }
        // Look in all the proper paths, in this order
        const allpaths = refpaths(ref);
        for (const ref of allpaths) {
          const sha = map.get(ref);
          if (sha) {
            return GitRefManager.resolveAgainstMap({
              ref: sha.trim(),
              fullref: ref,
              depth,
              map,
            })
          }
        }
        // Do we give up?
        throw new NotFoundError(ref)
      }

      static async packedRefs({ fs, gitdir }) {
        const text = await fs.read(`${gitdir}/packed-refs`, { encoding: 'utf8' });
        const packed = GitPackedRefs.from(text);
        return packed.refs
      }

      // List all the refs that match the `filepath` prefix
      static async listRefs({ fs, gitdir, filepath }) {
        const packedMap = GitRefManager.packedRefs({ fs, gitdir });
        let files = null;
        try {
          files = await fs.readdirDeep(`${gitdir}/${filepath}`);
          files = files.map(x => x.replace(`${gitdir}/${filepath}/`, ''));
        } catch (err) {
          files = [];
        }

        for (let key of (await packedMap).keys()) {
          // filter by prefix
          if (key.startsWith(filepath)) {
            // remove prefix
            key = key.replace(filepath + '/', '');
            // Don't include duplicates; the loose files have precedence anyway
            if (!files.includes(key)) {
              files.push(key);
            }
          }
        }
        // since we just appended things onto an array, we need to sort them now
        files.sort(compareRefNames);
        return files
      }

      static async listBranches({ fs, gitdir, remote }) {
        if (remote) {
          return GitRefManager.listRefs({
            fs,
            gitdir,
            filepath: `refs/remotes/${remote}`,
          })
        } else {
          return GitRefManager.listRefs({ fs, gitdir, filepath: `refs/heads` })
        }
      }

      static async listTags({ fs, gitdir }) {
        const tags = await GitRefManager.listRefs({
          fs,
          gitdir,
          filepath: `refs/tags`,
        });
        return tags.filter(x => !x.endsWith('^{}'))
      }
    }

    function compareTreeEntryPath(a, b) {
      // Git sorts tree entries as if there is a trailing slash on directory names.
      return compareStrings(appendSlashIfDir(a), appendSlashIfDir(b))
    }

    function appendSlashIfDir(entry) {
      return entry.mode === '040000' ? entry.path + '/' : entry.path
    }

    /**
     *
     * @typedef {Object} TreeEntry
     * @property {string} mode - the 6 digit hexadecimal mode
     * @property {string} path - the name of the file or directory
     * @property {string} oid - the SHA-1 object id of the blob or tree
     * @property {'commit'|'blob'|'tree'} type - the type of object
     */

    function mode2type$1(mode) {
      // prettier-ignore
      switch (mode) {
        case '040000': return 'tree'
        case '100644': return 'blob'
        case '100755': return 'blob'
        case '120000': return 'blob'
        case '160000': return 'commit'
      }
      throw new InternalError(`Unexpected GitTree entry mode: ${mode}`)
    }

    function parseBuffer(buffer) {
      const _entries = [];
      let cursor = 0;
      while (cursor < buffer.length) {
        const space = buffer.indexOf(32, cursor);
        if (space === -1) {
          throw new InternalError(
            `GitTree: Error parsing buffer at byte location ${cursor}: Could not find the next space character.`
          )
        }
        const nullchar = buffer.indexOf(0, cursor);
        if (nullchar === -1) {
          throw new InternalError(
            `GitTree: Error parsing buffer at byte location ${cursor}: Could not find the next null character.`
          )
        }
        let mode = buffer.slice(cursor, space).toString('utf8');
        if (mode === '40000') mode = '040000'; // makes it line up neater in printed output
        const type = mode2type$1(mode);
        const path = buffer.slice(space + 1, nullchar).toString('utf8');

        // Prevent malicious git repos from writing to "..\foo" on clone etc
        if (path.includes('\\') || path.includes('/')) {
          throw new UnsafeFilepathError(path)
        }

        const oid = buffer.slice(nullchar + 1, nullchar + 21).toString('hex');
        cursor = nullchar + 21;
        _entries.push({ mode, path, oid, type });
      }
      return _entries
    }

    function limitModeToAllowed(mode) {
      if (typeof mode === 'number') {
        mode = mode.toString(8);
      }
      // tree
      if (mode.match(/^0?4.*/)) return '040000' // Directory
      if (mode.match(/^1006.*/)) return '100644' // Regular non-executable file
      if (mode.match(/^1007.*/)) return '100755' // Regular executable file
      if (mode.match(/^120.*/)) return '120000' // Symbolic link
      if (mode.match(/^160.*/)) return '160000' // Commit (git submodule reference)
      throw new InternalError(`Could not understand file mode: ${mode}`)
    }

    function nudgeIntoShape(entry) {
      if (!entry.oid && entry.sha) {
        entry.oid = entry.sha; // Github
      }
      entry.mode = limitModeToAllowed(entry.mode); // index
      if (!entry.type) {
        entry.type = mode2type$1(entry.mode); // index
      }
      return entry
    }

    class GitTree {
      constructor(entries) {
        if (Buffer.isBuffer(entries)) {
          this._entries = parseBuffer(entries);
        } else if (Array.isArray(entries)) {
          this._entries = entries.map(nudgeIntoShape);
        } else {
          throw new InternalError('invalid type passed to GitTree constructor')
        }
        // Tree entries are not sorted alphabetically in the usual sense (see `compareTreeEntryPath`)
        // but it is important later on that these be sorted in the same order as they would be returned from readdir.
        this._entries.sort(comparePath);
      }

      static from(tree) {
        return new GitTree(tree)
      }

      render() {
        return this._entries
          .map(entry => `${entry.mode} ${entry.type} ${entry.oid}    ${entry.path}`)
          .join('\n')
      }

      toObject() {
        // Adjust the sort order to match git's
        const entries = [...this._entries];
        entries.sort(compareTreeEntryPath);
        return Buffer.concat(
          entries.map(entry => {
            const mode = Buffer.from(entry.mode.replace(/^0/, ''));
            const space = Buffer.from(' ');
            const path = Buffer.from(entry.path, 'utf8');
            const nullchar = Buffer.from([0]);
            const oid = Buffer.from(entry.oid, 'hex');
            return Buffer.concat([mode, space, path, nullchar, oid])
          })
        )
      }

      /**
       * @returns {TreeEntry[]}
       */
      entries() {
        return this._entries
      }

      *[Symbol.iterator]() {
        for (const entry of this._entries) {
          yield entry;
        }
      }
    }

    class GitObject {
      static wrap({ type, object }) {
        return Buffer.concat([
          Buffer.from(`${type} ${object.byteLength.toString()}\x00`),
          Buffer.from(object),
        ])
      }

      static unwrap(buffer) {
        const s = buffer.indexOf(32); // first space
        const i = buffer.indexOf(0); // first null value
        const type = buffer.slice(0, s).toString('utf8'); // get type of object
        const length = buffer.slice(s + 1, i).toString('utf8'); // get type of object
        const actualLength = buffer.length - (i + 1);
        // verify length
        if (parseInt(length) !== actualLength) {
          throw new InternalError(
            `Length mismatch: expected ${length} bytes but got ${actualLength} instead.`
          )
        }
        return {
          type,
          object: Buffer.from(buffer.slice(i + 1)),
        }
      }
    }

    async function readObjectLoose({ fs, gitdir, oid }) {
      const source = `objects/${oid.slice(0, 2)}/${oid.slice(2)}`;
      const file = await fs.read(`${gitdir}/${source}`);
      if (!file) {
        return null
      }
      return { object: file, format: 'deflated', source }
    }

    /**
     * @param {Buffer} delta
     * @param {Buffer} source
     * @returns {Buffer}
     */
    function applyDelta(delta, source) {
      const reader = new BufferCursor(delta);
      const sourceSize = readVarIntLE(reader);

      if (sourceSize !== source.byteLength) {
        throw new InternalError(
          `applyDelta expected source buffer to be ${sourceSize} bytes but the provided buffer was ${source.length} bytes`
        )
      }
      const targetSize = readVarIntLE(reader);
      let target;

      const firstOp = readOp(reader, source);
      // Speed optimization - return raw buffer if it's just single simple copy
      if (firstOp.byteLength === targetSize) {
        target = firstOp;
      } else {
        // Otherwise, allocate a fresh buffer and slices
        target = Buffer.alloc(targetSize);
        const writer = new BufferCursor(target);
        writer.copy(firstOp);

        while (!reader.eof()) {
          writer.copy(readOp(reader, source));
        }

        const tell = writer.tell();
        if (targetSize !== tell) {
          throw new InternalError(
            `applyDelta expected target buffer to be ${targetSize} bytes but the resulting buffer was ${tell} bytes`
          )
        }
      }
      return target
    }

    function readVarIntLE(reader) {
      let result = 0;
      let shift = 0;
      let byte = null;
      do {
        byte = reader.readUInt8();
        result |= (byte & 0b01111111) << shift;
        shift += 7;
      } while (byte & 0b10000000)
      return result
    }

    function readCompactLE(reader, flags, size) {
      let result = 0;
      let shift = 0;
      while (size--) {
        if (flags & 0b00000001) {
          result |= reader.readUInt8() << shift;
        }
        flags >>= 1;
        shift += 8;
      }
      return result
    }

    function readOp(reader, source) {
      /** @type {number} */
      const byte = reader.readUInt8();
      const COPY = 0b10000000;
      const OFFS = 0b00001111;
      const SIZE = 0b01110000;
      if (byte & COPY) {
        // copy consists of 4 byte offset, 3 byte size (in LE order)
        const offset = readCompactLE(reader, byte & OFFS, 4);
        let size = readCompactLE(reader, (byte & SIZE) >> 4, 3);
        // Yup. They really did this optimization.
        if (size === 0) size = 0x10000;
        return source.slice(offset, offset + size)
      } else {
        // insert
        return reader.slice(byte)
      }
    }

    // Convert a value to an Async Iterator
    // This will be easier with async generator functions.
    function fromValue$1(value) {
      let queue = [value];
      return {
        next() {
          return Promise.resolve({ done: queue.length === 0, value: queue.pop() })
        },
        return() {
          queue = [];
          return {}
        },
        [Symbol.asyncIterator]() {
          return this
        },
      }
    }

    function getIterator$1(iterable) {
      if (iterable[Symbol.asyncIterator]) {
        return iterable[Symbol.asyncIterator]()
      }
      if (iterable[Symbol.iterator]) {
        return iterable[Symbol.iterator]()
      }
      if (iterable.next) {
        return iterable
      }
      return fromValue$1(iterable)
    }

    // inspired by 'gartal' but lighter-weight and more battle-tested.
    class StreamReader {
      constructor(stream) {
        this.stream = getIterator$1(stream);
        this.buffer = null;
        this.cursor = 0;
        this.undoCursor = 0;
        this.started = false;
        this._ended = false;
        this._discardedBytes = 0;
      }

      eof() {
        return this._ended && this.cursor === this.buffer.length
      }

      tell() {
        return this._discardedBytes + this.cursor
      }

      async byte() {
        if (this.eof()) return
        if (!this.started) await this._init();
        if (this.cursor === this.buffer.length) {
          await this._loadnext();
          if (this._ended) return
        }
        this._moveCursor(1);
        return this.buffer[this.undoCursor]
      }

      async chunk() {
        if (this.eof()) return
        if (!this.started) await this._init();
        if (this.cursor === this.buffer.length) {
          await this._loadnext();
          if (this._ended) return
        }
        this._moveCursor(this.buffer.length);
        return this.buffer.slice(this.undoCursor, this.cursor)
      }

      async read(n) {
        if (this.eof()) return
        if (!this.started) await this._init();
        if (this.cursor + n > this.buffer.length) {
          this._trim();
          await this._accumulate(n);
        }
        this._moveCursor(n);
        return this.buffer.slice(this.undoCursor, this.cursor)
      }

      async skip(n) {
        if (this.eof()) return
        if (!this.started) await this._init();
        if (this.cursor + n > this.buffer.length) {
          this._trim();
          await this._accumulate(n);
        }
        this._moveCursor(n);
      }

      async undo() {
        this.cursor = this.undoCursor;
      }

      async _next() {
        this.started = true;
        let { done, value } = await this.stream.next();
        if (done) {
          this._ended = true;
        }
        if (value) {
          value = Buffer.from(value);
        }
        return value
      }

      _trim() {
        // Throw away parts of the buffer we don't need anymore
        // assert(this.cursor <= this.buffer.length)
        this.buffer = this.buffer.slice(this.undoCursor);
        this.cursor -= this.undoCursor;
        this._discardedBytes += this.undoCursor;
        this.undoCursor = 0;
      }

      _moveCursor(n) {
        this.undoCursor = this.cursor;
        this.cursor += n;
        if (this.cursor > this.buffer.length) {
          this.cursor = this.buffer.length;
        }
      }

      async _accumulate(n) {
        if (this._ended) return
        // Expand the buffer until we have N bytes of data
        // or we've reached the end of the stream
        const buffers = [this.buffer];
        while (this.cursor + n > lengthBuffers(buffers)) {
          const nextbuffer = await this._next();
          if (this._ended) break
          buffers.push(nextbuffer);
        }
        this.buffer = Buffer.concat(buffers);
      }

      async _loadnext() {
        this._discardedBytes += this.buffer.length;
        this.undoCursor = 0;
        this.cursor = 0;
        this.buffer = await this._next();
      }

      async _init() {
        this.buffer = await this._next();
      }
    }

    // This helper function helps us postpone concatenating buffers, which
    // would create intermediate buffer objects,
    function lengthBuffers(buffers) {
      return buffers.reduce((acc, buffer) => acc + buffer.length, 0)
    }

    // My version of git-list-pack - roughly 15x faster than the original

    async function listpack(stream, onData) {
      const reader = new StreamReader(stream);
      let PACK = await reader.read(4);
      PACK = PACK.toString('utf8');
      if (PACK !== 'PACK') {
        throw new InternalError(`Invalid PACK header '${PACK}'`)
      }

      let version = await reader.read(4);
      version = version.readUInt32BE(0);
      if (version !== 2) {
        throw new InternalError(`Invalid packfile version: ${version}`)
      }

      let numObjects = await reader.read(4);
      numObjects = numObjects.readUInt32BE(0);
      // If (for some godforsaken reason) this is an empty packfile, abort now.
      if (numObjects < 1) return

      while (!reader.eof() && numObjects--) {
        const offset = reader.tell();
        const { type, length, ofs, reference } = await parseHeader(reader);
        const inflator = new pako_1.Inflate();
        while (!inflator.result) {
          const chunk = await reader.chunk();
          if (!chunk) break
          inflator.push(chunk, false);
          if (inflator.err) {
            throw new InternalError(`Pako error: ${inflator.msg}`)
          }
          if (inflator.result) {
            if (inflator.result.length !== length) {
              throw new InternalError(
                `Inflated object size is different from that stated in packfile.`
              )
            }

            // Backtrack parser to where deflated data ends
            await reader.undo();
            await reader.read(chunk.length - inflator.strm.avail_in);
            const end = reader.tell();
            await onData({
              data: inflator.result,
              type,
              num: numObjects,
              offset,
              end,
              reference,
              ofs,
            });
          }
        }
      }
    }

    async function parseHeader(reader) {
      // Object type is encoded in bits 654
      let byte = await reader.byte();
      const type = (byte >> 4) & 0b111;
      // The length encoding get complicated.
      // Last four bits of length is encoded in bits 3210
      let length = byte & 0b1111;
      // Whether the next byte is part of the variable-length encoded number
      // is encoded in bit 7
      if (byte & 0b10000000) {
        let shift = 4;
        do {
          byte = await reader.byte();
          length |= (byte & 0b01111111) << shift;
          shift += 7;
        } while (byte & 0b10000000)
      }
      // Handle deltified objects
      let ofs;
      let reference;
      if (type === 6) {
        let shift = 0;
        ofs = 0;
        const bytes = [];
        do {
          byte = await reader.byte();
          ofs |= (byte & 0b01111111) << shift;
          shift += 7;
          bytes.push(byte);
        } while (byte & 0b10000000)
        reference = Buffer.from(bytes);
      }
      if (type === 7) {
        const buf = await reader.read(20);
        reference = buf;
      }
      return { type, length, ofs, reference }
    }

    async function inflate(buffer) {
      return pako_1.inflate(buffer)
    }

    function decodeVarInt(reader) {
      const bytes = [];
      let byte = 0;
      let multibyte = 0;
      do {
        byte = reader.readUInt8();
        // We keep bits 6543210
        const lastSeven = byte & 0b01111111;
        bytes.push(lastSeven);
        // Whether the next byte is part of the variable-length encoded number
        // is encoded in bit 7
        multibyte = byte & 0b10000000;
      } while (multibyte)
      // Now that all the bytes are in big-endian order,
      // alternate shifting the bits left by 7 and OR-ing the next byte.
      // And... do a weird increment-by-one thing that I don't quite understand.
      return bytes.reduce((a, b) => ((a + 1) << 7) | b, -1)
    }

    // I'm pretty much copying this one from the git C source code,
    // because it makes no sense.
    function otherVarIntDecode(reader, startWith) {
      let result = startWith;
      let shift = 4;
      let byte = null;
      do {
        byte = reader.readUInt8();
        result |= (byte & 0b01111111) << shift;
        shift += 7;
      } while (byte & 0b10000000)
      return result
    }

    class GitPackIndex {
      constructor(stuff) {
        Object.assign(this, stuff);
        this.offsetCache = {};
      }

      static async fromIdx({ idx, getExternalRefDelta }) {
        const reader = new BufferCursor(idx);
        const magic = reader.slice(4).toString('hex');
        // Check for IDX v2 magic number
        if (magic !== 'ff744f63') {
          return // undefined
        }
        const version = reader.readUInt32BE();
        if (version !== 2) {
          throw new InternalError(
            `Unable to read version ${version} packfile IDX. (Only version 2 supported)`
          )
        }
        if (idx.byteLength > 2048 * 1024 * 1024) {
          throw new InternalError(
            `To keep implementation simple, I haven't implemented the layer 5 feature needed to support packfiles > 2GB in size.`
          )
        }
        // Skip over fanout table
        reader.seek(reader.tell() + 4 * 255);
        // Get hashes
        const size = reader.readUInt32BE();
        const hashes = [];
        for (let i = 0; i < size; i++) {
          const hash = reader.slice(20).toString('hex');
          hashes[i] = hash;
        }
        reader.seek(reader.tell() + 4 * size);
        // Skip over CRCs
        // Get offsets
        const offsets = new Map();
        for (let i = 0; i < size; i++) {
          offsets.set(hashes[i], reader.readUInt32BE());
        }
        const packfileSha = reader.slice(20).toString('hex');
        return new GitPackIndex({
          hashes,
          crcs: {},
          offsets,
          packfileSha,
          getExternalRefDelta,
        })
      }

      static async fromPack({ pack, getExternalRefDelta, onProgress }) {
        const listpackTypes = {
          1: 'commit',
          2: 'tree',
          3: 'blob',
          4: 'tag',
          6: 'ofs-delta',
          7: 'ref-delta',
        };
        const offsetToObject = {};

        // Older packfiles do NOT use the shasum of the pack itself,
        // so it is recommended to just use whatever bytes are in the trailer.
        // Source: https://github.com/git/git/commit/1190a1acf800acdcfd7569f87ac1560e2d077414
        const packfileSha = pack.slice(-20).toString('hex');

        const hashes = [];
        const crcs = {};
        const offsets = new Map();
        let totalObjectCount = null;
        let lastPercent = null;

        await listpack([pack], async ({ data, type, reference, offset, num }) => {
          if (totalObjectCount === null) totalObjectCount = num;
          const percent = Math.floor(
            ((totalObjectCount - num) * 100) / totalObjectCount
          );
          if (percent !== lastPercent) {
            if (onProgress) {
              await onProgress({
                phase: 'Receiving objects',
                loaded: totalObjectCount - num,
                total: totalObjectCount,
              });
            }
          }
          lastPercent = percent;
          // Change type from a number to a meaningful string
          type = listpackTypes[type];

          if (['commit', 'tree', 'blob', 'tag'].includes(type)) {
            offsetToObject[offset] = {
              type,
              offset,
            };
          } else if (type === 'ofs-delta') {
            offsetToObject[offset] = {
              type,
              offset,
            };
          } else if (type === 'ref-delta') {
            offsetToObject[offset] = {
              type,
              offset,
            };
          }
        });

        // We need to know the lengths of the slices to compute the CRCs.
        const offsetArray = Object.keys(offsetToObject).map(Number);
        for (const [i, start] of offsetArray.entries()) {
          const end =
            i + 1 === offsetArray.length ? pack.byteLength - 20 : offsetArray[i + 1];
          const o = offsetToObject[start];
          const crc = crc32$1.buf(pack.slice(start, end)) >>> 0;
          o.end = end;
          o.crc = crc;
        }

        // We don't have the hashes yet. But we can generate them using the .readSlice function!
        const p = new GitPackIndex({
          pack: Promise.resolve(pack),
          packfileSha,
          crcs,
          hashes,
          offsets,
          getExternalRefDelta,
        });

        // Resolve deltas and compute the oids
        lastPercent = null;
        let count = 0;
        const objectsByDepth = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        for (let offset in offsetToObject) {
          offset = Number(offset);
          const percent = Math.floor((count * 100) / totalObjectCount);
          if (percent !== lastPercent) {
            if (onProgress) {
              await onProgress({
                phase: 'Resolving deltas',
                loaded: count,
                total: totalObjectCount,
              });
            }
          }
          count++;
          lastPercent = percent;

          const o = offsetToObject[offset];
          if (o.oid) continue
          try {
            p.readDepth = 0;
            p.externalReadDepth = 0;
            const { type, object } = await p.readSlice({ start: offset });
            objectsByDepth[p.readDepth] += 1;
            const oid = await shasum(GitObject.wrap({ type, object }));
            o.oid = oid;
            hashes.push(oid);
            offsets.set(oid, offset);
            crcs[oid] = o.crc;
          } catch (err) {
            continue
          }
        }

        hashes.sort();
        return p
      }

      async toBuffer() {
        const buffers = [];
        const write = (str, encoding) => {
          buffers.push(Buffer.from(str, encoding));
        };
        // Write out IDX v2 magic number
        write('ff744f63', 'hex');
        // Write out version number 2
        write('00000002', 'hex');
        // Write fanout table
        const fanoutBuffer = new BufferCursor(Buffer.alloc(256 * 4));
        for (let i = 0; i < 256; i++) {
          let count = 0;
          for (const hash of this.hashes) {
            if (parseInt(hash.slice(0, 2), 16) <= i) count++;
          }
          fanoutBuffer.writeUInt32BE(count);
        }
        buffers.push(fanoutBuffer.buffer);
        // Write out hashes
        for (const hash of this.hashes) {
          write(hash, 'hex');
        }
        // Write out crcs
        const crcsBuffer = new BufferCursor(Buffer.alloc(this.hashes.length * 4));
        for (const hash of this.hashes) {
          crcsBuffer.writeUInt32BE(this.crcs[hash]);
        }
        buffers.push(crcsBuffer.buffer);
        // Write out offsets
        const offsetsBuffer = new BufferCursor(Buffer.alloc(this.hashes.length * 4));
        for (const hash of this.hashes) {
          offsetsBuffer.writeUInt32BE(this.offsets.get(hash));
        }
        buffers.push(offsetsBuffer.buffer);
        // Write out packfile checksum
        write(this.packfileSha, 'hex');
        // Write out shasum
        const totalBuffer = Buffer.concat(buffers);
        const sha = await shasum(totalBuffer);
        const shaBuffer = Buffer.alloc(20);
        shaBuffer.write(sha, 'hex');
        return Buffer.concat([totalBuffer, shaBuffer])
      }

      async load({ pack }) {
        this.pack = pack;
      }

      async unload() {
        this.pack = null;
      }

      async read({ oid }) {
        if (!this.offsets.get(oid)) {
          if (this.getExternalRefDelta) {
            this.externalReadDepth++;
            return this.getExternalRefDelta(oid)
          } else {
            throw new InternalError(`Could not read object ${oid} from packfile`)
          }
        }
        const start = this.offsets.get(oid);
        return this.readSlice({ start })
      }

      async readSlice({ start }) {
        if (this.offsetCache[start]) {
          return Object.assign({}, this.offsetCache[start])
        }
        this.readDepth++;
        const types = {
          0b0010000: 'commit',
          0b0100000: 'tree',
          0b0110000: 'blob',
          0b1000000: 'tag',
          0b1100000: 'ofs_delta',
          0b1110000: 'ref_delta',
        };
        if (!this.pack) {
          throw new InternalError(
            'Tried to read from a GitPackIndex with no packfile loaded into memory'
          )
        }
        const raw = (await this.pack).slice(start);
        const reader = new BufferCursor(raw);
        const byte = reader.readUInt8();
        // Object type is encoded in bits 654
        const btype = byte & 0b1110000;
        let type = types[btype];
        if (type === undefined) {
          throw new InternalError('Unrecognized type: 0b' + btype.toString(2))
        }
        // The length encoding get complicated.
        // Last four bits of length is encoded in bits 3210
        const lastFour = byte & 0b1111;
        let length = lastFour;
        // Whether the next byte is part of the variable-length encoded number
        // is encoded in bit 7
        const multibyte = byte & 0b10000000;
        if (multibyte) {
          length = otherVarIntDecode(reader, lastFour);
        }
        let base = null;
        let object = null;
        // Handle deltified objects
        if (type === 'ofs_delta') {
          const offset = decodeVarInt(reader);
          const baseOffset = start - offset
          ;({ object: base, type } = await this.readSlice({ start: baseOffset }));
        }
        if (type === 'ref_delta') {
          const oid = reader.slice(20).toString('hex')
          ;({ object: base, type } = await this.read({ oid }));
        }
        // Handle undeltified objects
        const buffer = raw.slice(reader.tell());
        object = Buffer.from(await inflate(buffer));
        // Assert that the object length is as expected.
        if (object.byteLength !== length) {
          throw new InternalError(
            `Packfile told us object would have length ${length} but it had length ${object.byteLength}`
          )
        }
        if (base) {
          object = Buffer.from(applyDelta(object, base));
        }
        // Cache the result based on depth.
        if (this.readDepth > 3) {
          // hand tuned for speed / memory usage tradeoff
          this.offsetCache[start] = { type, object };
        }
        return { type, format: 'content', object }
      }
    }

    const PackfileCache = Symbol('PackfileCache');

    async function loadPackIndex({
      fs,
      filename,
      getExternalRefDelta,
      emitter,
      emitterPrefix,
    }) {
      const idx = await fs.read(filename);
      return GitPackIndex.fromIdx({ idx, getExternalRefDelta })
    }

    function readPackIndex({
      fs,
      cache,
      filename,
      getExternalRefDelta,
      emitter,
      emitterPrefix,
    }) {
      // Try to get the packfile index from the in-memory cache
      if (!cache[PackfileCache]) cache[PackfileCache] = new Map();
      let p = cache[PackfileCache].get(filename);
      if (!p) {
        p = loadPackIndex({
          fs,
          filename,
          getExternalRefDelta,
          emitter,
          emitterPrefix,
        });
        cache[PackfileCache].set(filename, p);
      }
      return p
    }

    async function readObjectPacked({
      fs,
      cache,
      gitdir,
      oid,
      format = 'content',
      getExternalRefDelta,
    }) {
      // Check to see if it's in a packfile.
      // Iterate through all the .idx files
      let list = await fs.readdir(join(gitdir, 'objects/pack'));
      list = list.filter(x => x.endsWith('.idx'));
      for (const filename of list) {
        const indexFile = `${gitdir}/objects/pack/${filename}`;
        const p = await readPackIndex({
          fs,
          cache,
          filename: indexFile,
          getExternalRefDelta,
        });
        if (p.error) throw new InternalError(p.error)
        // If the packfile DOES have the oid we're looking for...
        if (p.offsets.has(oid)) {
          // Get the resolved git object from the packfile
          if (!p.pack) {
            const packFile = indexFile.replace(/idx$/, 'pack');
            p.pack = fs.read(packFile);
          }
          const result = await p.read({ oid, getExternalRefDelta });
          result.format = 'content';
          result.source = `objects/pack/${filename.replace(/idx$/, 'pack')}`;
          return result
        }
      }
      // Failed to find it
      return null
    }

    /**
     * @param {object} args
     * @param {import('../models/FileSystem.js').FileSystem} args.fs
     * @param {any} args.cache
     * @param {string} args.gitdir
     * @param {string} args.oid
     * @param {string} [args.format]
     */
    async function _readObject({
      fs,
      cache,
      gitdir,
      oid,
      format = 'content',
    }) {
      // Curry the current read method so that the packfile un-deltification
      // process can acquire external ref-deltas.
      const getExternalRefDelta = oid => _readObject({ fs, cache, gitdir, oid });

      let result;
      // Empty tree - hard-coded so we can use it as a shorthand.
      // Note: I think the canonical git implementation must do this too because
      // `git cat-file -t 4b825dc642cb6eb9a060e54bf8d69288fbee4904` prints "tree" even in empty repos.
      if (oid === '4b825dc642cb6eb9a060e54bf8d69288fbee4904') {
        result = { format: 'wrapped', object: Buffer.from(`tree 0\x00`) };
      }
      // Look for it in the loose object directory.
      if (!result) {
        result = await readObjectLoose({ fs, gitdir, oid });
      }
      // Check to see if it's in a packfile.
      if (!result) {
        result = await readObjectPacked({
          fs,
          cache,
          gitdir,
          oid,
          getExternalRefDelta,
        });
      }
      // Finally
      if (!result) {
        throw new NotFoundError(oid)
      }

      if (format === 'deflated') {
        return result
      }

      if (result.format === 'deflated') {
        result.object = Buffer.from(await inflate(result.object));
        result.format = 'wrapped';
      }

      if (result.format === 'wrapped') {
        if (format === 'wrapped' && result.format === 'wrapped') {
          return result
        }
        const sha = await shasum(result.object);
        if (sha !== oid) {
          throw new InternalError(
            `SHA check failed! Expected ${oid}, computed ${sha}`
          )
        }
        const { object, type } = GitObject.unwrap(result.object);
        result.type = type;
        result.object = object;
        result.format = 'content';
      }

      if (result.format === 'content') {
        if (format === 'content') return result
        return
      }

      throw new InternalError(`invalid format "${result.format}"`)
    }

    class AlreadyExistsError extends BaseError {
      /**
       * @param {'note'|'remote'|'tag'|'branch'} noun
       * @param {string} where
       * @param {boolean} canForce
       */
      constructor(noun, where, canForce = true) {
        super(
          `Failed to create ${noun} at ${where} because it already exists.${
        canForce
          ? ` (Hint: use 'force: true' parameter to overwrite existing ${noun}.)`
          : ''
      }`
        );
        this.code = this.name = AlreadyExistsError.code;
        this.data = { noun, where, canForce };
      }
    }
    /** @type {'AlreadyExistsError'} */
    AlreadyExistsError.code = 'AlreadyExistsError';

    class AmbiguousError extends BaseError {
      /**
       * @param {'oids'|'refs'} nouns
       * @param {string} short
       * @param {string[]} matches
       */
      constructor(nouns, short, matches) {
        super(
          `Found multiple ${nouns} matching "${short}" (${matches.join(
        ', '
      )}). Use a longer abbreviation length to disambiguate them.`
        );
        this.code = this.name = AmbiguousError.code;
        this.data = { nouns, short, matches };
      }
    }
    /** @type {'AmbiguousError'} */
    AmbiguousError.code = 'AmbiguousError';

    class CheckoutConflictError extends BaseError {
      /**
       * @param {string[]} filepaths
       */
      constructor(filepaths) {
        super(
          `Your local changes to the following files would be overwritten by checkout: ${filepaths.join(
        ', '
      )}`
        );
        this.code = this.name = CheckoutConflictError.code;
        this.data = { filepaths };
      }
    }
    /** @type {'CheckoutConflictError'} */
    CheckoutConflictError.code = 'CheckoutConflictError';

    class CommitNotFetchedError extends BaseError {
      /**
       * @param {string} ref
       * @param {string} oid
       */
      constructor(ref, oid) {
        super(
          `Failed to checkout "${ref}" because commit ${oid} is not available locally. Do a git fetch to make the branch available locally.`
        );
        this.code = this.name = CommitNotFetchedError.code;
        this.data = { ref, oid };
      }
    }
    /** @type {'CommitNotFetchedError'} */
    CommitNotFetchedError.code = 'CommitNotFetchedError';

    class EmptyServerResponseError extends BaseError {
      constructor() {
        super(`Empty response from git server.`);
        this.code = this.name = EmptyServerResponseError.code;
        this.data = {};
      }
    }
    /** @type {'EmptyServerResponseError'} */
    EmptyServerResponseError.code = 'EmptyServerResponseError';

    class FastForwardError extends BaseError {
      constructor() {
        super(`A simple fast-forward merge was not possible.`);
        this.code = this.name = FastForwardError.code;
        this.data = {};
      }
    }
    /** @type {'FastForwardError'} */
    FastForwardError.code = 'FastForwardError';

    class GitPushError extends BaseError {
      /**
       * @param {string} prettyDetails
       * @param {PushResult} result
       */
      constructor(prettyDetails, result) {
        super(`One or more branches were not updated: ${prettyDetails}`);
        this.code = this.name = GitPushError.code;
        this.data = { prettyDetails, result };
      }
    }
    /** @type {'GitPushError'} */
    GitPushError.code = 'GitPushError';

    class HttpError extends BaseError {
      /**
       * @param {number} statusCode
       * @param {string} statusMessage
       * @param {string} response
       */
      constructor(statusCode, statusMessage, response) {
        super(`HTTP Error: ${statusCode} ${statusMessage}`);
        this.code = this.name = HttpError.code;
        this.data = { statusCode, statusMessage, response };
      }
    }
    /** @type {'HttpError'} */
    HttpError.code = 'HttpError';

    class InvalidFilepathError extends BaseError {
      /**
       * @param {'leading-slash'|'trailing-slash'|'directory'} [reason]
       */
      constructor(reason) {
        let message = 'invalid filepath';
        if (reason === 'leading-slash' || reason === 'trailing-slash') {
          message = `"filepath" parameter should not include leading or trailing directory separators because these can cause problems on some platforms.`;
        } else if (reason === 'directory') {
          message = `"filepath" should not be a directory.`;
        }
        super(message);
        this.code = this.name = InvalidFilepathError.code;
        this.data = { reason };
      }
    }
    /** @type {'InvalidFilepathError'} */
    InvalidFilepathError.code = 'InvalidFilepathError';

    class InvalidRefNameError extends BaseError {
      /**
       * @param {string} ref
       * @param {string} suggestion
       * @param {boolean} canForce
       */
      constructor(ref, suggestion) {
        super(
          `"${ref}" would be an invalid git reference. (Hint: a valid alternative would be "${suggestion}".)`
        );
        this.code = this.name = InvalidRefNameError.code;
        this.data = { ref, suggestion };
      }
    }
    /** @type {'InvalidRefNameError'} */
    InvalidRefNameError.code = 'InvalidRefNameError';

    class MaxDepthError extends BaseError {
      /**
       * @param {number} depth
       */
      constructor(depth) {
        super(`Maximum search depth of ${depth} exceeded.`);
        this.code = this.name = MaxDepthError.code;
        this.data = { depth };
      }
    }
    /** @type {'MaxDepthError'} */
    MaxDepthError.code = 'MaxDepthError';

    class MergeNotSupportedError extends BaseError {
      constructor() {
        super(`Merges with conflicts are not supported yet.`);
        this.code = this.name = MergeNotSupportedError.code;
        this.data = {};
      }
    }
    /** @type {'MergeNotSupportedError'} */
    MergeNotSupportedError.code = 'MergeNotSupportedError';

    class MergeConflictError extends BaseError {
      /**
       * @param {Array<string>} filepaths
       */
      constructor(filepaths) {
        super(
          `Automatic merge failed with one or more merge conflicts in the following files: ${filepaths.toString()}. Fix conflicts then commit the result.`
        );
        this.code = this.name = MergeConflictError.code;
        this.data = { filepaths };
      }
    }
    /** @type {'MergeConflictError'} */
    MergeConflictError.code = 'MergeConflictError';

    class MissingNameError extends BaseError {
      /**
       * @param {'author'|'committer'|'tagger'} role
       */
      constructor(role) {
        super(
          `No name was provided for ${role} in the argument or in the .git/config file.`
        );
        this.code = this.name = MissingNameError.code;
        this.data = { role };
      }
    }
    /** @type {'MissingNameError'} */
    MissingNameError.code = 'MissingNameError';

    class MissingParameterError extends BaseError {
      /**
       * @param {string} parameter
       */
      constructor(parameter) {
        super(
          `The function requires a "${parameter}" parameter but none was provided.`
        );
        this.code = this.name = MissingParameterError.code;
        this.data = { parameter };
      }
    }
    /** @type {'MissingParameterError'} */
    MissingParameterError.code = 'MissingParameterError';

    class MultipleGitError extends BaseError {
      /**
       * @param {Error[]} errors
       * @param {string} message
       */
      constructor(errors) {
        super(
          `There are multiple errors that were thrown by the method. Please refer to the "errors" property to see more`
        );
        this.code = this.name = MultipleGitError.code;
        this.data = { errors };
        this.errors = errors;
      }
    }
    /** @type {'MultipleGitError'} */
    MultipleGitError.code = 'MultipleGitError';

    class ParseError extends BaseError {
      /**
       * @param {string} expected
       * @param {string} actual
       */
      constructor(expected, actual) {
        super(`Expected "${expected}" but received "${actual}".`);
        this.code = this.name = ParseError.code;
        this.data = { expected, actual };
      }
    }
    /** @type {'ParseError'} */
    ParseError.code = 'ParseError';

    class PushRejectedError extends BaseError {
      /**
       * @param {'not-fast-forward'|'tag-exists'} reason
       */
      constructor(reason) {
        let message = '';
        if (reason === 'not-fast-forward') {
          message = ' because it was not a simple fast-forward';
        } else if (reason === 'tag-exists') {
          message = ' because tag already exists';
        }
        super(`Push rejected${message}. Use "force: true" to override.`);
        this.code = this.name = PushRejectedError.code;
        this.data = { reason };
      }
    }
    /** @type {'PushRejectedError'} */
    PushRejectedError.code = 'PushRejectedError';

    class RemoteCapabilityError extends BaseError {
      /**
       * @param {'shallow'|'deepen-since'|'deepen-not'|'deepen-relative'} capability
       * @param {'depth'|'since'|'exclude'|'relative'} parameter
       */
      constructor(capability, parameter) {
        super(
          `Remote does not support the "${capability}" so the "${parameter}" parameter cannot be used.`
        );
        this.code = this.name = RemoteCapabilityError.code;
        this.data = { capability, parameter };
      }
    }
    /** @type {'RemoteCapabilityError'} */
    RemoteCapabilityError.code = 'RemoteCapabilityError';

    class SmartHttpError extends BaseError {
      /**
       * @param {string} preview
       * @param {string} response
       */
      constructor(preview, response) {
        super(
          `Remote did not reply using the "smart" HTTP protocol. Expected "001e# service=git-upload-pack" but received: ${preview}`
        );
        this.code = this.name = SmartHttpError.code;
        this.data = { preview, response };
      }
    }
    /** @type {'SmartHttpError'} */
    SmartHttpError.code = 'SmartHttpError';

    class UnknownTransportError extends BaseError {
      /**
       * @param {string} url
       * @param {string} transport
       * @param {string} [suggestion]
       */
      constructor(url, transport, suggestion) {
        super(
          `Git remote "${url}" uses an unrecognized transport protocol: "${transport}"`
        );
        this.code = this.name = UnknownTransportError.code;
        this.data = { url, transport, suggestion };
      }
    }
    /** @type {'UnknownTransportError'} */
    UnknownTransportError.code = 'UnknownTransportError';

    class UrlParseError extends BaseError {
      /**
       * @param {string} url
       */
      constructor(url) {
        super(`Cannot parse remote URL: "${url}"`);
        this.code = this.name = UrlParseError.code;
        this.data = { url };
      }
    }
    /** @type {'UrlParseError'} */
    UrlParseError.code = 'UrlParseError';

    class UserCanceledError extends BaseError {
      constructor() {
        super(`The operation was canceled.`);
        this.code = this.name = UserCanceledError.code;
        this.data = {};
      }
    }
    /** @type {'UserCanceledError'} */
    UserCanceledError.code = 'UserCanceledError';

    class IndexResetError extends BaseError {
      /**
       * @param {Array<string>} filepaths
       */
      constructor(filepath) {
        super(
          `Could not merge index: Entry for '${filepath}' is not up to date. Either reset the index entry to HEAD, or stage your unstaged chages.`
        );
        this.code = this.name = IndexResetError.code;
        this.data = { filepath };
      }
    }
    /** @type {'IndexResetError'} */
    IndexResetError.code = 'IndexResetError';



    var Errors = /*#__PURE__*/Object.freeze({
      __proto__: null,
      AlreadyExistsError: AlreadyExistsError,
      AmbiguousError: AmbiguousError,
      CheckoutConflictError: CheckoutConflictError,
      CommitNotFetchedError: CommitNotFetchedError,
      EmptyServerResponseError: EmptyServerResponseError,
      FastForwardError: FastForwardError,
      GitPushError: GitPushError,
      HttpError: HttpError,
      InternalError: InternalError,
      InvalidFilepathError: InvalidFilepathError,
      InvalidOidError: InvalidOidError,
      InvalidRefNameError: InvalidRefNameError,
      MaxDepthError: MaxDepthError,
      MergeNotSupportedError: MergeNotSupportedError,
      MergeConflictError: MergeConflictError,
      MissingNameError: MissingNameError,
      MissingParameterError: MissingParameterError,
      MultipleGitError: MultipleGitError,
      NoRefspecError: NoRefspecError,
      NotFoundError: NotFoundError,
      ObjectTypeError: ObjectTypeError,
      ParseError: ParseError,
      PushRejectedError: PushRejectedError,
      RemoteCapabilityError: RemoteCapabilityError,
      SmartHttpError: SmartHttpError,
      UnknownTransportError: UnknownTransportError,
      UnsafeFilepathError: UnsafeFilepathError,
      UrlParseError: UrlParseError,
      UserCanceledError: UserCanceledError,
      UnmergedPathsError: UnmergedPathsError,
      IndexResetError: IndexResetError
    });

    function formatAuthor({ name, email, timestamp, timezoneOffset }) {
      timezoneOffset = formatTimezoneOffset(timezoneOffset);
      return `${name} <${email}> ${timestamp} ${timezoneOffset}`
    }

    // The amount of effort that went into crafting these cases to handle
    // -0 (just so we don't lose that information when parsing and reconstructing)
    // but can also default to +0 was extraordinary.

    function formatTimezoneOffset(minutes) {
      const sign = simpleSign(negateExceptForZero(minutes));
      minutes = Math.abs(minutes);
      const hours = Math.floor(minutes / 60);
      minutes -= hours * 60;
      let strHours = String(hours);
      let strMinutes = String(minutes);
      if (strHours.length < 2) strHours = '0' + strHours;
      if (strMinutes.length < 2) strMinutes = '0' + strMinutes;
      return (sign === -1 ? '-' : '+') + strHours + strMinutes
    }

    function simpleSign(n) {
      return Math.sign(n) || (Object.is(n, -0) ? -1 : 1)
    }

    function negateExceptForZero(n) {
      return n === 0 ? n : -n
    }

    function normalizeNewlines(str) {
      // remove all <CR>
      str = str.replace(/\r/g, '');
      // no extra newlines up front
      str = str.replace(/^\n+/, '');
      // and a single newline at the end
      str = str.replace(/\n+$/, '') + '\n';
      return str
    }

    function parseAuthor(author) {
      const [, name, email, timestamp, offset] = author.match(
        /^(.*) <(.*)> (.*) (.*)$/
      );
      return {
        name: name,
        email: email,
        timestamp: Number(timestamp),
        timezoneOffset: parseTimezoneOffset(offset),
      }
    }

    // The amount of effort that went into crafting these cases to handle
    // -0 (just so we don't lose that information when parsing and reconstructing)
    // but can also default to +0 was extraordinary.

    function parseTimezoneOffset(offset) {
      let [, sign, hours, minutes] = offset.match(/(\+|-)(\d\d)(\d\d)/);
      minutes = (sign === '+' ? 1 : -1) * (Number(hours) * 60 + Number(minutes));
      return negateExceptForZero$1(minutes)
    }

    function negateExceptForZero$1(n) {
      return n === 0 ? n : -n
    }

    class GitAnnotatedTag {
      constructor(tag) {
        if (typeof tag === 'string') {
          this._tag = tag;
        } else if (Buffer.isBuffer(tag)) {
          this._tag = tag.toString('utf8');
        } else if (typeof tag === 'object') {
          this._tag = GitAnnotatedTag.render(tag);
        } else {
          throw new InternalError(
            'invalid type passed to GitAnnotatedTag constructor'
          )
        }
      }

      static from(tag) {
        return new GitAnnotatedTag(tag)
      }

      static render(obj) {
        return `object ${obj.object}
type ${obj.type}
tag ${obj.tag}
tagger ${formatAuthor(obj.tagger)}

${obj.message}
${obj.gpgsig ? obj.gpgsig : ''}`
      }

      justHeaders() {
        return this._tag.slice(0, this._tag.indexOf('\n\n'))
      }

      message() {
        const tag = this.withoutSignature();
        return tag.slice(tag.indexOf('\n\n') + 2)
      }

      parse() {
        return Object.assign(this.headers(), {
          message: this.message(),
          gpgsig: this.gpgsig(),
        })
      }

      render() {
        return this._tag
      }

      headers() {
        const headers = this.justHeaders().split('\n');
        const hs = [];
        for (const h of headers) {
          if (h[0] === ' ') {
            // combine with previous header (without space indent)
            hs[hs.length - 1] += '\n' + h.slice(1);
          } else {
            hs.push(h);
          }
        }
        const obj = {};
        for (const h of hs) {
          const key = h.slice(0, h.indexOf(' '));
          const value = h.slice(h.indexOf(' ') + 1);
          if (Array.isArray(obj[key])) {
            obj[key].push(value);
          } else {
            obj[key] = value;
          }
        }
        if (obj.tagger) {
          obj.tagger = parseAuthor(obj.tagger);
        }
        if (obj.committer) {
          obj.committer = parseAuthor(obj.committer);
        }
        return obj
      }

      withoutSignature() {
        const tag = normalizeNewlines(this._tag);
        if (tag.indexOf('\n-----BEGIN PGP SIGNATURE-----') === -1) return tag
        return tag.slice(0, tag.lastIndexOf('\n-----BEGIN PGP SIGNATURE-----'))
      }

      gpgsig() {
        if (this._tag.indexOf('\n-----BEGIN PGP SIGNATURE-----') === -1) return
        const signature = this._tag.slice(
          this._tag.indexOf('-----BEGIN PGP SIGNATURE-----'),
          this._tag.indexOf('-----END PGP SIGNATURE-----') +
            '-----END PGP SIGNATURE-----'.length
        );
        return normalizeNewlines(signature)
      }

      payload() {
        return this.withoutSignature() + '\n'
      }

      toObject() {
        return Buffer.from(this._tag, 'utf8')
      }

      static async sign(tag, sign, secretKey) {
        const payload = tag.payload();
        let { signature } = await sign({ payload, secretKey });
        // renormalize the line endings to the one true line-ending
        signature = normalizeNewlines(signature);
        const signedTag = payload + signature;
        // return a new tag object
        return GitAnnotatedTag.from(signedTag)
      }
    }

    function indent(str) {
      return (
        str
          .trim()
          .split('\n')
          .map(x => ' ' + x)
          .join('\n') + '\n'
      )
    }

    function outdent(str) {
      return str
        .split('\n')
        .map(x => x.replace(/^ /, ''))
        .join('\n')
    }

    class GitCommit {
      constructor(commit) {
        if (typeof commit === 'string') {
          this._commit = commit;
        } else if (Buffer.isBuffer(commit)) {
          this._commit = commit.toString('utf8');
        } else if (typeof commit === 'object') {
          this._commit = GitCommit.render(commit);
        } else {
          throw new InternalError('invalid type passed to GitCommit constructor')
        }
      }

      static fromPayloadSignature({ payload, signature }) {
        const headers = GitCommit.justHeaders(payload);
        const message = GitCommit.justMessage(payload);
        const commit = normalizeNewlines(
          headers + '\ngpgsig' + indent(signature) + '\n' + message
        );
        return new GitCommit(commit)
      }

      static from(commit) {
        return new GitCommit(commit)
      }

      toObject() {
        return Buffer.from(this._commit, 'utf8')
      }

      // Todo: allow setting the headers and message
      headers() {
        return this.parseHeaders()
      }

      // Todo: allow setting the headers and message
      message() {
        return GitCommit.justMessage(this._commit)
      }

      parse() {
        return Object.assign({ message: this.message() }, this.headers())
      }

      static justMessage(commit) {
        return normalizeNewlines(commit.slice(commit.indexOf('\n\n') + 2))
      }

      static justHeaders(commit) {
        return commit.slice(0, commit.indexOf('\n\n'))
      }

      parseHeaders() {
        const headers = GitCommit.justHeaders(this._commit).split('\n');
        const hs = [];
        for (const h of headers) {
          if (h[0] === ' ') {
            // combine with previous header (without space indent)
            hs[hs.length - 1] += '\n' + h.slice(1);
          } else {
            hs.push(h);
          }
        }
        const obj = {
          parent: [],
        };
        for (const h of hs) {
          const key = h.slice(0, h.indexOf(' '));
          const value = h.slice(h.indexOf(' ') + 1);
          if (Array.isArray(obj[key])) {
            obj[key].push(value);
          } else {
            obj[key] = value;
          }
        }
        if (obj.author) {
          obj.author = parseAuthor(obj.author);
        }
        if (obj.committer) {
          obj.committer = parseAuthor(obj.committer);
        }
        return obj
      }

      static renderHeaders(obj) {
        let headers = '';
        if (obj.tree) {
          headers += `tree ${obj.tree}\n`;
        } else {
          headers += `tree 4b825dc642cb6eb9a060e54bf8d69288fbee4904\n`; // the null tree
        }
        if (obj.parent) {
          if (obj.parent.length === undefined) {
            throw new InternalError(`commit 'parent' property should be an array`)
          }
          for (const p of obj.parent) {
            headers += `parent ${p}\n`;
          }
        }
        const author = obj.author;
        headers += `author ${formatAuthor(author)}\n`;
        const committer = obj.committer || obj.author;
        headers += `committer ${formatAuthor(committer)}\n`;
        if (obj.gpgsig) {
          headers += 'gpgsig' + indent(obj.gpgsig);
        }
        return headers
      }

      static render(obj) {
        return GitCommit.renderHeaders(obj) + '\n' + normalizeNewlines(obj.message)
      }

      render() {
        return this._commit
      }

      withoutSignature() {
        const commit = normalizeNewlines(this._commit);
        if (commit.indexOf('\ngpgsig') === -1) return commit
        const headers = commit.slice(0, commit.indexOf('\ngpgsig'));
        const message = commit.slice(
          commit.indexOf('-----END PGP SIGNATURE-----\n') +
            '-----END PGP SIGNATURE-----\n'.length
        );
        return normalizeNewlines(headers + '\n' + message)
      }

      isolateSignature() {
        const signature = this._commit.slice(
          this._commit.indexOf('-----BEGIN PGP SIGNATURE-----'),
          this._commit.indexOf('-----END PGP SIGNATURE-----') +
            '-----END PGP SIGNATURE-----'.length
        );
        return outdent(signature)
      }

      static async sign(commit, sign, secretKey) {
        const payload = commit.withoutSignature();
        const message = GitCommit.justMessage(commit._commit);
        let { signature } = await sign({ payload, secretKey });
        // renormalize the line endings to the one true line-ending
        signature = normalizeNewlines(signature);
        const headers = GitCommit.justHeaders(commit._commit);
        const signedCommit =
          headers + '\n' + 'gpgsig' + indent(signature) + '\n' + message;
        // return a new commit object
        return GitCommit.from(signedCommit)
      }
    }

    async function resolveTree({ fs, cache, gitdir, oid }) {
      // Empty tree - bypass `readObject`
      if (oid === '4b825dc642cb6eb9a060e54bf8d69288fbee4904') {
        return { tree: GitTree.from([]), oid }
      }
      const { type, object } = await _readObject({ fs, cache, gitdir, oid });
      // Resolve annotated tag objects to whatever
      if (type === 'tag') {
        oid = GitAnnotatedTag.from(object).parse().object;
        return resolveTree({ fs, cache, gitdir, oid })
      }
      // Resolve commits to trees
      if (type === 'commit') {
        oid = GitCommit.from(object).parse().tree;
        return resolveTree({ fs, cache, gitdir, oid })
      }
      if (type !== 'tree') {
        throw new ObjectTypeError(oid, type, 'tree')
      }
      return { tree: GitTree.from(object), oid }
    }

    class GitWalkerRepo {
      constructor({ fs, gitdir, ref, cache }) {
        this.fs = fs;
        this.cache = cache;
        this.gitdir = gitdir;
        this.mapPromise = (async () => {
          const map = new Map();
          let oid;
          try {
            oid = await GitRefManager.resolve({ fs, gitdir, ref });
          } catch (e) {
            if (e instanceof NotFoundError) {
              // Handle fresh branches with no commits
              oid = '4b825dc642cb6eb9a060e54bf8d69288fbee4904';
            }
          }
          const tree = await resolveTree({ fs, cache: this.cache, gitdir, oid });
          tree.type = 'tree';
          tree.mode = '40000';
          map.set('.', tree);
          return map
        })();
        const walker = this;
        this.ConstructEntry = class TreeEntry {
          constructor(fullpath) {
            this._fullpath = fullpath;
            this._type = false;
            this._mode = false;
            this._stat = false;
            this._content = false;
            this._oid = false;
          }

          async type() {
            return walker.type(this)
          }

          async mode() {
            return walker.mode(this)
          }

          async stat() {
            return walker.stat(this)
          }

          async content() {
            return walker.content(this)
          }

          async oid() {
            return walker.oid(this)
          }
        };
      }

      async readdir(entry) {
        const filepath = entry._fullpath;
        const { fs, cache, gitdir } = this;
        const map = await this.mapPromise;
        const obj = map.get(filepath);
        if (!obj) throw new Error(`No obj for ${filepath}`)
        const oid = obj.oid;
        if (!oid) throw new Error(`No oid for obj ${JSON.stringify(obj)}`)
        if (obj.type !== 'tree') {
          // TODO: support submodules (type === 'commit')
          return null
        }
        const { type, object } = await _readObject({ fs, cache, gitdir, oid });
        if (type !== obj.type) {
          throw new ObjectTypeError(oid, type, obj.type)
        }
        const tree = GitTree.from(object);
        // cache all entries
        for (const entry of tree) {
          map.set(join(filepath, entry.path), entry);
        }
        return tree.entries().map(entry => join(filepath, entry.path))
      }

      async type(entry) {
        if (entry._type === false) {
          const map = await this.mapPromise;
          const { type } = map.get(entry._fullpath);
          entry._type = type;
        }
        return entry._type
      }

      async mode(entry) {
        if (entry._mode === false) {
          const map = await this.mapPromise;
          const { mode } = map.get(entry._fullpath);
          entry._mode = normalizeMode(parseInt(mode, 8));
        }
        return entry._mode
      }

      async stat(_entry) {}

      async content(entry) {
        if (entry._content === false) {
          const map = await this.mapPromise;
          const { fs, cache, gitdir } = this;
          const obj = map.get(entry._fullpath);
          const oid = obj.oid;
          const { type, object } = await _readObject({ fs, cache, gitdir, oid });
          if (type !== 'blob') {
            entry._content = undefined;
          } else {
            entry._content = new Uint8Array(object);
          }
        }
        return entry._content
      }

      async oid(entry) {
        if (entry._oid === false) {
          const map = await this.mapPromise;
          const obj = map.get(entry._fullpath);
          entry._oid = obj.oid;
        }
        return entry._oid
      }
    }

    // @ts-check

    /**
     * @param {object} args
     * @param {string} [args.ref='HEAD']
     * @returns {Walker}
     */
    function TREE({ ref = 'HEAD' } = {}) {
      const o = Object.create(null);
      Object.defineProperty(o, GitWalkSymbol, {
        value: function({ fs, gitdir, cache }) {
          return new GitWalkerRepo({ fs, gitdir, ref, cache })
        },
      });
      Object.freeze(o);
      return o
    }

    // @ts-check

    class GitWalkerFs {
      constructor({ fs, dir, gitdir, cache }) {
        this.fs = fs;
        this.cache = cache;
        this.dir = dir;
        this.gitdir = gitdir;
        const walker = this;
        this.ConstructEntry = class WorkdirEntry {
          constructor(fullpath) {
            this._fullpath = fullpath;
            this._type = false;
            this._mode = false;
            this._stat = false;
            this._content = false;
            this._oid = false;
          }

          async type() {
            return walker.type(this)
          }

          async mode() {
            return walker.mode(this)
          }

          async stat() {
            return walker.stat(this)
          }

          async content() {
            return walker.content(this)
          }

          async oid() {
            return walker.oid(this)
          }
        };
      }

      async readdir(entry) {
        const filepath = entry._fullpath;
        const { fs, dir } = this;
        const names = await fs.readdir(join(dir, filepath));
        if (names === null) return null
        return names.map(name => join(filepath, name))
      }

      async type(entry) {
        if (entry._type === false) {
          await entry.stat();
        }
        return entry._type
      }

      async mode(entry) {
        if (entry._mode === false) {
          await entry.stat();
        }
        return entry._mode
      }

      async stat(entry) {
        if (entry._stat === false) {
          const { fs, dir } = this;
          let stat = await fs.lstat(`${dir}/${entry._fullpath}`);
          if (!stat) {
            throw new Error(
              `ENOENT: no such file or directory, lstat '${entry._fullpath}'`
            )
          }
          let type = stat.isDirectory() ? 'tree' : 'blob';
          if (type === 'blob' && !stat.isFile() && !stat.isSymbolicLink()) {
            type = 'special';
          }
          entry._type = type;
          stat = normalizeStats(stat);
          entry._mode = stat.mode;
          // workaround for a BrowserFS edge case
          if (stat.size === -1 && entry._actualSize) {
            stat.size = entry._actualSize;
          }
          entry._stat = stat;
        }
        return entry._stat
      }

      async content(entry) {
        if (entry._content === false) {
          const { fs, dir } = this;
          if ((await entry.type()) === 'tree') {
            entry._content = undefined;
          } else {
            const content = await fs.read(`${dir}/${entry._fullpath}`);
            // workaround for a BrowserFS edge case
            entry._actualSize = content.length;
            if (entry._stat && entry._stat.size === -1) {
              entry._stat.size = entry._actualSize;
            }
            entry._content = new Uint8Array(content);
          }
        }
        return entry._content
      }

      async oid(entry) {
        if (entry._oid === false) {
          const { fs, gitdir, cache } = this;
          let oid;
          // See if we can use the SHA1 hash in the index.
          await GitIndexManager.acquire({ fs, gitdir, cache }, async function(
            index
          ) {
            const stage = index.entriesMap.get(entry._fullpath);
            const stats = await entry.stat();
            if (!stage || compareStats(stats, stage)) {
              const content = await entry.content();
              if (content === undefined) {
                oid = undefined;
              } else {
                oid = await shasum(
                  GitObject.wrap({ type: 'blob', object: await entry.content() })
                );
                // Update the stats in the index so we will get a "cache hit" next time
                // 1) if we can (because the oid and mode are the same)
                // 2) and only if we need to (because other stats differ)
                if (
                  stage &&
                  oid === stage.oid &&
                  stats.mode === stage.mode &&
                  compareStats(stats, stage)
                ) {
                  index.insert({
                    filepath: entry._fullpath,
                    stats,
                    oid: oid,
                  });
                }
              }
            } else {
              // Use the index SHA1 rather than compute it
              oid = stage.oid;
            }
          });
          entry._oid = oid;
        }
        return entry._oid
      }
    }

    // @ts-check

    /**
     * @returns {Walker}
     */
    function WORKDIR() {
      const o = Object.create(null);
      Object.defineProperty(o, GitWalkSymbol, {
        value: function({ fs, dir, gitdir, cache }) {
          return new GitWalkerFs({ fs, dir, gitdir, cache })
        },
      });
      Object.freeze(o);
      return o
    }

    // @ts-check

    // https://dev.to/namirsab/comment/2050
    function arrayRange(start, end) {
      const length = end - start;
      return Array.from({ length }, (_, i) => start + i)
    }

    // TODO: Should I just polyfill Array.flat?
    const flat =
      typeof Array.prototype.flat === 'undefined'
        ? entries => entries.reduce((acc, x) => acc.concat(x), [])
        : entries => entries.flat();

    // This is convenient for computing unions/joins of sorted lists.
    class RunningMinimum {
      constructor() {
        // Using a getter for 'value' would just bloat the code.
        // You know better than to set it directly right?
        this.value = null;
      }

      consider(value) {
        if (value === null || value === undefined) return
        if (this.value === null) {
          this.value = value;
        } else if (value < this.value) {
          this.value = value;
        }
      }

      reset() {
        this.value = null;
      }
    }

    // Take an array of length N of
    //   iterators of length Q_n
    //     of strings
    // and return an iterator of length max(Q_n) for all n
    //   of arrays of length N
    //     of string|null who all have the same string value
    function* unionOfIterators(sets) {
      /* NOTE: We can assume all arrays are sorted.
       * Indexes are sorted because they are defined that way:
       *
       * > Index entries are sorted in ascending order on the name field,
       * > interpreted as a string of unsigned bytes (i.e. memcmp() order, no
       * > localization, no special casing of directory separator '/'). Entries
       * > with the same name are sorted by their stage field.
       *
       * Trees should be sorted because they are created directly from indexes.
       * They definitely should be sorted, or else they wouldn't have a unique SHA1.
       * So that would be very naughty on the part of the tree-creator.
       *
       * Lastly, the working dir entries are sorted because I choose to sort them
       * in my FileSystem.readdir() implementation.
       */

      // Init
      const min = new RunningMinimum();
      let minimum;
      const heads = [];
      const numsets = sets.length;
      for (let i = 0; i < numsets; i++) {
        // Abuse the fact that iterators continue to return 'undefined' for value
        // once they are done
        heads[i] = sets[i].next().value;
        if (heads[i] !== undefined) {
          min.consider(heads[i]);
        }
      }
      if (min.value === null) return
      // Iterate
      while (true) {
        const result = [];
        minimum = min.value;
        min.reset();
        for (let i = 0; i < numsets; i++) {
          if (heads[i] !== undefined && heads[i] === minimum) {
            result[i] = heads[i];
            heads[i] = sets[i].next().value;
          } else {
            // A little hacky, but eh
            result[i] = null;
          }
          if (heads[i] !== undefined) {
            min.consider(heads[i]);
          }
        }
        yield result;
        if (min.value === null) return
      }
    }

    // @ts-check

    /**
     * @param {object} args
     * @param {import('../models/FileSystem.js').FileSystem} args.fs
     * @param {object} args.cache
     * @param {string} [args.dir]
     * @param {string} [args.gitdir=join(dir,'.git')]
     * @param {Walker[]} args.trees
     * @param {WalkerMap} [args.map]
     * @param {WalkerReduce} [args.reduce]
     * @param {WalkerIterate} [args.iterate]
     *
     * @returns {Promise<any>} The finished tree-walking result
     *
     * @see {WalkerMap}
     *
     */
    async function _walk({
      fs,
      cache,
      dir,
      gitdir,
      trees,
      // @ts-ignore
      map = async (_, entry) => entry,
      // The default reducer is a flatmap that filters out undefineds.
      reduce = async (parent, children) => {
        const flatten = flat(children);
        if (parent !== undefined) flatten.unshift(parent);
        return flatten
      },
      // The default iterate function walks all children concurrently
      iterate = (walk, children) => Promise.all([...children].map(walk)),
    }) {
      const walkers = trees.map(proxy =>
        proxy[GitWalkSymbol]({ fs, dir, gitdir, cache })
      );

      const root = new Array(walkers.length).fill('.');
      const range = arrayRange(0, walkers.length);
      const unionWalkerFromReaddir = async entries => {
        range.map(i => {
          entries[i] = entries[i] && new walkers[i].ConstructEntry(entries[i]);
        });
        const subdirs = await Promise.all(
          range.map(i => (entries[i] ? walkers[i].readdir(entries[i]) : []))
        );
        // Now process child directories
        const iterators = subdirs
          .map(array => (array === null ? [] : array))
          .map(array => array[Symbol.iterator]());
        return {
          entries,
          children: unionOfIterators(iterators),
        }
      };

      const walk = async root => {
        const { entries, children } = await unionWalkerFromReaddir(root);
        const fullpath = entries.find(entry => entry && entry._fullpath)._fullpath;
        const parent = await map(fullpath, entries);
        if (parent !== null) {
          let walkedChildren = await iterate(walk, children);
          walkedChildren = walkedChildren.filter(x => x !== undefined);
          return reduce(parent, walkedChildren)
        }
      };
      return walk(root)
    }

    /**
     * Removes the directory at the specified filepath recursively. Used internally to replicate the behavior of
     * fs.promises.rm({ recursive: true, force: true }) from Node.js 14 and above when not available. If the provided
     * filepath resolves to a file, it will be removed.
     *
     * @param {import('../models/FileSystem.js').FileSystem} fs
     * @param {string} filepath - The file or directory to remove.
     */
    async function rmRecursive(fs, filepath) {
      const entries = await fs.readdir(filepath);
      if (entries == null) {
        await fs.rm(filepath);
      } else if (entries.length) {
        await Promise.all(
          entries.map(entry => {
            const subpath = join(filepath, entry);
            return fs.lstat(subpath).then(stat => {
              if (!stat) return
              return stat.isDirectory() ? rmRecursive(fs, subpath) : fs.rm(subpath)
            })
          })
        ).then(() => fs.rmdir(filepath));
      } else {
        await fs.rmdir(filepath);
      }
    }

    function isPromiseFs(fs) {
      const test = targetFs => {
        try {
          // If readFile returns a promise then we can probably assume the other
          // commands do as well
          return targetFs.readFile().catch(e => e)
        } catch (e) {
          return e
        }
      };
      return test(fs).constructor.name === 'Promise'
    }

    // List of commands all filesystems are expected to provide. `rm` is not
    // included since it may not exist and must be handled as a special case
    const commands = [
      'readFile',
      'writeFile',
      'mkdir',
      'rmdir',
      'unlink',
      'stat',
      'lstat',
      'readdir',
      'readlink',
      'symlink',
    ];

    function bindFs(target, fs) {
      if (isPromiseFs(fs)) {
        for (const command of commands) {
          target[`_${command}`] = fs[command].bind(fs);
        }
      } else {
        for (const command of commands) {
          target[`_${command}`] = pify(fs[command].bind(fs));
        }
      }

      // Handle the special case of `rm`
      if (isPromiseFs(fs)) {
        if (fs.rm) target._rm = fs.rm.bind(fs);
        else if (fs.rmdir.length > 1) target._rm = fs.rmdir.bind(fs);
        else target._rm = rmRecursive.bind(null, target);
      } else {
        if (fs.rm) target._rm = pify(fs.rm.bind(fs));
        else if (fs.rmdir.length > 2) target._rm = pify(fs.rmdir.bind(fs));
        else target._rm = rmRecursive.bind(null, target);
      }
    }

    /**
     * This is just a collection of helper functions really. At least that's how it started.
     */
    class FileSystem {
      constructor(fs) {
        if (typeof fs._original_unwrapped_fs !== 'undefined') return fs

        const promises = Object.getOwnPropertyDescriptor(fs, 'promises');
        if (promises && promises.enumerable) {
          bindFs(this, fs.promises);
        } else {
          bindFs(this, fs);
        }
        this._original_unwrapped_fs = fs;
      }

      /**
       * Return true if a file exists, false if it doesn't exist.
       * Rethrows errors that aren't related to file existance.
       */
      async exists(filepath, options = {}) {
        try {
          await this._stat(filepath);
          return true
        } catch (err) {
          if (err.code === 'ENOENT' || err.code === 'ENOTDIR') {
            return false
          } else {
            console.log('Unhandled error in "FileSystem.exists()" function', err);
            throw err
          }
        }
      }

      /**
       * Return the contents of a file if it exists, otherwise returns null.
       *
       * @param {string} filepath
       * @param {object} [options]
       *
       * @returns {Promise<Buffer|string|null>}
       */
      async read(filepath, options = {}) {
        try {
          let buffer = await this._readFile(filepath, options);
          // Convert plain ArrayBuffers to Buffers
          if (typeof buffer !== 'string') {
            buffer = Buffer.from(buffer);
          }
          return buffer
        } catch (err) {
          return null
        }
      }

      /**
       * Write a file (creating missing directories if need be) without throwing errors.
       *
       * @param {string} filepath
       * @param {Buffer|Uint8Array|string} contents
       * @param {object|string} [options]
       */
      async write(filepath, contents, options = {}) {
        try {
          await this._writeFile(filepath, contents, options);
          return
        } catch (err) {
          // Hmm. Let's try mkdirp and try again.
          await this.mkdir(dirname(filepath));
          await this._writeFile(filepath, contents, options);
        }
      }

      /**
       * Make a directory (or series of nested directories) without throwing an error if it already exists.
       */
      async mkdir(filepath, _selfCall = false) {
        try {
          await this._mkdir(filepath);
          return
        } catch (err) {
          // If err is null then operation succeeded!
          if (err === null) return
          // If the directory already exists, that's OK!
          if (err.code === 'EEXIST') return
          // Avoid infinite loops of failure
          if (_selfCall) throw err
          // If we got a "no such file or directory error" backup and try again.
          if (err.code === 'ENOENT') {
            const parent = dirname(filepath);
            // Check to see if we've gone too far
            if (parent === '.' || parent === '/' || parent === filepath) throw err
            // Infinite recursion, what could go wrong?
            await this.mkdir(parent);
            await this.mkdir(filepath, true);
          }
        }
      }

      /**
       * Delete a file without throwing an error if it is already deleted.
       */
      async rm(filepath) {
        try {
          await this._unlink(filepath);
        } catch (err) {
          if (err.code !== 'ENOENT') throw err
        }
      }

      /**
       * Delete a directory without throwing an error if it is already deleted.
       */
      async rmdir(filepath, opts) {
        try {
          if (opts && opts.recursive) {
            await this._rm(filepath, opts);
          } else {
            await this._rmdir(filepath);
          }
        } catch (err) {
          if (err.code !== 'ENOENT') throw err
        }
      }

      /**
       * Read a directory without throwing an error is the directory doesn't exist
       */
      async readdir(filepath) {
        try {
          const names = await this._readdir(filepath);
          // Ordering is not guaranteed, and system specific (Windows vs Unix)
          // so we must sort them ourselves.
          names.sort(compareStrings);
          return names
        } catch (err) {
          if (err.code === 'ENOTDIR') return null
          return []
        }
      }

      /**
       * Return a flast list of all the files nested inside a directory
       *
       * Based on an elegant concurrent recursive solution from SO
       * https://stackoverflow.com/a/45130990/2168416
       */
      async readdirDeep(dir) {
        const subdirs = await this._readdir(dir);
        const files = await Promise.all(
          subdirs.map(async subdir => {
            const res = dir + '/' + subdir;
            return (await this._stat(res)).isDirectory()
              ? this.readdirDeep(res)
              : res
          })
        );
        return files.reduce((a, f) => a.concat(f), [])
      }

      /**
       * Return the Stats of a file/symlink if it exists, otherwise returns null.
       * Rethrows errors that aren't related to file existance.
       */
      async lstat(filename) {
        try {
          const stats = await this._lstat(filename);
          return stats
        } catch (err) {
          if (err.code === 'ENOENT') {
            return null
          }
          throw err
        }
      }

      /**
       * Reads the contents of a symlink if it exists, otherwise returns null.
       * Rethrows errors that aren't related to file existance.
       */
      async readlink(filename, opts = { encoding: 'buffer' }) {
        // Note: FileSystem.readlink returns a buffer by default
        // so we can dump it into GitObject.write just like any other file.
        try {
          const link = await this._readlink(filename, opts);
          return Buffer.isBuffer(link) ? link : Buffer.from(link)
        } catch (err) {
          if (err.code === 'ENOENT') {
            return null
          }
          throw err
        }
      }

      /**
       * Write the contents of buffer to a symlink.
       */
      async writelink(filename, buffer) {
        return this._symlink(buffer.toString('utf8'), filename)
      }
    }

    function assertParameter(name, value) {
      if (value === undefined) {
        throw new MissingParameterError(name)
      }
    }

    // @ts-check
    /**
     *
     * @param {WalkerEntry} entry
     * @param {WalkerEntry} base
     *
     */
    async function modified(entry, base) {
      if (!entry && !base) return false
      if (entry && !base) return true
      if (!entry && base) return true
      if ((await entry.type()) === 'tree' && (await base.type()) === 'tree') {
        return false
      }
      if (
        (await entry.type()) === (await base.type()) &&
        (await entry.mode()) === (await base.mode()) &&
        (await entry.oid()) === (await base.oid())
      ) {
        return false
      }
      return true
    }

    // @ts-check

    /**
     * Abort a merge in progress.
     *
     * Based on the behavior of git reset --merge, i.e.  "Resets the index and updates the files in the working tree that are different between <commit> and HEAD, but keeps those which are different between the index and working tree (i.e. which have changes which have not been added). If a file that is different between <commit> and the index has unstaged changes, reset is aborted."
     *
     * Essentially, abortMerge will reset any files affected by merge conflicts to their last known good version at HEAD.
     * Any unstaged changes are saved and any staged changes are reset as well.
     *
     * NOTE: The behavior of this command differs slightly from canonical git in that an error will be thrown if a file exists in the index and nowhere else.
     * Canonical git will reset the file and continue aborting the merge in this case.
     *
     * **WARNING:** Running git merge with non-trivial uncommitted changes is discouraged: while possible, it may leave you in a state that is hard to back out of in the case of a conflict.
     * If there were uncommitted changes when the merge started (and especially if those changes were further modified after the merge was started), `git.abortMerge` will in some cases be unable to reconstruct the original (pre-merge) changes.
     *
     * @param {object} args
     * @param {FsClient} args.fs - a file system implementation
     * @param {string} args.dir - The [working tree](dir-vs-gitdir.md) directory path
     * @param {string} [args.gitdir=join(dir, '.git')] - [required] The [git directory](dir-vs-gitdir.md) path
     * @param {string} [args.commit='HEAD'] - commit to reset the index and worktree to, defaults to HEAD
     * @param {object} [args.cache] - a [cache](cache.md) object
     *
     * @returns {Promise<void>} Resolves successfully once the git index has been updated
     *
     */
    async function abortMerge({
      fs: _fs,
      dir,
      gitdir = join(dir, '.git'),
      commit = 'HEAD',
      cache = {},
    }) {
      try {
        assertParameter('fs', _fs);
        assertParameter('dir', dir);
        assertParameter('gitdir', gitdir);

        const fs = new FileSystem(_fs);
        const trees = [TREE({ ref: commit }), WORKDIR(), STAGE()];
        let unmergedPaths = [];

        await GitIndexManager.acquire({ fs, gitdir, cache }, async function(index) {
          unmergedPaths = index.unmergedPaths;
        });

        const results = await _walk({
          fs,
          cache,
          dir,
          gitdir,
          trees,
          map: async function(path, [head, workdir, index]) {
            const staged = !(await modified(workdir, index));
            const unmerged = unmergedPaths.includes(path);
            const unmodified = !(await modified(index, head));

            if (staged || unmerged) {
              return head
                ? {
                    path,
                    mode: await head.mode(),
                    oid: await head.oid(),
                    type: await head.type(),
                    content: await head.content(),
                  }
                : undefined
            }

            if (unmodified) return false
            else throw new IndexResetError(path)
          },
        });

        await GitIndexManager.acquire({ fs, gitdir, cache }, async function(index) {
          // Reset paths in index and worktree, this can't be done in _walk because the
          // STAGE walker acquires its own index lock.

          for (const entry of results) {
            if (entry === false) continue

            // entry is not false, so from here we can assume index = workdir
            if (!entry) {
              await fs.rmdir(`${dir}/${entry.path}`, { recursive: true });
              index.delete({ filepath: entry.path });
              continue
            }

            if (entry.type === 'blob') {
              const content = new TextDecoder().decode(entry.content);
              await fs.write(`${dir}/${entry.path}`, content, { mode: entry.mode });
              index.insert({
                filepath: entry.path,
                oid: entry.oid,
                stage: 0,
              });
            }
          }
        });
      } catch (err) {
        err.caller = 'git.abortMerge';
        throw err
      }
    }

    // I'm putting this in a Manager because I reckon it could benefit
    // from a LOT of cacheing.
    class GitIgnoreManager {
      static async isIgnored({ fs, dir, gitdir = join(dir, '.git'), filepath }) {
        // ALWAYS ignore ".git" folders.
        if (basename(filepath) === '.git') return true
        // '.' is not a valid gitignore entry, so '.' is never ignored
        if (filepath === '.') return false
        // Check and load exclusion rules from project exclude file (.git/info/exclude)
        let excludes = '';
        const excludesFile = join(gitdir, 'info', 'exclude');
        if (await fs.exists(excludesFile)) {
          excludes = await fs.read(excludesFile, 'utf8');
        }
        // Find all the .gitignore files that could affect this file
        const pairs = [
          {
            gitignore: join(dir, '.gitignore'),
            filepath,
          },
        ];
        const pieces = filepath.split('/').filter(Boolean);
        for (let i = 1; i < pieces.length; i++) {
          const folder = pieces.slice(0, i).join('/');
          const file = pieces.slice(i).join('/');
          pairs.push({
            gitignore: join(dir, folder, '.gitignore'),
            filepath: file,
          });
        }
        let ignoredStatus = false;
        for (const p of pairs) {
          let file;
          try {
            file = await fs.read(p.gitignore, 'utf8');
          } catch (err) {
            if (err.code === 'NOENT') continue
          }
          const ign = ignore().add(excludes);
          ign.add(file);
          // If the parent directory is excluded, we are done.
          // "It is not possible to re-include a file if a parent directory of that file is excluded. Git doesn’t list excluded directories for performance reasons, so any patterns on contained files have no effect, no matter where they are defined."
          // source: https://git-scm.com/docs/gitignore
          const parentdir = dirname(p.filepath);
          if (parentdir !== '.' && ign.ignores(parentdir)) return true
          // If the file is currently ignored, test for UNignoring.
          if (ignoredStatus) {
            ignoredStatus = !ign.test(p.filepath).unignored;
          } else {
            ignoredStatus = ign.test(p.filepath).ignored;
          }
        }
        return ignoredStatus
      }
    }

    async function writeObjectLoose({ fs, gitdir, object, format, oid }) {
      if (format !== 'deflated') {
        throw new InternalError(
          'GitObjectStoreLoose expects objects to write to be in deflated format'
        )
      }
      const source = `objects/${oid.slice(0, 2)}/${oid.slice(2)}`;
      const filepath = `${gitdir}/${source}`;
      // Don't overwrite existing git objects - this helps avoid EPERM errors.
      // Although I don't know how we'd fix corrupted objects then. Perhaps delete them
      // on read?
      if (!(await fs.exists(filepath))) await fs.write(filepath, object);
    }

    /* eslint-env node, browser */

    let supportsCompressionStream = null;

    async function deflate(buffer) {
      if (supportsCompressionStream === null) {
        supportsCompressionStream = testCompressionStream();
      }
      return supportsCompressionStream
        ? browserDeflate(buffer)
        : pako_1.deflate(buffer)
    }

    async function browserDeflate(buffer) {
      const cs = new CompressionStream('deflate');
      const c = new Blob([buffer]).stream().pipeThrough(cs);
      return new Uint8Array(await new Response(c).arrayBuffer())
    }

    function testCompressionStream() {
      try {
        const cs = new CompressionStream('deflate');
        // Test if `Blob.stream` is present. React Native does not have the `stream` method
        new Blob([]).stream();
        if (cs) return true
      } catch (_) {
        // no bother
      }
      return false
    }

    async function _writeObject({
      fs,
      gitdir,
      type,
      object,
      format = 'content',
      oid = undefined,
      dryRun = false,
    }) {
      if (format !== 'deflated') {
        if (format !== 'wrapped') {
          object = GitObject.wrap({ type, object });
        }
        oid = await shasum(object);
        object = Buffer.from(await deflate(object));
      }
      if (!dryRun) {
        await writeObjectLoose({ fs, gitdir, object, format: 'deflated', oid });
      }
      return oid
    }

    function posixifyPathBuffer(buffer) {
      let idx;
      while (~(idx = buffer.indexOf(92))) buffer[idx] = 47;
      return buffer
    }

    // @ts-check

    /**
     * Add a file to the git index (aka staging area)
     *
     * @param {object} args
     * @param {FsClient} args.fs - a file system implementation
     * @param {string} args.dir - The [working tree](dir-vs-gitdir.md) directory path
     * @param {string} [args.gitdir=join(dir, '.git')] - [required] The [git directory](dir-vs-gitdir.md) path
     * @param {string|string[]} args.filepath - The path to the file to add to the index
     * @param {object} [args.cache] - a [cache](cache.md) object
     * @param {boolean} [args.force=false] - add to index even if matches gitignore. Think `git add --force`
     * @param {boolean} [args.parallel=false] - process each input file in parallel. Parallel processing will result in more memory consumption but less process time
     *
     * @returns {Promise<void>} Resolves successfully once the git index has been updated
     *
     * @example
     * await fs.promises.writeFile('/tutorial/README.md', `# TEST`)
     * await git.add({ fs, dir: '/tutorial', filepath: 'README.md' })
     * console.log('done')
     *
     */
    async function add({
      fs: _fs,
      dir,
      gitdir = join(dir, '.git'),
      filepath,
      cache = {},
      force = false,
      parallel = true,
    }) {
      try {
        assertParameter('fs', _fs);
        assertParameter('dir', dir);
        assertParameter('gitdir', gitdir);
        assertParameter('filepath', filepath);

        const fs = new FileSystem(_fs);
        await GitIndexManager.acquire({ fs, gitdir, cache }, async index => {
          return addToIndex({
            dir,
            gitdir,
            fs,
            filepath,
            index,
            force,
            parallel,
          })
        });
      } catch (err) {
        err.caller = 'git.add';
        throw err
      }
    }

    async function addToIndex({
      dir,
      gitdir,
      fs,
      filepath,
      index,
      force,
      parallel,
    }) {
      // TODO: Should ignore UNLESS it's already in the index.
      filepath = Array.isArray(filepath) ? filepath : [filepath];
      const promises = filepath.map(async currentFilepath => {
        if (!force) {
          const ignored = await GitIgnoreManager.isIgnored({
            fs,
            dir,
            gitdir,
            filepath: currentFilepath,
          });
          if (ignored) return
        }
        const stats = await fs.lstat(join(dir, currentFilepath));
        if (!stats) throw new NotFoundError(currentFilepath)

        if (stats.isDirectory()) {
          const children = await fs.readdir(join(dir, currentFilepath));
          if (parallel) {
            const promises = children.map(child =>
              addToIndex({
                dir,
                gitdir,
                fs,
                filepath: [join(currentFilepath, child)],
                index,
                force,
                parallel,
              })
            );
            await Promise.all(promises);
          } else {
            for (const child of children) {
              await addToIndex({
                dir,
                gitdir,
                fs,
                filepath: [join(currentFilepath, child)],
                index,
                force,
                parallel,
              });
            }
          }
        } else {
          const object = stats.isSymbolicLink()
            ? await fs.readlink(join(dir, currentFilepath)).then(posixifyPathBuffer)
            : await fs.read(join(dir, currentFilepath));
          if (object === null) throw new NotFoundError(currentFilepath)
          const oid = await _writeObject({ fs, gitdir, type: 'blob', object });
          index.insert({ filepath: currentFilepath, stats, oid });
        }
      });

      const settledPromises = await Promise.allSettled(promises);
      const rejectedPromises = settledPromises
        .filter(settle => settle.status === 'rejected')
        .map(settle => settle.reason);
      if (rejectedPromises.length > 1) {
        throw new MultipleGitError(rejectedPromises)
      }
      if (rejectedPromises.length === 1) {
        throw rejectedPromises[0]
      }

      const fulfilledPromises = settledPromises
        .filter(settle => settle.status === 'fulfilled' && settle.value)
        .map(settle => settle.value);

      return fulfilledPromises
    }

    // @ts-check

    /**
     *
     * @param {Object} args
     * @param {import('../models/FileSystem.js').FileSystem} args.fs
     * @param {object} args.cache
     * @param {SignCallback} [args.onSign]
     * @param {string} args.gitdir
     * @param {string} args.message
     * @param {Object} args.author
     * @param {string} args.author.name
     * @param {string} args.author.email
     * @param {number} args.author.timestamp
     * @param {number} args.author.timezoneOffset
     * @param {Object} args.committer
     * @param {string} args.committer.name
     * @param {string} args.committer.email
     * @param {number} args.committer.timestamp
     * @param {number} args.committer.timezoneOffset
     * @param {string} [args.signingKey]
     * @param {boolean} [args.dryRun = false]
     * @param {boolean} [args.noUpdateBranch = false]
     * @param {string} [args.ref]
     * @param {string[]} [args.parent]
     * @param {string} [args.tree]
     *
     * @returns {Promise<string>} Resolves successfully with the SHA-1 object id of the newly created commit.
     */
    async function _commit({
      fs,
      cache,
      onSign,
      gitdir,
      message,
      author,
      committer,
      signingKey,
      dryRun = false,
      noUpdateBranch = false,
      ref,
      parent,
      tree,
    }) {
      if (!ref) {
        ref = await GitRefManager.resolve({
          fs,
          gitdir,
          ref: 'HEAD',
          depth: 2,
        });
      }

      return GitIndexManager.acquire(
        { fs, gitdir, cache, allowUnmerged: false },
        async function(index) {
          const inodes = flatFileListToDirectoryStructure(index.entries);
          const inode = inodes.get('.');
          if (!tree) {
            tree = await constructTree({ fs, gitdir, inode, dryRun });
          }
          if (!parent) {
            try {
              parent = [
                await GitRefManager.resolve({
                  fs,
                  gitdir,
                  ref,
                }),
              ];
            } catch (err) {
              // Probably an initial commit
              parent = [];
            }
          } else {
            // ensure that the parents are oids, not refs
            parent = await Promise.all(
              parent.map(p => {
                return GitRefManager.resolve({ fs, gitdir, ref: p })
              })
            );
          }

          let comm = GitCommit.from({
            tree,
            parent,
            author,
            committer,
            message,
          });
          if (signingKey) {
            comm = await GitCommit.sign(comm, onSign, signingKey);
          }
          const oid = await _writeObject({
            fs,
            gitdir,
            type: 'commit',
            object: comm.toObject(),
            dryRun,
          });
          if (!noUpdateBranch && !dryRun) {
            // Update branch pointer
            await GitRefManager.writeRef({
              fs,
              gitdir,
              ref,
              value: oid,
            });
          }
          return oid
        }
      )
    }

    async function constructTree({ fs, gitdir, inode, dryRun }) {
      // use depth first traversal
      const children = inode.children;
      for (const inode of children) {
        if (inode.type === 'tree') {
          inode.metadata.mode = '040000';
          inode.metadata.oid = await constructTree({ fs, gitdir, inode, dryRun });
        }
      }
      const entries = children.map(inode => ({
        mode: inode.metadata.mode,
        path: inode.basename,
        oid: inode.metadata.oid,
        type: inode.type,
      }));
      const tree = GitTree.from(entries);
      const oid = await _writeObject({
        fs,
        gitdir,
        type: 'tree',
        object: tree.toObject(),
        dryRun,
      });
      return oid
    }

    // @ts-check

    async function resolveFilepath({ fs, cache, gitdir, oid, filepath }) {
      // Ensure there are no leading or trailing directory separators.
      // I was going to do this automatically, but then found that the Git Terminal for Windows
      // auto-expands --filepath=/src/utils to --filepath=C:/Users/Will/AppData/Local/Programs/Git/src/utils
      // so I figured it would be wise to promote the behavior in the application layer not just the library layer.
      if (filepath.startsWith('/')) {
        throw new InvalidFilepathError('leading-slash')
      } else if (filepath.endsWith('/')) {
        throw new InvalidFilepathError('trailing-slash')
      }
      const _oid = oid;
      const result = await resolveTree({ fs, cache, gitdir, oid });
      const tree = result.tree;
      if (filepath === '') {
        oid = result.oid;
      } else {
        const pathArray = filepath.split('/');
        oid = await _resolveFilepath({
          fs,
          cache,
          gitdir,
          tree,
          pathArray,
          oid: _oid,
          filepath,
        });
      }
      return oid
    }

    async function _resolveFilepath({
      fs,
      cache,
      gitdir,
      tree,
      pathArray,
      oid,
      filepath,
    }) {
      const name = pathArray.shift();
      for (const entry of tree) {
        if (entry.path === name) {
          if (pathArray.length === 0) {
            return entry.oid
          } else {
            const { type, object } = await _readObject({
              fs,
              cache,
              gitdir,
              oid: entry.oid,
            });
            if (type !== 'tree') {
              throw new ObjectTypeError(oid, type, 'tree', filepath)
            }
            tree = GitTree.from(object);
            return _resolveFilepath({
              fs,
              cache,
              gitdir,
              tree,
              pathArray,
              oid,
              filepath,
            })
          }
        }
      }
      throw new NotFoundError(`file or directory found at "${oid}:${filepath}"`)
    }

    // @ts-check

    /**
     *
     * @typedef {Object} ReadTreeResult - The object returned has the following schema:
     * @property {string} oid - SHA-1 object id of this tree
     * @property {TreeObject} tree - the parsed tree object
     */

    /**
     * @param {object} args
     * @param {import('../models/FileSystem.js').FileSystem} args.fs
     * @param {any} args.cache
     * @param {string} args.gitdir
     * @param {string} args.oid
     * @param {string} [args.filepath]
     *
     * @returns {Promise<ReadTreeResult>}
     */
    async function _readTree({
      fs,
      cache,
      gitdir,
      oid,
      filepath = undefined,
    }) {
      if (filepath !== undefined) {
        oid = await resolveFilepath({ fs, cache, gitdir, oid, filepath });
      }
      const { tree, oid: treeOid } = await resolveTree({ fs, cache, gitdir, oid });
      const result = {
        oid: treeOid,
        tree: tree.entries(),
      };
      return result
    }

    // @ts-check

    /**
     * @param {object} args
     * @param {import('../models/FileSystem.js').FileSystem} args.fs
     * @param {string} args.gitdir
     * @param {TreeObject} args.tree
     *
     * @returns {Promise<string>}
     */
    async function _writeTree({ fs, gitdir, tree }) {
      // Convert object to buffer
      const object = GitTree.from(tree).toObject();
      const oid = await _writeObject({
        fs,
        gitdir,
        type: 'tree',
        object,
        format: 'content',
      });
      return oid
    }

    // @ts-check

    /**
     * @param {object} args
     * @param {import('../models/FileSystem.js').FileSystem} args.fs
     * @param {object} args.cache
     * @param {SignCallback} [args.onSign]
     * @param {string} args.gitdir
     * @param {string} args.ref
     * @param {string} args.oid
     * @param {string|Uint8Array} args.note
     * @param {boolean} [args.force]
     * @param {Object} args.author
     * @param {string} args.author.name
     * @param {string} args.author.email
     * @param {number} args.author.timestamp
     * @param {number} args.author.timezoneOffset
     * @param {Object} args.committer
     * @param {string} args.committer.name
     * @param {string} args.committer.email
     * @param {number} args.committer.timestamp
     * @param {number} args.committer.timezoneOffset
     * @param {string} [args.signingKey]
     *
     * @returns {Promise<string>}
     */

    async function _addNote({
      fs,
      cache,
      onSign,
      gitdir,
      ref,
      oid,
      note,
      force,
      author,
      committer,
      signingKey,
    }) {
      // Get the current note commit
      let parent;
      try {
        parent = await GitRefManager.resolve({ gitdir, fs, ref });
      } catch (err) {
        if (!(err instanceof NotFoundError)) {
          throw err
        }
      }

      // I'm using the "empty tree" magic number here for brevity
      const result = await _readTree({
        fs,
        cache,
        gitdir,
        oid: parent || '4b825dc642cb6eb9a060e54bf8d69288fbee4904',
      });
      let tree = result.tree;

      // Handle the case where a note already exists
      if (force) {
        tree = tree.filter(entry => entry.path !== oid);
      } else {
        for (const entry of tree) {
          if (entry.path === oid) {
            throw new AlreadyExistsError('note', oid)
          }
        }
      }

      // Create the note blob
      if (typeof note === 'string') {
        note = Buffer.from(note, 'utf8');
      }
      const noteOid = await _writeObject({
        fs,
        gitdir,
        type: 'blob',
        object: note,
        format: 'content',
      });

      // Create the new note tree
      tree.push({ mode: '100644', path: oid, oid: noteOid, type: 'blob' });
      const treeOid = await _writeTree({
        fs,
        gitdir,
        tree,
      });

      // Create the new note commit
      const commitOid = await _commit({
        fs,
        cache,
        onSign,
        gitdir,
        ref,
        tree: treeOid,
        parent: parent && [parent],
        message: `Note added by 'isomorphic-git addNote'\n`,
        author,
        committer,
        signingKey,
      });

      return commitOid
    }

    // @ts-check

    /**
     * @param {Object} args
     * @param {import('../models/FileSystem.js').FileSystem} args.fs
     * @param {string} args.gitdir
     * @param {string} args.path
     *
     * @returns {Promise<any>} Resolves with the config value
     *
     * @example
     * // Read config value
     * let value = await git.getConfig({
     *   dir: '$input((/))',
     *   path: '$input((user.name))'
     * })
     * console.log(value)
     *
     */
    async function _getConfig({ fs, gitdir, path }) {
      const config = await GitConfigManager.get({ fs, gitdir });
      return config.get(path)
    }

    /**
     *
     * @returns {Promise<void | {name: string, email: string, date: Date, timestamp: number, timezoneOffset: number }>}
     */
    async function normalizeAuthorObject({ fs, gitdir, author = {} }) {
      let { name, email, timestamp, timezoneOffset } = author;
      name = name || (await _getConfig({ fs, gitdir, path: 'user.name' }));
      email = email || (await _getConfig({ fs, gitdir, path: 'user.email' })) || '';

      if (name === undefined) {
        return undefined
      }

      timestamp = timestamp != null ? timestamp : Math.floor(Date.now() / 1000);
      timezoneOffset =
        timezoneOffset != null
          ? timezoneOffset
          : new Date(timestamp * 1000).getTimezoneOffset();

      return { name, email, timestamp, timezoneOffset }
    }

    /**
     *
     * @returns {Promise<void | {name: string, email: string, timestamp: number, timezoneOffset: number }>}
     */
    async function normalizeCommitterObject({
      fs,
      gitdir,
      author,
      committer,
    }) {
      committer = Object.assign({}, committer || author);
      // Match committer's date to author's one, if omitted
      if (author) {
        committer.timestamp = committer.timestamp || author.timestamp;
        committer.timezoneOffset = committer.timezoneOffset || author.timezoneOffset;
      }
      committer = await normalizeAuthorObject({ fs, gitdir, author: committer });
      return committer
    }

    // @ts-check

    /**
     * Add or update an object note
     *
     * @param {object} args
     * @param {FsClient} args.fs - a file system implementation
     * @param {SignCallback} [args.onSign] - a PGP signing implementation
     * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path
     * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path
     * @param {string} [args.ref] - The notes ref to look under
     * @param {string} args.oid - The SHA-1 object id of the object to add the note to.
     * @param {string|Uint8Array} args.note - The note to add
     * @param {boolean} [args.force] - Over-write note if it already exists.
     * @param {Object} [args.author] - The details about the author.
     * @param {string} [args.author.name] - Default is `user.name` config.
     * @param {string} [args.author.email] - Default is `user.email` config.
     * @param {number} [args.author.timestamp=Math.floor(Date.now()/1000)] - Set the author timestamp field. This is the integer number of seconds since the Unix epoch (1970-01-01 00:00:00).
     * @param {number} [args.author.timezoneOffset] - Set the author timezone offset field. This is the difference, in minutes, from the current timezone to UTC. Default is `(new Date()).getTimezoneOffset()`.
     * @param {Object} [args.committer = author] - The details about the note committer, in the same format as the author parameter. If not specified, the author details are used.
     * @param {string} [args.committer.name] - Default is `user.name` config.
     * @param {string} [args.committer.email] - Default is `user.email` config.
     * @param {number} [args.committer.timestamp=Math.floor(Date.now()/1000)] - Set the committer timestamp field. This is the integer number of seconds since the Unix epoch (1970-01-01 00:00:00).
     * @param {number} [args.committer.timezoneOffset] - Set the committer timezone offset field. This is the difference, in minutes, from the current timezone to UTC. Default is `(new Date()).getTimezoneOffset()`.
     * @param {string} [args.signingKey] - Sign the note commit using this private PGP key.
     * @param {object} [args.cache] - a [cache](cache.md) object
     *
     * @returns {Promise<string>} Resolves successfully with the SHA-1 object id of the commit object for the added note.
     */

    async function addNote({
      fs: _fs,
      onSign,
      dir,
      gitdir = join(dir, '.git'),
      ref = 'refs/notes/commits',
      oid,
      note,
      force,
      author: _author,
      committer: _committer,
      signingKey,
      cache = {},
    }) {
      try {
        assertParameter('fs', _fs);
        assertParameter('gitdir', gitdir);
        assertParameter('oid', oid);
        assertParameter('note', note);
        if (signingKey) {
          assertParameter('onSign', onSign);
        }
        const fs = new FileSystem(_fs);

        const author = await normalizeAuthorObject({ fs, gitdir, author: _author });
        if (!author) throw new MissingNameError('author')

        const committer = await normalizeCommitterObject({
          fs,
          gitdir,
          author,
          committer: _committer,
        });
        if (!committer) throw new MissingNameError('committer')

        return await _addNote({
          fs: new FileSystem(fs),
          cache,
          onSign,
          gitdir,
          ref,
          oid,
          note,
          force,
          author,
          committer,
          signingKey,
        })
      } catch (err) {
        err.caller = 'git.addNote';
        throw err
      }
    }

    // @ts-check

    /**
     * @param {object} args
     * @param {import('../models/FileSystem.js').FileSystem} args.fs
     * @param {string} args.gitdir
     * @param {string} args.remote
     * @param {string} args.url
     * @param {boolean} args.force
     *
     * @returns {Promise<void>}
     *
     */
    async function _addRemote({ fs, gitdir, remote, url, force }) {
      if (remote !== lib.clean(remote)) {
        throw new InvalidRefNameError(remote, lib.clean(remote))
      }
      const config = await GitConfigManager.get({ fs, gitdir });
      if (!force) {
        // Check that setting it wouldn't overwrite.
        const remoteNames = await config.getSubsections('remote');
        if (remoteNames.includes(remote)) {
          // Throw an error if it would overwrite an existing remote,
          // but not if it's simply setting the same value again.
          if (url !== (await config.get(`remote.${remote}.url`))) {
            throw new AlreadyExistsError('remote', remote)
          }
        }
      }
      await config.set(`remote.${remote}.url`, url);
      await config.set(
        `remote.${remote}.fetch`,
        `+refs/heads/*:refs/remotes/${remote}/*`
      );
      await GitConfigManager.save({ fs, gitdir, config });
    }

    // @ts-check

    /**
     * Add or update a remote
     *
     * @param {object} args
     * @param {FsClient} args.fs - a file system implementation
     * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path
     * @param {string} [args.gitdir] - [required] The [git directory](dir-vs-gitdir.md) path
     * @param {string} args.remote - The name of the remote
     * @param {string} args.url - The URL of the remote
     * @param {boolean} [args.force = false] - Instead of throwing an error if a remote named `remote` already exists, overwrite the existing remote.
     *
     * @returns {Promise<void>} Resolves successfully when filesystem operations are complete
     *
     * @example
     * await git.addRemote({
     *   fs,
     *   dir: '/tutorial',
     *   remote: 'upstream',
     *   url: 'https://github.com/isomorphic-git/isomorphic-git'
     * })
     * console.log('done')
     *
     */
    async function addRemote({
      fs,
      dir,
      gitdir = join(dir, '.git'),
      remote,
      url,
      force = false,
    }) {
      try {
        assertParameter('fs', fs);
        assertParameter('gitdir', gitdir);
        assertParameter('remote', remote);
        assertParameter('url', url);
        return await _addRemote({
          fs: new FileSystem(fs),
          gitdir,
          remote,
          url,
          force,
        })
      } catch (err) {
        err.caller = 'git.addRemote';
        throw err
      }
    }

    // @ts-check

    /**
     * Create an annotated tag.
     *
     * @param {object} args
     * @param {import('../models/FileSystem.js').FileSystem} args.fs
     * @param {any} args.cache
     * @param {SignCallback} [args.onSign]
     * @param {string} args.gitdir
     * @param {string} args.ref
     * @param {string} [args.message = ref]
     * @param {string} [args.object = 'HEAD']
     * @param {object} [args.tagger]
     * @param {string} args.tagger.name
     * @param {string} args.tagger.email
     * @param {number} args.tagger.timestamp
     * @param {number} args.tagger.timezoneOffset
     * @param {string} [args.gpgsig]
     * @param {string} [args.signingKey]
     * @param {boolean} [args.force = false]
     *
     * @returns {Promise<void>} Resolves successfully when filesystem operations are complete
     *
     * @example
     * await git.annotatedTag({
     *   dir: '$input((/))',
     *   ref: '$input((test-tag))',
     *   message: '$input((This commit is awesome))',
     *   tagger: {
     *     name: '$input((Mr. Test))',
     *     email: '$input((mrtest@example.com))'
     *   }
     * })
     * console.log('done')
     *
     */
    async function _annotatedTag({
      fs,
      cache,
      onSign,
      gitdir,
      ref,
      tagger,
      message = ref,
      gpgsig,
      object,
      signingKey,
      force = false,
    }) {
      ref = ref.startsWith('refs/tags/') ? ref : `refs/tags/${ref}`;

      if (!force && (await GitRefManager.exists({ fs, gitdir, ref }))) {
        throw new AlreadyExistsError('tag', ref)
      }

      // Resolve passed value
      const oid = await GitRefManager.resolve({
        fs,
        gitdir,
        ref: object || 'HEAD',
      });

      const { type } = await _readObject({ fs, cache, gitdir, oid });
      let tagObject = GitAnnotatedTag.from({
        object: oid,
        type,
        tag: ref.replace('refs/tags/', ''),
        tagger,
        message,
        gpgsig,
      });
      if (signingKey) {
        tagObject = await GitAnnotatedTag.sign(tagObject, onSign, signingKey);
      }
      const value = await _writeObject({
        fs,
        gitdir,
        type: 'tag',
        object: tagObject.toObject(),
      });

      await GitRefManager.writeRef({ fs, gitdir, ref, value });
    }

    // @ts-check

    /**
     * Create an annotated tag.
     *
     * @param {object} args
     * @param {FsClient} args.fs - a file system implementation
     * @param {SignCallback} [args.onSign] - a PGP signing implementation
     * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path
     * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path
     * @param {string} args.ref - What to name the tag
     * @param {string} [args.message = ref] - The tag message to use.
     * @param {string} [args.object = 'HEAD'] - The SHA-1 object id the tag points to. (Will resolve to a SHA-1 object id if value is a ref.) By default, the commit object which is referred by the current `HEAD` is used.
     * @param {object} [args.tagger] - The details about the tagger.
     * @param {string} [args.tagger.name] - Default is `user.name` config.
     * @param {string} [args.tagger.email] - Default is `user.email` config.
     * @param {number} [args.tagger.timestamp=Math.floor(Date.now()/1000)] - Set the tagger timestamp field. This is the integer number of seconds since the Unix epoch (1970-01-01 00:00:00).
     * @param {number} [args.tagger.timezoneOffset] - Set the tagger timezone offset field. This is the difference, in minutes, from the current timezone to UTC. Default is `(new Date()).getTimezoneOffset()`.
     * @param {string} [args.gpgsig] - The gpgsig attatched to the tag object. (Mutually exclusive with the `signingKey` option.)
     * @param {string} [args.signingKey] - Sign the tag object using this private PGP key. (Mutually exclusive with the `gpgsig` option.)
     * @param {boolean} [args.force = false] - Instead of throwing an error if a tag named `ref` already exists, overwrite the existing tag. Note that this option does not modify the original tag object itself.
     * @param {object} [args.cache] - a [cache](cache.md) object
     *
     * @returns {Promise<void>} Resolves successfully when filesystem operations are complete
     *
     * @example
     * await git.annotatedTag({
     *   fs,
     *   dir: '/tutorial',
     *   ref: 'test-tag',
     *   message: 'This commit is awesome',
     *   tagger: {
     *     name: 'Mr. Test',
     *     email: 'mrtest@example.com'
     *   }
     * })
     * console.log('done')
     *
     */
    async function annotatedTag({
      fs: _fs,
      onSign,
      dir,
      gitdir = join(dir, '.git'),
      ref,
      tagger: _tagger,
      message = ref,
      gpgsig,
      object,
      signingKey,
      force = false,
      cache = {},
    }) {
      try {
        assertParameter('fs', _fs);
        assertParameter('gitdir', gitdir);
        assertParameter('ref', ref);
        if (signingKey) {
          assertParameter('onSign', onSign);
        }
        const fs = new FileSystem(_fs);

        // Fill in missing arguments with default values
        const tagger = await normalizeAuthorObject({ fs, gitdir, author: _tagger });
        if (!tagger) throw new MissingNameError('tagger')

        return await _annotatedTag({
          fs,
          cache,
          onSign,
          gitdir,
          ref,
          tagger,
          message,
          gpgsig,
          object,
          signingKey,
          force,
        })
      } catch (err) {
        err.caller = 'git.annotatedTag';
        throw err
      }
    }

    // @ts-check

    /**
     * Create a branch
     *
     * @param {object} args
     * @param {import('../models/FileSystem.js').FileSystem} args.fs
     * @param {string} args.gitdir
     * @param {string} args.ref
     * @param {string} [args.object = 'HEAD']
     * @param {boolean} [args.checkout = false]
     * @param {boolean} [args.force = false]
     *
     * @returns {Promise<void>} Resolves successfully when filesystem operations are complete
     *
     * @example
     * await git.branch({ dir: '$input((/))', ref: '$input((develop))' })
     * console.log('done')
     *
     */
    async function _branch({
      fs,
      gitdir,
      ref,
      object,
      checkout = false,
      force = false,
    }) {
      if (ref !== lib.clean(ref)) {
        throw new InvalidRefNameError(ref, lib.clean(ref))
      }

      const fullref = `refs/heads/${ref}`;

      if (!force) {
        const exist = await GitRefManager.exists({ fs, gitdir, ref: fullref });
        if (exist) {
          throw new AlreadyExistsError('branch', ref, false)
        }
      }

      // Get current HEAD tree oid
      let oid;
      try {
        oid = await GitRefManager.resolve({ fs, gitdir, ref: object || 'HEAD' });
      } catch (e) {
        // Probably an empty repo
      }

      // Create a new ref that points at the current commit
      if (oid) {
        await GitRefManager.writeRef({ fs, gitdir, ref: fullref, value: oid });
      }

      if (checkout) {
        // Update HEAD
        await GitRefManager.writeSymbolicRef({
          fs,
          gitdir,
          ref: 'HEAD',
          value: fullref,
        });
      }
    }

    // @ts-check

    /**
     * Create a branch
     *
     * @param {object} args
     * @param {FsClient} args.fs - a file system implementation
     * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path
     * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path
     * @param {string} args.ref - What to name the branch
     * @param {string} [args.object = 'HEAD'] - What oid to use as the start point. Accepts a symbolic ref.
     * @param {boolean} [args.checkout = false] - Update `HEAD` to point at the newly created branch
     * @param {boolean} [args.force = false] - Instead of throwing an error if a branched named `ref` already exists, overwrite the existing branch.
     *
     * @returns {Promise<void>} Resolves successfully when filesystem operations are complete
     *
     * @example
     * await git.branch({ fs, dir: '/tutorial', ref: 'develop' })
     * console.log('done')
     *
     */
    async function branch({
      fs,
      dir,
      gitdir = join(dir, '.git'),
      ref,
      object,
      checkout = false,
      force = false,
    }) {
      try {
        assertParameter('fs', fs);
        assertParameter('gitdir', gitdir);
        assertParameter('ref', ref);
        return await _branch({
          fs: new FileSystem(fs),
          gitdir,
          ref,
          object,
          checkout,
          force,
        })
      } catch (err) {
        err.caller = 'git.branch';
        throw err
      }
    }

    const worthWalking = (filepath, root) => {
      if (filepath === '.' || root == null || root.length === 0 || root === '.') {
        return true
      }
      if (root.length >= filepath.length) {
        return root.startsWith(filepath)
      } else {
        return filepath.startsWith(root)
      }
    };

    // @ts-check

    /**
     * @param {object} args
     * @param {import('../models/FileSystem.js').FileSystem} args.fs
     * @param {any} args.cache
     * @param {ProgressCallback} [args.onProgress]
     * @param {string} args.dir
     * @param {string} args.gitdir
     * @param {string} args.ref
     * @param {string[]} [args.filepaths]
     * @param {string} args.remote
     * @param {boolean} args.noCheckout
     * @param {boolean} [args.noUpdateHead]
     * @param {boolean} [args.dryRun]
     * @param {boolean} [args.force]
     * @param {boolean} [args.track]
     *
     * @returns {Promise<void>} Resolves successfully when filesystem operations are complete
     *
     */
    async function _checkout({
      fs,
      cache,
      onProgress,
      dir,
      gitdir,
      remote,
      ref,
      filepaths,
      noCheckout,
      noUpdateHead,
      dryRun,
      force,
      track = true,
    }) {
      // Get tree oid
      let oid;
      try {
        oid = await GitRefManager.resolve({ fs, gitdir, ref });
        // TODO: Figure out what to do if both 'ref' and 'remote' are specified, ref already exists,
        // and is configured to track a different remote.
      } catch (err) {
        if (ref === 'HEAD') throw err
        // If `ref` doesn't exist, create a new remote tracking branch
        // Figure out the commit to checkout
        const remoteRef = `${remote}/${ref}`;
        oid = await GitRefManager.resolve({
          fs,
          gitdir,
          ref: remoteRef,
        });
        if (track) {
          // Set up remote tracking branch
          const config = await GitConfigManager.get({ fs, gitdir });
          await config.set(`branch.${ref}.remote`, remote);
          await config.set(`branch.${ref}.merge`, `refs/heads/${ref}`);
          await GitConfigManager.save({ fs, gitdir, config });
        }
        // Create a new branch that points at that same commit
        await GitRefManager.writeRef({
          fs,
          gitdir,
          ref: `refs/heads/${ref}`,
          value: oid,
        });
      }

      // Update working dir
      if (!noCheckout) {
        let ops;
        // First pass - just analyze files (not directories) and figure out what needs to be done
        try {
          ops = await analyze({
            fs,
            cache,
            onProgress,
            dir,
            gitdir,
            ref,
            force,
            filepaths,
          });
        } catch (err) {
          // Throw a more helpful error message for this common mistake.
          if (err instanceof NotFoundError && err.data.what === oid) {
            throw new CommitNotFetchedError(ref, oid)
          } else {
            throw err
          }
        }

        // Report conflicts
        const conflicts = ops
          .filter(([method]) => method === 'conflict')
          .map(([method, fullpath]) => fullpath);
        if (conflicts.length > 0) {
          throw new CheckoutConflictError(conflicts)
        }

        // Collect errors
        const errors = ops
          .filter(([method]) => method === 'error')
          .map(([method, fullpath]) => fullpath);
        if (errors.length > 0) {
          throw new InternalError(errors.join(', '))
        }

        if (dryRun) {
          // Since the format of 'ops' is in flux, I really would rather folk besides myself not start relying on it
          // return ops
          return
        }

        // Second pass - execute planned changes
        // The cheapest semi-parallel solution without computing a full dependency graph will be
        // to just do ops in 4 dumb phases: delete files, delete dirs, create dirs, write files

        let count = 0;
        const total = ops.length;
        await GitIndexManager.acquire({ fs, gitdir, cache }, async function(index) {
          await Promise.all(
            ops
              .filter(
                ([method]) => method === 'delete' || method === 'delete-index'
              )
              .map(async function([method, fullpath]) {
                const filepath = `${dir}/${fullpath}`;
                if (method === 'delete') {
                  await fs.rm(filepath);
                }
                index.delete({ filepath: fullpath });
                if (onProgress) {
                  await onProgress({
                    phase: 'Updating workdir',
                    loaded: ++count,
                    total,
                  });
                }
              })
          );
        });

        // Note: this is cannot be done naively in parallel
        await GitIndexManager.acquire({ fs, gitdir, cache }, async function(index) {
          for (const [method, fullpath] of ops) {
            if (method === 'rmdir' || method === 'rmdir-index') {
              const filepath = `${dir}/${fullpath}`;
              try {
                if (method === 'rmdir-index') {
                  index.delete({ filepath: fullpath });
                }
                await fs.rmdir(filepath);
                if (onProgress) {
                  await onProgress({
                    phase: 'Updating workdir',
                    loaded: ++count,
                    total,
                  });
                }
              } catch (e) {
                if (e.code === 'ENOTEMPTY') {
                  console.log(
                    `Did not delete ${fullpath} because directory is not empty`
                  );
                } else {
                  throw e
                }
              }
            }
          }
        });

        await Promise.all(
          ops
            .filter(([method]) => method === 'mkdir' || method === 'mkdir-index')
            .map(async function([_, fullpath]) {
              const filepath = `${dir}/${fullpath}`;
              await fs.mkdir(filepath);
              if (onProgress) {
                await onProgress({
                  phase: 'Updating workdir',
                  loaded: ++count,
                  total,
                });
              }
            })
        );

        await GitIndexManager.acquire({ fs, gitdir, cache }, async function(index) {
          await Promise.all(
            ops
              .filter(
                ([method]) =>
                  method === 'create' ||
                  method === 'create-index' ||
                  method === 'update' ||
                  method === 'mkdir-index'
              )
              .map(async function([method, fullpath, oid, mode, chmod]) {
                const filepath = `${dir}/${fullpath}`;
                try {
                  if (method !== 'create-index' && method !== 'mkdir-index') {
                    const { object } = await _readObject({ fs, cache, gitdir, oid });
                    if (chmod) {
                      // Note: the mode option of fs.write only works when creating files,
                      // not updating them. Since the `fs` plugin doesn't expose `chmod` this
                      // is our only option.
                      await fs.rm(filepath);
                    }
                    if (mode === 0o100644) {
                      // regular file
                      await fs.write(filepath, object);
                    } else if (mode === 0o100755) {
                      // executable file
                      await fs.write(filepath, object, { mode: 0o777 });
                    } else if (mode === 0o120000) {
                      // symlink
                      await fs.writelink(filepath, object);
                    } else {
                      throw new InternalError(
                        `Invalid mode 0o${mode.toString(8)} detected in blob ${oid}`
                      )
                    }
                  }

                  const stats = await fs.lstat(filepath);
                  // We can't trust the executable bit returned by lstat on Windows,
                  // so we need to preserve this value from the TREE.
                  // TODO: Figure out how git handles this internally.
                  if (mode === 0o100755) {
                    stats.mode = 0o755;
                  }
                  // Submodules are present in the git index but use a unique mode different from trees
                  if (method === 'mkdir-index') {
                    stats.mode = 0o160000;
                  }
                  index.insert({
                    filepath: fullpath,
                    stats,
                    oid,
                  });
                  if (onProgress) {
                    await onProgress({
                      phase: 'Updating workdir',
                      loaded: ++count,
                      total,
                    });
                  }
                } catch (e) {
                  console.log(e);
                }
              })
          );
        });
      }

      // Update HEAD
      if (!noUpdateHead) {
        const fullRef = await GitRefManager.expand({ fs, gitdir, ref });
        if (fullRef.startsWith('refs/heads')) {
          await GitRefManager.writeSymbolicRef({
            fs,
            gitdir,
            ref: 'HEAD',
            value: fullRef,
          });
        } else {
          // detached head
          await GitRefManager.writeRef({ fs, gitdir, ref: 'HEAD', value: oid });
        }
      }
    }

    async function analyze({
      fs,
      cache,
      onProgress,
      dir,
      gitdir,
      ref,
      force,
      filepaths,
    }) {
      let count = 0;
      return _walk({
        fs,
        cache,
        dir,
        gitdir,
        trees: [TREE({ ref }), WORKDIR(), STAGE()],
        map: async function(fullpath, [commit, workdir, stage]) {
          if (fullpath === '.') return
          // match against base paths
          if (filepaths && !filepaths.some(base => worthWalking(fullpath, base))) {
            return null
          }
          // Emit progress event
          if (onProgress) {
            await onProgress({ phase: 'Analyzing workdir', loaded: ++count });
          }

          // This is a kind of silly pattern but it worked so well for me in the past
          // and it makes intuitively demonstrating exhaustiveness so *easy*.
          // This checks for the presense and/or absence of each of the 3 entries,
          // converts that to a 3-bit binary representation, and then handles
          // every possible combination (2^3 or 8 cases) with a lookup table.
          const key = [!!stage, !!commit, !!workdir].map(Number).join('');
          switch (key) {
            // Impossible case.
            case '000':
              return
            // Ignore workdir files that are not tracked and not part of the new commit.
            case '001':
              // OK, make an exception for explicitly named files.
              if (force && filepaths && filepaths.includes(fullpath)) {
                return ['delete', fullpath]
              }
              return
            // New entries
            case '010': {
              switch (await commit.type()) {
                case 'tree': {
                  return ['mkdir', fullpath]
                }
                case 'blob': {
                  return [
                    'create',
                    fullpath,
                    await commit.oid(),
                    await commit.mode(),
                  ]
                }
                case 'commit': {
                  return [
                    'mkdir-index',
                    fullpath,
                    await commit.oid(),
                    await commit.mode(),
                  ]
                }
                default: {
                  return [
                    'error',
                    `new entry Unhandled type ${await commit.type()}`,
                  ]
                }
              }
            }
            // New entries but there is already something in the workdir there.
            case '011': {
              switch (`${await commit.type()}-${await workdir.type()}`) {
                case 'tree-tree': {
                  return // noop
                }
                case 'tree-blob':
                case 'blob-tree': {
                  return ['conflict', fullpath]
                }
                case 'blob-blob': {
                  // Is the incoming file different?
                  if ((await commit.oid()) !== (await workdir.oid())) {
                    if (force) {
                      return [
                        'update',
                        fullpath,
                        await commit.oid(),
                        await commit.mode(),
                        (await commit.mode()) !== (await workdir.mode()),
                      ]
                    } else {
                      return ['conflict', fullpath]
                    }
                  } else {
                    // Is the incoming file a different mode?
                    if ((await commit.mode()) !== (await workdir.mode())) {
                      if (force) {
                        return [
                          'update',
                          fullpath,
                          await commit.oid(),
                          await commit.mode(),
                          true,
                        ]
                      } else {
                        return ['conflict', fullpath]
                      }
                    } else {
                      return [
                        'create-index',
                        fullpath,
                        await commit.oid(),
                        await commit.mode(),
                      ]
                    }
                  }
                }
                case 'commit-tree': {
                  // TODO: submodule
                  // We'll ignore submodule directories for now.
                  // Users prefer we not throw an error for lack of submodule support.
                  // gitlinks
                  return
                }
                case 'commit-blob': {
                  // TODO: submodule
                  // But... we'll complain if there is a *file* where we would
                  // put a submodule if we had submodule support.
                  return ['conflict', fullpath]
                }
                default: {
                  return ['error', `new entry Unhandled type ${commit.type}`]
                }
              }
            }
            // Something in stage but not in the commit OR the workdir.
            // Note: I verified this behavior against canonical git.
            case '100': {
              return ['delete-index', fullpath]
            }
            // Deleted entries
            // TODO: How to handle if stage type and workdir type mismatch?
            case '101': {
              switch (await stage.type()) {
                case 'tree': {
                  return ['rmdir', fullpath]
                }
                case 'blob': {
                  // Git checks that the workdir.oid === stage.oid before deleting file
                  if ((await stage.oid()) !== (await workdir.oid())) {
                    if (force) {
                      return ['delete', fullpath]
                    } else {
                      return ['conflict', fullpath]
                    }
                  } else {
                    return ['delete', fullpath]
                  }
                }
                case 'commit': {
                  return ['rmdir-index', fullpath]
                }
                default: {
                  return [
                    'error',
                    `delete entry Unhandled type ${await stage.type()}`,
                  ]
                }
              }
            }
            /* eslint-disable no-fallthrough */
            // File missing from workdir
            case '110':
            // Possibly modified entries
            case '111': {
              /* eslint-enable no-fallthrough */
              switch (`${await stage.type()}-${await commit.type()}`) {
                case 'tree-tree': {
                  return
                }
                case 'blob-blob': {
                  // If the file hasn't changed, there is no need to do anything.
                  // Existing file modifications in the workdir can be be left as is.
                  if (
                    (await stage.oid()) === (await commit.oid()) &&
                    (await stage.mode()) === (await commit.mode()) &&
                    !force
                  ) {
                    return
                  }

                  // Check for local changes that would be lost
                  if (workdir) {
                    // Note: canonical git only compares with the stage. But we're smart enough
                    // to compare to the stage AND the incoming commit.
                    if (
                      (await workdir.oid()) !== (await stage.oid()) &&
                      (await workdir.oid()) !== (await commit.oid())
                    ) {
                      if (force) {
                        return [
                          'update',
                          fullpath,
                          await commit.oid(),
                          await commit.mode(),
                          (await commit.mode()) !== (await workdir.mode()),
                        ]
                      } else {
                        return ['conflict', fullpath]
                      }
                    }
                  } else if (force) {
                    return [
                      'update',
                      fullpath,
                      await commit.oid(),
                      await commit.mode(),
                      (await commit.mode()) !== (await stage.mode()),
                    ]
                  }
                  // Has file mode changed?
                  if ((await commit.mode()) !== (await stage.mode())) {
                    return [
                      'update',
                      fullpath,
                      await commit.oid(),
                      await commit.mode(),
                      true,
                    ]
                  }
                  // TODO: HANDLE SYMLINKS
                  // Has the file content changed?
                  if ((await commit.oid()) !== (await stage.oid())) {
                    return [
                      'update',
                      fullpath,
                      await commit.oid(),
                      await commit.mode(),
                      false,
                    ]
                  } else {
                    return
                  }
                }
                case 'tree-blob': {
                  return ['update-dir-to-blob', fullpath, await commit.oid()]
                }
                case 'blob-tree': {
                  return ['update-blob-to-tree', fullpath]
                }
                case 'commit-commit': {
                  return [
                    'mkdir-index',
                    fullpath,
                    await commit.oid(),
                    await commit.mode(),
                  ]
                }
                default: {
                  return [
                    'error',
                    `update entry Unhandled type ${await stage.type()}-${await commit.type()}`,
                  ]
                }
              }
            }
          }
        },
        // Modify the default flat mapping
        reduce: async function(parent, children) {
          children = flat(children);
          if (!parent) {
            return children
          } else if (parent && parent[0] === 'rmdir') {
            children.push(parent);
            return children
          } else {
            children.unshift(parent);
            return children
          }
        },
      })
    }

    // @ts-check

    /**
     * Checkout a branch
     *
     * If the branch already exists it will check out that branch. Otherwise, it will create a new remote tracking branch set to track the remote branch of that name.
     *
     * @param {object} args
     * @param {FsClient} args.fs - a file system implementation
     * @param {ProgressCallback} [args.onProgress] - optional progress event callback
     * @param {string} args.dir - The [working tree](dir-vs-gitdir.md) directory path
     * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path
     * @param {string} [args.ref = 'HEAD'] - Source to checkout files from
     * @param {string[]} [args.filepaths] - Limit the checkout to the given files and directories
     * @param {string} [args.remote = 'origin'] - Which remote repository to use
     * @param {boolean} [args.noCheckout = false] - If true, will update HEAD but won't update the working directory
     * @param {boolean} [args.noUpdateHead] - If true, will update the working directory but won't update HEAD. Defaults to `false` when `ref` is provided, and `true` if `ref` is not provided.
     * @param {boolean} [args.dryRun = false] - If true, simulates a checkout so you can test whether it would succeed.
     * @param {boolean} [args.force = false] - If true, conflicts will be ignored and files will be overwritten regardless of local changes.
     * @param {boolean} [args.track = true] - If false, will not set the remote branch tracking information. Defaults to true.
     * @param {object} [args.cache] - a [cache](cache.md) object
     *
     * @returns {Promise<void>} Resolves successfully when filesystem operations are complete
     *
     * @example
     * // switch to the main branch
     * await git.checkout({
     *   fs,
     *   dir: '/tutorial',
     *   ref: 'main'
     * })
     * console.log('done')
     *
     * @example
     * // restore the 'docs' and 'src/docs' folders to the way they were, overwriting any changes
     * await git.checkout({
     *   fs,
     *   dir: '/tutorial',
     *   force: true,
     *   filepaths: ['docs', 'src/docs']
     * })
     * console.log('done')
     *
     * @example
     * // restore the 'docs' and 'src/docs' folders to the way they are in the 'develop' branch, overwriting any changes
     * await git.checkout({
     *   fs,
     *   dir: '/tutorial',
     *   ref: 'develop',
     *   noUpdateHead: true,
     *   force: true,
     *   filepaths: ['docs', 'src/docs']
     * })
     * console.log('done')
     */
    async function checkout({
      fs,
      onProgress,
      dir,
      gitdir = join(dir, '.git'),
      remote = 'origin',
      ref: _ref,
      filepaths,
      noCheckout = false,
      noUpdateHead = _ref === undefined,
      dryRun = false,
      force = false,
      track = true,
      cache = {},
    }) {
      try {
        assertParameter('fs', fs);
        assertParameter('dir', dir);
        assertParameter('gitdir', gitdir);

        const ref = _ref || 'HEAD';
        return await _checkout({
          fs: new FileSystem(fs),
          cache,
          onProgress,
          dir,
          gitdir,
          remote,
          ref,
          filepaths,
          noCheckout,
          noUpdateHead,
          dryRun,
          force,
          track,
        })
      } catch (err) {
        err.caller = 'git.checkout';
        throw err
      }
    }

    // @see https://git-scm.com/docs/git-rev-parse.html#_specifying_revisions
    const abbreviateRx = new RegExp('^refs/(heads/|tags/|remotes/)?(.*)');

    function abbreviateRef(ref) {
      const match = abbreviateRx.exec(ref);
      if (match) {
        if (match[1] === 'remotes/' && ref.endsWith('/HEAD')) {
          return match[2].slice(0, -5)
        } else {
          return match[2]
        }
      }
      return ref
    }

    // @ts-check

    /**
     * @param {Object} args
     * @param {import('../models/FileSystem.js').FileSystem} args.fs
     * @param {string} args.gitdir
     * @param {boolean} [args.fullname = false] - Return the full path (e.g. "refs/heads/main") instead of the abbreviated form.
     * @param {boolean} [args.test = false] - If the current branch doesn't actually exist (such as right after git init) then return `undefined`.
     *
     * @returns {Promise<string|void>} The name of the current branch or undefined if the HEAD is detached.
     *
     */
    async function _currentBranch({
      fs,
      gitdir,
      fullname = false,
      test = false,
    }) {
      const ref = await GitRefManager.resolve({
        fs,
        gitdir,
        ref: 'HEAD',
        depth: 2,
      });
      if (test) {
        try {
          await GitRefManager.resolve({ fs, gitdir, ref });
        } catch (_) {
          return
        }
      }
      // Return `undefined` for detached HEAD
      if (!ref.startsWith('refs/')) return
      return fullname ? ref : abbreviateRef(ref)
    }

    function translateSSHtoHTTP(url) {
      // handle "shorter scp-like syntax"
      url = url.replace(/^git@([^:]+):/, 'https://$1/');
      // handle proper SSH URLs
      url = url.replace(/^ssh:\/\//, 'https://');
      return url
    }

    function calculateBasicAuthHeader({ username = '', password = '' }) {
      return `Basic ${Buffer.from(`${username}:${password}`).toString('base64')}`
    }

    // Currently 'for await' upsets my linters.
    async function forAwait$1(iterable, cb) {
      const iter = getIterator$1(iterable);
      while (true) {
        const { value, done } = await iter.next();
        if (value) await cb(value);
        if (done) break
      }
      if (iter.return) iter.return();
    }

    async function collect$1(iterable) {
      let size = 0;
      const buffers = [];
      // This will be easier once `for await ... of` loops are available.
      await forAwait$1(iterable, value => {
        buffers.push(value);
        size += value.byteLength;
      });
      const result = new Uint8Array(size);
      let nextIndex = 0;
      for (const buffer of buffers) {
        result.set(buffer, nextIndex);
        nextIndex += buffer.byteLength;
      }
      return result
    }

    function extractAuthFromUrl(url) {
      // For whatever reason, the `fetch` API does not convert credentials embedded in the URL
      // into Basic Authentication headers automatically. Instead it throws an error!
      // So we must manually parse the URL, rip out the user:password portion if it is present
      // and compute the Authorization header.
      // Note: I tried using new URL(url) but that throws a security exception in Edge. :rolleyes:
      let userpass = url.match(/^https?:\/\/([^/]+)@/);
      // No credentials, return the url unmodified and an empty auth object
      if (userpass == null) return { url, auth: {} }
      userpass = userpass[1];
      const [username, password] = userpass.split(':');
      // Remove credentials from URL
      url = url.replace(`${userpass}@`, '');
      // Has credentials, return the fetch-safe URL and the parsed credentials
      return { url, auth: { username, password } }
    }

    function padHex(b, n) {
      const s = n.toString(16);
      return '0'.repeat(b - s.length) + s
    }

    /**
    pkt-line Format
    ---------------

    Much (but not all) of the payload is described around pkt-lines.

    A pkt-line is a variable length binary string.  The first four bytes
    of the line, the pkt-len, indicates the total length of the line,
    in hexadecimal.  The pkt-len includes the 4 bytes used to contain
    the length's hexadecimal representation.

    A pkt-line MAY contain binary data, so implementors MUST ensure
    pkt-line parsing/formatting routines are 8-bit clean.

    A non-binary line SHOULD BE terminated by an LF, which if present
    MUST be included in the total length. Receivers MUST treat pkt-lines
    with non-binary data the same whether or not they contain the trailing
    LF (stripping the LF if present, and not complaining when it is
    missing).

    The maximum length of a pkt-line's data component is 65516 bytes.
    Implementations MUST NOT send pkt-line whose length exceeds 65520
    (65516 bytes of payload + 4 bytes of length data).

    Implementations SHOULD NOT send an empty pkt-line ("0004").

    A pkt-line with a length field of 0 ("0000"), called a flush-pkt,
    is a special case and MUST be handled differently than an empty
    pkt-line ("0004").

    ----
      pkt-line     =  data-pkt / flush-pkt

      data-pkt     =  pkt-len pkt-payload
      pkt-len      =  4*(HEXDIG)
      pkt-payload  =  (pkt-len - 4)*(OCTET)

      flush-pkt    = "0000"
    ----

    Examples (as C-style strings):

    ----
      pkt-line          actual value
      ---------------------------------
      "0006a\n"         "a\n"
      "0005a"           "a"
      "000bfoobar\n"    "foobar\n"
      "0004"            ""
    ----
    */

    // I'm really using this more as a namespace.
    // There's not a lot of "state" in a pkt-line

    class GitPktLine {
      static flush() {
        return Buffer.from('0000', 'utf8')
      }

      static delim() {
        return Buffer.from('0001', 'utf8')
      }

      static encode(line) {
        if (typeof line === 'string') {
          line = Buffer.from(line);
        }
        const length = line.length + 4;
        const hexlength = padHex(4, length);
        return Buffer.concat([Buffer.from(hexlength, 'utf8'), line])
      }

      static streamReader(stream) {
        const reader = new StreamReader(stream);
        return async function read() {
          try {
            let length = await reader.read(4);
            if (length == null) return true
            length = parseInt(length.toString('utf8'), 16);
            if (length === 0) return null
            if (length === 1) return null // delim packets
            const buffer = await reader.read(length - 4);
            if (buffer == null) return true
            return buffer
          } catch (err) {
            console.log('error', err);
            return true
          }
        }
      }
    }

    // @ts-check

    /**
     * @param {function} read
     */
    async function parseCapabilitiesV2(read) {
      /** @type {Object<string, string | true>} */
      const capabilities2 = {};

      let line;
      while (true) {
        line = await read();
        if (line === true) break
        if (line === null) continue
        line = line.toString('utf8').replace(/\n$/, '');
        const i = line.indexOf('=');
        if (i > -1) {
          const key = line.slice(0, i);
          const value = line.slice(i + 1);
          capabilities2[key] = value;
        } else {
          capabilities2[line] = true;
        }
      }
      return { protocolVersion: 2, capabilities2 }
    }

    async function parseRefsAdResponse(stream, { service }) {
      const capabilities = new Set();
      const refs = new Map();
      const symrefs = new Map();

      // There is probably a better way to do this, but for now
      // let's just throw the result parser inline here.
      const read = GitPktLine.streamReader(stream);
      let lineOne = await read();
      // skip past any flushes
      while (lineOne === null) lineOne = await read();

      if (lineOne === true) throw new EmptyServerResponseError()

      // Handle protocol v2 responses (Bitbucket Server doesn't include a `# service=` line)
      if (lineOne.includes('version 2')) {
        return parseCapabilitiesV2(read)
      }

      // Clients MUST ignore an LF at the end of the line.
      if (lineOne.toString('utf8').replace(/\n$/, '') !== `# service=${service}`) {
        throw new ParseError(`# service=${service}\\n`, lineOne.toString('utf8'))
      }
      let lineTwo = await read();
      // skip past any flushes
      while (lineTwo === null) lineTwo = await read();
      // In the edge case of a brand new repo, zero refs (and zero capabilities)
      // are returned.
      if (lineTwo === true) return { capabilities, refs, symrefs }
      lineTwo = lineTwo.toString('utf8');

      // Handle protocol v2 responses
      if (lineTwo.includes('version 2')) {
        return parseCapabilitiesV2(read)
      }

      const [firstRef, capabilitiesLine] = splitAndAssert(lineTwo, '\x00', '\\x00');
      capabilitiesLine.split(' ').map(x => capabilities.add(x));
      const [ref, name] = splitAndAssert(firstRef, ' ', ' ');
      refs.set(name, ref);
      while (true) {
        const line = await read();
        if (line === true) break
        if (line !== null) {
          const [ref, name] = splitAndAssert(line.toString('utf8'), ' ', ' ');
          refs.set(name, ref);
        }
      }
      // Symrefs are thrown into the "capabilities" unfortunately.
      for (const cap of capabilities) {
        if (cap.startsWith('symref=')) {
          const m = cap.match(/symref=([^:]+):(.*)/);
          if (m.length === 3) {
            symrefs.set(m[1], m[2]);
          }
        }
      }
      return { protocolVersion: 1, capabilities, refs, symrefs }
    }

    function splitAndAssert(line, sep, expected) {
      const split = line.trim().split(sep);
      if (split.length !== 2) {
        throw new ParseError(
          `Two strings separated by '${expected}'`,
          line.toString('utf8')
        )
      }
      return split
    }

    // Try to accomodate known CORS proxy implementations:
    // - https://jcubic.pl/proxy.php?  <-- uses query string
    // - https://cors.isomorphic-git.org  <-- uses path
    const corsProxify = (corsProxy, url) =>
      corsProxy.endsWith('?')
        ? `${corsProxy}${url}`
        : `${corsProxy}/${url.replace(/^https?:\/\//, '')}`;

    const updateHeaders = (headers, auth) => {
      // Update the basic auth header
      if (auth.username || auth.password) {
        headers.Authorization = calculateBasicAuthHeader(auth);
      }
      // but any manually provided headers take precedence
      if (auth.headers) {
        Object.assign(headers, auth.headers);
      }
    };

    /**
     * @param {GitHttpResponse} res
     *
     * @returns {{ preview: string, response: string, data: Buffer }}
     */
    const stringifyBody = async res => {
      try {
        // Some services provide a meaningful error message in the body of 403s like "token lacks the scopes necessary to perform this action"
        const data = Buffer.from(await collect$1(res.body));
        const response = data.toString('utf8');
        const preview =
          response.length < 256 ? response : response.slice(0, 256) + '...';
        return { preview, response, data }
      } catch (e) {
        return {}
      }
    };

    class GitRemoteHTTP {
      static async capabilities() {
        return ['discover', 'connect']
      }

      /**
       * @param {Object} args
       * @param {HttpClient} args.http
       * @param {ProgressCallback} [args.onProgress]
       * @param {AuthCallback} [args.onAuth]
       * @param {AuthFailureCallback} [args.onAuthFailure]
       * @param {AuthSuccessCallback} [args.onAuthSuccess]
       * @param {string} [args.corsProxy]
       * @param {string} args.service
       * @param {string} args.url
       * @param {Object<string, string>} args.headers
       * @param {1 | 2} args.protocolVersion - Git Protocol Version
       */
      static async discover({
        http,
        onProgress,
        onAuth,
        onAuthSuccess,
        onAuthFailure,
        corsProxy,
        service,
        url: _origUrl,
        headers,
        protocolVersion,
      }) {
        let { url, auth } = extractAuthFromUrl(_origUrl);
        const proxifiedURL = corsProxy ? corsProxify(corsProxy, url) : url;
        if (auth.username || auth.password) {
          headers.Authorization = calculateBasicAuthHeader(auth);
        }
        if (protocolVersion === 2) {
          headers['Git-Protocol'] = 'version=2';
        }

        let res;
        let tryAgain;
        let providedAuthBefore = false;
        do {
          res = await http.request({
            onProgress,
            method: 'GET',
            url: `${proxifiedURL}/info/refs?service=${service}`,
            headers,
          });

          // the default loop behavior
          tryAgain = false;

          // 401 is the "correct" response for access denied. 203 is Non-Authoritative Information and comes from Azure DevOps, which
          // apparently doesn't realize this is a git request and is returning the HTML for the "Azure DevOps Services | Sign In" page.
          if (res.statusCode === 401 || res.statusCode === 203) {
            // On subsequent 401s, call `onAuthFailure` instead of `onAuth`.
            // This is so that naive `onAuth` callbacks that return a fixed value don't create an infinite loop of retrying.
            const getAuth = providedAuthBefore ? onAuthFailure : onAuth;
            if (getAuth) {
              // Acquire credentials and try again
              // TODO: read `useHttpPath` value from git config and pass along?
              auth = await getAuth(url, {
                ...auth,
                headers: { ...headers },
              });
              if (auth && auth.cancel) {
                throw new UserCanceledError()
              } else if (auth) {
                updateHeaders(headers, auth);
                providedAuthBefore = true;
                tryAgain = true;
              }
            }
          } else if (
            res.statusCode === 200 &&
            providedAuthBefore &&
            onAuthSuccess
          ) {
            await onAuthSuccess(url, auth);
          }
        } while (tryAgain)

        if (res.statusCode !== 200) {
          const { response } = await stringifyBody(res);
          throw new HttpError(res.statusCode, res.statusMessage, response)
        }
        // Git "smart" HTTP servers should respond with the correct Content-Type header.
        if (
          res.headers['content-type'] === `application/x-${service}-advertisement`
        ) {
          const remoteHTTP = await parseRefsAdResponse(res.body, { service });
          remoteHTTP.auth = auth;
          return remoteHTTP
        } else {
          // If they don't send the correct content-type header, that's a good indicator it is either a "dumb" HTTP
          // server, or the user specified an incorrect remote URL and the response is actually an HTML page.
          // In this case, we save the response as plain text so we can generate a better error message if needed.
          const { preview, response, data } = await stringifyBody(res);
          // For backwards compatibility, try to parse it anyway.
          // TODO: maybe just throw instead of trying?
          try {
            const remoteHTTP = await parseRefsAdResponse([data], { service });
            remoteHTTP.auth = auth;
            return remoteHTTP
          } catch (e) {
            throw new SmartHttpError(preview, response)
          }
        }
      }

      /**
       * @param {Object} args
       * @param {HttpClient} args.http
       * @param {ProgressCallback} [args.onProgress]
       * @param {string} [args.corsProxy]
       * @param {string} args.service
       * @param {string} args.url
       * @param {Object<string, string>} [args.headers]
       * @param {any} args.body
       * @param {any} args.auth
       */
      static async connect({
        http,
        onProgress,
        corsProxy,
        service,
        url,
        auth,
        body,
        headers,
      }) {
        // We already have the "correct" auth value at this point, but
        // we need to strip out the username/password from the URL yet again.
        const urlAuth = extractAuthFromUrl(url);
        if (urlAuth) url = urlAuth.url;

        if (corsProxy) url = corsProxify(corsProxy, url);

        headers['content-type'] = `application/x-${service}-request`;
        headers.accept = `application/x-${service}-result`;
        updateHeaders(headers, auth);

        const res = await http.request({
          onProgress,
          method: 'POST',
          url: `${url}/${service}`,
          body,
          headers,
        });
        if (res.statusCode !== 200) {
          const { response } = stringifyBody(res);
          throw new HttpError(res.statusCode, res.statusMessage, response)
        }
        return res
      }
    }

    function parseRemoteUrl({ url }) {
      // the stupid "shorter scp-like syntax"
      if (url.startsWith('git@')) {
        return {
          transport: 'ssh',
          address: url,
        }
      }
      const matches = url.match(/(\w+)(:\/\/|::)(.*)/);
      if (matches === null) return
      /*
       * When git encounters a URL of the form <transport>://<address>, where <transport> is
       * a protocol that it cannot handle natively, it automatically invokes git remote-<transport>
       * with the full URL as the second argument.
       *
       * @see https://git-scm.com/docs/git-remote-helpers
       */
      if (matches[2] === '://') {
        return {
          transport: matches[1],
          address: matches[0],
        }
      }
      /*
       * A URL of the form <transport>::<address> explicitly instructs git to invoke
       * git remote-<transport> with <address> as the second argument.
       *
       * @see https://git-scm.com/docs/git-remote-helpers
       */
      if (matches[2] === '::') {
        return {
          transport: matches[1],
          address: matches[3],
        }
      }
    }

    class GitRemoteManager {
      static getRemoteHelperFor({ url }) {
        // TODO: clean up the remoteHelper API and move into PluginCore
        const remoteHelpers = new Map();
        remoteHelpers.set('http', GitRemoteHTTP);
        remoteHelpers.set('https', GitRemoteHTTP);

        const parts = parseRemoteUrl({ url });
        if (!parts) {
          throw new UrlParseError(url)
        }
        if (remoteHelpers.has(parts.transport)) {
          return remoteHelpers.get(parts.transport)
        }
        throw new UnknownTransportError(
          url,
          parts.transport,
          parts.transport === 'ssh' ? translateSSHtoHTTP(url) : undefined
        )
      }
    }

    let lock$1 = null;

    class GitShallowManager {
      static async read({ fs, gitdir }) {
        if (lock$1 === null) lock$1 = new asyncLock();
        const filepath = join(gitdir, 'shallow');
        const oids = new Set();
        await lock$1.acquire(filepath, async function() {
          const text = await fs.read(filepath, { encoding: 'utf8' });
          if (text === null) return oids // no file
          if (text.trim() === '') return oids // empty file
          text
            .trim()
            .split('\n')
            .map(oid => oids.add(oid));
        });
        return oids
      }

      static async write({ fs, gitdir, oids }) {
        if (lock$1 === null) lock$1 = new asyncLock();
        const filepath = join(gitdir, 'shallow');
        if (oids.size > 0) {
          const text = [...oids].join('\n') + '\n';
          await lock$1.acquire(filepath, async function() {
            await fs.write(filepath, text, {
              encoding: 'utf8',
            });
          });
        } else {
          // No shallows
          await lock$1.acquire(filepath, async function() {
            await fs.rm(filepath);
          });
        }
      }
    }

    async function hasObjectLoose({ fs, gitdir, oid }) {
      const source = `objects/${oid.slice(0, 2)}/${oid.slice(2)}`;
      return fs.exists(`${gitdir}/${source}`)
    }

    async function hasObjectPacked({
      fs,
      cache,
      gitdir,
      oid,
      getExternalRefDelta,
    }) {
      // Check to see if it's in a packfile.
      // Iterate through all the .idx files
      let list = await fs.readdir(join(gitdir, 'objects/pack'));
      list = list.filter(x => x.endsWith('.idx'));
      for (const filename of list) {
        const indexFile = `${gitdir}/objects/pack/${filename}`;
        const p = await readPackIndex({
          fs,
          cache,
          filename: indexFile,
          getExternalRefDelta,
        });
        if (p.error) throw new InternalError(p.error)
        // If the packfile DOES have the oid we're looking for...
        if (p.offsets.has(oid)) {
          return true
        }
      }
      // Failed to find it
      return false
    }

    async function hasObject({
      fs,
      cache,
      gitdir,
      oid,
      format = 'content',
    }) {
      // Curry the current read method so that the packfile un-deltification
      // process can acquire external ref-deltas.
      const getExternalRefDelta = oid => _readObject({ fs, cache, gitdir, oid });

      // Look for it in the loose object directory.
      let result = await hasObjectLoose({ fs, gitdir, oid });
      // Check to see if it's in a packfile.
      if (!result) {
        result = await hasObjectPacked({
          fs,
          cache,
          gitdir,
          oid,
          getExternalRefDelta,
        });
      }
      // Finally
      return result
    }

    // TODO: make a function that just returns obCount. then emptyPackfile = () => sizePack(pack) === 0
    function emptyPackfile(pack) {
      const pheader = '5041434b';
      const version = '00000002';
      const obCount = '00000000';
      const header = pheader + version + obCount;
      return pack.slice(0, 12).toString('hex') === header
    }

    function filterCapabilities(server, client) {
      const serverNames = server.map(cap => cap.split('=', 1)[0]);
      return client.filter(cap => {
        const name = cap.split('=', 1)[0];
        return serverNames.includes(name)
      })
    }

    const pkg = {
      name: 'isomorphic-git',
      version: '1.24.2',
      agent: 'git/isomorphic-git@1.24.2',
    };

    class FIFO {
      constructor() {
        this._queue = [];
      }

      write(chunk) {
        if (this._ended) {
          throw Error('You cannot write to a FIFO that has already been ended!')
        }
        if (this._waiting) {
          const resolve = this._waiting;
          this._waiting = null;
          resolve({ value: chunk });
        } else {
          this._queue.push(chunk);
        }
      }

      end() {
        this._ended = true;
        if (this._waiting) {
          const resolve = this._waiting;
          this._waiting = null;
          resolve({ done: true });
        }
      }

      destroy(err) {
        this._ended = true;
        this.error = err;
      }

      async next() {
        if (this._queue.length > 0) {
          return { value: this._queue.shift() }
        }
        if (this._ended) {
          return { done: true }
        }
        if (this._waiting) {
          throw Error(
            'You cannot call read until the previous call to read has returned!'
          )
        }
        return new Promise(resolve => {
          this._waiting = resolve;
        })
      }
    }

    // Note: progress messages are designed to be written directly to the terminal,
    // so they are often sent with just a carriage return to overwrite the last line of output.
    // But there are also messages delimited with newlines.
    // I also include CRLF just in case.
    function findSplit(str) {
      const r = str.indexOf('\r');
      const n = str.indexOf('\n');
      if (r === -1 && n === -1) return -1
      if (r === -1) return n + 1 // \n
      if (n === -1) return r + 1 // \r
      if (n === r + 1) return n + 1 // \r\n
      return Math.min(r, n) + 1 // \r or \n
    }

    function splitLines(input) {
      const output = new FIFO();
      let tmp = ''
      ;(async () => {
        await forAwait$1(input, chunk => {
          chunk = chunk.toString('utf8');
          tmp += chunk;
          while (true) {
            const i = findSplit(tmp);
            if (i === -1) break
            output.write(tmp.slice(0, i));
            tmp = tmp.slice(i);
          }
        });
        if (tmp.length > 0) {
          output.write(tmp);
        }
        output.end();
      })();
      return output
    }

    /*
    If 'side-band' or 'side-band-64k' capabilities have been specified by
    the client, the server will send the packfile data multiplexed.

    Each packet starting with the packet-line length of the amount of data
    that follows, followed by a single byte specifying the sideband the
    following data is coming in on.

    In 'side-band' mode, it will send up to 999 data bytes plus 1 control
    code, for a total of up to 1000 bytes in a pkt-line.  In 'side-band-64k'
    mode it will send up to 65519 data bytes plus 1 control code, for a
    total of up to 65520 bytes in a pkt-line.

    The sideband byte will be a '1', '2' or a '3'. Sideband '1' will contain
    packfile data, sideband '2' will be used for progress information that the
    client will generally print to stderr and sideband '3' is used for error
    information.

    If no 'side-band' capability was specified, the server will stream the
    entire packfile without multiplexing.
    */

    class GitSideBand {
      static demux(input) {
        const read = GitPktLine.streamReader(input);
        // And now for the ridiculous side-band or side-band-64k protocol
        const packetlines = new FIFO();
        const packfile = new FIFO();
        const progress = new FIFO();
        // TODO: Use a proper through stream?
        const nextBit = async function() {
          const line = await read();
          // Skip over flush packets
          if (line === null) return nextBit()
          // A made up convention to signal there's no more to read.
          if (line === true) {
            packetlines.end();
            progress.end();
            packfile.end();
            return
          }
          // Examine first byte to determine which output "stream" to use
          switch (line[0]) {
            case 1: {
              // pack data
              packfile.write(line.slice(1));
              break
            }
            case 2: {
              // progress message
              progress.write(line.slice(1));
              break
            }
            case 3: {
              // fatal error message just before stream aborts
              const error = line.slice(1);
              progress.write(error);
              packfile.destroy(new Error(error.toString('utf8')));
              return
            }
            default: {
              // Not part of the side-band-64k protocol
              packetlines.write(line.slice(0));
            }
          }
          // Careful not to blow up the stack.
          // I think Promises in a tail-call position should be OK.
          nextBit();
        };
        nextBit();
        return {
          packetlines,
          packfile,
          progress,
        }
      }
      // static mux ({
      //   protocol, // 'side-band' or 'side-band-64k'
      //   packetlines,
      //   packfile,
      //   progress,
      //   error
      // }) {
      //   const MAX_PACKET_LENGTH = protocol === 'side-band-64k' ? 999 : 65519
      //   let output = new PassThrough()
      //   packetlines.on('data', data => {
      //     if (data === null) {
      //       output.write(GitPktLine.flush())
      //     } else {
      //       output.write(GitPktLine.encode(data))
      //     }
      //   })
      //   let packfileWasEmpty = true
      //   let packfileEnded = false
      //   let progressEnded = false
      //   let errorEnded = false
      //   let goodbye = Buffer.concat([
      //     GitPktLine.encode(Buffer.from('010A', 'hex')),
      //     GitPktLine.flush()
      //   ])
      //   packfile
      //     .on('data', data => {
      //       packfileWasEmpty = false
      //       const buffers = splitBuffer(data, MAX_PACKET_LENGTH)
      //       for (const buffer of buffers) {
      //         output.write(
      //           GitPktLine.encode(Buffer.concat([Buffer.from('01', 'hex'), buffer]))
      //         )
      //       }
      //     })
      //     .on('end', () => {
      //       packfileEnded = true
      //       if (!packfileWasEmpty) output.write(goodbye)
      //       if (progressEnded && errorEnded) output.end()
      //     })
      //   progress
      //     .on('data', data => {
      //       const buffers = splitBuffer(data, MAX_PACKET_LENGTH)
      //       for (const buffer of buffers) {
      //         output.write(
      //           GitPktLine.encode(Buffer.concat([Buffer.from('02', 'hex'), buffer]))
      //         )
      //       }
      //     })
      //     .on('end', () => {
      //       progressEnded = true
      //       if (packfileEnded && errorEnded) output.end()
      //     })
      //   error
      //     .on('data', data => {
      //       const buffers = splitBuffer(data, MAX_PACKET_LENGTH)
      //       for (const buffer of buffers) {
      //         output.write(
      //           GitPktLine.encode(Buffer.concat([Buffer.from('03', 'hex'), buffer]))
      //         )
      //       }
      //     })
      //     .on('end', () => {
      //       errorEnded = true
      //       if (progressEnded && packfileEnded) output.end()
      //     })
      //   return output
      // }
    }

    async function parseUploadPackResponse(stream) {
      const { packetlines, packfile, progress } = GitSideBand.demux(stream);
      const shallows = [];
      const unshallows = [];
      const acks = [];
      let nak = false;
      let done = false;
      return new Promise((resolve, reject) => {
        // Parse the response
        forAwait$1(packetlines, data => {
          const line = data.toString('utf8').trim();
          if (line.startsWith('shallow')) {
            const oid = line.slice(-41).trim();
            if (oid.length !== 40) {
              reject(new InvalidOidError(oid));
            }
            shallows.push(oid);
          } else if (line.startsWith('unshallow')) {
            const oid = line.slice(-41).trim();
            if (oid.length !== 40) {
              reject(new InvalidOidError(oid));
            }
            unshallows.push(oid);
          } else if (line.startsWith('ACK')) {
            const [, oid, status] = line.split(' ');
            acks.push({ oid, status });
            if (!status) done = true;
          } else if (line.startsWith('NAK')) {
            nak = true;
            done = true;
          }
          if (done) {
            resolve({ shallows, unshallows, acks, nak, packfile, progress });
          }
        });
      })
    }

    function writeUploadPackRequest({
      capabilities = [],
      wants = [],
      haves = [],
      shallows = [],
      depth = null,
      since = null,
      exclude = [],
    }) {
      const packstream = [];
      wants = [...new Set(wants)]; // remove duplicates
      let firstLineCapabilities = ` ${capabilities.join(' ')}`;
      for (const oid of wants) {
        packstream.push(GitPktLine.encode(`want ${oid}${firstLineCapabilities}\n`));
        firstLineCapabilities = '';
      }
      for (const oid of shallows) {
        packstream.push(GitPktLine.encode(`shallow ${oid}\n`));
      }
      if (depth !== null) {
        packstream.push(GitPktLine.encode(`deepen ${depth}\n`));
      }
      if (since !== null) {
        packstream.push(
          GitPktLine.encode(`deepen-since ${Math.floor(since.valueOf() / 1000)}\n`)
        );
      }
      for (const oid of exclude) {
        packstream.push(GitPktLine.encode(`deepen-not ${oid}\n`));
      }
      packstream.push(GitPktLine.flush());
      for (const oid of haves) {
        packstream.push(GitPktLine.encode(`have ${oid}\n`));
      }
      packstream.push(GitPktLine.encode(`done\n`));
      return packstream
    }

    // @ts-check

    /**
     *
     * @typedef {object} FetchResult - The object returned has the following schema:
     * @property {string | null} defaultBranch - The branch that is cloned if no branch is specified
     * @property {string | null} fetchHead - The SHA-1 object id of the fetched head commit
     * @property {string | null} fetchHeadDescription - a textual description of the branch that was fetched
     * @property {Object<string, string>} [headers] - The HTTP response headers returned by the git server
     * @property {string[]} [pruned] - A list of branches that were pruned, if you provided the `prune` parameter
     *
     */

    /**
     * @param {object} args
     * @param {import('../models/FileSystem.js').FileSystem} args.fs
     * @param {any} args.cache
     * @param {HttpClient} args.http
     * @param {ProgressCallback} [args.onProgress]
     * @param {MessageCallback} [args.onMessage]
     * @param {AuthCallback} [args.onAuth]
     * @param {AuthFailureCallback} [args.onAuthFailure]
     * @param {AuthSuccessCallback} [args.onAuthSuccess]
     * @param {string} args.gitdir
     * @param {string|void} [args.url]
     * @param {string} [args.corsProxy]
     * @param {string} [args.ref]
     * @param {string} [args.remoteRef]
     * @param {string} [args.remote]
     * @param {boolean} [args.singleBranch = false]
     * @param {boolean} [args.tags = false]
     * @param {number} [args.depth]
     * @param {Date} [args.since]
     * @param {string[]} [args.exclude = []]
     * @param {boolean} [args.relative = false]
     * @param {Object<string, string>} [args.headers]
     * @param {boolean} [args.prune]
     * @param {boolean} [args.pruneTags]
     *
     * @returns {Promise<FetchResult>}
     * @see FetchResult
     */
    async function _fetch({
      fs,
      cache,
      http,
      onProgress,
      onMessage,
      onAuth,
      onAuthSuccess,
      onAuthFailure,
      gitdir,
      ref: _ref,
      remoteRef: _remoteRef,
      remote: _remote,
      url: _url,
      corsProxy,
      depth = null,
      since = null,
      exclude = [],
      relative = false,
      tags = false,
      singleBranch = false,
      headers = {},
      prune = false,
      pruneTags = false,
    }) {
      const ref = _ref || (await _currentBranch({ fs, gitdir, test: true }));
      const config = await GitConfigManager.get({ fs, gitdir });
      // Figure out what remote to use.
      const remote =
        _remote || (ref && (await config.get(`branch.${ref}.remote`))) || 'origin';
      // Lookup the URL for the given remote.
      const url = _url || (await config.get(`remote.${remote}.url`));
      if (typeof url === 'undefined') {
        throw new MissingParameterError('remote OR url')
      }
      // Figure out what remote ref to use.
      const remoteRef =
        _remoteRef ||
        (ref && (await config.get(`branch.${ref}.merge`))) ||
        _ref ||
        'HEAD';

      if (corsProxy === undefined) {
        corsProxy = await config.get('http.corsProxy');
      }

      const GitRemoteHTTP = GitRemoteManager.getRemoteHelperFor({ url });
      const remoteHTTP = await GitRemoteHTTP.discover({
        http,
        onAuth,
        onAuthSuccess,
        onAuthFailure,
        corsProxy,
        service: 'git-upload-pack',
        url,
        headers,
        protocolVersion: 1,
      });
      const auth = remoteHTTP.auth; // hack to get new credentials from CredentialManager API
      const remoteRefs = remoteHTTP.refs;
      // For the special case of an empty repository with no refs, return null.
      if (remoteRefs.size === 0) {
        return {
          defaultBranch: null,
          fetchHead: null,
          fetchHeadDescription: null,
        }
      }
      // Check that the remote supports the requested features
      if (depth !== null && !remoteHTTP.capabilities.has('shallow')) {
        throw new RemoteCapabilityError('shallow', 'depth')
      }
      if (since !== null && !remoteHTTP.capabilities.has('deepen-since')) {
        throw new RemoteCapabilityError('deepen-since', 'since')
      }
      if (exclude.length > 0 && !remoteHTTP.capabilities.has('deepen-not')) {
        throw new RemoteCapabilityError('deepen-not', 'exclude')
      }
      if (relative === true && !remoteHTTP.capabilities.has('deepen-relative')) {
        throw new RemoteCapabilityError('deepen-relative', 'relative')
      }
      // Figure out the SHA for the requested ref
      const { oid, fullref } = GitRefManager.resolveAgainstMap({
        ref: remoteRef,
        map: remoteRefs,
      });
      // Filter out refs we want to ignore: only keep ref we're cloning, HEAD, branches, and tags (if we're keeping them)
      for (const remoteRef of remoteRefs.keys()) {
        if (
          remoteRef === fullref ||
          remoteRef === 'HEAD' ||
          remoteRef.startsWith('refs/heads/') ||
          (tags && remoteRef.startsWith('refs/tags/'))
        ) {
          continue
        }
        remoteRefs.delete(remoteRef);
      }
      // Assemble the application/x-git-upload-pack-request
      const capabilities = filterCapabilities(
        [...remoteHTTP.capabilities],
        [
          'multi_ack_detailed',
          'no-done',
          'side-band-64k',
          // Note: I removed 'thin-pack' option since our code doesn't "fatten" packfiles,
          // which is necessary for compatibility with git. It was the cause of mysterious
          // 'fatal: pack has [x] unresolved deltas' errors that plagued us for some time.
          // isomorphic-git is perfectly happy with thin packfiles in .git/objects/pack but
          // canonical git it turns out is NOT.
          'ofs-delta',
          `agent=${pkg.agent}`,
        ]
      );
      if (relative) capabilities.push('deepen-relative');
      // Start figuring out which oids from the remote we want to request
      const wants = singleBranch ? [oid] : remoteRefs.values();
      // Come up with a reasonable list of oids to tell the remote we already have
      // (preferably oids that are close ancestors of the branch heads we're fetching)
      const haveRefs = singleBranch
        ? [ref]
        : await GitRefManager.listRefs({
            fs,
            gitdir,
            filepath: `refs`,
          });
      let haves = [];
      for (let ref of haveRefs) {
        try {
          ref = await GitRefManager.expand({ fs, gitdir, ref });
          const oid = await GitRefManager.resolve({ fs, gitdir, ref });
          if (await hasObject({ fs, cache, gitdir, oid })) {
            haves.push(oid);
          }
        } catch (err) {}
      }
      haves = [...new Set(haves)];
      const oids = await GitShallowManager.read({ fs, gitdir });
      const shallows = remoteHTTP.capabilities.has('shallow') ? [...oids] : [];
      const packstream = writeUploadPackRequest({
        capabilities,
        wants,
        haves,
        shallows,
        depth,
        since,
        exclude,
      });
      // CodeCommit will hang up if we don't send a Content-Length header
      // so we can't stream the body.
      const packbuffer = Buffer.from(await collect$1(packstream));
      const raw = await GitRemoteHTTP.connect({
        http,
        onProgress,
        corsProxy,
        service: 'git-upload-pack',
        url,
        auth,
        body: [packbuffer],
        headers,
      });
      const response = await parseUploadPackResponse(raw.body);
      if (raw.headers) {
        response.headers = raw.headers;
      }
      // Apply all the 'shallow' and 'unshallow' commands
      for (const oid of response.shallows) {
        if (!oids.has(oid)) {
          // this is in a try/catch mostly because my old test fixtures are missing objects
          try {
            // server says it's shallow, but do we have the parents?
            const { object } = await _readObject({ fs, cache, gitdir, oid });
            const commit = new GitCommit(object);
            const hasParents = await Promise.all(
              commit
                .headers()
                .parent.map(oid => hasObject({ fs, cache, gitdir, oid }))
            );
            const haveAllParents =
              hasParents.length === 0 || hasParents.every(has => has);
            if (!haveAllParents) {
              oids.add(oid);
            }
          } catch (err) {
            oids.add(oid);
          }
        }
      }
      for (const oid of response.unshallows) {
        oids.delete(oid);
      }
      await GitShallowManager.write({ fs, gitdir, oids });
      // Update local remote refs
      if (singleBranch) {
        const refs = new Map([[fullref, oid]]);
        // But wait, maybe it was a symref, like 'HEAD'!
        // We need to save all the refs in the symref chain (sigh).
        const symrefs = new Map();
        let bail = 10;
        let key = fullref;
        while (bail--) {
          const value = remoteHTTP.symrefs.get(key);
          if (value === undefined) break
          symrefs.set(key, value);
          key = value;
        }
        // final value must not be a symref but a real ref
        const realRef = remoteRefs.get(key);
        // There may be no ref at all if we've fetched a specific commit hash
        if (realRef) {
          refs.set(key, realRef);
        }
        const { pruned } = await GitRefManager.updateRemoteRefs({
          fs,
          gitdir,
          remote,
          refs,
          symrefs,
          tags,
          prune,
        });
        if (prune) {
          response.pruned = pruned;
        }
      } else {
        const { pruned } = await GitRefManager.updateRemoteRefs({
          fs,
          gitdir,
          remote,
          refs: remoteRefs,
          symrefs: remoteHTTP.symrefs,
          tags,
          prune,
          pruneTags,
        });
        if (prune) {
          response.pruned = pruned;
        }
      }
      // We need this value later for the `clone` command.
      response.HEAD = remoteHTTP.symrefs.get('HEAD');
      // AWS CodeCommit doesn't list HEAD as a symref, but we can reverse engineer it
      // Find the SHA of the branch called HEAD
      if (response.HEAD === undefined) {
        const { oid } = GitRefManager.resolveAgainstMap({
          ref: 'HEAD',
          map: remoteRefs,
        });
        // Use the name of the first branch that's not called HEAD that has
        // the same SHA as the branch called HEAD.
        for (const [key, value] of remoteRefs.entries()) {
          if (key !== 'HEAD' && value === oid) {
            response.HEAD = key;
            break
          }
        }
      }
      const noun = fullref.startsWith('refs/tags') ? 'tag' : 'branch';
      response.FETCH_HEAD = {
        oid,
        description: `${noun} '${abbreviateRef(fullref)}' of ${url}`,
      };

      if (onProgress || onMessage) {
        const lines = splitLines(response.progress);
        forAwait$1(lines, async line => {
          if (onMessage) await onMessage(line);
          if (onProgress) {
            const matches = line.match(/([^:]*).*\((\d+?)\/(\d+?)\)/);
            if (matches) {
              await onProgress({
                phase: matches[1].trim(),
                loaded: parseInt(matches[2], 10),
                total: parseInt(matches[3], 10),
              });
            }
          }
        });
      }
      const packfile = Buffer.from(await collect$1(response.packfile));
      const packfileSha = packfile.slice(-20).toString('hex');
      const res = {
        defaultBranch: response.HEAD,
        fetchHead: response.FETCH_HEAD.oid,
        fetchHeadDescription: response.FETCH_HEAD.description,
      };
      if (response.headers) {
        res.headers = response.headers;
      }
      if (prune) {
        res.pruned = response.pruned;
      }
      // This is a quick fix for the empty .git/objects/pack/pack-.pack file error,
      // which due to the way `git-list-pack` works causes the program to hang when it tries to read it.
      // TODO: Longer term, we should actually:
      // a) NOT concatenate the entire packfile into memory (line 78),
      // b) compute the SHA of the stream except for the last 20 bytes, using the same library used in push.js, and
      // c) compare the computed SHA with the last 20 bytes of the stream before saving to disk, and throwing a "packfile got corrupted during download" error if the SHA doesn't match.
      if (packfileSha !== '' && !emptyPackfile(packfile)) {
        res.packfile = `objects/pack/pack-${packfileSha}.pack`;
        const fullpath = join(gitdir, res.packfile);
        await fs.write(fullpath, packfile);
        const getExternalRefDelta = oid => _readObject({ fs, cache, gitdir, oid });
        const idx = await GitPackIndex.fromPack({
          pack: packfile,
          getExternalRefDelta,
          onProgress,
        });
        await fs.write(fullpath.replace(/\.pack$/, '.idx'), await idx.toBuffer());
      }
      return res
    }

    // @ts-check

    /**
     * Initialize a new repository
     *
     * @param {object} args
     * @param {import('../models/FileSystem.js').FileSystem} args.fs
     * @param {string} [args.dir]
     * @param {string} [args.gitdir]
     * @param {boolean} [args.bare = false]
     * @param {string} [args.defaultBranch = 'master']
     * @returns {Promise<void>}
     */
    async function _init({
      fs,
      bare = false,
      dir,
      gitdir = bare ? dir : join(dir, '.git'),
      defaultBranch = 'master',
    }) {
      // Don't overwrite an existing config
      if (await fs.exists(gitdir + '/config')) return

      let folders = [
        'hooks',
        'info',
        'objects/info',
        'objects/pack',
        'refs/heads',
        'refs/tags',
      ];
      folders = folders.map(dir => gitdir + '/' + dir);
      for (const folder of folders) {
        await fs.mkdir(folder);
      }

      await fs.write(
        gitdir + '/config',
        '[core]\n' +
          '\trepositoryformatversion = 0\n' +
          '\tfilemode = false\n' +
          `\tbare = ${bare}\n` +
          (bare ? '' : '\tlogallrefupdates = true\n') +
          '\tsymlinks = false\n' +
          '\tignorecase = true\n'
      );
      await fs.write(gitdir + '/HEAD', `ref: refs/heads/${defaultBranch}\n`);
    }

    // @ts-check

    /**
     * @param {object} args
     * @param {import('../models/FileSystem.js').FileSystem} args.fs
     * @param {object} args.cache
     * @param {HttpClient} args.http
     * @param {ProgressCallback} [args.onProgress]
     * @param {MessageCallback} [args.onMessage]
     * @param {AuthCallback} [args.onAuth]
     * @param {AuthFailureCallback} [args.onAuthFailure]
     * @param {AuthSuccessCallback} [args.onAuthSuccess]
     * @param {string} [args.dir]
     * @param {string} args.gitdir
     * @param {string} args.url
     * @param {string} args.corsProxy
     * @param {string} args.ref
     * @param {boolean} args.singleBranch
     * @param {boolean} args.noCheckout
     * @param {boolean} args.noTags
     * @param {string} args.remote
     * @param {number} args.depth
     * @param {Date} args.since
     * @param {string[]} args.exclude
     * @param {boolean} args.relative
     * @param {Object<string, string>} args.headers
     *
     * @returns {Promise<void>} Resolves successfully when clone completes
     *
     */
    async function _clone({
      fs,
      cache,
      http,
      onProgress,
      onMessage,
      onAuth,
      onAuthSuccess,
      onAuthFailure,
      dir,
      gitdir,
      url,
      corsProxy,
      ref,
      remote,
      depth,
      since,
      exclude,
      relative,
      singleBranch,
      noCheckout,
      noTags,
      headers,
    }) {
      try {
        await _init({ fs, gitdir });
        await _addRemote({ fs, gitdir, remote, url, force: false });
        if (corsProxy) {
          const config = await GitConfigManager.get({ fs, gitdir });
          await config.set(`http.corsProxy`, corsProxy);
          await GitConfigManager.save({ fs, gitdir, config });
        }
        const { defaultBranch, fetchHead } = await _fetch({
          fs,
          cache,
          http,
          onProgress,
          onMessage,
          onAuth,
          onAuthSuccess,
          onAuthFailure,
          gitdir,
          ref,
          remote,
          corsProxy,
          depth,
          since,
          exclude,
          relative,
          singleBranch,
          headers,
          tags: !noTags,
        });
        if (fetchHead === null) return
        ref = ref || defaultBranch;
        ref = ref.replace('refs/heads/', '');
        // Checkout that branch
        await _checkout({
          fs,
          cache,
          onProgress,
          dir,
          gitdir,
          ref,
          remote,
          noCheckout,
        });
      } catch (err) {
        // Remove partial local repository, see #1283
        // Ignore any error as we are already failing.
        // The catch is necessary so the original error is not masked.
        await fs
          .rmdir(gitdir, { recursive: true, maxRetries: 10 })
          .catch(() => undefined);
        throw err
      }
    }

    // @ts-check

    /**
     * Clone a repository
     *
     * @param {object} args
     * @param {FsClient} args.fs - a file system implementation
     * @param {HttpClient} args.http - an HTTP client
     * @param {ProgressCallback} [args.onProgress] - optional progress event callback
     * @param {MessageCallback} [args.onMessage] - optional message event callback
     * @param {AuthCallback} [args.onAuth] - optional auth fill callback
     * @param {AuthFailureCallback} [args.onAuthFailure] - optional auth rejected callback
     * @param {AuthSuccessCallback} [args.onAuthSuccess] - optional auth approved callback
     * @param {string} args.dir - The [working tree](dir-vs-gitdir.md) directory path
     * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path
     * @param {string} args.url - The URL of the remote repository
     * @param {string} [args.corsProxy] - Optional [CORS proxy](https://www.npmjs.com/%40isomorphic-git/cors-proxy). Value is stored in the git config file for that repo.
     * @param {string} [args.ref] - Which branch to checkout. By default this is the designated "main branch" of the repository.
     * @param {boolean} [args.singleBranch = false] - Instead of the default behavior of fetching all the branches, only fetch a single branch.
     * @param {boolean} [args.noCheckout = false] - If true, clone will only fetch the repo, not check out a branch. Skipping checkout can save a lot of time normally spent writing files to disk.
     * @param {boolean} [args.noTags = false] - By default clone will fetch all tags. `noTags` disables that behavior.
     * @param {string} [args.remote = 'origin'] - What to name the remote that is created.
     * @param {number} [args.depth] - Integer. Determines how much of the git repository's history to retrieve
     * @param {Date} [args.since] - Only fetch commits created after the given date. Mutually exclusive with `depth`.
     * @param {string[]} [args.exclude = []] - A list of branches or tags. Instructs the remote server not to send us any commits reachable from these refs.
     * @param {boolean} [args.relative = false] - Changes the meaning of `depth` to be measured from the current shallow depth rather than from the branch tip.
     * @param {Object<string, string>} [args.headers = {}] - Additional headers to include in HTTP requests, similar to git's `extraHeader` config
     * @param {object} [args.cache] - a [cache](cache.md) object
     *
     * @returns {Promise<void>} Resolves successfully when clone completes
     *
     * @example
     * await git.clone({
     *   fs,
     *   http,
     *   dir: '/tutorial',
     *   corsProxy: 'https://cors.isomorphic-git.org',
     *   url: 'https://github.com/isomorphic-git/isomorphic-git',
     *   singleBranch: true,
     *   depth: 1
     * })
     * console.log('done')
     *
     */
    async function clone({
      fs,
      http,
      onProgress,
      onMessage,
      onAuth,
      onAuthSuccess,
      onAuthFailure,
      dir,
      gitdir = join(dir, '.git'),
      url,
      corsProxy = undefined,
      ref = undefined,
      remote = 'origin',
      depth = undefined,
      since = undefined,
      exclude = [],
      relative = false,
      singleBranch = false,
      noCheckout = false,
      noTags = false,
      headers = {},
      cache = {},
    }) {
      try {
        assertParameter('fs', fs);
        assertParameter('http', http);
        assertParameter('gitdir', gitdir);
        if (!noCheckout) {
          assertParameter('dir', dir);
        }
        assertParameter('url', url);

        return await _clone({
          fs: new FileSystem(fs),
          cache,
          http,
          onProgress,
          onMessage,
          onAuth,
          onAuthSuccess,
          onAuthFailure,
          dir,
          gitdir,
          url,
          corsProxy,
          ref,
          remote,
          depth,
          since,
          exclude,
          relative,
          singleBranch,
          noCheckout,
          noTags,
          headers,
        })
      } catch (err) {
        err.caller = 'git.clone';
        throw err
      }
    }

    // @ts-check

    /**
     * Create a new commit
     *
     * @param {Object} args
     * @param {FsClient} args.fs - a file system implementation
     * @param {SignCallback} [args.onSign] - a PGP signing implementation
     * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path
     * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path
     * @param {string} args.message - The commit message to use.
     * @param {Object} [args.author] - The details about the author.
     * @param {string} [args.author.name] - Default is `user.name` config.
     * @param {string} [args.author.email] - Default is `user.email` config.
     * @param {number} [args.author.timestamp=Math.floor(Date.now()/1000)] - Set the author timestamp field. This is the integer number of seconds since the Unix epoch (1970-01-01 00:00:00).
     * @param {number} [args.author.timezoneOffset] - Set the author timezone offset field. This is the difference, in minutes, from the current timezone to UTC. Default is `(new Date()).getTimezoneOffset()`.
     * @param {Object} [args.committer = author] - The details about the commit committer, in the same format as the author parameter. If not specified, the author details are used.
     * @param {string} [args.committer.name] - Default is `user.name` config.
     * @param {string} [args.committer.email] - Default is `user.email` config.
     * @param {number} [args.committer.timestamp=Math.floor(Date.now()/1000)] - Set the committer timestamp field. This is the integer number of seconds since the Unix epoch (1970-01-01 00:00:00).
     * @param {number} [args.committer.timezoneOffset] - Set the committer timezone offset field. This is the difference, in minutes, from the current timezone to UTC. Default is `(new Date()).getTimezoneOffset()`.
     * @param {string} [args.signingKey] - Sign the tag object using this private PGP key.
     * @param {boolean} [args.dryRun = false] - If true, simulates making a commit so you can test whether it would succeed. Implies `noUpdateBranch`.
     * @param {boolean} [args.noUpdateBranch = false] - If true, does not update the branch pointer after creating the commit.
     * @param {string} [args.ref] - The fully expanded name of the branch to commit to. Default is the current branch pointed to by HEAD. (TODO: fix it so it can expand branch names without throwing if the branch doesn't exist yet.)
     * @param {string[]} [args.parent] - The SHA-1 object ids of the commits to use as parents. If not specified, the commit pointed to by `ref` is used.
     * @param {string} [args.tree] - The SHA-1 object id of the tree to use. If not specified, a new tree object is created from the current git index.
     * @param {object} [args.cache] - a [cache](cache.md) object
     *
     * @returns {Promise<string>} Resolves successfully with the SHA-1 object id of the newly created commit.
     *
     * @example
     * let sha = await git.commit({
     *   fs,
     *   dir: '/tutorial',
     *   author: {
     *     name: 'Mr. Test',
     *     email: 'mrtest@example.com',
     *   },
     *   message: 'Added the a.txt file'
     * })
     * console.log(sha)
     *
     */
    async function commit({
      fs: _fs,
      onSign,
      dir,
      gitdir = join(dir, '.git'),
      message,
      author: _author,
      committer: _committer,
      signingKey,
      dryRun = false,
      noUpdateBranch = false,
      ref,
      parent,
      tree,
      cache = {},
    }) {
      try {
        assertParameter('fs', _fs);
        assertParameter('message', message);
        if (signingKey) {
          assertParameter('onSign', onSign);
        }
        const fs = new FileSystem(_fs);

        const author = await normalizeAuthorObject({ fs, gitdir, author: _author });
        if (!author) throw new MissingNameError('author')

        const committer = await normalizeCommitterObject({
          fs,
          gitdir,
          author,
          committer: _committer,
        });
        if (!committer) throw new MissingNameError('committer')

        return await _commit({
          fs,
          cache,
          onSign,
          gitdir,
          message,
          author,
          committer,
          signingKey,
          dryRun,
          noUpdateBranch,
          ref,
          parent,
          tree,
        })
      } catch (err) {
        err.caller = 'git.commit';
        throw err
      }
    }

    // @ts-check

    /**
     * Get the name of the branch currently pointed to by .git/HEAD
     *
     * @param {Object} args
     * @param {FsClient} args.fs - a file system implementation
     * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path
     * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path
     * @param {boolean} [args.fullname = false] - Return the full path (e.g. "refs/heads/main") instead of the abbreviated form.
     * @param {boolean} [args.test = false] - If the current branch doesn't actually exist (such as right after git init) then return `undefined`.
     *
     * @returns {Promise<string|void>} The name of the current branch or undefined if the HEAD is detached.
     *
     * @example
     * // Get the current branch name
     * let branch = await git.currentBranch({
     *   fs,
     *   dir: '/tutorial',
     *   fullname: false
     * })
     * console.log(branch)
     *
     */
    async function currentBranch({
      fs,
      dir,
      gitdir = join(dir, '.git'),
      fullname = false,
      test = false,
    }) {
      try {
        assertParameter('fs', fs);
        assertParameter('gitdir', gitdir);
        return await _currentBranch({
          fs: new FileSystem(fs),
          gitdir,
          fullname,
          test,
        })
      } catch (err) {
        err.caller = 'git.currentBranch';
        throw err
      }
    }

    // @ts-check

    /**
     * @param {Object} args
     * @param {import('../models/FileSystem.js').FileSystem} args.fs
     * @param {string} args.gitdir
     * @param {string} args.ref
     *
     * @returns {Promise<void>}
     */
    async function _deleteBranch({ fs, gitdir, ref }) {
      ref = ref.startsWith('refs/heads/') ? ref : `refs/heads/${ref}`;
      const exist = await GitRefManager.exists({ fs, gitdir, ref });
      if (!exist) {
        throw new NotFoundError(ref)
      }

      const fullRef = await GitRefManager.expand({ fs, gitdir, ref });
      const currentRef = await _currentBranch({ fs, gitdir, fullname: true });
      if (fullRef === currentRef) {
        // detach HEAD
        const value = await GitRefManager.resolve({ fs, gitdir, ref: fullRef });
        await GitRefManager.writeRef({ fs, gitdir, ref: 'HEAD', value });
      }

      // Delete a specified branch
      await GitRefManager.deleteRef({ fs, gitdir, ref: fullRef });
    }

    // @ts-check

    /**
     * Delete a local branch
     *
     * > Note: This only deletes loose branches - it should be fixed in the future to delete packed branches as well.
     *
     * @param {Object} args
     * @param {FsClient} args.fs - a file system implementation
     * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path
     * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path
     * @param {string} args.ref - The branch to delete
     *
     * @returns {Promise<void>} Resolves successfully when filesystem operations are complete
     *
     * @example
     * await git.deleteBranch({ fs, dir: '/tutorial', ref: 'local-branch' })
     * console.log('done')
     *
     */
    async function deleteBranch({
      fs,
      dir,
      gitdir = join(dir, '.git'),
      ref,
    }) {
      try {
        assertParameter('fs', fs);
        assertParameter('ref', ref);
        return await _deleteBranch({
          fs: new FileSystem(fs),
          gitdir,
          ref,
        })
      } catch (err) {
        err.caller = 'git.deleteBranch';
        throw err
      }
    }

    // @ts-check

    /**
     * Delete a local ref
     *
     * @param {Object} args
     * @param {FsClient} args.fs - a file system implementation
     * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path
     * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path
     * @param {string} args.ref - The ref to delete
     *
     * @returns {Promise<void>} Resolves successfully when filesystem operations are complete
     *
     * @example
     * await git.deleteRef({ fs, dir: '/tutorial', ref: 'refs/tags/test-tag' })
     * console.log('done')
     *
     */
    async function deleteRef({ fs, dir, gitdir = join(dir, '.git'), ref }) {
      try {
        assertParameter('fs', fs);
        assertParameter('ref', ref);
        await GitRefManager.deleteRef({ fs: new FileSystem(fs), gitdir, ref });
      } catch (err) {
        err.caller = 'git.deleteRef';
        throw err
      }
    }

    // @ts-check

    /**
     * @param {Object} args
     * @param {import('../models/FileSystem.js').FileSystem} args.fs
     * @param {string} args.gitdir
     * @param {string} args.remote
     *
     * @returns {Promise<void>}
     */
    async function _deleteRemote({ fs, gitdir, remote }) {
      const config = await GitConfigManager.get({ fs, gitdir });
      await config.deleteSection('remote', remote);
      await GitConfigManager.save({ fs, gitdir, config });
    }

    // @ts-check

    /**
     * Removes the local config entry for a given remote
     *
     * @param {Object} args
     * @param {FsClient} args.fs - a file system implementation
     * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path
     * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path
     * @param {string} args.remote - The name of the remote to delete
     *
     * @returns {Promise<void>} Resolves successfully when filesystem operations are complete
     *
     * @example
     * await git.deleteRemote({ fs, dir: '/tutorial', remote: 'upstream' })
     * console.log('done')
     *
     */
    async function deleteRemote({
      fs,
      dir,
      gitdir = join(dir, '.git'),
      remote,
    }) {
      try {
        assertParameter('fs', fs);
        assertParameter('remote', remote);
        return await _deleteRemote({
          fs: new FileSystem(fs),
          gitdir,
          remote,
        })
      } catch (err) {
        err.caller = 'git.deleteRemote';
        throw err
      }
    }

    // @ts-check

    /**
     * Delete a local tag ref
     *
     * @param {Object} args
     * @param {import('../models/FileSystem.js').FileSystem} args.fs
     * @param {string} args.gitdir
     * @param {string} args.ref - The tag to delete
     *
     * @returns {Promise<void>} Resolves successfully when filesystem operations are complete
     *
     * @example
     * await git.deleteTag({ dir: '$input((/))', ref: '$input((test-tag))' })
     * console.log('done')
     *
     */
    async function _deleteTag({ fs, gitdir, ref }) {
      ref = ref.startsWith('refs/tags/') ? ref : `refs/tags/${ref}`;
      await GitRefManager.deleteRef({ fs, gitdir, ref });
    }

    // @ts-check

    /**
     * Delete a local tag ref
     *
     * @param {Object} args
     * @param {FsClient} args.fs - a file system implementation
     * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path
     * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path
     * @param {string} args.ref - The tag to delete
     *
     * @returns {Promise<void>} Resolves successfully when filesystem operations are complete
     *
     * @example
     * await git.deleteTag({ fs, dir: '/tutorial', ref: 'test-tag' })
     * console.log('done')
     *
     */
    async function deleteTag({ fs, dir, gitdir = join(dir, '.git'), ref }) {
      try {
        assertParameter('fs', fs);
        assertParameter('ref', ref);
        return await _deleteTag({
          fs: new FileSystem(fs),
          gitdir,
          ref,
        })
      } catch (err) {
        err.caller = 'git.deleteTag';
        throw err
      }
    }

    async function expandOidLoose({ fs, gitdir, oid: short }) {
      const prefix = short.slice(0, 2);
      const objectsSuffixes = await fs.readdir(`${gitdir}/objects/${prefix}`);
      return objectsSuffixes
        .map(suffix => `${prefix}${suffix}`)
        .filter(_oid => _oid.startsWith(short))
    }

    async function expandOidPacked({
      fs,
      cache,
      gitdir,
      oid: short,
      getExternalRefDelta,
    }) {
      // Iterate through all the .pack files
      const results = [];
      let list = await fs.readdir(join(gitdir, 'objects/pack'));
      list = list.filter(x => x.endsWith('.idx'));
      for (const filename of list) {
        const indexFile = `${gitdir}/objects/pack/${filename}`;
        const p = await readPackIndex({
          fs,
          cache,
          filename: indexFile,
          getExternalRefDelta,
        });
        if (p.error) throw new InternalError(p.error)
        // Search through the list of oids in the packfile
        for (const oid of p.offsets.keys()) {
          if (oid.startsWith(short)) results.push(oid);
        }
      }
      return results
    }

    async function _expandOid({ fs, cache, gitdir, oid: short }) {
      // Curry the current read method so that the packfile un-deltification
      // process can acquire external ref-deltas.
      const getExternalRefDelta = oid => _readObject({ fs, cache, gitdir, oid });

      const results1 = await expandOidLoose({ fs, gitdir, oid: short });
      const results2 = await expandOidPacked({
        fs,
        cache,
        gitdir,
        oid: short,
        getExternalRefDelta,
      });
      const results = results1.concat(results2);

      if (results.length === 1) {
        return results[0]
      }
      if (results.length > 1) {
        throw new AmbiguousError('oids', short, results)
      }
      throw new NotFoundError(`an object matching "${short}"`)
    }

    // @ts-check

    /**
     * Expand and resolve a short oid into a full oid
     *
     * @param {Object} args
     * @param {FsClient} args.fs - a file system implementation
     * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path
     * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path
     * @param {string} args.oid - The shortened oid prefix to expand (like "0414d2a")
     * @param {object} [args.cache] - a [cache](cache.md) object
     *
     * @returns {Promise<string>} Resolves successfully with the full oid (like "0414d2a286d7bbc7a4a326a61c1f9f888a8ab87f")
     *
     * @example
     * let oid = await git.expandOid({ fs, dir: '/tutorial', oid: '0414d2a'})
     * console.log(oid)
     *
     */
    async function expandOid({
      fs,
      dir,
      gitdir = join(dir, '.git'),
      oid,
      cache = {},
    }) {
      try {
        assertParameter('fs', fs);
        assertParameter('gitdir', gitdir);
        assertParameter('oid', oid);
        return await _expandOid({
          fs: new FileSystem(fs),
          cache,
          gitdir,
          oid,
        })
      } catch (err) {
        err.caller = 'git.expandOid';
        throw err
      }
    }

    // @ts-check

    /**
     * Expand an abbreviated ref to its full name
     *
     * @param {Object} args
     * @param {FsClient} args.fs - a file system implementation
     * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path
     * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path
     * @param {string} args.ref - The ref to expand (like "v1.0.0")
     *
     * @returns {Promise<string>} Resolves successfully with a full ref name ("refs/tags/v1.0.0")
     *
     * @example
     * let fullRef = await git.expandRef({ fs, dir: '/tutorial', ref: 'main'})
     * console.log(fullRef)
     *
     */
    async function expandRef({ fs, dir, gitdir = join(dir, '.git'), ref }) {
      try {
        assertParameter('fs', fs);
        assertParameter('gitdir', gitdir);
        assertParameter('ref', ref);
        return await GitRefManager.expand({
          fs: new FileSystem(fs),
          gitdir,
          ref,
        })
      } catch (err) {
        err.caller = 'git.expandRef';
        throw err
      }
    }

    // @ts-check

    /**
     * @param {object} args
     * @param {import('../models/FileSystem.js').FileSystem} args.fs
     * @param {any} args.cache
     * @param {string} args.gitdir
     * @param {string[]} args.oids
     *
     */
    async function _findMergeBase({ fs, cache, gitdir, oids }) {
      // Note: right now, the tests are geared so that the output should match that of
      // `git merge-base --all --octopus`
      // because without the --octopus flag, git's output seems to depend on the ORDER of the oids,
      // and computing virtual merge bases is just too much for me to fathom right now.

      // If we start N independent walkers, one at each of the given `oids`, and walk backwards
      // through ancestors, eventually we'll discover a commit where each one of these N walkers
      // has passed through. So we just need to keep track of which walkers have visited each commit
      // until we find a commit that N distinct walkers has visited.
      const visits = {};
      const passes = oids.length;
      let heads = oids.map((oid, index) => ({ index, oid }));
      while (heads.length) {
        // Count how many times we've passed each commit
        const result = new Set();
        for (const { oid, index } of heads) {
          if (!visits[oid]) visits[oid] = new Set();
          visits[oid].add(index);
          if (visits[oid].size === passes) {
            result.add(oid);
          }
        }
        if (result.size > 0) {
          return [...result]
        }
        // We haven't found a common ancestor yet
        const newheads = new Map();
        for (const { oid, index } of heads) {
          try {
            const { object } = await _readObject({ fs, cache, gitdir, oid });
            const commit = GitCommit.from(object);
            const { parent } = commit.parseHeaders();
            for (const oid of parent) {
              if (!visits[oid] || !visits[oid].has(index)) {
                newheads.set(oid + ':' + index, { oid, index });
              }
            }
          } catch (err) {
            // do nothing
          }
        }
        heads = Array.from(newheads.values());
      }
      return []
    }

    const LINEBREAKS = /^.*(\r?\n|$)/gm;

    function mergeFile({ branches, contents }) {
      const ourName = branches[1];
      const theirName = branches[2];

      const baseContent = contents[0];
      const ourContent = contents[1];
      const theirContent = contents[2];

      const ours = ourContent.match(LINEBREAKS);
      const base = baseContent.match(LINEBREAKS);
      const theirs = theirContent.match(LINEBREAKS);

      // Here we let the diff3 library do the heavy lifting.
      const result = diff3(ours, base, theirs);

      const markerSize = 7;

      // Here we note whether there are conflicts and format the results
      let mergedText = '';
      let cleanMerge = true;

      for (const item of result) {
        if (item.ok) {
          mergedText += item.ok.join('');
        }
        if (item.conflict) {
          cleanMerge = false;
          mergedText += `${'<'.repeat(markerSize)} ${ourName}\n`;
          mergedText += item.conflict.a.join('');

          mergedText += `${'='.repeat(markerSize)}\n`;
          mergedText += item.conflict.b.join('');
          mergedText += `${'>'.repeat(markerSize)} ${theirName}\n`;
        }
      }
      return { cleanMerge, mergedText }
    }

    // @ts-check

    /**
     * Create a merged tree
     *
     * @param {Object} args
     * @param {import('../models/FileSystem.js').FileSystem} args.fs
     * @param {object} args.cache
     * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path
     * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path
     * @param {string} args.ourOid - The SHA-1 object id of our tree
     * @param {string} args.baseOid - The SHA-1 object id of the base tree
     * @param {string} args.theirOid - The SHA-1 object id of their tree
     * @param {string} [args.ourName='ours'] - The name to use in conflicted files for our hunks
     * @param {string} [args.baseName='base'] - The name to use in conflicted files (in diff3 format) for the base hunks
     * @param {string} [args.theirName='theirs'] - The name to use in conflicted files for their hunks
     * @param {boolean} [args.dryRun=false]
     * @param {boolean} [args.abortOnConflict=false]
     * @param {MergeDriverCallback} [args.mergeDriver]
     *
     * @returns {Promise<string>} - The SHA-1 object id of the merged tree
     *
     */
    async function mergeTree({
      fs,
      cache,
      dir,
      gitdir = join(dir, '.git'),
      index,
      ourOid,
      baseOid,
      theirOid,
      ourName = 'ours',
      baseName = 'base',
      theirName = 'theirs',
      dryRun = false,
      abortOnConflict = true,
      mergeDriver,
    }) {
      const ourTree = TREE({ ref: ourOid });
      const baseTree = TREE({ ref: baseOid });
      const theirTree = TREE({ ref: theirOid });

      const unmergedFiles = [];

      const results = await _walk({
        fs,
        cache,
        dir,
        gitdir,
        trees: [ourTree, baseTree, theirTree],
        map: async function(filepath, [ours, base, theirs]) {
          const path = basename(filepath);
          // What we did, what they did
          const ourChange = await modified(ours, base);
          const theirChange = await modified(theirs, base);
          switch (`${ourChange}-${theirChange}`) {
            case 'false-false': {
              return {
                mode: await base.mode(),
                path,
                oid: await base.oid(),
                type: await base.type(),
              }
            }
            case 'false-true': {
              return theirs
                ? {
                    mode: await theirs.mode(),
                    path,
                    oid: await theirs.oid(),
                    type: await theirs.type(),
                  }
                : undefined
            }
            case 'true-false': {
              return ours
                ? {
                    mode: await ours.mode(),
                    path,
                    oid: await ours.oid(),
                    type: await ours.type(),
                  }
                : undefined
            }
            case 'true-true': {
              // Modifications
              if (
                ours &&
                base &&
                theirs &&
                (await ours.type()) === 'blob' &&
                (await base.type()) === 'blob' &&
                (await theirs.type()) === 'blob'
              ) {
                return mergeBlobs({
                  fs,
                  gitdir,
                  path,
                  ours,
                  base,
                  theirs,
                  ourName,
                  baseName,
                  theirName,
                  mergeDriver,
                }).then(async r => {
                  if (!r.cleanMerge) {
                    unmergedFiles.push(filepath);
                    if (!abortOnConflict) {
                      const baseOid = await base.oid();
                      const ourOid = await ours.oid();
                      const theirOid = await theirs.oid();

                      index.delete({ filepath });

                      index.insert({ filepath, oid: baseOid, stage: 1 });
                      index.insert({ filepath, oid: ourOid, stage: 2 });
                      index.insert({ filepath, oid: theirOid, stage: 3 });
                    }
                  } else if (!abortOnConflict) {
                    index.insert({ filepath, oid: r.mergeResult.oid, stage: 0 });
                  }
                  return r.mergeResult
                })
              }
              // all other types of conflicts fail
              // TODO: Merge conflicts involving deletions/additions
              throw new MergeNotSupportedError()
            }
          }
        },
        /**
         * @param {TreeEntry} [parent]
         * @param {Array<TreeEntry>} children
         */
        reduce:
          unmergedFiles.length !== 0 && (!dir || abortOnConflict)
            ? undefined
            : async (parent, children) => {
                const entries = children.filter(Boolean); // remove undefineds

                // if the parent was deleted, the children have to go
                if (!parent) return

                // automatically delete directories if they have been emptied
                if (parent && parent.type === 'tree' && entries.length === 0) return

                if (entries.length > 0) {
                  const tree = new GitTree(entries);
                  const object = tree.toObject();
                  const oid = await _writeObject({
                    fs,
                    gitdir,
                    type: 'tree',
                    object,
                    dryRun,
                  });
                  parent.oid = oid;
                }
                return parent
              },
      });

      if (unmergedFiles.length !== 0) {
        if (dir && !abortOnConflict) {
          await _walk({
            fs,
            cache,
            dir,
            gitdir,
            trees: [TREE({ ref: results.oid })],
            map: async function(filepath, [entry]) {
              const path = `${dir}/${filepath}`;
              if ((await entry.type()) === 'blob') {
                const mode = await entry.mode();
                const content = new TextDecoder().decode(await entry.content());
                await fs.write(path, content, { mode });
              }
              return true
            },
          });
        }
        return new MergeConflictError(unmergedFiles)
      }

      return results.oid
    }

    /**
     *
     * @param {Object} args
     * @param {import('../models/FileSystem').FileSystem} args.fs
     * @param {string} args.gitdir
     * @param {string} args.path
     * @param {WalkerEntry} args.ours
     * @param {WalkerEntry} args.base
     * @param {WalkerEntry} args.theirs
     * @param {string} [args.ourName]
     * @param {string} [args.baseName]
     * @param {string} [args.theirName]
     * @param {boolean} [args.dryRun = false]
     * @param {MergeDriverCallback} [args.mergeDriver]
     *
     */
    async function mergeBlobs({
      fs,
      gitdir,
      path,
      ours,
      base,
      theirs,
      ourName,
      theirName,
      baseName,
      dryRun,
      mergeDriver = mergeFile,
    }) {
      const type = 'blob';
      // Compute the new mode.
      // Since there are ONLY two valid blob modes ('100755' and '100644') it boils down to this
      const mode =
        (await base.mode()) === (await ours.mode())
          ? await theirs.mode()
          : await ours.mode();
      // The trivial case: nothing to merge except maybe mode
      if ((await ours.oid()) === (await theirs.oid())) {
        return {
          cleanMerge: true,
          mergeResult: { mode, path, oid: await ours.oid(), type },
        }
      }
      // if only one side made oid changes, return that side's oid
      if ((await ours.oid()) === (await base.oid())) {
        return {
          cleanMerge: true,
          mergeResult: { mode, path, oid: await theirs.oid(), type },
        }
      }
      if ((await theirs.oid()) === (await base.oid())) {
        return {
          cleanMerge: true,
          mergeResult: { mode, path, oid: await ours.oid(), type },
        }
      }
      // if both sides made changes do a merge
      const ourContent = Buffer.from(await ours.content()).toString('utf8');
      const baseContent = Buffer.from(await base.content()).toString('utf8');
      const theirContent = Buffer.from(await theirs.content()).toString('utf8');
      const { mergedText, cleanMerge } = await mergeDriver({
        branches: [baseName, ourName, theirName],
        contents: [baseContent, ourContent, theirContent],
        path,
      });
      const oid = await _writeObject({
        fs,
        gitdir,
        type: 'blob',
        object: Buffer.from(mergedText, 'utf8'),
        dryRun,
      });

      return { cleanMerge, mergeResult: { mode, path, oid, type } }
    }

    // @ts-check

    // import diff3 from 'node-diff3'
    /**
     *
     * @typedef {Object} MergeResult - Returns an object with a schema like this:
     * @property {string} [oid] - The SHA-1 object id that is now at the head of the branch. Absent only if `dryRun` was specified and `mergeCommit` is true.
     * @property {boolean} [alreadyMerged] - True if the branch was already merged so no changes were made
     * @property {boolean} [fastForward] - True if it was a fast-forward merge
     * @property {boolean} [mergeCommit] - True if merge resulted in a merge commit
     * @property {string} [tree] - The SHA-1 object id of the tree resulting from a merge commit
     *
     */

    /**
     * @param {object} args
     * @param {import('../models/FileSystem.js').FileSystem} args.fs
     * @param {object} args.cache
     * @param {string} args.gitdir
     * @param {string} [args.ours]
     * @param {string} args.theirs
     * @param {boolean} args.fastForward
     * @param {boolean} args.fastForwardOnly
     * @param {boolean} args.dryRun
     * @param {boolean} args.noUpdateBranch
     * @param {boolean} args.abortOnConflict
     * @param {string} [args.message]
     * @param {Object} args.author
     * @param {string} args.author.name
     * @param {string} args.author.email
     * @param {number} args.author.timestamp
     * @param {number} args.author.timezoneOffset
     * @param {Object} args.committer
     * @param {string} args.committer.name
     * @param {string} args.committer.email
     * @param {number} args.committer.timestamp
     * @param {number} args.committer.timezoneOffset
     * @param {string} [args.signingKey]
     * @param {SignCallback} [args.onSign] - a PGP signing implementation
     * @param {MergeDriverCallback} [args.mergeDriver]
     *
     * @returns {Promise<MergeResult>} Resolves to a description of the merge operation
     *
     */
    async function _merge({
      fs,
      cache,
      dir,
      gitdir,
      ours,
      theirs,
      fastForward = true,
      fastForwardOnly = false,
      dryRun = false,
      noUpdateBranch = false,
      abortOnConflict = true,
      message,
      author,
      committer,
      signingKey,
      onSign,
      mergeDriver,
    }) {
      if (ours === undefined) {
        ours = await _currentBranch({ fs, gitdir, fullname: true });
      }
      ours = await GitRefManager.expand({
        fs,
        gitdir,
        ref: ours,
      });
      theirs = await GitRefManager.expand({
        fs,
        gitdir,
        ref: theirs,
      });
      const ourOid = await GitRefManager.resolve({
        fs,
        gitdir,
        ref: ours,
      });
      const theirOid = await GitRefManager.resolve({
        fs,
        gitdir,
        ref: theirs,
      });
      // find most recent common ancestor of ref a and ref b
      const baseOids = await _findMergeBase({
        fs,
        cache,
        gitdir,
        oids: [ourOid, theirOid],
      });
      if (baseOids.length !== 1) {
        // TODO: Recursive Merge strategy
        throw new MergeNotSupportedError()
      }
      const baseOid = baseOids[0];
      // handle fast-forward case
      if (baseOid === theirOid) {
        return {
          oid: ourOid,
          alreadyMerged: true,
        }
      }
      if (fastForward && baseOid === ourOid) {
        if (!dryRun && !noUpdateBranch) {
          await GitRefManager.writeRef({ fs, gitdir, ref: ours, value: theirOid });
        }
        return {
          oid: theirOid,
          fastForward: true,
        }
      } else {
        // not a simple fast-forward
        if (fastForwardOnly) {
          throw new FastForwardError()
        }
        // try a fancier merge
        const tree = await GitIndexManager.acquire(
          { fs, gitdir, cache, allowUnmerged: false },
          async index => {
            return mergeTree({
              fs,
              cache,
              dir,
              gitdir,
              index,
              ourOid,
              theirOid,
              baseOid,
              ourName: abbreviateRef(ours),
              baseName: 'base',
              theirName: abbreviateRef(theirs),
              dryRun,
              abortOnConflict,
              mergeDriver,
            })
          }
        );

        // Defer throwing error until the index lock is relinquished and index is
        // written to filsesystem
        if (tree instanceof MergeConflictError) throw tree

        if (!message) {
          message = `Merge branch '${abbreviateRef(theirs)}' into ${abbreviateRef(
        ours
      )}`;
        }
        const oid = await _commit({
          fs,
          cache,
          gitdir,
          message,
          ref: ours,
          tree,
          parent: [ourOid, theirOid],
          author,
          committer,
          signingKey,
          onSign,
          dryRun,
          noUpdateBranch,
        });
        return {
          oid,
          tree,
          mergeCommit: true,
        }
      }
    }

    // @ts-check

    /**
     * @param {object} args
     * @param {import('../models/FileSystem.js').FileSystem} args.fs
     * @param {object} args.cache
     * @param {HttpClient} args.http
     * @param {ProgressCallback} [args.onProgress]
     * @param {MessageCallback} [args.onMessage]
     * @param {AuthCallback} [args.onAuth]
     * @param {AuthFailureCallback} [args.onAuthFailure]
     * @param {AuthSuccessCallback} [args.onAuthSuccess]
     * @param {string} args.dir
     * @param {string} args.gitdir
     * @param {string} args.ref
     * @param {string} [args.url]
     * @param {string} [args.remote]
     * @param {string} [args.remoteRef]
     * @param {boolean} [args.prune]
     * @param {boolean} [args.pruneTags]
     * @param {string} [args.corsProxy]
     * @param {boolean} args.singleBranch
     * @param {boolean} args.fastForward
     * @param {boolean} args.fastForwardOnly
     * @param {Object<string, string>} [args.headers]
     * @param {Object} args.author
     * @param {string} args.author.name
     * @param {string} args.author.email
     * @param {number} args.author.timestamp
     * @param {number} args.author.timezoneOffset
     * @param {Object} args.committer
     * @param {string} args.committer.name
     * @param {string} args.committer.email
     * @param {number} args.committer.timestamp
     * @param {number} args.committer.timezoneOffset
     * @param {string} [args.signingKey]
     *
     * @returns {Promise<void>} Resolves successfully when pull operation completes
     *
     */
    async function _pull({
      fs,
      cache,
      http,
      onProgress,
      onMessage,
      onAuth,
      onAuthSuccess,
      onAuthFailure,
      dir,
      gitdir,
      ref,
      url,
      remote,
      remoteRef,
      prune,
      pruneTags,
      fastForward,
      fastForwardOnly,
      corsProxy,
      singleBranch,
      headers,
      author,
      committer,
      signingKey,
    }) {
      try {
        // If ref is undefined, use 'HEAD'
        if (!ref) {
          const head = await _currentBranch({ fs, gitdir });
          // TODO: use a better error.
          if (!head) {
            throw new MissingParameterError('ref')
          }
          ref = head;
        }

        const { fetchHead, fetchHeadDescription } = await _fetch({
          fs,
          cache,
          http,
          onProgress,
          onMessage,
          onAuth,
          onAuthSuccess,
          onAuthFailure,
          gitdir,
          corsProxy,
          ref,
          url,
          remote,
          remoteRef,
          singleBranch,
          headers,
          prune,
          pruneTags,
        });
        // Merge the remote tracking branch into the local one.
        await _merge({
          fs,
          cache,
          gitdir,
          ours: ref,
          theirs: fetchHead,
          fastForward,
          fastForwardOnly,
          message: `Merge ${fetchHeadDescription}`,
          author,
          committer,
          signingKey,
          dryRun: false,
          noUpdateBranch: false,
        });
        await _checkout({
          fs,
          cache,
          onProgress,
          dir,
          gitdir,
          ref,
          remote,
          noCheckout: false,
        });
      } catch (err) {
        err.caller = 'git.pull';
        throw err
      }
    }

    // @ts-check

    /**
     * Like `pull`, but hard-coded with `fastForward: true` so there is no need for an `author` parameter.
     *
     * @param {object} args
     * @param {FsClient} args.fs - a file system client
     * @param {HttpClient} args.http - an HTTP client
     * @param {ProgressCallback} [args.onProgress] - optional progress event callback
     * @param {MessageCallback} [args.onMessage] - optional message event callback
     * @param {AuthCallback} [args.onAuth] - optional auth fill callback
     * @param {AuthFailureCallback} [args.onAuthFailure] - optional auth rejected callback
     * @param {AuthSuccessCallback} [args.onAuthSuccess] - optional auth approved callback
     * @param {string} args.dir] - The [working tree](dir-vs-gitdir.md) directory path
     * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path
     * @param {string} [args.ref] - Which branch to merge into. By default this is the currently checked out branch.
     * @param {string} [args.url] - (Added in 1.1.0) The URL of the remote repository. The default is the value set in the git config for that remote.
     * @param {string} [args.remote] - (Added in 1.1.0) If URL is not specified, determines which remote to use.
     * @param {string} [args.remoteRef] - (Added in 1.1.0) The name of the branch on the remote to fetch. By default this is the configured remote tracking branch.
     * @param {string} [args.corsProxy] - Optional [CORS proxy](https://www.npmjs.com/%40isomorphic-git/cors-proxy). Overrides value in repo config.
     * @param {boolean} [args.singleBranch = false] - Instead of the default behavior of fetching all the branches, only fetch a single branch.
     * @param {Object<string, string>} [args.headers] - Additional headers to include in HTTP requests, similar to git's `extraHeader` config
     * @param {object} [args.cache] - a [cache](cache.md) object
     *
     * @returns {Promise<void>} Resolves successfully when pull operation completes
     *
     * @example
     * await git.fastForward({
     *   fs,
     *   http,
     *   dir: '/tutorial',
     *   ref: 'main',
     *   singleBranch: true
     * })
     * console.log('done')
     *
     */
    async function fastForward({
      fs,
      http,
      onProgress,
      onMessage,
      onAuth,
      onAuthSuccess,
      onAuthFailure,
      dir,
      gitdir = join(dir, '.git'),
      ref,
      url,
      remote,
      remoteRef,
      corsProxy,
      singleBranch,
      headers = {},
      cache = {},
    }) {
      try {
        assertParameter('fs', fs);
        assertParameter('http', http);
        assertParameter('gitdir', gitdir);

        const thisWillNotBeUsed = {
          name: '',
          email: '',
          timestamp: Date.now(),
          timezoneOffset: 0,
        };

        return await _pull({
          fs: new FileSystem(fs),
          cache,
          http,
          onProgress,
          onMessage,
          onAuth,
          onAuthSuccess,
          onAuthFailure,
          dir,
          gitdir,
          ref,
          url,
          remote,
          remoteRef,
          fastForwardOnly: true,
          corsProxy,
          singleBranch,
          headers,
          author: thisWillNotBeUsed,
          committer: thisWillNotBeUsed,
        })
      } catch (err) {
        err.caller = 'git.fastForward';
        throw err
      }
    }

    // @ts-check

    /**
     *
     * @typedef {object} FetchResult - The object returned has the following schema:
     * @property {string | null} defaultBranch - The branch that is cloned if no branch is specified
     * @property {string | null} fetchHead - The SHA-1 object id of the fetched head commit
     * @property {string | null} fetchHeadDescription - a textual description of the branch that was fetched
     * @property {Object<string, string>} [headers] - The HTTP response headers returned by the git server
     * @property {string[]} [pruned] - A list of branches that were pruned, if you provided the `prune` parameter
     *
     */

    /**
     * Fetch commits from a remote repository
     *
     * @param {object} args
     * @param {FsClient} args.fs - a file system client
     * @param {HttpClient} args.http - an HTTP client
     * @param {ProgressCallback} [args.onProgress] - optional progress event callback
     * @param {MessageCallback} [args.onMessage] - optional message event callback
     * @param {AuthCallback} [args.onAuth] - optional auth fill callback
     * @param {AuthFailureCallback} [args.onAuthFailure] - optional auth rejected callback
     * @param {AuthSuccessCallback} [args.onAuthSuccess] - optional auth approved callback
     * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path
     * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path
     * @param {string} [args.url] - The URL of the remote repository. The default is the value set in the git config for that remote.
     * @param {string} [args.remote] - If URL is not specified, determines which remote to use.
     * @param {boolean} [args.singleBranch = false] - Instead of the default behavior of fetching all the branches, only fetch a single branch.
     * @param {string} [args.ref] - Which branch to fetch if `singleBranch` is true. By default this is the current branch or the remote's default branch.
     * @param {string} [args.remoteRef] - The name of the branch on the remote to fetch if `singleBranch` is true. By default this is the configured remote tracking branch.
     * @param {boolean} [args.tags = false] - Also fetch tags
     * @param {number} [args.depth] - Integer. Determines how much of the git repository's history to retrieve
     * @param {boolean} [args.relative = false] - Changes the meaning of `depth` to be measured from the current shallow depth rather than from the branch tip.
     * @param {Date} [args.since] - Only fetch commits created after the given date. Mutually exclusive with `depth`.
     * @param {string[]} [args.exclude = []] - A list of branches or tags. Instructs the remote server not to send us any commits reachable from these refs.
     * @param {boolean} [args.prune = false] - Delete local remote-tracking branches that are not present on the remote
     * @param {boolean} [args.pruneTags = false] - Prune local tags that don’t exist on the remote, and force-update those tags that differ
     * @param {string} [args.corsProxy] - Optional [CORS proxy](https://www.npmjs.com/%40isomorphic-git/cors-proxy). Overrides value in repo config.
     * @param {Object<string, string>} [args.headers] - Additional headers to include in HTTP requests, similar to git's `extraHeader` config
     * @param {object} [args.cache] - a [cache](cache.md) object
     *
     * @returns {Promise<FetchResult>} Resolves successfully when fetch completes
     * @see FetchResult
     *
     * @example
     * let result = await git.fetch({
     *   fs,
     *   http,
     *   dir: '/tutorial',
     *   corsProxy: 'https://cors.isomorphic-git.org',
     *   url: 'https://github.com/isomorphic-git/isomorphic-git',
     *   ref: 'main',
     *   depth: 1,
     *   singleBranch: true,
     *   tags: false
     * })
     * console.log(result)
     *
     */
    async function fetch$1({
      fs,
      http,
      onProgress,
      onMessage,
      onAuth,
      onAuthSuccess,
      onAuthFailure,
      dir,
      gitdir = join(dir, '.git'),
      ref,
      remote,
      remoteRef,
      url,
      corsProxy,
      depth = null,
      since = null,
      exclude = [],
      relative = false,
      tags = false,
      singleBranch = false,
      headers = {},
      prune = false,
      pruneTags = false,
      cache = {},
    }) {
      try {
        assertParameter('fs', fs);
        assertParameter('http', http);
        assertParameter('gitdir', gitdir);

        return await _fetch({
          fs: new FileSystem(fs),
          cache,
          http,
          onProgress,
          onMessage,
          onAuth,
          onAuthSuccess,
          onAuthFailure,
          gitdir,
          ref,
          remote,
          remoteRef,
          url,
          corsProxy,
          depth,
          since,
          exclude,
          relative,
          tags,
          singleBranch,
          headers,
          prune,
          pruneTags,
        })
      } catch (err) {
        err.caller = 'git.fetch';
        throw err
      }
    }

    // @ts-check

    /**
     * Find the merge base for a set of commits
     *
     * @param {object} args
     * @param {FsClient} args.fs - a file system client
     * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path
     * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path
     * @param {string[]} args.oids - Which commits
     * @param {object} [args.cache] - a [cache](cache.md) object
     *
     */
    async function findMergeBase({
      fs,
      dir,
      gitdir = join(dir, '.git'),
      oids,
      cache = {},
    }) {
      try {
        assertParameter('fs', fs);
        assertParameter('gitdir', gitdir);
        assertParameter('oids', oids);

        return await _findMergeBase({
          fs: new FileSystem(fs),
          cache,
          gitdir,
          oids,
        })
      } catch (err) {
        err.caller = 'git.findMergeBase';
        throw err
      }
    }

    // @ts-check

    /**
     * Find the root git directory
     *
     * Starting at `filepath`, walks upward until it finds a directory that contains a subdirectory called '.git'.
     *
     * @param {Object} args
     * @param {import('../models/FileSystem.js').FileSystem} args.fs
     * @param {string} args.filepath
     *
     * @returns {Promise<string>} Resolves successfully with a root git directory path
     */
    async function _findRoot({ fs, filepath }) {
      if (await fs.exists(join(filepath, '.git'))) {
        return filepath
      } else {
        const parent = dirname(filepath);
        if (parent === filepath) {
          throw new NotFoundError(`git root for ${filepath}`)
        }
        return _findRoot({ fs, filepath: parent })
      }
    }

    // @ts-check

    /**
     * Find the root git directory
     *
     * Starting at `filepath`, walks upward until it finds a directory that contains a subdirectory called '.git'.
     *
     * @param {Object} args
     * @param {FsClient} args.fs - a file system client
     * @param {string} args.filepath - The file directory to start searching in.
     *
     * @returns {Promise<string>} Resolves successfully with a root git directory path
     * @throws {NotFoundError}
     *
     * @example
     * let gitroot = await git.findRoot({
     *   fs,
     *   filepath: '/tutorial/src/utils'
     * })
     * console.log(gitroot)
     *
     */
    async function findRoot({ fs, filepath }) {
      try {
        assertParameter('fs', fs);
        assertParameter('filepath', filepath);

        return await _findRoot({ fs: new FileSystem(fs), filepath })
      } catch (err) {
        err.caller = 'git.findRoot';
        throw err
      }
    }

    // @ts-check

    /**
     * Read an entry from the git config files.
     *
     * *Caveats:*
     * - Currently only the local `$GIT_DIR/config` file can be read or written. However support for the global `~/.gitconfig` and system `$(prefix)/etc/gitconfig` will be added in the future.
     * - The current parser does not support the more exotic features of the git-config file format such as `[include]` and `[includeIf]`.
     *
     * @param {Object} args
     * @param {FsClient} args.fs - a file system implementation
     * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path
     * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path
     * @param {string} args.path - The key of the git config entry
     *
     * @returns {Promise<any>} Resolves with the config value
     *
     * @example
     * // Read config value
     * let value = await git.getConfig({
     *   fs,
     *   dir: '/tutorial',
     *   path: 'remote.origin.url'
     * })
     * console.log(value)
     *
     */
    async function getConfig({ fs, dir, gitdir = join(dir, '.git'), path }) {
      try {
        assertParameter('fs', fs);
        assertParameter('gitdir', gitdir);
        assertParameter('path', path);

        return await _getConfig({
          fs: new FileSystem(fs),
          gitdir,
          path,
        })
      } catch (err) {
        err.caller = 'git.getConfig';
        throw err
      }
    }

    // @ts-check

    /**
     * @param {Object} args
     * @param {import('../models/FileSystem.js').FileSystem} args.fs
     * @param {string} args.gitdir
     * @param {string} args.path
     *
     * @returns {Promise<Array<any>>} Resolves with an array of the config value
     *
     */
    async function _getConfigAll({ fs, gitdir, path }) {
      const config = await GitConfigManager.get({ fs, gitdir });
      return config.getall(path)
    }

    // @ts-check

    /**
     * Read a multi-valued entry from the git config files.
     *
     * *Caveats:*
     * - Currently only the local `$GIT_DIR/config` file can be read or written. However support for the global `~/.gitconfig` and system `$(prefix)/etc/gitconfig` will be added in the future.
     * - The current parser does not support the more exotic features of the git-config file format such as `[include]` and `[includeIf]`.
     *
     * @param {Object} args
     * @param {FsClient} args.fs - a file system implementation
     * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path
     * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path
     * @param {string} args.path - The key of the git config entry
     *
     * @returns {Promise<Array<any>>} Resolves with the config value
     *
     */
    async function getConfigAll({
      fs,
      dir,
      gitdir = join(dir, '.git'),
      path,
    }) {
      try {
        assertParameter('fs', fs);
        assertParameter('gitdir', gitdir);
        assertParameter('path', path);

        return await _getConfigAll({
          fs: new FileSystem(fs),
          gitdir,
          path,
        })
      } catch (err) {
        err.caller = 'git.getConfigAll';
        throw err
      }
    }

    // @ts-check

    /**
     *
     * @typedef {Object} GetRemoteInfoResult - The object returned has the following schema:
     * @property {string[]} capabilities - The list of capabilities returned by the server (part of the Git protocol)
     * @property {Object} [refs]
     * @property {string} [HEAD] - The default branch of the remote
     * @property {Object<string, string>} [refs.heads] - The branches on the remote
     * @property {Object<string, string>} [refs.pull] - The special branches representing pull requests (non-standard)
     * @property {Object<string, string>} [refs.tags] - The tags on the remote
     *
     */

    /**
     * List a remote servers branches, tags, and capabilities.
     *
     * This is a rare command that doesn't require an `fs`, `dir`, or even `gitdir` argument.
     * It just communicates to a remote git server, using the first step of the `git-upload-pack` handshake, but stopping short of fetching the packfile.
     *
     * @param {object} args
     * @param {HttpClient} args.http - an HTTP client
     * @param {AuthCallback} [args.onAuth] - optional auth fill callback
     * @param {AuthFailureCallback} [args.onAuthFailure] - optional auth rejected callback
     * @param {AuthSuccessCallback} [args.onAuthSuccess] - optional auth approved callback
     * @param {string} args.url - The URL of the remote repository. Will be gotten from gitconfig if absent.
     * @param {string} [args.corsProxy] - Optional [CORS proxy](https://www.npmjs.com/%40isomorphic-git/cors-proxy). Overrides value in repo config.
     * @param {boolean} [args.forPush = false] - By default, the command queries the 'fetch' capabilities. If true, it will ask for the 'push' capabilities.
     * @param {Object<string, string>} [args.headers] - Additional headers to include in HTTP requests, similar to git's `extraHeader` config
     *
     * @returns {Promise<GetRemoteInfoResult>} Resolves successfully with an object listing the branches, tags, and capabilities of the remote.
     * @see GetRemoteInfoResult
     *
     * @example
     * let info = await git.getRemoteInfo({
     *   http,
     *   url:
     *     "https://cors.isomorphic-git.org/github.com/isomorphic-git/isomorphic-git.git"
     * });
     * console.log(info);
     *
     */
    async function getRemoteInfo({
      http,
      onAuth,
      onAuthSuccess,
      onAuthFailure,
      corsProxy,
      url,
      headers = {},
      forPush = false,
    }) {
      try {
        assertParameter('http', http);
        assertParameter('url', url);

        const GitRemoteHTTP = GitRemoteManager.getRemoteHelperFor({ url });
        const remote = await GitRemoteHTTP.discover({
          http,
          onAuth,
          onAuthSuccess,
          onAuthFailure,
          corsProxy,
          service: forPush ? 'git-receive-pack' : 'git-upload-pack',
          url,
          headers,
          protocolVersion: 1,
        });

        // Note: remote.capabilities, remote.refs, and remote.symrefs are Set and Map objects,
        // but one of the objectives of the public API is to always return JSON-compatible objects
        // so we must JSONify them.
        const result = {
          capabilities: [...remote.capabilities],
        };
        // Convert the flat list into an object tree, because I figure 99% of the time
        // that will be easier to use.
        for (const [ref, oid] of remote.refs) {
          const parts = ref.split('/');
          const last = parts.pop();
          let o = result;
          for (const part of parts) {
            o[part] = o[part] || {};
            o = o[part];
          }
          o[last] = oid;
        }
        // Merge symrefs on top of refs to more closely match actual git repo layouts
        for (const [symref, ref] of remote.symrefs) {
          const parts = symref.split('/');
          const last = parts.pop();
          let o = result;
          for (const part of parts) {
            o[part] = o[part] || {};
            o = o[part];
          }
          o[last] = ref;
        }
        return result
      } catch (err) {
        err.caller = 'git.getRemoteInfo';
        throw err
      }
    }

    // @ts-check

    /**
     * @param {any} remote
     * @param {string} prefix
     * @param {boolean} symrefs
     * @param {boolean} peelTags
     * @returns {ServerRef[]}
     */
    function formatInfoRefs(remote, prefix, symrefs, peelTags) {
      const refs = [];
      for (const [key, value] of remote.refs) {
        if (prefix && !key.startsWith(prefix)) continue

        if (key.endsWith('^{}')) {
          if (peelTags) {
            const _key = key.replace('^{}', '');
            // Peeled tags are almost always listed immediately after the original tag
            const last = refs[refs.length - 1];
            const r = last.ref === _key ? last : refs.find(x => x.ref === _key);
            if (r === undefined) {
              throw new Error('I did not expect this to happen')
            }
            r.peeled = value;
          }
          continue
        }
        /** @type ServerRef */
        const ref = { ref: key, oid: value };
        if (symrefs) {
          if (remote.symrefs.has(key)) {
            ref.target = remote.symrefs.get(key);
          }
        }
        refs.push(ref);
      }
      return refs
    }

    // @ts-check

    /**
     * @typedef {Object} GetRemoteInfo2Result - This object has the following schema:
     * @property {1 | 2} protocolVersion - Git protocol version the server supports
     * @property {Object<string, string | true>} capabilities - An object of capabilities represented as keys and values
     * @property {ServerRef[]} [refs] - Server refs (they get returned by protocol version 1 whether you want them or not)
     */

    /**
     * List a remote server's capabilities.
     *
     * This is a rare command that doesn't require an `fs`, `dir`, or even `gitdir` argument.
     * It just communicates to a remote git server, determining what protocol version, commands, and features it supports.
     *
     * > The successor to [`getRemoteInfo`](./getRemoteInfo.md), this command supports Git Wire Protocol Version 2.
     * > Therefore its return type is more complicated as either:
     * >
     * > - v1 capabilities (and refs) or
     * > - v2 capabilities (and no refs)
     * >
     * > are returned.
     * > If you just care about refs, use [`listServerRefs`](./listServerRefs.md)
     *
     * @param {object} args
     * @param {HttpClient} args.http - an HTTP client
     * @param {AuthCallback} [args.onAuth] - optional auth fill callback
     * @param {AuthFailureCallback} [args.onAuthFailure] - optional auth rejected callback
     * @param {AuthSuccessCallback} [args.onAuthSuccess] - optional auth approved callback
     * @param {string} args.url - The URL of the remote repository. Will be gotten from gitconfig if absent.
     * @param {string} [args.corsProxy] - Optional [CORS proxy](https://www.npmjs.com/%40isomorphic-git/cors-proxy). Overrides value in repo config.
     * @param {boolean} [args.forPush = false] - By default, the command queries the 'fetch' capabilities. If true, it will ask for the 'push' capabilities.
     * @param {Object<string, string>} [args.headers] - Additional headers to include in HTTP requests, similar to git's `extraHeader` config
     * @param {1 | 2} [args.protocolVersion = 2] - Which version of the Git Protocol to use.
     *
     * @returns {Promise<GetRemoteInfo2Result>} Resolves successfully with an object listing the capabilities of the remote.
     * @see GetRemoteInfo2Result
     * @see ServerRef
     *
     * @example
     * let info = await git.getRemoteInfo2({
     *   http,
     *   corsProxy: "https://cors.isomorphic-git.org",
     *   url: "https://github.com/isomorphic-git/isomorphic-git.git"
     * });
     * console.log(info);
     *
     */
    async function getRemoteInfo2({
      http,
      onAuth,
      onAuthSuccess,
      onAuthFailure,
      corsProxy,
      url,
      headers = {},
      forPush = false,
      protocolVersion = 2,
    }) {
      try {
        assertParameter('http', http);
        assertParameter('url', url);

        const GitRemoteHTTP = GitRemoteManager.getRemoteHelperFor({ url });
        const remote = await GitRemoteHTTP.discover({
          http,
          onAuth,
          onAuthSuccess,
          onAuthFailure,
          corsProxy,
          service: forPush ? 'git-receive-pack' : 'git-upload-pack',
          url,
          headers,
          protocolVersion,
        });

        if (remote.protocolVersion === 2) {
          /** @type GetRemoteInfo2Result */
          return {
            protocolVersion: remote.protocolVersion,
            capabilities: remote.capabilities2,
          }
        }

        // Note: remote.capabilities, remote.refs, and remote.symrefs are Set and Map objects,
        // but one of the objectives of the public API is to always return JSON-compatible objects
        // so we must JSONify them.
        /** @type Object<string, true> */
        const capabilities = {};
        for (const cap of remote.capabilities) {
          const [key, value] = cap.split('=');
          if (value) {
            capabilities[key] = value;
          } else {
            capabilities[key] = true;
          }
        }
        /** @type GetRemoteInfo2Result */
        return {
          protocolVersion: 1,
          capabilities,
          refs: formatInfoRefs(remote, undefined, true, true),
        }
      } catch (err) {
        err.caller = 'git.getRemoteInfo2';
        throw err
      }
    }

    async function hashObject({
      type,
      object,
      format = 'content',
      oid = undefined,
    }) {
      if (format !== 'deflated') {
        if (format !== 'wrapped') {
          object = GitObject.wrap({ type, object });
        }
        oid = await shasum(object);
      }
      return { oid, object }
    }

    // @ts-check

    /**
     *
     * @typedef {object} HashBlobResult - The object returned has the following schema:
     * @property {string} oid - The SHA-1 object id
     * @property {'blob'} type - The type of the object
     * @property {Uint8Array} object - The wrapped git object (the thing that is hashed)
     * @property {'wrapped'} format - The format of the object
     *
     */

    /**
     * Compute what the SHA-1 object id of a file would be
     *
     * @param {object} args
     * @param {Uint8Array|string} args.object - The object to write. If `object` is a String then it will be converted to a Uint8Array using UTF-8 encoding.
     *
     * @returns {Promise<HashBlobResult>} Resolves successfully with the SHA-1 object id and the wrapped object Uint8Array.
     * @see HashBlobResult
     *
     * @example
     * let { oid, type, object, format } = await git.hashBlob({
     *   object: 'Hello world!',
     * })
     *
     * console.log('oid', oid)
     * console.log('type', type)
     * console.log('object', object)
     * console.log('format', format)
     *
     */
    async function hashBlob({ object }) {
      try {
        assertParameter('object', object);

        // Convert object to buffer
        if (typeof object === 'string') {
          object = Buffer.from(object, 'utf8');
        } else {
          object = Buffer.from(object);
        }

        const type = 'blob';
        const { oid, object: _object } = await hashObject({
          type: 'blob',
          format: 'content',
          object,
        });
        return { oid, type, object: new Uint8Array(_object), format: 'wrapped' }
      } catch (err) {
        err.caller = 'git.hashBlob';
        throw err
      }
    }

    // @ts-check

    /**
     * @param {object} args
     * @param {import('../models/FileSystem.js').FileSystem} args.fs
     * @param {any} args.cache
     * @param {ProgressCallback} [args.onProgress]
     * @param {string} args.dir
     * @param {string} args.gitdir
     * @param {string} args.filepath
     *
     * @returns {Promise<{oids: string[]}>}
     */
    async function _indexPack({
      fs,
      cache,
      onProgress,
      dir,
      gitdir,
      filepath,
    }) {
      try {
        filepath = join(dir, filepath);
        const pack = await fs.read(filepath);
        const getExternalRefDelta = oid => _readObject({ fs, cache, gitdir, oid });
        const idx = await GitPackIndex.fromPack({
          pack,
          getExternalRefDelta,
          onProgress,
        });
        await fs.write(filepath.replace(/\.pack$/, '.idx'), await idx.toBuffer());
        return {
          oids: [...idx.hashes],
        }
      } catch (err) {
        err.caller = 'git.indexPack';
        throw err
      }
    }

    // @ts-check

    /**
     * Create the .idx file for a given .pack file
     *
     * @param {object} args
     * @param {FsClient} args.fs - a file system client
     * @param {ProgressCallback} [args.onProgress] - optional progress event callback
     * @param {string} args.dir - The [working tree](dir-vs-gitdir.md) directory path
     * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path
     * @param {string} args.filepath - The path to the .pack file to index
     * @param {object} [args.cache] - a [cache](cache.md) object
     *
     * @returns {Promise<{oids: string[]}>} Resolves with a list of the SHA-1 object ids contained in the packfile
     *
     * @example
     * let packfiles = await fs.promises.readdir('/tutorial/.git/objects/pack')
     * packfiles = packfiles.filter(name => name.endsWith('.pack'))
     * console.log('packfiles', packfiles)
     *
     * const { oids } = await git.indexPack({
     *   fs,
     *   dir: '/tutorial',
     *   filepath: `.git/objects/pack/${packfiles[0]}`,
     *   async onProgress (evt) {
     *     console.log(`${evt.phase}: ${evt.loaded} / ${evt.total}`)
     *   }
     * })
     * console.log(oids)
     *
     */
    async function indexPack({
      fs,
      onProgress,
      dir,
      gitdir = join(dir, '.git'),
      filepath,
      cache = {},
    }) {
      try {
        assertParameter('fs', fs);
        assertParameter('dir', dir);
        assertParameter('gitdir', dir);
        assertParameter('filepath', filepath);

        return await _indexPack({
          fs: new FileSystem(fs),
          cache,
          onProgress,
          dir,
          gitdir,
          filepath,
        })
      } catch (err) {
        err.caller = 'git.indexPack';
        throw err
      }
    }

    // @ts-check

    /**
     * Initialize a new repository
     *
     * @param {object} args
     * @param {FsClient} args.fs - a file system client
     * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path
     * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path
     * @param {boolean} [args.bare = false] - Initialize a bare repository
     * @param {string} [args.defaultBranch = 'master'] - The name of the default branch (might be changed to a required argument in 2.0.0)
     * @returns {Promise<void>}  Resolves successfully when filesystem operations are complete
     *
     * @example
     * await git.init({ fs, dir: '/tutorial' })
     * console.log('done')
     *
     */
    async function init$1({
      fs,
      bare = false,
      dir,
      gitdir = bare ? dir : join(dir, '.git'),
      defaultBranch = 'master',
    }) {
      try {
        assertParameter('fs', fs);
        assertParameter('gitdir', gitdir);
        if (!bare) {
          assertParameter('dir', dir);
        }

        return await _init({
          fs: new FileSystem(fs),
          bare,
          dir,
          gitdir,
          defaultBranch,
        })
      } catch (err) {
        err.caller = 'git.init';
        throw err
      }
    }

    // @ts-check

    /**
     * @param {object} args
     * @param {import('../models/FileSystem.js').FileSystem} args.fs
     * @param {any} args.cache
     * @param {string} args.gitdir
     * @param {string} args.oid
     * @param {string} args.ancestor
     * @param {number} args.depth - Maximum depth to search before giving up. -1 means no maximum depth.
     *
     * @returns {Promise<boolean>}
     */
    async function _isDescendent({
      fs,
      cache,
      gitdir,
      oid,
      ancestor,
      depth,
    }) {
      const shallows = await GitShallowManager.read({ fs, gitdir });
      if (!oid) {
        throw new MissingParameterError('oid')
      }
      if (!ancestor) {
        throw new MissingParameterError('ancestor')
      }
      // If you don't like this behavior, add your own check.
      // Edge cases are hard to define a perfect solution.
      if (oid === ancestor) return false
      // We do not use recursion here, because that would lead to depth-first traversal,
      // and we want to maintain a breadth-first traversal to avoid hitting shallow clone depth cutoffs.
      const queue = [oid];
      const visited = new Set();
      let searchdepth = 0;
      while (queue.length) {
        if (searchdepth++ === depth) {
          throw new MaxDepthError(depth)
        }
        const oid = queue.shift();
        const { type, object } = await _readObject({
          fs,
          cache,
          gitdir,
          oid,
        });
        if (type !== 'commit') {
          throw new ObjectTypeError(oid, type, 'commit')
        }
        const commit = GitCommit.from(object).parse();
        // Are any of the parents the sought-after ancestor?
        for (const parent of commit.parent) {
          if (parent === ancestor) return true
        }
        // If not, add them to heads (unless we know this is a shallow commit)
        if (!shallows.has(oid)) {
          for (const parent of commit.parent) {
            if (!visited.has(parent)) {
              queue.push(parent);
              visited.add(parent);
            }
          }
        }
        // Eventually, we'll travel entire tree to the roots where all the parents are empty arrays,
        // or hit the shallow depth and throw an error. Excluding the possibility of grafts, or
        // different branches cloned to different depths, you would hit this error at the same time
        // for all parents, so trying to continue is futile.
      }
      return false
    }

    // @ts-check

    /**
     * Check whether a git commit is descended from another
     *
     * @param {object} args
     * @param {FsClient} args.fs - a file system client
     * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path
     * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path
     * @param {string} args.oid - The descendent commit
     * @param {string} args.ancestor - The (proposed) ancestor commit
     * @param {number} [args.depth = -1] - Maximum depth to search before giving up. -1 means no maximum depth.
     * @param {object} [args.cache] - a [cache](cache.md) object
     *
     * @returns {Promise<boolean>} Resolves to true if `oid` is a descendent of `ancestor`
     *
     * @example
     * let oid = await git.resolveRef({ fs, dir: '/tutorial', ref: 'main' })
     * let ancestor = await git.resolveRef({ fs, dir: '/tutorial', ref: 'v0.20.0' })
     * console.log(oid, ancestor)
     * await git.isDescendent({ fs, dir: '/tutorial', oid, ancestor, depth: -1 })
     *
     */
    async function isDescendent({
      fs,
      dir,
      gitdir = join(dir, '.git'),
      oid,
      ancestor,
      depth = -1,
      cache = {},
    }) {
      try {
        assertParameter('fs', fs);
        assertParameter('gitdir', gitdir);
        assertParameter('oid', oid);
        assertParameter('ancestor', ancestor);

        return await _isDescendent({
          fs: new FileSystem(fs),
          cache,
          gitdir,
          oid,
          ancestor,
          depth,
        })
      } catch (err) {
        err.caller = 'git.isDescendent';
        throw err
      }
    }

    // @ts-check

    /**
     * Test whether a filepath should be ignored (because of .gitignore or .git/exclude)
     *
     * @param {object} args
     * @param {FsClient} args.fs - a file system client
     * @param {string} args.dir - The [working tree](dir-vs-gitdir.md) directory path
     * @param {string} [args.gitdir=join(dir, '.git')] - [required] The [git directory](dir-vs-gitdir.md) path
     * @param {string} args.filepath - The filepath to test
     *
     * @returns {Promise<boolean>} Resolves to true if the file should be ignored
     *
     * @example
     * await git.isIgnored({ fs, dir: '/tutorial', filepath: 'docs/add.md' })
     *
     */
    async function isIgnored({
      fs,
      dir,
      gitdir = join(dir, '.git'),
      filepath,
    }) {
      try {
        assertParameter('fs', fs);
        assertParameter('dir', dir);
        assertParameter('gitdir', gitdir);
        assertParameter('filepath', filepath);

        return GitIgnoreManager.isIgnored({
          fs: new FileSystem(fs),
          dir,
          gitdir,
          filepath,
        })
      } catch (err) {
        err.caller = 'git.isIgnored';
        throw err
      }
    }

    // @ts-check

    /**
     * List branches
     *
     * By default it lists local branches. If a 'remote' is specified, it lists the remote's branches. When listing remote branches, the HEAD branch is not filtered out, so it may be included in the list of results.
     *
     * Note that specifying a remote does not actually contact the server and update the list of branches.
     * If you want an up-to-date list, first do a `fetch` to that remote.
     * (Which branch you fetch doesn't matter - the list of branches available on the remote is updated during the fetch handshake.)
     *
     * Also note, that a branch is a reference to a commit. If you initialize a new repository it has no commits, so the
     * `listBranches` function will return an empty list, until you create the first commit.
     *
     * @param {object} args
     * @param {FsClient} args.fs - a file system client
     * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path
     * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path
     * @param {string} [args.remote] - Instead of the branches in `refs/heads`, list the branches in `refs/remotes/${remote}`.
     *
     * @returns {Promise<Array<string>>} Resolves successfully with an array of branch names
     *
     * @example
     * let branches = await git.listBranches({ fs, dir: '/tutorial' })
     * console.log(branches)
     * let remoteBranches = await git.listBranches({ fs, dir: '/tutorial', remote: 'origin' })
     * console.log(remoteBranches)
     *
     */
    async function listBranches({
      fs,
      dir,
      gitdir = join(dir, '.git'),
      remote,
    }) {
      try {
        assertParameter('fs', fs);
        assertParameter('gitdir', gitdir);

        return GitRefManager.listBranches({
          fs: new FileSystem(fs),
          gitdir,
          remote,
        })
      } catch (err) {
        err.caller = 'git.listBranches';
        throw err
      }
    }

    // @ts-check

    /**
     * @param {object} args
     * @param {import('../models/FileSystem.js').FileSystem} args.fs
     * @param {object} args.cache
     * @param {string} args.gitdir
     * @param {string} [args.ref]
     *
     * @returns {Promise<Array<string>>}
     */
    async function _listFiles({ fs, gitdir, ref, cache }) {
      if (ref) {
        const oid = await GitRefManager.resolve({ gitdir, fs, ref });
        const filenames = [];
        await accumulateFilesFromOid({
          fs,
          cache,
          gitdir,
          oid,
          filenames,
          prefix: '',
        });
        return filenames
      } else {
        return GitIndexManager.acquire({ fs, gitdir, cache }, async function(
          index
        ) {
          return index.entries.map(x => x.path)
        })
      }
    }

    async function accumulateFilesFromOid({
      fs,
      cache,
      gitdir,
      oid,
      filenames,
      prefix,
    }) {
      const { tree } = await _readTree({ fs, cache, gitdir, oid });
      // TODO: Use `walk` to do this. Should be faster.
      for (const entry of tree) {
        if (entry.type === 'tree') {
          await accumulateFilesFromOid({
            fs,
            cache,
            gitdir,
            oid: entry.oid,
            filenames,
            prefix: join(prefix, entry.path),
          });
        } else {
          filenames.push(join(prefix, entry.path));
        }
      }
    }

    // @ts-check

    /**
     * List all the files in the git index or a commit
     *
     * > Note: This function is efficient for listing the files in the staging area, but listing all the files in a commit requires recursively walking through the git object store.
     * > If you do not require a complete list of every file, better performance can be achieved by using [walk](./walk) and ignoring subdirectories you don't care about.
     *
     * @param {object} args
     * @param {FsClient} args.fs - a file system client
     * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path
     * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path
     * @param {string} [args.ref] - Return a list of all the files in the commit at `ref` instead of the files currently in the git index (aka staging area)
     * @param {object} [args.cache] - a [cache](cache.md) object
     *
     * @returns {Promise<Array<string>>} Resolves successfully with an array of filepaths
     *
     * @example
     * // All the files in the previous commit
     * let files = await git.listFiles({ fs, dir: '/tutorial', ref: 'HEAD' })
     * console.log(files)
     * // All the files in the current staging area
     * files = await git.listFiles({ fs, dir: '/tutorial' })
     * console.log(files)
     *
     */
    async function listFiles({
      fs,
      dir,
      gitdir = join(dir, '.git'),
      ref,
      cache = {},
    }) {
      try {
        assertParameter('fs', fs);
        assertParameter('gitdir', gitdir);

        return await _listFiles({
          fs: new FileSystem(fs),
          cache,
          gitdir,
          ref,
        })
      } catch (err) {
        err.caller = 'git.listFiles';
        throw err
      }
    }

    // @ts-check

    /**
     * List all the object notes
     *
     * @param {object} args
     * @param {import('../models/FileSystem.js').FileSystem} args.fs
     * @param {any} args.cache
     * @param {string} args.gitdir
     * @param {string} args.ref
     *
     * @returns {Promise<Array<{target: string, note: string}>>}
     */

    async function _listNotes({ fs, cache, gitdir, ref }) {
      // Get the current note commit
      let parent;
      try {
        parent = await GitRefManager.resolve({ gitdir, fs, ref });
      } catch (err) {
        if (err instanceof NotFoundError) {
          return []
        }
      }

      // Create the current note tree
      const result = await _readTree({
        fs,
        cache,
        gitdir,
        oid: parent,
      });

      // Format the tree entries
      const notes = result.tree.map(entry => ({
        target: entry.path,
        note: entry.oid,
      }));
      return notes
    }

    // @ts-check

    /**
     * List all the object notes
     *
     * @param {object} args
     * @param {FsClient} args.fs - a file system client
     * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path
     * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path
     * @param {string} [args.ref] - The notes ref to look under
     * @param {object} [args.cache] - a [cache](cache.md) object
     *
     * @returns {Promise<Array<{target: string, note: string}>>} Resolves successfully with an array of entries containing SHA-1 object ids of the note and the object the note targets
     */

    async function listNotes({
      fs,
      dir,
      gitdir = join(dir, '.git'),
      ref = 'refs/notes/commits',
      cache = {},
    }) {
      try {
        assertParameter('fs', fs);
        assertParameter('gitdir', gitdir);
        assertParameter('ref', ref);

        return await _listNotes({
          fs: new FileSystem(fs),
          cache,
          gitdir,
          ref,
        })
      } catch (err) {
        err.caller = 'git.listNotes';
        throw err
      }
    }

    // @ts-check

    /**
     * @param {object} args
     * @param {import('../models/FileSystem.js').FileSystem} args.fs
     * @param {string} args.gitdir
     *
     * @returns {Promise<Array<{remote: string, url: string}>>}
     */
    async function _listRemotes({ fs, gitdir }) {
      const config = await GitConfigManager.get({ fs, gitdir });
      const remoteNames = await config.getSubsections('remote');
      const remotes = Promise.all(
        remoteNames.map(async remote => {
          const url = await config.get(`remote.${remote}.url`);
          return { remote, url }
        })
      );
      return remotes
    }

    // @ts-check

    /**
     * List remotes
     *
     * @param {object} args
     * @param {FsClient} args.fs - a file system client
     * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path
     * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path
     *
     * @returns {Promise<Array<{remote: string, url: string}>>} Resolves successfully with an array of `{remote, url}` objects
     *
     * @example
     * let remotes = await git.listRemotes({ fs, dir: '/tutorial' })
     * console.log(remotes)
     *
     */
    async function listRemotes({ fs, dir, gitdir = join(dir, '.git') }) {
      try {
        assertParameter('fs', fs);
        assertParameter('gitdir', gitdir);

        return await _listRemotes({
          fs: new FileSystem(fs),
          gitdir,
        })
      } catch (err) {
        err.caller = 'git.listRemotes';
        throw err
      }
    }

    /**
     * @typedef {Object} ServerRef - This object has the following schema:
     * @property {string} ref - The name of the ref
     * @property {string} oid - The SHA-1 object id the ref points to
     * @property {string} [target] - The target ref pointed to by a symbolic ref
     * @property {string} [peeled] - If the oid is the SHA-1 object id of an annotated tag, this is the SHA-1 object id that the annotated tag points to
     */

    async function parseListRefsResponse(stream) {
      const read = GitPktLine.streamReader(stream);

      // TODO: when we re-write everything to minimize memory usage,
      // we could make this a generator
      const refs = [];

      let line;
      while (true) {
        line = await read();
        if (line === true) break
        if (line === null) continue
        line = line.toString('utf8').replace(/\n$/, '');
        const [oid, ref, ...attrs] = line.split(' ');
        const r = { ref, oid };
        for (const attr of attrs) {
          const [name, value] = attr.split(':');
          if (name === 'symref-target') {
            r.target = value;
          } else if (name === 'peeled') {
            r.peeled = value;
          }
        }
        refs.push(r);
      }

      return refs
    }

    /**
     * @param {object} args
     * @param {string} [args.prefix] - Only list refs that start with this prefix
     * @param {boolean} [args.symrefs = false] - Include symbolic ref targets
     * @param {boolean} [args.peelTags = false] - Include peeled tags values
     * @returns {Uint8Array[]}
     */
    async function writeListRefsRequest({ prefix, symrefs, peelTags }) {
      const packstream = [];
      // command
      packstream.push(GitPktLine.encode('command=ls-refs\n'));
      // capability-list
      packstream.push(GitPktLine.encode(`agent=${pkg.agent}\n`));
      // [command-args]
      if (peelTags || symrefs || prefix) {
        packstream.push(GitPktLine.delim());
      }
      if (peelTags) packstream.push(GitPktLine.encode('peel'));
      if (symrefs) packstream.push(GitPktLine.encode('symrefs'));
      if (prefix) packstream.push(GitPktLine.encode(`ref-prefix ${prefix}`));
      packstream.push(GitPktLine.flush());
      return packstream
    }

    // @ts-check

    /**
     * Fetch a list of refs (branches, tags, etc) from a server.
     *
     * This is a rare command that doesn't require an `fs`, `dir`, or even `gitdir` argument.
     * It just requires an `http` argument.
     *
     * ### About `protocolVersion`
     *
     * There's a rather fun trade-off between Git Protocol Version 1 and Git Protocol Version 2.
     * Version 2 actually requires 2 HTTP requests instead of 1, making it similar to fetch or push in that regard.
     * However, version 2 supports server-side filtering by prefix, whereas that filtering is done client-side in version 1.
     * Which protocol is most efficient therefore depends on the number of refs on the remote, the latency of the server, and speed of the network connection.
     * For an small repos (or fast Internet connections), the requirement to make two trips to the server makes protocol 2 slower.
     * But for large repos (or slow Internet connections), the decreased payload size of the second request makes up for the additional request.
     *
     * Hard numbers vary by situation, but here's some numbers from my machine:
     *
     * Using isomorphic-git in a browser, with a CORS proxy, listing only the branches (refs/heads) of https://github.com/isomorphic-git/isomorphic-git
     * - Protocol Version 1 took ~300ms and transfered 84 KB.
     * - Protocol Version 2 took ~500ms and transfered 4.1 KB.
     *
     * Using isomorphic-git in a browser, with a CORS proxy, listing only the branches (refs/heads) of https://gitlab.com/gitlab-org/gitlab
     * - Protocol Version 1 took ~4900ms and transfered 9.41 MB.
     * - Protocol Version 2 took ~1280ms and transfered 433 KB.
     *
     * Finally, there is a fun quirk regarding the `symrefs` parameter.
     * Protocol Version 1 will generally only return the `HEAD` symref and not others.
     * Historically, this meant that servers don't use symbolic refs except for `HEAD`, which is used to point at the "default branch".
     * However Protocol Version 2 can return *all* the symbolic refs on the server.
     * So if you are running your own git server, you could take advantage of that I guess.
     *
     * #### TL;DR
     * If you are _not_ taking advantage of `prefix` I would recommend `protocolVersion: 1`.
     * Otherwise, I recommend to use the default which is `protocolVersion: 2`.
     *
     * @param {object} args
     * @param {HttpClient} args.http - an HTTP client
     * @param {AuthCallback} [args.onAuth] - optional auth fill callback
     * @param {AuthFailureCallback} [args.onAuthFailure] - optional auth rejected callback
     * @param {AuthSuccessCallback} [args.onAuthSuccess] - optional auth approved callback
     * @param {string} args.url - The URL of the remote repository. Will be gotten from gitconfig if absent.
     * @param {string} [args.corsProxy] - Optional [CORS proxy](https://www.npmjs.com/%40isomorphic-git/cors-proxy). Overrides value in repo config.
     * @param {boolean} [args.forPush = false] - By default, the command queries the 'fetch' capabilities. If true, it will ask for the 'push' capabilities.
     * @param {Object<string, string>} [args.headers] - Additional headers to include in HTTP requests, similar to git's `extraHeader` config
     * @param {1 | 2} [args.protocolVersion = 2] - Which version of the Git Protocol to use.
     * @param {string} [args.prefix] - Only list refs that start with this prefix
     * @param {boolean} [args.symrefs = false] - Include symbolic ref targets
     * @param {boolean} [args.peelTags = false] - Include annotated tag peeled targets
     *
     * @returns {Promise<ServerRef[]>} Resolves successfully with an array of ServerRef objects
     * @see ServerRef
     *
     * @example
     * // List all the branches on a repo
     * let refs = await git.listServerRefs({
     *   http,
     *   corsProxy: "https://cors.isomorphic-git.org",
     *   url: "https://github.com/isomorphic-git/isomorphic-git.git",
     *   prefix: "refs/heads/",
     * });
     * console.log(refs);
     *
     * @example
     * // Get the default branch on a repo
     * let refs = await git.listServerRefs({
     *   http,
     *   corsProxy: "https://cors.isomorphic-git.org",
     *   url: "https://github.com/isomorphic-git/isomorphic-git.git",
     *   prefix: "HEAD",
     *   symrefs: true,
     * });
     * console.log(refs);
     *
     * @example
     * // List all the tags on a repo
     * let refs = await git.listServerRefs({
     *   http,
     *   corsProxy: "https://cors.isomorphic-git.org",
     *   url: "https://github.com/isomorphic-git/isomorphic-git.git",
     *   prefix: "refs/tags/",
     *   peelTags: true,
     * });
     * console.log(refs);
     *
     * @example
     * // List all the pull requests on a repo
     * let refs = await git.listServerRefs({
     *   http,
     *   corsProxy: "https://cors.isomorphic-git.org",
     *   url: "https://github.com/isomorphic-git/isomorphic-git.git",
     *   prefix: "refs/pull/",
     * });
     * console.log(refs);
     *
     */
    async function listServerRefs({
      http,
      onAuth,
      onAuthSuccess,
      onAuthFailure,
      corsProxy,
      url,
      headers = {},
      forPush = false,
      protocolVersion = 2,
      prefix,
      symrefs,
      peelTags,
    }) {
      try {
        assertParameter('http', http);
        assertParameter('url', url);

        const remote = await GitRemoteHTTP.discover({
          http,
          onAuth,
          onAuthSuccess,
          onAuthFailure,
          corsProxy,
          service: forPush ? 'git-receive-pack' : 'git-upload-pack',
          url,
          headers,
          protocolVersion,
        });

        if (remote.protocolVersion === 1) {
          return formatInfoRefs(remote, prefix, symrefs, peelTags)
        }

        // Protocol Version 2
        const body = await writeListRefsRequest({ prefix, symrefs, peelTags });

        const res = await GitRemoteHTTP.connect({
          http,
          auth: remote.auth,
          headers,
          corsProxy,
          service: forPush ? 'git-receive-pack' : 'git-upload-pack',
          url,
          body,
        });

        return parseListRefsResponse(res.body)
      } catch (err) {
        err.caller = 'git.listServerRefs';
        throw err
      }
    }

    // @ts-check

    /**
     * List tags
     *
     * @param {object} args
     * @param {FsClient} args.fs - a file system client
     * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path
     * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path
     *
     * @returns {Promise<Array<string>>} Resolves successfully with an array of tag names
     *
     * @example
     * let tags = await git.listTags({ fs, dir: '/tutorial' })
     * console.log(tags)
     *
     */
    async function listTags({ fs, dir, gitdir = join(dir, '.git') }) {
      try {
        assertParameter('fs', fs);
        assertParameter('gitdir', gitdir);
        return GitRefManager.listTags({ fs: new FileSystem(fs), gitdir })
      } catch (err) {
        err.caller = 'git.listTags';
        throw err
      }
    }

    async function resolveCommit({ fs, cache, gitdir, oid }) {
      const { type, object } = await _readObject({ fs, cache, gitdir, oid });
      // Resolve annotated tag objects to whatever
      if (type === 'tag') {
        oid = GitAnnotatedTag.from(object).parse().object;
        return resolveCommit({ fs, cache, gitdir, oid })
      }
      if (type !== 'commit') {
        throw new ObjectTypeError(oid, type, 'commit')
      }
      return { commit: GitCommit.from(object), oid }
    }

    // @ts-check

    /**
     * @param {object} args
     * @param {import('../models/FileSystem.js').FileSystem} args.fs
     * @param {any} args.cache
     * @param {string} args.gitdir
     * @param {string} args.oid
     *
     * @returns {Promise<ReadCommitResult>} Resolves successfully with a git commit object
     * @see ReadCommitResult
     * @see CommitObject
     *
     */
    async function _readCommit({ fs, cache, gitdir, oid }) {
      const { commit, oid: commitOid } = await resolveCommit({
        fs,
        cache,
        gitdir,
        oid,
      });
      const result = {
        oid: commitOid,
        commit: commit.parse(),
        payload: commit.withoutSignature(),
      };
      // @ts-ignore
      return result
    }

    function compareAge(a, b) {
      return a.committer.timestamp - b.committer.timestamp
    }

    // @ts-check

    // the empty file content object id
    const EMPTY_OID = 'e69de29bb2d1d6434b8b29ae775ad8c2e48c5391';

    async function resolveFileIdInTree({ fs, cache, gitdir, oid, fileId }) {
      if (fileId === EMPTY_OID) return
      const _oid = oid;
      let filepath;
      const result = await resolveTree({ fs, cache, gitdir, oid });
      const tree = result.tree;
      if (fileId === result.oid) {
        filepath = result.path;
      } else {
        filepath = await _resolveFileId({
          fs,
          cache,
          gitdir,
          tree,
          fileId,
          oid: _oid,
        });
        if (Array.isArray(filepath)) {
          if (filepath.length === 0) filepath = undefined;
          else if (filepath.length === 1) filepath = filepath[0];
        }
      }
      return filepath
    }

    async function _resolveFileId({
      fs,
      cache,
      gitdir,
      tree,
      fileId,
      oid,
      filepaths = [],
      parentPath = '',
    }) {
      const walks = tree.entries().map(function(entry) {
        let result;
        if (entry.oid === fileId) {
          result = join(parentPath, entry.path);
          filepaths.push(result);
        } else if (entry.type === 'tree') {
          result = _readObject({
            fs,
            cache,
            gitdir,
            oid: entry.oid,
          }).then(function({ object }) {
            return _resolveFileId({
              fs,
              cache,
              gitdir,
              tree: GitTree.from(object),
              fileId,
              oid,
              filepaths,
              parentPath: join(parentPath, entry.path),
            })
          });
        }
        return result
      });

      await Promise.all(walks);
      return filepaths
    }

    // @ts-check

    /**
     * Get commit descriptions from the git history
     *
     * @param {object} args
     * @param {import('../models/FileSystem.js').FileSystem} args.fs
     * @param {any} args.cache
     * @param {string} args.gitdir
     * @param {string=} args.filepath optional get the commit for the filepath only
     * @param {string} args.ref
     * @param {number|void} args.depth
     * @param {boolean=} [args.force=false] do not throw error if filepath is not exist (works only for a single file). defaults to false
     * @param {boolean=} [args.follow=false] Continue listing the history of a file beyond renames (works only for a single file). defaults to false
     * @param {boolean=} args.follow Continue listing the history of a file beyond renames (works only for a single file). defaults to false
     *
     * @returns {Promise<Array<ReadCommitResult>>} Resolves to an array of ReadCommitResult objects
     * @see ReadCommitResult
     * @see CommitObject
     *
     * @example
     * let commits = await git.log({ dir: '$input((/))', depth: $input((5)), ref: '$input((master))' })
     * console.log(commits)
     *
     */
    async function _log({
      fs,
      cache,
      gitdir,
      filepath,
      ref,
      depth,
      since,
      force,
      follow,
    }) {
      const sinceTimestamp =
        typeof since === 'undefined'
          ? undefined
          : Math.floor(since.valueOf() / 1000);
      // TODO: In the future, we may want to have an API where we return a
      // async iterator that emits commits.
      const commits = [];
      const shallowCommits = await GitShallowManager.read({ fs, gitdir });
      const oid = await GitRefManager.resolve({ fs, gitdir, ref });
      const tips = [await _readCommit({ fs, cache, gitdir, oid })];
      let lastFileOid;
      let lastCommit;
      let isOk;

      function endCommit(commit) {
        if (isOk && filepath) commits.push(commit);
      }

      while (tips.length > 0) {
        const commit = tips.pop();

        // Stop the log if we've hit the age limit
        if (
          sinceTimestamp !== undefined &&
          commit.commit.committer.timestamp <= sinceTimestamp
        ) {
          break
        }

        if (filepath) {
          let vFileOid;
          try {
            vFileOid = await resolveFilepath({
              fs,
              cache,
              gitdir,
              oid: commit.commit.tree,
              filepath,
            });
            if (lastCommit && lastFileOid !== vFileOid) {
              commits.push(lastCommit);
            }
            lastFileOid = vFileOid;
            lastCommit = commit;
            isOk = true;
          } catch (e) {
            if (e instanceof NotFoundError) {
              let found = follow && lastFileOid;
              if (found) {
                found = await resolveFileIdInTree({
                  fs,
                  cache,
                  gitdir,
                  oid: commit.commit.tree,
                  fileId: lastFileOid,
                });
                if (found) {
                  if (Array.isArray(found)) {
                    if (lastCommit) {
                      const lastFound = await resolveFileIdInTree({
                        fs,
                        cache,
                        gitdir,
                        oid: lastCommit.commit.tree,
                        fileId: lastFileOid,
                      });
                      if (Array.isArray(lastFound)) {
                        found = found.filter(p => lastFound.indexOf(p) === -1);
                        if (found.length === 1) {
                          found = found[0];
                          filepath = found;
                          if (lastCommit) commits.push(lastCommit);
                        } else {
                          found = false;
                          if (lastCommit) commits.push(lastCommit);
                          break
                        }
                      }
                    }
                  } else {
                    filepath = found;
                    if (lastCommit) commits.push(lastCommit);
                  }
                }
              }
              if (!found) {
                if (isOk && lastFileOid) {
                  commits.push(lastCommit);
                  if (!force) break
                }
                if (!force && !follow) throw e
              }
              lastCommit = commit;
              isOk = false;
            } else throw e
          }
        } else {
          commits.push(commit);
        }

        // Stop the loop if we have enough commits now.
        if (depth !== undefined && commits.length === depth) {
          endCommit(commit);
          break
        }

        // If this is not a shallow commit...
        if (!shallowCommits.has(commit.oid)) {
          // Add the parents of this commit to the queue
          // Note: for the case of a commit with no parents, it will concat an empty array, having no net effect.
          for (const oid of commit.commit.parent) {
            const commit = await _readCommit({ fs, cache, gitdir, oid });
            if (!tips.map(commit => commit.oid).includes(commit.oid)) {
              tips.push(commit);
            }
          }
        }

        // Stop the loop if there are no more commit parents
        if (tips.length === 0) {
          endCommit(commit);
        }

        // Process tips in order by age
        tips.sort((a, b) => compareAge(a.commit, b.commit));
      }
      return commits
    }

    // @ts-check

    /**
     * Get commit descriptions from the git history
     *
     * @param {object} args
     * @param {FsClient} args.fs - a file system client
     * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path
     * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path
     * @param {string=} args.filepath optional get the commit for the filepath only
     * @param {string} [args.ref = 'HEAD'] - The commit to begin walking backwards through the history from
     * @param {number=} [args.depth] - Limit the number of commits returned. No limit by default.
     * @param {Date} [args.since] - Return history newer than the given date. Can be combined with `depth` to get whichever is shorter.
     * @param {boolean=} [args.force=false] do not throw error if filepath is not exist (works only for a single file). defaults to false
     * @param {boolean=} [args.follow=false] Continue listing the history of a file beyond renames (works only for a single file). defaults to false
     * @param {object} [args.cache] - a [cache](cache.md) object
     *
     * @returns {Promise<Array<ReadCommitResult>>} Resolves to an array of ReadCommitResult objects
     * @see ReadCommitResult
     * @see CommitObject
     *
     * @example
     * let commits = await git.log({
     *   fs,
     *   dir: '/tutorial',
     *   depth: 5,
     *   ref: 'main'
     * })
     * console.log(commits)
     *
     */
    async function log({
      fs,
      dir,
      gitdir = join(dir, '.git'),
      filepath,
      ref = 'HEAD',
      depth,
      since, // Date
      force,
      follow,
      cache = {},
    }) {
      try {
        assertParameter('fs', fs);
        assertParameter('gitdir', gitdir);
        assertParameter('ref', ref);

        return await _log({
          fs: new FileSystem(fs),
          cache,
          gitdir,
          filepath,
          ref,
          depth,
          since,
          force,
          follow,
        })
      } catch (err) {
        err.caller = 'git.log';
        throw err
      }
    }

    // @ts-check

    /**
     *
     * @typedef {Object} MergeResult - Returns an object with a schema like this:
     * @property {string} [oid] - The SHA-1 object id that is now at the head of the branch. Absent only if `dryRun` was specified and `mergeCommit` is true.
     * @property {boolean} [alreadyMerged] - True if the branch was already merged so no changes were made
     * @property {boolean} [fastForward] - True if it was a fast-forward merge
     * @property {boolean} [mergeCommit] - True if merge resulted in a merge commit
     * @property {string} [tree] - The SHA-1 object id of the tree resulting from a merge commit
     *
     */

    /**
     * Merge two branches
     *
     * Currently it will fail if multiple candidate merge bases are found. (It doesn't yet implement the recursive merge strategy.)
     *
     * Currently it does not support selecting alternative merge strategies.
     *
     * Currently it is not possible to abort an incomplete merge. To restore the worktree to a clean state, you will need to checkout an earlier commit.
     *
     * Currently it does not directly support the behavior of `git merge --continue`. To complete a merge after manual conflict resolution, you will need to add and commit the files manually, and specify the appropriate parent commits.
     *
     * ## Manually resolving merge conflicts
     * By default, if isomorphic-git encounters a merge conflict it cannot resolve using the builtin diff3 algorithm or provided merge driver, it will abort and throw a `MergeNotSupportedError`.
     * This leaves the index and working tree untouched.
     *
     * When `abortOnConflict` is set to `false`, and a merge conflict cannot be automatically resolved, a `MergeConflictError` is thrown and the results of the incomplete merge will be written to the working directory.
     * This includes conflict markers in files with unresolved merge conflicts.
     *
     * To complete the merge, edit the conflicting files as you see fit, and then add and commit the resolved merge.
     *
     * For a proper merge commit, be sure to specify the branches or commits you are merging in the `parent` argument to `git.commit`.
     * For example, say we are merging the branch `feature` into the branch `main` and there is a conflict we want to resolve manually.
     * The flow would look like this:
     *
     * ```
     * await git.merge({
     *   fs,
     *   dir,
     *   ours: 'main',
     *   theirs: 'feature',
     *   abortOnConflict: false,
     * }).catch(e => {
     *   if (e instanceof Errors.MergeConflictError) {
     *     console.log(
     *       'Automatic merge failed for the following files: '
     *       + `${e.data}. `
     *       + 'Resolve these conflicts and then commit your changes.'
     *     )
     *   } else throw e
     * })
     *
     * // This is the where we manually edit the files that have been written to the working directory
     * // ...
     * // Files have been edited and we are ready to commit
     *
     * await git.add({
     *   fs,
     *   dir,
     *   filepath: '.',
     * })
     *
     * await git.commit({
     *   fs,
     *   dir,
     *   ref: 'main',
     *   message: "Merge branch 'feature' into main",
     *   parent: ['main', 'feature'], // Be sure to specify the parents when creating a merge commit
     * })
     * ```
     *
     * @param {object} args
     * @param {FsClient} args.fs - a file system client
     * @param {SignCallback} [args.onSign] - a PGP signing implementation
     * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path
     * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path
     * @param {string} [args.ours] - The branch receiving the merge. If undefined, defaults to the current branch.
     * @param {string} args.theirs - The branch to be merged
     * @param {boolean} [args.fastForward = true] - If false, create a merge commit in all cases.
     * @param {boolean} [args.fastForwardOnly = false] - If true, then non-fast-forward merges will throw an Error instead of performing a merge.
     * @param {boolean} [args.dryRun = false] - If true, simulates a merge so you can test whether it would succeed.
     * @param {boolean} [args.noUpdateBranch = false] - If true, does not update the branch pointer after creating the commit.
     * @param {boolean} [args.abortOnConflict = true] - If true, merges with conflicts will not update the worktree or index.
     * @param {string} [args.message] - Overrides the default auto-generated merge commit message
     * @param {Object} [args.author] - passed to [commit](commit.md) when creating a merge commit
     * @param {string} [args.author.name] - Default is `user.name` config.
     * @param {string} [args.author.email] - Default is `user.email` config.
     * @param {number} [args.author.timestamp=Math.floor(Date.now()/1000)] - Set the author timestamp field. This is the integer number of seconds since the Unix epoch (1970-01-01 00:00:00).
     * @param {number} [args.author.timezoneOffset] - Set the author timezone offset field. This is the difference, in minutes, from the current timezone to UTC. Default is `(new Date()).getTimezoneOffset()`.
     * @param {Object} [args.committer] - passed to [commit](commit.md) when creating a merge commit
     * @param {string} [args.committer.name] - Default is `user.name` config.
     * @param {string} [args.committer.email] - Default is `user.email` config.
     * @param {number} [args.committer.timestamp=Math.floor(Date.now()/1000)] - Set the committer timestamp field. This is the integer number of seconds since the Unix epoch (1970-01-01 00:00:00).
     * @param {number} [args.committer.timezoneOffset] - Set the committer timezone offset field. This is the difference, in minutes, from the current timezone to UTC. Default is `(new Date()).getTimezoneOffset()`.
     * @param {string} [args.signingKey] - passed to [commit](commit.md) when creating a merge commit
     * @param {object} [args.cache] - a [cache](cache.md) object
     * @param {MergeDriverCallback} [args.mergeDriver] - a [merge driver](mergeDriver.md) implementation
     *
     * @returns {Promise<MergeResult>} Resolves to a description of the merge operation
     * @see MergeResult
     *
     * @example
     * let m = await git.merge({
     *   fs,
     *   dir: '/tutorial',
     *   ours: 'main',
     *   theirs: 'remotes/origin/main'
     * })
     * console.log(m)
     *
     */
    async function merge$1({
      fs: _fs,
      onSign,
      dir,
      gitdir = join(dir, '.git'),
      ours,
      theirs,
      fastForward = true,
      fastForwardOnly = false,
      dryRun = false,
      noUpdateBranch = false,
      abortOnConflict = true,
      message,
      author: _author,
      committer: _committer,
      signingKey,
      cache = {},
      mergeDriver,
    }) {
      try {
        assertParameter('fs', _fs);
        if (signingKey) {
          assertParameter('onSign', onSign);
        }
        const fs = new FileSystem(_fs);

        const author = await normalizeAuthorObject({ fs, gitdir, author: _author });
        if (!author && (!fastForwardOnly || !fastForward)) {
          throw new MissingNameError('author')
        }

        const committer = await normalizeCommitterObject({
          fs,
          gitdir,
          author,
          committer: _committer,
        });
        if (!committer && (!fastForwardOnly || !fastForward)) {
          throw new MissingNameError('committer')
        }

        return await _merge({
          fs,
          cache,
          dir,
          gitdir,
          ours,
          theirs,
          fastForward,
          fastForwardOnly,
          dryRun,
          noUpdateBranch,
          abortOnConflict,
          message,
          author,
          committer,
          signingKey,
          onSign,
          mergeDriver,
        })
      } catch (err) {
        err.caller = 'git.merge';
        throw err
      }
    }

    /**
     * @enum {number}
     */
    const types = {
      commit: 0b0010000,
      tree: 0b0100000,
      blob: 0b0110000,
      tag: 0b1000000,
      ofs_delta: 0b1100000,
      ref_delta: 0b1110000,
    };

    /**
     * @param {object} args
     * @param {import('../models/FileSystem.js').FileSystem} args.fs
     * @param {any} args.cache
     * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path
     * @param {string} [args.gitdir=join(dir, '.git')] - [required] The [git directory](dir-vs-gitdir.md) path
     * @param {string[]} args.oids
     */
    async function _pack({
      fs,
      cache,
      dir,
      gitdir = join(dir, '.git'),
      oids,
    }) {
      const hash = new sha1();
      const outputStream = [];
      function write(chunk, enc) {
        const buff = Buffer.from(chunk, enc);
        outputStream.push(buff);
        hash.update(buff);
      }
      async function writeObject({ stype, object }) {
        // Object type is encoded in bits 654
        const type = types[stype];
        // The length encoding gets complicated.
        let length = object.length;
        // Whether the next byte is part of the variable-length encoded number
        // is encoded in bit 7
        let multibyte = length > 0b1111 ? 0b10000000 : 0b0;
        // Last four bits of length is encoded in bits 3210
        const lastFour = length & 0b1111;
        // Discard those bits
        length = length >>> 4;
        // The first byte is then (1-bit multibyte?), (3-bit type), (4-bit least sig 4-bits of length)
        let byte = (multibyte | type | lastFour).toString(16);
        write(byte, 'hex');
        // Now we keep chopping away at length 7-bits at a time until its zero,
        // writing out the bytes in what amounts to little-endian order.
        while (multibyte) {
          multibyte = length > 0b01111111 ? 0b10000000 : 0b0;
          byte = multibyte | (length & 0b01111111);
          write(padHex(2, byte), 'hex');
          length = length >>> 7;
        }
        // Lastly, we can compress and write the object.
        write(Buffer.from(await deflate(object)));
      }
      write('PACK');
      write('00000002', 'hex');
      // Write a 4 byte (32-bit) int
      write(padHex(8, oids.length), 'hex');
      for (const oid of oids) {
        const { type, object } = await _readObject({ fs, cache, gitdir, oid });
        await writeObject({ write, object, stype: type });
      }
      // Write SHA1 checksum
      const digest = hash.digest();
      outputStream.push(digest);
      return outputStream
    }

    // @ts-check

    /**
     *
     * @typedef {Object} PackObjectsResult The packObjects command returns an object with two properties:
     * @property {string} filename - The suggested filename for the packfile if you want to save it to disk somewhere. It includes the packfile SHA.
     * @property {Uint8Array} [packfile] - The packfile contents. Not present if `write` parameter was true, in which case the packfile was written straight to disk.
     */

    /**
     * @param {object} args
     * @param {import('../models/FileSystem.js').FileSystem} args.fs
     * @param {any} args.cache
     * @param {string} args.gitdir
     * @param {string[]} args.oids
     * @param {boolean} args.write
     *
     * @returns {Promise<PackObjectsResult>}
     * @see PackObjectsResult
     */
    async function _packObjects({ fs, cache, gitdir, oids, write }) {
      const buffers = await _pack({ fs, cache, gitdir, oids });
      const packfile = Buffer.from(await collect$1(buffers));
      const packfileSha = packfile.slice(-20).toString('hex');
      const filename = `pack-${packfileSha}.pack`;
      if (write) {
        await fs.write(join(gitdir, `objects/pack/${filename}`), packfile);
        return { filename }
      }
      return {
        filename,
        packfile: new Uint8Array(packfile),
      }
    }

    // @ts-check

    /**
     *
     * @typedef {Object} PackObjectsResult The packObjects command returns an object with two properties:
     * @property {string} filename - The suggested filename for the packfile if you want to save it to disk somewhere. It includes the packfile SHA.
     * @property {Uint8Array} [packfile] - The packfile contents. Not present if `write` parameter was true, in which case the packfile was written straight to disk.
     */

    /**
     * Create a packfile from an array of SHA-1 object ids
     *
     * @param {object} args
     * @param {FsClient} args.fs - a file system client
     * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path
     * @param {string} [args.gitdir=join(dir, '.git')] - [required] The [git directory](dir-vs-gitdir.md) path
     * @param {string[]} args.oids - An array of SHA-1 object ids to be included in the packfile
     * @param {boolean} [args.write = false] - Whether to save the packfile to disk or not
     * @param {object} [args.cache] - a [cache](cache.md) object
     *
     * @returns {Promise<PackObjectsResult>} Resolves successfully when the packfile is ready with the filename and buffer
     * @see PackObjectsResult
     *
     * @example
     * // Create a packfile containing only an empty tree
     * let { packfile } = await git.packObjects({
     *   fs,
     *   dir: '/tutorial',
     *   oids: ['4b825dc642cb6eb9a060e54bf8d69288fbee4904']
     * })
     * console.log(packfile)
     *
     */
    async function packObjects({
      fs,
      dir,
      gitdir = join(dir, '.git'),
      oids,
      write = false,
      cache = {},
    }) {
      try {
        assertParameter('fs', fs);
        assertParameter('gitdir', gitdir);
        assertParameter('oids', oids);

        return await _packObjects({
          fs: new FileSystem(fs),
          cache,
          gitdir,
          oids,
          write,
        })
      } catch (err) {
        err.caller = 'git.packObjects';
        throw err
      }
    }

    // @ts-check

    /**
     * Fetch and merge commits from a remote repository
     *
     * @param {object} args
     * @param {FsClient} args.fs - a file system client
     * @param {HttpClient} args.http - an HTTP client
     * @param {ProgressCallback} [args.onProgress] - optional progress event callback
     * @param {MessageCallback} [args.onMessage] - optional message event callback
     * @param {AuthCallback} [args.onAuth] - optional auth fill callback
     * @param {AuthFailureCallback} [args.onAuthFailure] - optional auth rejected callback
     * @param {AuthSuccessCallback} [args.onAuthSuccess] - optional auth approved callback
     * @param {string} args.dir] - The [working tree](dir-vs-gitdir.md) directory path
     * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path
     * @param {string} [args.ref] - Which branch to merge into. By default this is the currently checked out branch.
     * @param {string} [args.url] - (Added in 1.1.0) The URL of the remote repository. The default is the value set in the git config for that remote.
     * @param {string} [args.remote] - (Added in 1.1.0) If URL is not specified, determines which remote to use.
     * @param {string} [args.remoteRef] - (Added in 1.1.0) The name of the branch on the remote to fetch. By default this is the configured remote tracking branch.
     * @param {boolean} [args.prune = false] - Delete local remote-tracking branches that are not present on the remote
     * @param {boolean} [args.pruneTags = false] - Prune local tags that don’t exist on the remote, and force-update those tags that differ
     * @param {string} [args.corsProxy] - Optional [CORS proxy](https://www.npmjs.com/%40isomorphic-git/cors-proxy). Overrides value in repo config.
     * @param {boolean} [args.singleBranch = false] - Instead of the default behavior of fetching all the branches, only fetch a single branch.
     * @param {boolean} [args.fastForward = true] -  If false, only create merge commits.
     * @param {boolean} [args.fastForwardOnly = false] - Only perform simple fast-forward merges. (Don't create merge commits.)
     * @param {Object<string, string>} [args.headers] - Additional headers to include in HTTP requests, similar to git's `extraHeader` config
     * @param {Object} [args.author] - The details about the author.
     * @param {string} [args.author.name] - Default is `user.name` config.
     * @param {string} [args.author.email] - Default is `user.email` config.
     * @param {number} [args.author.timestamp=Math.floor(Date.now()/1000)] - Set the author timestamp field. This is the integer number of seconds since the Unix epoch (1970-01-01 00:00:00).
     * @param {number} [args.author.timezoneOffset] - Set the author timezone offset field. This is the difference, in minutes, from the current timezone to UTC. Default is `(new Date()).getTimezoneOffset()`.
     * @param {Object} [args.committer = author] - The details about the commit committer, in the same format as the author parameter. If not specified, the author details are used.
     * @param {string} [args.committer.name] - Default is `user.name` config.
     * @param {string} [args.committer.email] - Default is `user.email` config.
     * @param {number} [args.committer.timestamp=Math.floor(Date.now()/1000)] - Set the committer timestamp field. This is the integer number of seconds since the Unix epoch (1970-01-01 00:00:00).
     * @param {number} [args.committer.timezoneOffset] - Set the committer timezone offset field. This is the difference, in minutes, from the current timezone to UTC. Default is `(new Date()).getTimezoneOffset()`.
     * @param {string} [args.signingKey] - passed to [commit](commit.md) when creating a merge commit
     * @param {object} [args.cache] - a [cache](cache.md) object
     *
     * @returns {Promise<void>} Resolves successfully when pull operation completes
     *
     * @example
     * await git.pull({
     *   fs,
     *   http,
     *   dir: '/tutorial',
     *   ref: 'main',
     *   singleBranch: true
     * })
     * console.log('done')
     *
     */
    async function pull({
      fs: _fs,
      http,
      onProgress,
      onMessage,
      onAuth,
      onAuthSuccess,
      onAuthFailure,
      dir,
      gitdir = join(dir, '.git'),
      ref,
      url,
      remote,
      remoteRef,
      prune = false,
      pruneTags = false,
      fastForward = true,
      fastForwardOnly = false,
      corsProxy,
      singleBranch,
      headers = {},
      author: _author,
      committer: _committer,
      signingKey,
      cache = {},
    }) {
      try {
        assertParameter('fs', _fs);
        assertParameter('gitdir', gitdir);

        const fs = new FileSystem(_fs);

        const author = await normalizeAuthorObject({ fs, gitdir, author: _author });
        if (!author) throw new MissingNameError('author')

        const committer = await normalizeCommitterObject({
          fs,
          gitdir,
          author,
          committer: _committer,
        });
        if (!committer) throw new MissingNameError('committer')

        return await _pull({
          fs,
          cache,
          http,
          onProgress,
          onMessage,
          onAuth,
          onAuthSuccess,
          onAuthFailure,
          dir,
          gitdir,
          ref,
          url,
          remote,
          remoteRef,
          fastForward,
          fastForwardOnly,
          corsProxy,
          singleBranch,
          headers,
          author,
          committer,
          signingKey,
          prune,
          pruneTags,
        })
      } catch (err) {
        err.caller = 'git.pull';
        throw err
      }
    }

    /**
     * @param {object} args
     * @param {import('../models/FileSystem.js').FileSystem} args.fs
     * @param {any} args.cache
     * @param {string} [args.dir]
     * @param {string} args.gitdir
     * @param {Iterable<string>} args.start
     * @param {Iterable<string>} args.finish
     * @returns {Promise<Set<string>>}
     */
    async function listCommitsAndTags({
      fs,
      cache,
      dir,
      gitdir = join(dir, '.git'),
      start,
      finish,
    }) {
      const shallows = await GitShallowManager.read({ fs, gitdir });
      const startingSet = new Set();
      const finishingSet = new Set();
      for (const ref of start) {
        startingSet.add(await GitRefManager.resolve({ fs, gitdir, ref }));
      }
      for (const ref of finish) {
        // We may not have these refs locally so we must try/catch
        try {
          const oid = await GitRefManager.resolve({ fs, gitdir, ref });
          finishingSet.add(oid);
        } catch (err) {}
      }
      const visited = new Set();
      // Because git commits are named by their hash, there is no
      // way to construct a cycle. Therefore we won't worry about
      // setting a default recursion limit.
      async function walk(oid) {
        visited.add(oid);
        const { type, object } = await _readObject({ fs, cache, gitdir, oid });
        // Recursively resolve annotated tags
        if (type === 'tag') {
          const tag = GitAnnotatedTag.from(object);
          const commit = tag.headers().object;
          return walk(commit)
        }
        if (type !== 'commit') {
          throw new ObjectTypeError(oid, type, 'commit')
        }
        if (!shallows.has(oid)) {
          const commit = GitCommit.from(object);
          const parents = commit.headers().parent;
          for (oid of parents) {
            if (!finishingSet.has(oid) && !visited.has(oid)) {
              await walk(oid);
            }
          }
        }
      }
      // Let's go walking!
      for (const oid of startingSet) {
        await walk(oid);
      }
      return visited
    }

    /**
     * @param {object} args
     * @param {import('../models/FileSystem.js').FileSystem} args.fs
     * @param {any} args.cache
     * @param {string} [args.dir]
     * @param {string} args.gitdir
     * @param {Iterable<string>} args.oids
     * @returns {Promise<Set<string>>}
     */
    async function listObjects({
      fs,
      cache,
      dir,
      gitdir = join(dir, '.git'),
      oids,
    }) {
      const visited = new Set();
      // We don't do the purest simplest recursion, because we can
      // avoid reading Blob objects entirely since the Tree objects
      // tell us which oids are Blobs and which are Trees.
      async function walk(oid) {
        if (visited.has(oid)) return
        visited.add(oid);
        const { type, object } = await _readObject({ fs, cache, gitdir, oid });
        if (type === 'tag') {
          const tag = GitAnnotatedTag.from(object);
          const obj = tag.headers().object;
          await walk(obj);
        } else if (type === 'commit') {
          const commit = GitCommit.from(object);
          const tree = commit.headers().tree;
          await walk(tree);
        } else if (type === 'tree') {
          const tree = GitTree.from(object);
          for (const entry of tree) {
            // add blobs to the set
            // skip over submodules whose type is 'commit'
            if (entry.type === 'blob') {
              visited.add(entry.oid);
            }
            // recurse for trees
            if (entry.type === 'tree') {
              await walk(entry.oid);
            }
          }
        }
      }
      // Let's go walking!
      for (const oid of oids) {
        await walk(oid);
      }
      return visited
    }

    async function parseReceivePackResponse(packfile) {
      /** @type PushResult */
      const result = {};
      let response = '';
      const read = GitPktLine.streamReader(packfile);
      let line = await read();
      while (line !== true) {
        if (line !== null) response += line.toString('utf8') + '\n';
        line = await read();
      }

      const lines = response.toString('utf8').split('\n');
      // We're expecting "unpack {unpack-result}"
      line = lines.shift();
      if (!line.startsWith('unpack ')) {
        throw new ParseError('unpack ok" or "unpack [error message]', line)
      }
      result.ok = line === 'unpack ok';
      if (!result.ok) {
        result.error = line.slice('unpack '.length);
      }
      result.refs = {};
      for (const line of lines) {
        if (line.trim() === '') continue
        const status = line.slice(0, 2);
        const refAndMessage = line.slice(3);
        let space = refAndMessage.indexOf(' ');
        if (space === -1) space = refAndMessage.length;
        const ref = refAndMessage.slice(0, space);
        const error = refAndMessage.slice(space + 1);
        result.refs[ref] = {
          ok: status === 'ok',
          error,
        };
      }
      return result
    }

    async function writeReceivePackRequest({
      capabilities = [],
      triplets = [],
    }) {
      const packstream = [];
      let capsFirstLine = `\x00 ${capabilities.join(' ')}`;
      for (const trip of triplets) {
        packstream.push(
          GitPktLine.encode(
            `${trip.oldoid} ${trip.oid} ${trip.fullRef}${capsFirstLine}\n`
          )
        );
        capsFirstLine = '';
      }
      packstream.push(GitPktLine.flush());
      return packstream
    }

    // @ts-check

    /**
     * @param {object} args
     * @param {import('../models/FileSystem.js').FileSystem} args.fs
     * @param {any} args.cache
     * @param {HttpClient} args.http
     * @param {ProgressCallback} [args.onProgress]
     * @param {MessageCallback} [args.onMessage]
     * @param {AuthCallback} [args.onAuth]
     * @param {AuthFailureCallback} [args.onAuthFailure]
     * @param {AuthSuccessCallback} [args.onAuthSuccess]
     * @param {string} args.gitdir
     * @param {string} [args.ref]
     * @param {string} [args.remoteRef]
     * @param {string} [args.remote]
     * @param {boolean} [args.force = false]
     * @param {boolean} [args.delete = false]
     * @param {string} [args.url]
     * @param {string} [args.corsProxy]
     * @param {Object<string, string>} [args.headers]
     *
     * @returns {Promise<PushResult>}
     */
    async function _push({
      fs,
      cache,
      http,
      onProgress,
      onMessage,
      onAuth,
      onAuthSuccess,
      onAuthFailure,
      gitdir,
      ref: _ref,
      remoteRef: _remoteRef,
      remote,
      url: _url,
      force = false,
      delete: _delete = false,
      corsProxy,
      headers = {},
    }) {
      const ref = _ref || (await _currentBranch({ fs, gitdir }));
      if (typeof ref === 'undefined') {
        throw new MissingParameterError('ref')
      }
      const config = await GitConfigManager.get({ fs, gitdir });
      // Figure out what remote to use.
      remote =
        remote ||
        (await config.get(`branch.${ref}.pushRemote`)) ||
        (await config.get('remote.pushDefault')) ||
        (await config.get(`branch.${ref}.remote`)) ||
        'origin';
      // Lookup the URL for the given remote.
      const url =
        _url ||
        (await config.get(`remote.${remote}.pushurl`)) ||
        (await config.get(`remote.${remote}.url`));
      if (typeof url === 'undefined') {
        throw new MissingParameterError('remote OR url')
      }
      // Figure out what remote ref to use.
      const remoteRef = _remoteRef || (await config.get(`branch.${ref}.merge`));
      if (typeof url === 'undefined') {
        throw new MissingParameterError('remoteRef')
      }

      if (corsProxy === undefined) {
        corsProxy = await config.get('http.corsProxy');
      }

      const fullRef = await GitRefManager.expand({ fs, gitdir, ref });
      const oid = _delete
        ? '0000000000000000000000000000000000000000'
        : await GitRefManager.resolve({ fs, gitdir, ref: fullRef });

      /** @type typeof import("../managers/GitRemoteHTTP").GitRemoteHTTP */
      const GitRemoteHTTP = GitRemoteManager.getRemoteHelperFor({ url });
      const httpRemote = await GitRemoteHTTP.discover({
        http,
        onAuth,
        onAuthSuccess,
        onAuthFailure,
        corsProxy,
        service: 'git-receive-pack',
        url,
        headers,
        protocolVersion: 1,
      });
      const auth = httpRemote.auth; // hack to get new credentials from CredentialManager API
      let fullRemoteRef;
      if (!remoteRef) {
        fullRemoteRef = fullRef;
      } else {
        try {
          fullRemoteRef = await GitRefManager.expandAgainstMap({
            ref: remoteRef,
            map: httpRemote.refs,
          });
        } catch (err) {
          if (err instanceof NotFoundError) {
            // The remote reference doesn't exist yet.
            // If it is fully specified, use that value. Otherwise, treat it as a branch.
            fullRemoteRef = remoteRef.startsWith('refs/')
              ? remoteRef
              : `refs/heads/${remoteRef}`;
          } else {
            throw err
          }
        }
      }
      const oldoid =
        httpRemote.refs.get(fullRemoteRef) ||
        '0000000000000000000000000000000000000000';

      // Remotes can always accept thin-packs UNLESS they specify the 'no-thin' capability
      const thinPack = !httpRemote.capabilities.has('no-thin');

      let objects = new Set();
      if (!_delete) {
        const finish = [...httpRemote.refs.values()];
        let skipObjects = new Set();

        // If remote branch is present, look for a common merge base.
        if (oldoid !== '0000000000000000000000000000000000000000') {
          // trick to speed up common force push scenarios
          const mergebase = await _findMergeBase({
            fs,
            cache,
            gitdir,
            oids: [oid, oldoid],
          });
          for (const oid of mergebase) finish.push(oid);
          if (thinPack) {
            skipObjects = await listObjects({ fs, cache, gitdir, oids: mergebase });
          }
        }

        // If remote does not have the commit, figure out the objects to send
        if (!finish.includes(oid)) {
          const commits = await listCommitsAndTags({
            fs,
            cache,
            gitdir,
            start: [oid],
            finish,
          });
          objects = await listObjects({ fs, cache, gitdir, oids: commits });
        }

        if (thinPack) {
          // If there's a default branch for the remote lets skip those objects too.
          // Since this is an optional optimization, we just catch and continue if there is
          // an error (because we can't find a default branch, or can't find a commit, etc)
          try {
            // Sadly, the discovery phase with 'forPush' doesn't return symrefs, so we have to
            // rely on existing ones.
            const ref = await GitRefManager.resolve({
              fs,
              gitdir,
              ref: `refs/remotes/${remote}/HEAD`,
              depth: 2,
            });
            const { oid } = await GitRefManager.resolveAgainstMap({
              ref: ref.replace(`refs/remotes/${remote}/`, ''),
              fullref: ref,
              map: httpRemote.refs,
            });
            const oids = [oid];
            for (const oid of await listObjects({ fs, cache, gitdir, oids })) {
              skipObjects.add(oid);
            }
          } catch (e) {}

          // Remove objects that we know the remote already has
          for (const oid of skipObjects) {
            objects.delete(oid);
          }
        }

        if (oid === oldoid) force = true;
        if (!force) {
          // Is it a tag that already exists?
          if (
            fullRef.startsWith('refs/tags') &&
            oldoid !== '0000000000000000000000000000000000000000'
          ) {
            throw new PushRejectedError('tag-exists')
          }
          // Is it a non-fast-forward commit?
          if (
            oid !== '0000000000000000000000000000000000000000' &&
            oldoid !== '0000000000000000000000000000000000000000' &&
            !(await _isDescendent({
              fs,
              cache,
              gitdir,
              oid,
              ancestor: oldoid,
              depth: -1,
            }))
          ) {
            throw new PushRejectedError('not-fast-forward')
          }
        }
      }
      // We can only safely use capabilities that the server also understands.
      // For instance, AWS CodeCommit aborts a push if you include the `agent`!!!
      const capabilities = filterCapabilities(
        [...httpRemote.capabilities],
        ['report-status', 'side-band-64k', `agent=${pkg.agent}`]
      );
      const packstream1 = await writeReceivePackRequest({
        capabilities,
        triplets: [{ oldoid, oid, fullRef: fullRemoteRef }],
      });
      const packstream2 = _delete
        ? []
        : await _pack({
            fs,
            cache,
            gitdir,
            oids: [...objects],
          });
      const res = await GitRemoteHTTP.connect({
        http,
        onProgress,
        corsProxy,
        service: 'git-receive-pack',
        url,
        auth,
        headers,
        body: [...packstream1, ...packstream2],
      });
      const { packfile, progress } = await GitSideBand.demux(res.body);
      if (onMessage) {
        const lines = splitLines(progress);
        forAwait$1(lines, async line => {
          await onMessage(line);
        });
      }
      // Parse the response!
      const result = await parseReceivePackResponse(packfile);
      if (res.headers) {
        result.headers = res.headers;
      }

      // Update the local copy of the remote ref
      if (remote && result.ok && result.refs[fullRemoteRef].ok) {
        // TODO: I think this should actually be using a refspec transform rather than assuming 'refs/remotes/{remote}'
        const ref = `refs/remotes/${remote}/${fullRemoteRef.replace(
      'refs/heads',
      ''
    )}`;
        if (_delete) {
          await GitRefManager.deleteRef({ fs, gitdir, ref });
        } else {
          await GitRefManager.writeRef({ fs, gitdir, ref, value: oid });
        }
      }
      if (result.ok && Object.values(result.refs).every(result => result.ok)) {
        return result
      } else {
        const prettyDetails = Object.entries(result.refs)
          .filter(([k, v]) => !v.ok)
          .map(([k, v]) => `\n  - ${k}: ${v.error}`)
          .join('');
        throw new GitPushError(prettyDetails, result)
      }
    }

    // @ts-check

    /**
     * Push a branch or tag
     *
     * The push command returns an object that describes the result of the attempted push operation.
     * *Notes:* If there were no errors, then there will be no `errors` property. There can be a mix of `ok` messages and `errors` messages.
     *
     * | param  | type [= default] | description                                                                                                                                                                                                      |
     * | ------ | ---------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
     * | ok     | Array\<string\>  | The first item is "unpack" if the overall operation was successful. The remaining items are the names of refs that were updated successfully.                                                                    |
     * | errors | Array\<string\>  | If the overall operation threw and error, the first item will be "unpack {Overall error message}". The remaining items are individual refs that failed to be updated in the format "{ref name} {error message}". |
     *
     * @param {object} args
     * @param {FsClient} args.fs - a file system client
     * @param {HttpClient} args.http - an HTTP client
     * @param {ProgressCallback} [args.onProgress] - optional progress event callback
     * @param {MessageCallback} [args.onMessage] - optional message event callback
     * @param {AuthCallback} [args.onAuth] - optional auth fill callback
     * @param {AuthFailureCallback} [args.onAuthFailure] - optional auth rejected callback
     * @param {AuthSuccessCallback} [args.onAuthSuccess] - optional auth approved callback
     * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path
     * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path
     * @param {string} [args.ref] - Which branch to push. By default this is the currently checked out branch.
     * @param {string} [args.url] - The URL of the remote repository. The default is the value set in the git config for that remote.
     * @param {string} [args.remote] - If URL is not specified, determines which remote to use.
     * @param {string} [args.remoteRef] - The name of the receiving branch on the remote. By default this is the configured remote tracking branch.
     * @param {boolean} [args.force = false] - If true, behaves the same as `git push --force`
     * @param {boolean} [args.delete = false] - If true, delete the remote ref
     * @param {string} [args.corsProxy] - Optional [CORS proxy](https://www.npmjs.com/%40isomorphic-git/cors-proxy). Overrides value in repo config.
     * @param {Object<string, string>} [args.headers] - Additional headers to include in HTTP requests, similar to git's `extraHeader` config
     * @param {object} [args.cache] - a [cache](cache.md) object
     *
     * @returns {Promise<PushResult>} Resolves successfully when push completes with a detailed description of the operation from the server.
     * @see PushResult
     * @see RefUpdateStatus
     *
     * @example
     * let pushResult = await git.push({
     *   fs,
     *   http,
     *   dir: '/tutorial',
     *   remote: 'origin',
     *   ref: 'main',
     *   onAuth: () => ({ username: process.env.GITHUB_TOKEN }),
     * })
     * console.log(pushResult)
     *
     */
    async function push({
      fs,
      http,
      onProgress,
      onMessage,
      onAuth,
      onAuthSuccess,
      onAuthFailure,
      dir,
      gitdir = join(dir, '.git'),
      ref,
      remoteRef,
      remote = 'origin',
      url,
      force = false,
      delete: _delete = false,
      corsProxy,
      headers = {},
      cache = {},
    }) {
      try {
        assertParameter('fs', fs);
        assertParameter('http', http);
        assertParameter('gitdir', gitdir);

        return await _push({
          fs: new FileSystem(fs),
          cache,
          http,
          onProgress,
          onMessage,
          onAuth,
          onAuthSuccess,
          onAuthFailure,
          gitdir,
          ref,
          remoteRef,
          remote,
          url,
          force,
          delete: _delete,
          corsProxy,
          headers,
        })
      } catch (err) {
        err.caller = 'git.push';
        throw err
      }
    }

    async function resolveBlob({ fs, cache, gitdir, oid }) {
      const { type, object } = await _readObject({ fs, cache, gitdir, oid });
      // Resolve annotated tag objects to whatever
      if (type === 'tag') {
        oid = GitAnnotatedTag.from(object).parse().object;
        return resolveBlob({ fs, cache, gitdir, oid })
      }
      if (type !== 'blob') {
        throw new ObjectTypeError(oid, type, 'blob')
      }
      return { oid, blob: new Uint8Array(object) }
    }

    // @ts-check

    /**
     *
     * @typedef {Object} ReadBlobResult - The object returned has the following schema:
     * @property {string} oid
     * @property {Uint8Array} blob
     *
     */

    /**
     * @param {object} args
     * @param {import('../models/FileSystem.js').FileSystem} args.fs
     * @param {any} args.cache
     * @param {string} args.gitdir
     * @param {string} args.oid
     * @param {string} [args.filepath]
     *
     * @returns {Promise<ReadBlobResult>} Resolves successfully with a blob object description
     * @see ReadBlobResult
     */
    async function _readBlob({
      fs,
      cache,
      gitdir,
      oid,
      filepath = undefined,
    }) {
      if (filepath !== undefined) {
        oid = await resolveFilepath({ fs, cache, gitdir, oid, filepath });
      }
      const blob = await resolveBlob({
        fs,
        cache,
        gitdir,
        oid,
      });
      return blob
    }

    // @ts-check

    /**
     *
     * @typedef {Object} ReadBlobResult - The object returned has the following schema:
     * @property {string} oid
     * @property {Uint8Array} blob
     *
     */

    /**
     * Read a blob object directly
     *
     * @param {object} args
     * @param {FsClient} args.fs - a file system client
     * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path
     * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path
     * @param {string} args.oid - The SHA-1 object id to get. Annotated tags, commits, and trees are peeled.
     * @param {string} [args.filepath] - Don't return the object with `oid` itself, but resolve `oid` to a tree and then return the blob object at that filepath.
     * @param {object} [args.cache] - a [cache](cache.md) object
     *
     * @returns {Promise<ReadBlobResult>} Resolves successfully with a blob object description
     * @see ReadBlobResult
     *
     * @example
     * // Get the contents of 'README.md' in the main branch.
     * let commitOid = await git.resolveRef({ fs, dir: '/tutorial', ref: 'main' })
     * console.log(commitOid)
     * let { blob } = await git.readBlob({
     *   fs,
     *   dir: '/tutorial',
     *   oid: commitOid,
     *   filepath: 'README.md'
     * })
     * console.log(Buffer.from(blob).toString('utf8'))
     *
     */
    async function readBlob({
      fs,
      dir,
      gitdir = join(dir, '.git'),
      oid,
      filepath,
      cache = {},
    }) {
      try {
        assertParameter('fs', fs);
        assertParameter('gitdir', gitdir);
        assertParameter('oid', oid);

        return await _readBlob({
          fs: new FileSystem(fs),
          cache,
          gitdir,
          oid,
          filepath,
        })
      } catch (err) {
        err.caller = 'git.readBlob';
        throw err
      }
    }

    // @ts-check

    /**
     * Read a commit object directly
     *
     * @param {object} args
     * @param {FsClient} args.fs - a file system client
     * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path
     * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path
     * @param {string} args.oid - The SHA-1 object id to get. Annotated tags are peeled.
     * @param {object} [args.cache] - a [cache](cache.md) object
     *
     * @returns {Promise<ReadCommitResult>} Resolves successfully with a git commit object
     * @see ReadCommitResult
     * @see CommitObject
     *
     * @example
     * // Read a commit object
     * let sha = await git.resolveRef({ fs, dir: '/tutorial', ref: 'main' })
     * console.log(sha)
     * let commit = await git.readCommit({ fs, dir: '/tutorial', oid: sha })
     * console.log(commit)
     *
     */
    async function readCommit({
      fs,
      dir,
      gitdir = join(dir, '.git'),
      oid,
      cache = {},
    }) {
      try {
        assertParameter('fs', fs);
        assertParameter('gitdir', gitdir);
        assertParameter('oid', oid);

        return await _readCommit({
          fs: new FileSystem(fs),
          cache,
          gitdir,
          oid,
        })
      } catch (err) {
        err.caller = 'git.readCommit';
        throw err
      }
    }

    // @ts-check

    /**
     * Read the contents of a note
     *
     * @param {object} args
     * @param {import('../models/FileSystem.js').FileSystem} args.fs
     * @param {any} args.cache
     * @param {string} args.gitdir
     * @param {string} [args.ref] - The notes ref to look under
     * @param {string} args.oid
     *
     * @returns {Promise<Uint8Array>} Resolves successfully with note contents as a Buffer.
     */

    async function _readNote({
      fs,
      cache,
      gitdir,
      ref = 'refs/notes/commits',
      oid,
    }) {
      const parent = await GitRefManager.resolve({ gitdir, fs, ref });
      const { blob } = await _readBlob({
        fs,
        cache,
        gitdir,
        oid: parent,
        filepath: oid,
      });

      return blob
    }

    // @ts-check

    /**
     * Read the contents of a note
     *
     * @param {object} args
     * @param {FsClient} args.fs - a file system client
     * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path
     * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path
     * @param {string} [args.ref] - The notes ref to look under
     * @param {string} args.oid - The SHA-1 object id of the object to get the note for.
     * @param {object} [args.cache] - a [cache](cache.md) object
     *
     * @returns {Promise<Uint8Array>} Resolves successfully with note contents as a Buffer.
     */

    async function readNote({
      fs,
      dir,
      gitdir = join(dir, '.git'),
      ref = 'refs/notes/commits',
      oid,
      cache = {},
    }) {
      try {
        assertParameter('fs', fs);
        assertParameter('gitdir', gitdir);
        assertParameter('ref', ref);
        assertParameter('oid', oid);

        return await _readNote({
          fs: new FileSystem(fs),
          cache,
          gitdir,
          ref,
          oid,
        })
      } catch (err) {
        err.caller = 'git.readNote';
        throw err
      }
    }

    // @ts-check

    /**
     *
     * @typedef {Object} DeflatedObject
     * @property {string} oid
     * @property {'deflated'} type
     * @property {'deflated'} format
     * @property {Uint8Array} object
     * @property {string} [source]
     *
     */

    /**
     *
     * @typedef {Object} WrappedObject
     * @property {string} oid
     * @property {'wrapped'} type
     * @property {'wrapped'} format
     * @property {Uint8Array} object
     * @property {string} [source]
     *
     */

    /**
     *
     * @typedef {Object} RawObject
     * @property {string} oid
     * @property {'blob'|'commit'|'tree'|'tag'} type
     * @property {'content'} format
     * @property {Uint8Array} object
     * @property {string} [source]
     *
     */

    /**
     *
     * @typedef {Object} ParsedBlobObject
     * @property {string} oid
     * @property {'blob'} type
     * @property {'parsed'} format
     * @property {string} object
     * @property {string} [source]
     *
     */

    /**
     *
     * @typedef {Object} ParsedCommitObject
     * @property {string} oid
     * @property {'commit'} type
     * @property {'parsed'} format
     * @property {CommitObject} object
     * @property {string} [source]
     *
     */

    /**
     *
     * @typedef {Object} ParsedTreeObject
     * @property {string} oid
     * @property {'tree'} type
     * @property {'parsed'} format
     * @property {TreeObject} object
     * @property {string} [source]
     *
     */

    /**
     *
     * @typedef {Object} ParsedTagObject
     * @property {string} oid
     * @property {'tag'} type
     * @property {'parsed'} format
     * @property {TagObject} object
     * @property {string} [source]
     *
     */

    /**
     *
     * @typedef {ParsedBlobObject | ParsedCommitObject | ParsedTreeObject | ParsedTagObject} ParsedObject
     */

    /**
     *
     * @typedef {DeflatedObject | WrappedObject | RawObject | ParsedObject } ReadObjectResult
     */

    /**
     * Read a git object directly by its SHA-1 object id
     *
     * Regarding `ReadObjectResult`:
     *
     * - `oid` will be the same as the `oid` argument unless the `filepath` argument is provided, in which case it will be the oid of the tree or blob being returned.
     * - `type` of deflated objects is `'deflated'`, and `type` of wrapped objects is `'wrapped'`
     * - `format` is usually, but not always, the format you requested. Packfiles do not store each object individually compressed so if you end up reading the object from a packfile it will be returned in format 'content' even if you requested 'deflated' or 'wrapped'.
     * - `object` will be an actual Object if format is 'parsed' and the object is a commit, tree, or annotated tag. Blobs are still formatted as Buffers unless an encoding is provided in which case they'll be strings. If format is anything other than 'parsed', object will be a Buffer.
     * - `source` is the name of the packfile or loose object file where the object was found.
     *
     * The `format` parameter can have the following values:
     *
     * | param      | description                                                                                                                                                                                               |
     * | ---------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
     * | 'deflated' | Return the raw deflate-compressed buffer for an object if possible. Useful for efficiently shuffling around loose objects when you don't care about the contents and can save time by not inflating them. |
     * | 'wrapped'  | Return the inflated object buffer wrapped in the git object header if possible. This is the raw data used when calculating the SHA-1 object id of a git object.                                           |
     * | 'content'  | Return the object buffer without the git header.                                                                                                                                                          |
     * | 'parsed'   | Returns a parsed representation of the object.                                                                                                                                                            |
     *
     * The result will be in one of the following schemas:
     *
     * ## `'deflated'` format
     *
     * {@link DeflatedObject typedef}
     *
     * ## `'wrapped'` format
     *
     * {@link WrappedObject typedef}
     *
     * ## `'content'` format
     *
     * {@link RawObject typedef}
     *
     * ## `'parsed'` format
     *
     * ### parsed `'blob'` type
     *
     * {@link ParsedBlobObject typedef}
     *
     * ### parsed `'commit'` type
     *
     * {@link ParsedCommitObject typedef}
     * {@link CommitObject typedef}
     *
     * ### parsed `'tree'` type
     *
     * {@link ParsedTreeObject typedef}
     * {@link TreeObject typedef}
     * {@link TreeEntry typedef}
     *
     * ### parsed `'tag'` type
     *
     * {@link ParsedTagObject typedef}
     * {@link TagObject typedef}
     *
     * @deprecated
     * > This command is overly complicated.
     * >
     * > If you know the type of object you are reading, use [`readBlob`](./readBlob.md), [`readCommit`](./readCommit.md), [`readTag`](./readTag.md), or [`readTree`](./readTree.md).
     *
     * @param {object} args
     * @param {FsClient} args.fs - a file system client
     * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path
     * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path
     * @param {string} args.oid - The SHA-1 object id to get
     * @param {'deflated' | 'wrapped' | 'content' | 'parsed'} [args.format = 'parsed'] - What format to return the object in. The choices are described in more detail below.
     * @param {string} [args.filepath] - Don't return the object with `oid` itself, but resolve `oid` to a tree and then return the object at that filepath. To return the root directory of a tree set filepath to `''`
     * @param {string} [args.encoding] - A convenience argument that only affects blobs. Instead of returning `object` as a buffer, it returns a string parsed using the given encoding.
     * @param {object} [args.cache] - a [cache](cache.md) object
     *
     * @returns {Promise<ReadObjectResult>} Resolves successfully with a git object description
     * @see ReadObjectResult
     *
     * @example
     * // Given a ransom SHA-1 object id, figure out what it is
     * let { type, object } = await git.readObject({
     *   fs,
     *   dir: '/tutorial',
     *   oid: '0698a781a02264a6f37ba3ff41d78067eaf0f075'
     * })
     * switch (type) {
     *   case 'commit': {
     *     console.log(object)
     *     break
     *   }
     *   case 'tree': {
     *     console.log(object)
     *     break
     *   }
     *   case 'blob': {
     *     console.log(object)
     *     break
     *   }
     *   case 'tag': {
     *     console.log(object)
     *     break
     *   }
     * }
     *
     */
    async function readObject({
      fs: _fs,
      dir,
      gitdir = join(dir, '.git'),
      oid,
      format = 'parsed',
      filepath = undefined,
      encoding = undefined,
      cache = {},
    }) {
      try {
        assertParameter('fs', _fs);
        assertParameter('gitdir', gitdir);
        assertParameter('oid', oid);

        const fs = new FileSystem(_fs);
        if (filepath !== undefined) {
          oid = await resolveFilepath({
            fs,
            cache,
            gitdir,
            oid,
            filepath,
          });
        }
        // GitObjectManager does not know how to parse content, so we tweak that parameter before passing it.
        const _format = format === 'parsed' ? 'content' : format;
        const result = await _readObject({
          fs,
          cache,
          gitdir,
          oid,
          format: _format,
        });
        result.oid = oid;
        if (format === 'parsed') {
          result.format = 'parsed';
          switch (result.type) {
            case 'commit':
              result.object = GitCommit.from(result.object).parse();
              break
            case 'tree':
              result.object = GitTree.from(result.object).entries();
              break
            case 'blob':
              // Here we consider returning a raw Buffer as the 'content' format
              // and returning a string as the 'parsed' format
              if (encoding) {
                result.object = result.object.toString(encoding);
              } else {
                result.object = new Uint8Array(result.object);
                result.format = 'content';
              }
              break
            case 'tag':
              result.object = GitAnnotatedTag.from(result.object).parse();
              break
            default:
              throw new ObjectTypeError(
                result.oid,
                result.type,
                'blob|commit|tag|tree'
              )
          }
        } else if (result.format === 'deflated' || result.format === 'wrapped') {
          result.type = result.format;
        }
        return result
      } catch (err) {
        err.caller = 'git.readObject';
        throw err
      }
    }

    // @ts-check

    /**
     *
     * @typedef {Object} ReadTagResult - The object returned has the following schema:
     * @property {string} oid - SHA-1 object id of this tag
     * @property {TagObject} tag - the parsed tag object
     * @property {string} payload - PGP signing payload
     */

    /**
     * @param {object} args
     * @param {import('../models/FileSystem.js').FileSystem} args.fs
     * @param {any} args.cache
     * @param {string} args.gitdir
     * @param {string} args.oid
     *
     * @returns {Promise<ReadTagResult>}
     */
    async function _readTag({ fs, cache, gitdir, oid }) {
      const { type, object } = await _readObject({
        fs,
        cache,
        gitdir,
        oid,
        format: 'content',
      });
      if (type !== 'tag') {
        throw new ObjectTypeError(oid, type, 'tag')
      }
      const tag = GitAnnotatedTag.from(object);
      const result = {
        oid,
        tag: tag.parse(),
        payload: tag.payload(),
      };
      // @ts-ignore
      return result
    }

    /**
     *
     * @typedef {Object} ReadTagResult - The object returned has the following schema:
     * @property {string} oid - SHA-1 object id of this tag
     * @property {TagObject} tag - the parsed tag object
     * @property {string} payload - PGP signing payload
     */

    /**
     * Read an annotated tag object directly
     *
     * @param {object} args
     * @param {FsClient} args.fs - a file system client
     * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path
     * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path
     * @param {string} args.oid - The SHA-1 object id to get
     * @param {object} [args.cache] - a [cache](cache.md) object
     *
     * @returns {Promise<ReadTagResult>} Resolves successfully with a git object description
     * @see ReadTagResult
     * @see TagObject
     *
     */
    async function readTag({
      fs,
      dir,
      gitdir = join(dir, '.git'),
      oid,
      cache = {},
    }) {
      try {
        assertParameter('fs', fs);
        assertParameter('gitdir', gitdir);
        assertParameter('oid', oid);

        return await _readTag({
          fs: new FileSystem(fs),
          cache,
          gitdir,
          oid,
        })
      } catch (err) {
        err.caller = 'git.readTag';
        throw err
      }
    }

    // @ts-check

    /**
     *
     * @typedef {Object} ReadTreeResult - The object returned has the following schema:
     * @property {string} oid - SHA-1 object id of this tree
     * @property {TreeObject} tree - the parsed tree object
     */

    /**
     * Read a tree object directly
     *
     * @param {object} args
     * @param {FsClient} args.fs - a file system client
     * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path
     * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path
     * @param {string} args.oid - The SHA-1 object id to get. Annotated tags and commits are peeled.
     * @param {string} [args.filepath] - Don't return the object with `oid` itself, but resolve `oid` to a tree and then return the tree object at that filepath.
     * @param {object} [args.cache] - a [cache](cache.md) object
     *
     * @returns {Promise<ReadTreeResult>} Resolves successfully with a git tree object
     * @see ReadTreeResult
     * @see TreeObject
     * @see TreeEntry
     *
     */
    async function readTree({
      fs,
      dir,
      gitdir = join(dir, '.git'),
      oid,
      filepath = undefined,
      cache = {},
    }) {
      try {
        assertParameter('fs', fs);
        assertParameter('gitdir', gitdir);
        assertParameter('oid', oid);

        return await _readTree({
          fs: new FileSystem(fs),
          cache,
          gitdir,
          oid,
          filepath,
        })
      } catch (err) {
        err.caller = 'git.readTree';
        throw err
      }
    }

    // @ts-check

    /**
     * Remove a file from the git index (aka staging area)
     *
     * Note that this does NOT delete the file in the working directory.
     *
     * @param {object} args
     * @param {FsClient} args.fs - a file system client
     * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path
     * @param {string} [args.gitdir=join(dir, '.git')] - [required] The [git directory](dir-vs-gitdir.md) path
     * @param {string} args.filepath - The path to the file to remove from the index
     * @param {object} [args.cache] - a [cache](cache.md) object
     *
     * @returns {Promise<void>} Resolves successfully once the git index has been updated
     *
     * @example
     * await git.remove({ fs, dir: '/tutorial', filepath: 'README.md' })
     * console.log('done')
     *
     */
    async function remove({
      fs: _fs,
      dir,
      gitdir = join(dir, '.git'),
      filepath,
      cache = {},
    }) {
      try {
        assertParameter('fs', _fs);
        assertParameter('gitdir', gitdir);
        assertParameter('filepath', filepath);

        await GitIndexManager.acquire(
          { fs: new FileSystem(_fs), gitdir, cache },
          async function(index) {
            index.delete({ filepath });
          }
        );
      } catch (err) {
        err.caller = 'git.remove';
        throw err
      }
    }

    // @ts-check

    /**
     * @param {object} args
     * @param {import('../models/FileSystem.js').FileSystem} args.fs
     * @param {object} args.cache
     * @param {SignCallback} [args.onSign]
     * @param {string} [args.dir]
     * @param {string} [args.gitdir=join(dir,'.git')]
     * @param {string} [args.ref]
     * @param {string} args.oid
     * @param {Object} args.author
     * @param {string} args.author.name
     * @param {string} args.author.email
     * @param {number} args.author.timestamp
     * @param {number} args.author.timezoneOffset
     * @param {Object} args.committer
     * @param {string} args.committer.name
     * @param {string} args.committer.email
     * @param {number} args.committer.timestamp
     * @param {number} args.committer.timezoneOffset
     * @param {string} [args.signingKey]
     *
     * @returns {Promise<string>}
     */

    async function _removeNote({
      fs,
      cache,
      onSign,
      gitdir,
      ref = 'refs/notes/commits',
      oid,
      author,
      committer,
      signingKey,
    }) {
      // Get the current note commit
      let parent;
      try {
        parent = await GitRefManager.resolve({ gitdir, fs, ref });
      } catch (err) {
        if (!(err instanceof NotFoundError)) {
          throw err
        }
      }

      // I'm using the "empty tree" magic number here for brevity
      const result = await _readTree({
        fs,
        gitdir,
        oid: parent || '4b825dc642cb6eb9a060e54bf8d69288fbee4904',
      });
      let tree = result.tree;

      // Remove the note blob entry from the tree
      tree = tree.filter(entry => entry.path !== oid);

      // Create the new note tree
      const treeOid = await _writeTree({
        fs,
        gitdir,
        tree,
      });

      // Create the new note commit
      const commitOid = await _commit({
        fs,
        cache,
        onSign,
        gitdir,
        ref,
        tree: treeOid,
        parent: parent && [parent],
        message: `Note removed by 'isomorphic-git removeNote'\n`,
        author,
        committer,
        signingKey,
      });

      return commitOid
    }

    // @ts-check

    /**
     * Remove an object note
     *
     * @param {object} args
     * @param {FsClient} args.fs - a file system client
     * @param {SignCallback} [args.onSign] - a PGP signing implementation
     * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path
     * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path
     * @param {string} [args.ref] - The notes ref to look under
     * @param {string} args.oid - The SHA-1 object id of the object to remove the note from.
     * @param {Object} [args.author] - The details about the author.
     * @param {string} [args.author.name] - Default is `user.name` config.
     * @param {string} [args.author.email] - Default is `user.email` config.
     * @param {number} [args.author.timestamp=Math.floor(Date.now()/1000)] - Set the author timestamp field. This is the integer number of seconds since the Unix epoch (1970-01-01 00:00:00).
     * @param {number} [args.author.timezoneOffset] - Set the author timezone offset field. This is the difference, in minutes, from the current timezone to UTC. Default is `(new Date()).getTimezoneOffset()`.
     * @param {Object} [args.committer = author] - The details about the note committer, in the same format as the author parameter. If not specified, the author details are used.
     * @param {string} [args.committer.name] - Default is `user.name` config.
     * @param {string} [args.committer.email] - Default is `user.email` config.
     * @param {number} [args.committer.timestamp=Math.floor(Date.now()/1000)] - Set the committer timestamp field. This is the integer number of seconds since the Unix epoch (1970-01-01 00:00:00).
     * @param {number} [args.committer.timezoneOffset] - Set the committer timezone offset field. This is the difference, in minutes, from the current timezone to UTC. Default is `(new Date()).getTimezoneOffset()`.
     * @param {string} [args.signingKey] - Sign the tag object using this private PGP key.
     * @param {object} [args.cache] - a [cache](cache.md) object
     *
     * @returns {Promise<string>} Resolves successfully with the SHA-1 object id of the commit object for the note removal.
     */

    async function removeNote({
      fs: _fs,
      onSign,
      dir,
      gitdir = join(dir, '.git'),
      ref = 'refs/notes/commits',
      oid,
      author: _author,
      committer: _committer,
      signingKey,
      cache = {},
    }) {
      try {
        assertParameter('fs', _fs);
        assertParameter('gitdir', gitdir);
        assertParameter('oid', oid);

        const fs = new FileSystem(_fs);

        const author = await normalizeAuthorObject({ fs, gitdir, author: _author });
        if (!author) throw new MissingNameError('author')

        const committer = await normalizeCommitterObject({
          fs,
          gitdir,
          author,
          committer: _committer,
        });
        if (!committer) throw new MissingNameError('committer')

        return await _removeNote({
          fs,
          cache,
          onSign,
          gitdir,
          ref,
          oid,
          author,
          committer,
          signingKey,
        })
      } catch (err) {
        err.caller = 'git.removeNote';
        throw err
      }
    }

    // @ts-check

    /**
     * Rename a branch
     *
     * @param {object} args
     * @param {import('../models/FileSystem.js').FileSystem} args.fs
     * @param {string} args.gitdir
     * @param {string} args.ref - The name of the new branch
     * @param {string} args.oldref - The name of the old branch
     * @param {boolean} [args.checkout = false]
     *
     * @returns {Promise<void>} Resolves successfully when filesystem operations are complete
     */
    async function _renameBranch({
      fs,
      gitdir,
      oldref,
      ref,
      checkout = false,
    }) {
      if (ref !== lib.clean(ref)) {
        throw new InvalidRefNameError(ref, lib.clean(ref))
      }

      if (oldref !== lib.clean(oldref)) {
        throw new InvalidRefNameError(oldref, lib.clean(oldref))
      }

      const fulloldref = `refs/heads/${oldref}`;
      const fullnewref = `refs/heads/${ref}`;

      const newexist = await GitRefManager.exists({ fs, gitdir, ref: fullnewref });

      if (newexist) {
        throw new AlreadyExistsError('branch', ref, false)
      }

      const value = await GitRefManager.resolve({
        fs,
        gitdir,
        ref: fulloldref,
        depth: 1,
      });

      await GitRefManager.writeRef({ fs, gitdir, ref: fullnewref, value });
      await GitRefManager.deleteRef({ fs, gitdir, ref: fulloldref });

      if (checkout) {
        // Update HEAD
        await GitRefManager.writeSymbolicRef({
          fs,
          gitdir,
          ref: 'HEAD',
          value: fullnewref,
        });
      }
    }

    // @ts-check

    /**
     * Rename a branch
     *
     * @param {object} args
     * @param {FsClient} args.fs - a file system implementation
     * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path
     * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path
     * @param {string} args.ref - What to name the branch
     * @param {string} args.oldref - What the name of the branch was
     * @param {boolean} [args.checkout = false] - Update `HEAD` to point at the newly created branch
     *
     * @returns {Promise<void>} Resolves successfully when filesystem operations are complete
     *
     * @example
     * await git.renameBranch({ fs, dir: '/tutorial', ref: 'main', oldref: 'master' })
     * console.log('done')
     *
     */
    async function renameBranch({
      fs,
      dir,
      gitdir = join(dir, '.git'),
      ref,
      oldref,
      checkout = false,
    }) {
      try {
        assertParameter('fs', fs);
        assertParameter('gitdir', gitdir);
        assertParameter('ref', ref);
        assertParameter('oldref', oldref);
        return await _renameBranch({
          fs: new FileSystem(fs),
          gitdir,
          ref,
          oldref,
          checkout,
        })
      } catch (err) {
        err.caller = 'git.renameBranch';
        throw err
      }
    }

    async function hashObject$1({ gitdir, type, object }) {
      return shasum(GitObject.wrap({ type, object }))
    }

    // @ts-check

    /**
     * Reset a file in the git index (aka staging area)
     *
     * Note that this does NOT modify the file in the working directory.
     *
     * @param {object} args
     * @param {FsClient} args.fs - a file system client
     * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path
     * @param {string} [args.gitdir=join(dir, '.git')] - [required] The [git directory](dir-vs-gitdir.md) path
     * @param {string} args.filepath - The path to the file to reset in the index
     * @param {string} [args.ref = 'HEAD'] - A ref to the commit to use
     * @param {object} [args.cache] - a [cache](cache.md) object
     *
     * @returns {Promise<void>} Resolves successfully once the git index has been updated
     *
     * @example
     * await git.resetIndex({ fs, dir: '/tutorial', filepath: 'README.md' })
     * console.log('done')
     *
     */
    async function resetIndex({
      fs: _fs,
      dir,
      gitdir = join(dir, '.git'),
      filepath,
      ref,
      cache = {},
    }) {
      try {
        assertParameter('fs', _fs);
        assertParameter('gitdir', gitdir);
        assertParameter('filepath', filepath);

        const fs = new FileSystem(_fs);

        let oid;
        let workdirOid;

        try {
          // Resolve commit
          oid = await GitRefManager.resolve({ fs, gitdir, ref: ref || 'HEAD' });
        } catch (e) {
          if (ref) {
            // Only throw the error if a ref is explicitly provided
            throw e
          }
        }

        // Not having an oid at this point means `resetIndex()` was called without explicit `ref` on a new git
        // repository. If that happens, we can skip resolving the file path.
        if (oid) {
          try {
            // Resolve blob
            oid = await resolveFilepath({
              fs,
              cache,
              gitdir,
              oid,
              filepath,
            });
          } catch (e) {
            // This means we're resetting the file to a "deleted" state
            oid = null;
          }
        }

        // For files that aren't in the workdir use zeros
        let stats = {
          ctime: new Date(0),
          mtime: new Date(0),
          dev: 0,
          ino: 0,
          mode: 0,
          uid: 0,
          gid: 0,
          size: 0,
        };
        // If the file exists in the workdir...
        const object = dir && (await fs.read(join(dir, filepath)));
        if (object) {
          // ... and has the same hash as the desired state...
          workdirOid = await hashObject$1({
            gitdir,
            type: 'blob',
            object,
          });
          if (oid === workdirOid) {
            // ... use the workdir Stats object
            stats = await fs.lstat(join(dir, filepath));
          }
        }
        await GitIndexManager.acquire({ fs, gitdir, cache }, async function(index) {
          index.delete({ filepath });
          if (oid) {
            index.insert({ filepath, stats, oid });
          }
        });
      } catch (err) {
        err.caller = 'git.reset';
        throw err
      }
    }

    // @ts-check

    /**
     * Get the value of a symbolic ref or resolve a ref to its SHA-1 object id
     *
     * @param {object} args
     * @param {FsClient} args.fs - a file system client
     * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path
     * @param {string} [args.gitdir=join(dir, '.git')] - [required] The [git directory](dir-vs-gitdir.md) path
     * @param {string} args.ref - The ref to resolve
     * @param {number} [args.depth = undefined] - How many symbolic references to follow before returning
     *
     * @returns {Promise<string>} Resolves successfully with a SHA-1 object id or the value of a symbolic ref
     *
     * @example
     * let currentCommit = await git.resolveRef({ fs, dir: '/tutorial', ref: 'HEAD' })
     * console.log(currentCommit)
     * let currentBranch = await git.resolveRef({ fs, dir: '/tutorial', ref: 'HEAD', depth: 2 })
     * console.log(currentBranch)
     *
     */
    async function resolveRef({
      fs,
      dir,
      gitdir = join(dir, '.git'),
      ref,
      depth,
    }) {
      try {
        assertParameter('fs', fs);
        assertParameter('gitdir', gitdir);
        assertParameter('ref', ref);

        const oid = await GitRefManager.resolve({
          fs: new FileSystem(fs),
          gitdir,
          ref,
          depth,
        });
        return oid
      } catch (err) {
        err.caller = 'git.resolveRef';
        throw err
      }
    }

    // @ts-check

    /**
     * Write an entry to the git config files.
     *
     * *Caveats:*
     * - Currently only the local `$GIT_DIR/config` file can be read or written. However support for the global `~/.gitconfig` and system `$(prefix)/etc/gitconfig` will be added in the future.
     * - The current parser does not support the more exotic features of the git-config file format such as `[include]` and `[includeIf]`.
     *
     * @param {Object} args
     * @param {FsClient} args.fs - a file system implementation
     * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path
     * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path
     * @param {string} args.path - The key of the git config entry
     * @param {string | boolean | number | void} args.value - A value to store at that path. (Use `undefined` as the value to delete a config entry.)
     * @param {boolean} [args.append = false] - If true, will append rather than replace when setting (use with multi-valued config options).
     *
     * @returns {Promise<void>} Resolves successfully when operation completed
     *
     * @example
     * // Write config value
     * await git.setConfig({
     *   fs,
     *   dir: '/tutorial',
     *   path: 'user.name',
     *   value: 'Mr. Test'
     * })
     *
     * // Print out config file
     * let file = await fs.promises.readFile('/tutorial/.git/config', 'utf8')
     * console.log(file)
     *
     * // Delete a config entry
     * await git.setConfig({
     *   fs,
     *   dir: '/tutorial',
     *   path: 'user.name',
     *   value: undefined
     * })
     *
     * // Print out config file
     * file = await fs.promises.readFile('/tutorial/.git/config', 'utf8')
     * console.log(file)
     */
    async function setConfig({
      fs: _fs,
      dir,
      gitdir = join(dir, '.git'),
      path,
      value,
      append = false,
    }) {
      try {
        assertParameter('fs', _fs);
        assertParameter('gitdir', gitdir);
        assertParameter('path', path);
        // assertParameter('value', value) // We actually allow 'undefined' as a value to unset/delete

        const fs = new FileSystem(_fs);
        const config = await GitConfigManager.get({ fs, gitdir });
        if (append) {
          await config.append(path, value);
        } else {
          await config.set(path, value);
        }
        await GitConfigManager.save({ fs, gitdir, config });
      } catch (err) {
        err.caller = 'git.setConfig';
        throw err
      }
    }

    // @ts-check

    /**
     * Tell whether a file has been changed
     *
     * The possible resolve values are:
     *
     * | status                | description                                                                           |
     * | --------------------- | ------------------------------------------------------------------------------------- |
     * | `"ignored"`           | file ignored by a .gitignore rule                                                     |
     * | `"unmodified"`        | file unchanged from HEAD commit                                                       |
     * | `"*modified"`         | file has modifications, not yet staged                                                |
     * | `"*deleted"`          | file has been removed, but the removal is not yet staged                              |
     * | `"*added"`            | file is untracked, not yet staged                                                     |
     * | `"absent"`            | file not present in HEAD commit, staging area, or working dir                         |
     * | `"modified"`          | file has modifications, staged                                                        |
     * | `"deleted"`           | file has been removed, staged                                                         |
     * | `"added"`             | previously untracked file, staged                                                     |
     * | `"*unmodified"`       | working dir and HEAD commit match, but index differs                                  |
     * | `"*absent"`           | file not present in working dir or HEAD commit, but present in the index              |
     * | `"*undeleted"`        | file was deleted from the index, but is still in the working dir                      |
     * | `"*undeletemodified"` | file was deleted from the index, but is present with modifications in the working dir |
     *
     * @param {object} args
     * @param {FsClient} args.fs - a file system client
     * @param {string} args.dir - The [working tree](dir-vs-gitdir.md) directory path
     * @param {string} [args.gitdir=join(dir, '.git')] - [required] The [git directory](dir-vs-gitdir.md) path
     * @param {string} args.filepath - The path to the file to query
     * @param {object} [args.cache] - a [cache](cache.md) object
     *
     * @returns {Promise<'ignored'|'unmodified'|'*modified'|'*deleted'|'*added'|'absent'|'modified'|'deleted'|'added'|'*unmodified'|'*absent'|'*undeleted'|'*undeletemodified'>} Resolves successfully with the file's git status
     *
     * @example
     * let status = await git.status({ fs, dir: '/tutorial', filepath: 'README.md' })
     * console.log(status)
     *
     */
    async function status({
      fs: _fs,
      dir,
      gitdir = join(dir, '.git'),
      filepath,
      cache = {},
    }) {
      try {
        assertParameter('fs', _fs);
        assertParameter('gitdir', gitdir);
        assertParameter('filepath', filepath);

        const fs = new FileSystem(_fs);
        const ignored = await GitIgnoreManager.isIgnored({
          fs,
          gitdir,
          dir,
          filepath,
        });
        if (ignored) {
          return 'ignored'
        }
        const headTree = await getHeadTree({ fs, cache, gitdir });
        const treeOid = await getOidAtPath({
          fs,
          cache,
          gitdir,
          tree: headTree,
          path: filepath,
        });
        const indexEntry = await GitIndexManager.acquire(
          { fs, gitdir, cache },
          async function(index) {
            for (const entry of index) {
              if (entry.path === filepath) return entry
            }
            return null
          }
        );
        const stats = await fs.lstat(join(dir, filepath));

        const H = treeOid !== null; // head
        const I = indexEntry !== null; // index
        const W = stats !== null; // working dir

        const getWorkdirOid = async () => {
          if (I && !compareStats(indexEntry, stats)) {
            return indexEntry.oid
          } else {
            const object = await fs.read(join(dir, filepath));
            const workdirOid = await hashObject$1({
              gitdir,
              type: 'blob',
              object,
            });
            // If the oid in the index === working dir oid but stats differed update cache
            if (I && indexEntry.oid === workdirOid) {
              // and as long as our fs.stats aren't bad.
              // size of -1 happens over a BrowserFS HTTP Backend that doesn't serve Content-Length headers
              // (like the Karma webserver) because BrowserFS HTTP Backend uses HTTP HEAD requests to do fs.stat
              if (stats.size !== -1) {
                // We don't await this so we can return faster for one-off cases.
                GitIndexManager.acquire({ fs, gitdir, cache }, async function(
                  index
                ) {
                  index.insert({ filepath, stats, oid: workdirOid });
                });
              }
            }
            return workdirOid
          }
        };

        if (!H && !W && !I) return 'absent' // ---
        if (!H && !W && I) return '*absent' // -A-
        if (!H && W && !I) return '*added' // --A
        if (!H && W && I) {
          const workdirOid = await getWorkdirOid();
          // @ts-ignore
          return workdirOid === indexEntry.oid ? 'added' : '*added' // -AA : -AB
        }
        if (H && !W && !I) return 'deleted' // A--
        if (H && !W && I) {
          // @ts-ignore
          return treeOid === indexEntry.oid ? '*deleted' : '*deleted' // AA- : AB-
        }
        if (H && W && !I) {
          const workdirOid = await getWorkdirOid();
          return workdirOid === treeOid ? '*undeleted' : '*undeletemodified' // A-A : A-B
        }
        if (H && W && I) {
          const workdirOid = await getWorkdirOid();
          if (workdirOid === treeOid) {
            // @ts-ignore
            return workdirOid === indexEntry.oid ? 'unmodified' : '*unmodified' // AAA : ABA
          } else {
            // @ts-ignore
            return workdirOid === indexEntry.oid ? 'modified' : '*modified' // ABB : AAB
          }
        }
        /*
        ---
        -A-
        --A
        -AA
        -AB
        A--
        AA-
        AB-
        A-A
        A-B
        AAA
        ABA
        ABB
        AAB
        */
      } catch (err) {
        err.caller = 'git.status';
        throw err
      }
    }

    async function getOidAtPath({ fs, cache, gitdir, tree, path }) {
      if (typeof path === 'string') path = path.split('/');
      const dirname = path.shift();
      for (const entry of tree) {
        if (entry.path === dirname) {
          if (path.length === 0) {
            return entry.oid
          }
          const { type, object } = await _readObject({
            fs,
            cache,
            gitdir,
            oid: entry.oid,
          });
          if (type === 'tree') {
            const tree = GitTree.from(object);
            return getOidAtPath({ fs, cache, gitdir, tree, path })
          }
          if (type === 'blob') {
            throw new ObjectTypeError(entry.oid, type, 'blob', path.join('/'))
          }
        }
      }
      return null
    }

    async function getHeadTree({ fs, cache, gitdir }) {
      // Get the tree from the HEAD commit.
      let oid;
      try {
        oid = await GitRefManager.resolve({ fs, gitdir, ref: 'HEAD' });
      } catch (e) {
        // Handle fresh branches with no commits
        if (e instanceof NotFoundError) {
          return []
        }
      }
      const { tree } = await _readTree({ fs, cache, gitdir, oid });
      return tree
    }

    // @ts-check

    /**
     * Efficiently get the status of multiple files at once.
     *
     * The returned `StatusMatrix` is admittedly not the easiest format to read.
     * However it conveys a large amount of information in dense format that should make it easy to create reports about the current state of the repository;
     * without having to do multiple, time-consuming isomorphic-git calls.
     * My hope is that the speed and flexibility of the function will make up for the learning curve of interpreting the return value.
     *
     * ```js live
     * // get the status of all the files in 'src'
     * let status = await git.statusMatrix({
     *   fs,
     *   dir: '/tutorial',
     *   filter: f => f.startsWith('src/')
     * })
     * console.log(status)
     * ```
     *
     * ```js live
     * // get the status of all the JSON and Markdown files
     * let status = await git.statusMatrix({
     *   fs,
     *   dir: '/tutorial',
     *   filter: f => f.endsWith('.json') || f.endsWith('.md')
     * })
     * console.log(status)
     * ```
     *
     * The result is returned as a 2D array.
     * The outer array represents the files and/or blobs in the repo, in alphabetical order.
     * The inner arrays describe the status of the file:
     * the first value is the filepath, and the next three are integers
     * representing the HEAD status, WORKDIR status, and STAGE status of the entry.
     *
     * ```js
     * // example StatusMatrix
     * [
     *   ["a.txt", 0, 2, 0], // new, untracked
     *   ["b.txt", 0, 2, 2], // added, staged
     *   ["c.txt", 0, 2, 3], // added, staged, with unstaged changes
     *   ["d.txt", 1, 1, 1], // unmodified
     *   ["e.txt", 1, 2, 1], // modified, unstaged
     *   ["f.txt", 1, 2, 2], // modified, staged
     *   ["g.txt", 1, 2, 3], // modified, staged, with unstaged changes
     *   ["h.txt", 1, 0, 1], // deleted, unstaged
     *   ["i.txt", 1, 0, 0], // deleted, staged
     * ]
     * ```
     *
     * - The HEAD status is either absent (0) or present (1).
     * - The WORKDIR status is either absent (0), identical to HEAD (1), or different from HEAD (2).
     * - The STAGE status is either absent (0), identical to HEAD (1), identical to WORKDIR (2), or different from WORKDIR (3).
     *
     * ```ts
     * type Filename      = string
     * type HeadStatus    = 0 | 1
     * type WorkdirStatus = 0 | 1 | 2
     * type StageStatus   = 0 | 1 | 2 | 3
     *
     * type StatusRow     = [Filename, HeadStatus, WorkdirStatus, StageStatus]
     *
     * type StatusMatrix  = StatusRow[]
     * ```
     *
     * > Think of the natural progression of file modifications as being from HEAD (previous) -> WORKDIR (current) -> STAGE (next).
     * > Then HEAD is "version 1", WORKDIR is "version 2", and STAGE is "version 3".
     * > Then, imagine a "version 0" which is before the file was created.
     * > Then the status value in each column corresponds to the oldest version of the file it is identical to.
     * > (For a file to be identical to "version 0" means the file is deleted.)
     *
     * Here are some examples of queries you can answer using the result:
     *
     * #### Q: What files have been deleted?
     * ```js
     * const FILE = 0, WORKDIR = 2
     *
     * const filenames = (await statusMatrix({ dir }))
     *   .filter(row => row[WORKDIR] === 0)
     *   .map(row => row[FILE])
     * ```
     *
     * #### Q: What files have unstaged changes?
     * ```js
     * const FILE = 0, WORKDIR = 2, STAGE = 3
     *
     * const filenames = (await statusMatrix({ dir }))
     *   .filter(row => row[WORKDIR] !== row[STAGE])
     *   .map(row => row[FILE])
     * ```
     *
     * #### Q: What files have been modified since the last commit?
     * ```js
     * const FILE = 0, HEAD = 1, WORKDIR = 2
     *
     * const filenames = (await statusMatrix({ dir }))
     *   .filter(row => row[HEAD] !== row[WORKDIR])
     *   .map(row => row[FILE])
     * ```
     *
     * #### Q: What files will NOT be changed if I commit right now?
     * ```js
     * const FILE = 0, HEAD = 1, STAGE = 3
     *
     * const filenames = (await statusMatrix({ dir }))
     *   .filter(row => row[HEAD] === row[STAGE])
     *   .map(row => row[FILE])
     * ```
     *
     * For reference, here are all possible combinations:
     *
     * | HEAD | WORKDIR | STAGE | `git status --short` equivalent |
     * | ---- | ------- | ----- | ------------------------------- |
     * | 0    | 0       | 0     | ``                              |
     * | 0    | 0       | 3     | `AD`                            |
     * | 0    | 2       | 0     | `??`                            |
     * | 0    | 2       | 2     | `A `                            |
     * | 0    | 2       | 3     | `AM`                            |
     * | 1    | 0       | 0     | `D `                            |
     * | 1    | 0       | 1     | ` D`                            |
     * | 1    | 0       | 3     | `MD`                            |
     * | 1    | 1       | 0     | `D ` + `??`                     |
     * | 1    | 1       | 1     | ``                              |
     * | 1    | 1       | 3     | `MM`                            |
     * | 1    | 2       | 0     | `D ` + `??`                     |
     * | 1    | 2       | 1     | ` M`                            |
     * | 1    | 2       | 2     | `M `                            |
     * | 1    | 2       | 3     | `MM`                            |
     *
     * @param {object} args
     * @param {FsClient} args.fs - a file system client
     * @param {string} args.dir - The [working tree](dir-vs-gitdir.md) directory path
     * @param {string} [args.gitdir=join(dir, '.git')] - [required] The [git directory](dir-vs-gitdir.md) path
     * @param {string} [args.ref = 'HEAD'] - Optionally specify a different commit to compare against the workdir and stage instead of the HEAD
     * @param {string[]} [args.filepaths = ['.']] - Limit the query to the given files and directories
     * @param {function(string): boolean} [args.filter] - Filter the results to only those whose filepath matches a function.
     * @param {object} [args.cache] - a [cache](cache.md) object
     * @param {boolean} [args.ignored = false] - include ignored files in the result
     *
     * @returns {Promise<Array<StatusRow>>} Resolves with a status matrix, described below.
     * @see StatusRow
     */
    async function statusMatrix({
      fs: _fs,
      dir,
      gitdir = join(dir, '.git'),
      ref = 'HEAD',
      filepaths = ['.'],
      filter,
      cache = {},
      ignored: shouldIgnore = false,
    }) {
      try {
        assertParameter('fs', _fs);
        assertParameter('gitdir', gitdir);
        assertParameter('ref', ref);

        const fs = new FileSystem(_fs);
        return await _walk({
          fs,
          cache,
          dir,
          gitdir,
          trees: [TREE({ ref }), WORKDIR(), STAGE()],
          map: async function(filepath, [head, workdir, stage]) {
            // Ignore ignored files, but only if they are not already tracked.
            if (!head && !stage && workdir) {
              if (!shouldIgnore) {
                const isIgnored = await GitIgnoreManager.isIgnored({
                  fs,
                  dir,
                  filepath,
                });
                if (isIgnored) {
                  return null
                }
              }
            }
            // match against base paths
            if (!filepaths.some(base => worthWalking(filepath, base))) {
              return null
            }
            // Late filter against file names
            if (filter) {
              if (!filter(filepath)) return
            }

            const [headType, workdirType, stageType] = await Promise.all([
              head && head.type(),
              workdir && workdir.type(),
              stage && stage.type(),
            ]);

            const isBlob = [headType, workdirType, stageType].includes('blob');

            // For now, bail on directories unless the file is also a blob in another tree
            if ((headType === 'tree' || headType === 'special') && !isBlob) return
            if (headType === 'commit') return null

            if ((workdirType === 'tree' || workdirType === 'special') && !isBlob)
              return

            if (stageType === 'commit') return null
            if ((stageType === 'tree' || stageType === 'special') && !isBlob) return

            // Figure out the oids for files, using the staged oid for the working dir oid if the stats match.
            const headOid = headType === 'blob' ? await head.oid() : undefined;
            const stageOid = stageType === 'blob' ? await stage.oid() : undefined;
            let workdirOid;
            if (
              headType !== 'blob' &&
              workdirType === 'blob' &&
              stageType !== 'blob'
            ) {
              // We don't actually NEED the sha. Any sha will do
              // TODO: update this logic to handle N trees instead of just 3.
              workdirOid = '42';
            } else if (workdirType === 'blob') {
              workdirOid = await workdir.oid();
            }
            const entry = [undefined, headOid, workdirOid, stageOid];
            const result = entry.map(value => entry.indexOf(value));
            result.shift(); // remove leading undefined entry
            return [filepath, ...result]
          },
        })
      } catch (err) {
        err.caller = 'git.statusMatrix';
        throw err
      }
    }

    // @ts-check

    /**
     * Create a lightweight tag
     *
     * @param {object} args
     * @param {FsClient} args.fs - a file system client
     * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path
     * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path
     * @param {string} args.ref - What to name the tag
     * @param {string} [args.object = 'HEAD'] - What oid the tag refers to. (Will resolve to oid if value is a ref.) By default, the commit object which is referred by the current `HEAD` is used.
     * @param {boolean} [args.force = false] - Instead of throwing an error if a tag named `ref` already exists, overwrite the existing tag.
     *
     * @returns {Promise<void>} Resolves successfully when filesystem operations are complete
     *
     * @example
     * await git.tag({ fs, dir: '/tutorial', ref: 'test-tag' })
     * console.log('done')
     *
     */
    async function tag({
      fs: _fs,
      dir,
      gitdir = join(dir, '.git'),
      ref,
      object,
      force = false,
    }) {
      try {
        assertParameter('fs', _fs);
        assertParameter('gitdir', gitdir);
        assertParameter('ref', ref);

        const fs = new FileSystem(_fs);

        if (ref === undefined) {
          throw new MissingParameterError('ref')
        }

        ref = ref.startsWith('refs/tags/') ? ref : `refs/tags/${ref}`;

        // Resolve passed object
        const value = await GitRefManager.resolve({
          fs,
          gitdir,
          ref: object || 'HEAD',
        });

        if (!force && (await GitRefManager.exists({ fs, gitdir, ref }))) {
          throw new AlreadyExistsError('tag', ref)
        }

        await GitRefManager.writeRef({ fs, gitdir, ref, value });
      } catch (err) {
        err.caller = 'git.tag';
        throw err
      }
    }

    // @ts-check

    /**
     * Register file contents in the working tree or object database to the git index (aka staging area).
     *
     * @param {object} args
     * @param {FsClient} args.fs - a file system client
     * @param {string} args.dir - The [working tree](dir-vs-gitdir.md) directory path
     * @param {string} [args.gitdir=join(dir, '.git')] - [required] The [git directory](dir-vs-gitdir.md) path
     * @param {string} args.filepath - File to act upon.
     * @param {string} [args.oid] - OID of the object in the object database to add to the index with the specified filepath.
     * @param {number} [args.mode = 100644] - The file mode to add the file to the index.
     * @param {boolean} [args.add] - Adds the specified file to the index if it does not yet exist in the index.
     * @param {boolean} [args.remove] - Remove the specified file from the index if it does not exist in the workspace anymore.
     * @param {boolean} [args.force] - Remove the specified file from the index, even if it still exists in the workspace.
     * @param {object} [args.cache] - a [cache](cache.md) object
     *
     * @returns {Promise<string | void>} Resolves successfully with the SHA-1 object id of the object written or updated in the index, or nothing if the file was removed.
     *
     * @example
     * await git.updateIndex({
     *   fs,
     *   dir: '/tutorial',
     *   filepath: 'readme.md'
     * })
     *
     * @example
     * // Manually create a blob in the object database.
     * let oid = await git.writeBlob({
     *   fs,
     *   dir: '/tutorial',
     *   blob: new Uint8Array([])
     * })
     *
     * // Write the object in the object database to the index.
     * await git.updateIndex({
     *   fs,
     *   dir: '/tutorial',
     *   add: true,
     *   filepath: 'readme.md',
     *   oid
     * })
     */
    async function updateIndex({
      fs: _fs,
      dir,
      gitdir = join(dir, '.git'),
      cache = {},
      filepath,
      oid,
      mode,
      add,
      remove,
      force,
    }) {
      try {
        assertParameter('fs', _fs);
        assertParameter('gitdir', gitdir);
        assertParameter('filepath', filepath);

        const fs = new FileSystem(_fs);

        if (remove) {
          return await GitIndexManager.acquire(
            { fs, gitdir, cache },
            async function(index) {
              let fileStats;

              if (!force) {
                // Check if the file is still present in the working directory
                fileStats = await fs.lstat(join(dir, filepath));

                if (fileStats) {
                  if (fileStats.isDirectory()) {
                    // Removing directories should not work
                    throw new InvalidFilepathError('directory')
                  }

                  // Do nothing if we don't force and the file still exists in the workdir
                  return
                }
              }

              // Directories are not allowed, so we make sure the provided filepath exists in the index
              if (index.has({ filepath })) {
                index.delete({
                  filepath,
                });
              }
            }
          )
        }

        // Test if it is a file and exists on disk if `remove` is not provided, only of no oid is provided
        let fileStats;

        if (!oid) {
          fileStats = await fs.lstat(join(dir, filepath));

          if (!fileStats) {
            throw new NotFoundError(
              `file at "${filepath}" on disk and "remove" not set`
            )
          }

          if (fileStats.isDirectory()) {
            throw new InvalidFilepathError('directory')
          }
        }

        return await GitIndexManager.acquire({ fs, gitdir, cache }, async function(
          index
        ) {
          if (!add && !index.has({ filepath })) {
            // If the index does not contain the filepath yet and `add` is not set, we should throw
            throw new NotFoundError(
              `file at "${filepath}" in index and "add" not set`
            )
          }

          // By default we use 0 for the stats of the index file
          let stats = {
            ctime: new Date(0),
            mtime: new Date(0),
            dev: 0,
            ino: 0,
            mode,
            uid: 0,
            gid: 0,
            size: 0,
          };

          if (!oid) {
            stats = fileStats;

            // Write the file to the object database
            const object = stats.isSymbolicLink()
              ? await fs.readlink(join(dir, filepath))
              : await fs.read(join(dir, filepath));

            oid = await _writeObject({
              fs,
              gitdir,
              type: 'blob',
              format: 'content',
              object,
            });
          }

          index.insert({
            filepath,
            oid: oid,
            stats,
          });

          return oid
        })
      } catch (err) {
        err.caller = 'git.updateIndex';
        throw err
      }
    }

    // @ts-check

    /**
     * Return the version number of isomorphic-git
     *
     * I don't know why you might need this. I added it just so I could check that I was getting
     * the correct version of the library and not a cached version.
     *
     * @returns {string} the version string taken from package.json at publication time
     *
     * @example
     * console.log(git.version())
     *
     */
    function version() {
      try {
        return pkg.version
      } catch (err) {
        err.caller = 'git.version';
        throw err
      }
    }

    // @ts-check

    /**
     * @callback WalkerMap
     * @param {string} filename
     * @param {Array<WalkerEntry | null>} entries
     * @returns {Promise<any>}
     */

    /**
     * @callback WalkerReduce
     * @param {any} parent
     * @param {any[]} children
     * @returns {Promise<any>}
     */

    /**
     * @callback WalkerIterateCallback
     * @param {WalkerEntry[]} entries
     * @returns {Promise<any[]>}
     */

    /**
     * @callback WalkerIterate
     * @param {WalkerIterateCallback} walk
     * @param {IterableIterator<WalkerEntry[]>} children
     * @returns {Promise<any[]>}
     */

    /**
     * A powerful recursive tree-walking utility.
     *
     * The `walk` API simplifies gathering detailed information about a tree or comparing all the filepaths in two or more trees.
     * Trees can be git commits, the working directory, or the or git index (staging area).
     * As long as a file or directory is present in at least one of the trees, it will be traversed.
     * Entries are traversed in alphabetical order.
     *
     * The arguments to `walk` are the `trees` you want to traverse, and 3 optional transform functions:
     *  `map`, `reduce`, and `iterate`.
     *
     * ## `TREE`, `WORKDIR`, and `STAGE`
     *
     * Tree walkers are represented by three separate functions that can be imported:
     *
     * ```js
     * import { TREE, WORKDIR, STAGE } from 'isomorphic-git'
     * ```
     *
     * These functions return opaque handles called `Walker`s.
     * The only thing that `Walker` objects are good for is passing into `walk`.
     * Here are the three `Walker`s passed into `walk` by the `statusMatrix` command for example:
     *
     * ```js
     * let ref = 'HEAD'
     *
     * let trees = [TREE({ ref }), WORKDIR(), STAGE()]
     * ```
     *
     * For the arguments, see the doc pages for [TREE](./TREE.md), [WORKDIR](./WORKDIR.md), and [STAGE](./STAGE.md).
     *
     * `map`, `reduce`, and `iterate` allow you control the recursive walk by pruning and transforming `WalkerEntry`s into the desired result.
     *
     * ## WalkerEntry
     *
     * {@link WalkerEntry typedef}
     *
     * `map` receives an array of `WalkerEntry[]` as its main argument, one `WalkerEntry` for each `Walker` in the `trees` argument.
     * The methods are memoized per `WalkerEntry` so calling them multiple times in a `map` function does not adversely impact performance.
     * By only computing these values if needed, you build can build lean, mean, efficient walking machines.
     *
     * ### WalkerEntry#type()
     *
     * Returns the kind as a string. This is normally either `tree` or `blob`.
     *
     * `TREE`, `STAGE`, and `WORKDIR` walkers all return a string.
     *
     * Possible values:
     *
     * - `'tree'` directory
     * - `'blob'` file
     * - `'special'` used by `WORKDIR` to represent irregular files like sockets and FIFOs
     * - `'commit'` used by `TREE` to represent submodules
     *
     * ```js
     * await entry.type()
     * ```
     *
     * ### WalkerEntry#mode()
     *
     * Returns the file mode as a number. Use this to distinguish between regular files, symlinks, and executable files.
     *
     * `TREE`, `STAGE`, and `WORKDIR` walkers all return a number for all `type`s of entries.
     *
     * It has been normalized to one of the 4 values that are allowed in git commits:
     *
     * - `0o40000` directory
     * - `0o100644` file
     * - `0o100755` file (executable)
     * - `0o120000` symlink
     *
     * Tip: to make modes more readable, you can print them to octal using `.toString(8)`.
     *
     * ```js
     * await entry.mode()
     * ```
     *
     * ### WalkerEntry#oid()
     *
     * Returns the SHA-1 object id for blobs and trees.
     *
     * `TREE` walkers return a string for `blob` and `tree` entries.
     *
     * `STAGE` and `WORKDIR` walkers return a string for `blob` entries and `undefined` for `tree` entries.
     *
     * ```js
     * await entry.oid()
     * ```
     *
     * ### WalkerEntry#content()
     *
     * Returns the file contents as a Buffer.
     *
     * `TREE` and `WORKDIR` walkers return a Buffer for `blob` entries and `undefined` for `tree` entries.
     *
     * `STAGE` walkers always return `undefined` since the file contents are never stored in the stage.
     *
     * ```js
     * await entry.content()
     * ```
     *
     * ### WalkerEntry#stat()
     *
     * Returns a normalized subset of filesystem Stat data.
     *
     * `WORKDIR` walkers return a `Stat` for `blob` and `tree` entries.
     *
     * `STAGE` walkers return a `Stat` for `blob` entries and `undefined` for `tree` entries.
     *
     * `TREE` walkers return `undefined` for all entry types.
     *
     * ```js
     * await entry.stat()
     * ```
     *
     * {@link Stat typedef}
     *
     * ## map(string, Array<WalkerEntry|null>) => Promise<any>
     *
     * {@link WalkerMap typedef}
     *
     * This is the function that is called once per entry BEFORE visiting the children of that node.
     *
     * If you return `null` for a `tree` entry, then none of the children of that `tree` entry will be walked.
     *
     * This is a good place for query logic, such as examining the contents of a file.
     * Ultimately, compare all the entries and return any values you are interested in.
     * If you do not return a value (or return undefined) that entry will be filtered from the results.
     *
     * Example 1: Find all the files containing the word 'foo'.
     * ```js
     * async function map(filepath, [head, workdir]) {
     *   let content = (await workdir.content()).toString('utf8')
     *   if (content.contains('foo')) {
     *     return {
     *       filepath,
     *       content
     *     }
     *   }
     * }
     * ```
     *
     * Example 2: Return the difference between the working directory and the HEAD commit
     * ```js
     * const map = async (filepath, [head, workdir]) => {
     *   return {
     *     filepath,
     *     oid: await head?.oid(),
     *     diff: diff(
     *       (await head?.content())?.toString('utf8') || '',
     *       (await workdir?.content())?.toString('utf8') || ''
     *     )
     *   }
     * }
     * ```
     *
     * Example 3:
     * ```js
     * let path = require('path')
     * // Only examine files in the directory `cwd`
     * let cwd = 'src/app'
     * async function map (filepath, [head, workdir, stage]) {
     *   if (
     *     // don't skip the root directory
     *     head.fullpath !== '.' &&
     *     // return true for 'src' and 'src/app'
     *     !cwd.startsWith(filepath) &&
     *     // return true for 'src/app/*'
     *     path.dirname(filepath) !== cwd
     *   ) {
     *     return null
     *   } else {
     *     return filepath
     *   }
     * }
     * ```
     *
     * ## reduce(parent, children)
     *
     * {@link WalkerReduce typedef}
     *
     * This is the function that is called once per entry AFTER visiting the children of that node.
     *
     * Default: `async (parent, children) => parent === undefined ? children.flat() : [parent, children].flat()`
     *
     * The default implementation of this function returns all directories and children in a giant flat array.
     * You can define a different accumulation method though.
     *
     * Example: Return a hierarchical structure
     * ```js
     * async function reduce (parent, children) {
     *   return Object.assign(parent, { children })
     * }
     * ```
     *
     * ## iterate(walk, children)
     *
     * {@link WalkerIterate typedef}
     *
     * {@link WalkerIterateCallback typedef}
     *
     * Default: `(walk, children) => Promise.all([...children].map(walk))`
     *
     * The default implementation recurses all children concurrently using Promise.all.
     * However you could use a custom function to traverse children serially or use a global queue to throttle recursion.
     *
     * @param {object} args
     * @param {FsClient} args.fs - a file system client
     * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path
     * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path
     * @param {Walker[]} args.trees - The trees you want to traverse
     * @param {WalkerMap} [args.map] - Transform `WalkerEntry`s into a result form
     * @param {WalkerReduce} [args.reduce] - Control how mapped entries are combined with their parent result
     * @param {WalkerIterate} [args.iterate] - Fine-tune how entries within a tree are iterated over
     * @param {object} [args.cache] - a [cache](cache.md) object
     *
     * @returns {Promise<any>} The finished tree-walking result
     */
    async function walk({
      fs,
      dir,
      gitdir = join(dir, '.git'),
      trees,
      map,
      reduce,
      iterate,
      cache = {},
    }) {
      try {
        assertParameter('fs', fs);
        assertParameter('gitdir', gitdir);
        assertParameter('trees', trees);

        return await _walk({
          fs: new FileSystem(fs),
          cache,
          dir,
          gitdir,
          trees,
          map,
          reduce,
          iterate,
        })
      } catch (err) {
        err.caller = 'git.walk';
        throw err
      }
    }

    // @ts-check

    /**
     * Write a blob object directly
     *
     * @param {object} args
     * @param {FsClient} args.fs - a file system client
     * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path
     * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path
     * @param {Uint8Array} args.blob - The blob object to write
     *
     * @returns {Promise<string>} Resolves successfully with the SHA-1 object id of the newly written object
     *
     * @example
     * // Manually create a blob.
     * let oid = await git.writeBlob({
     *   fs,
     *   dir: '/tutorial',
     *   blob: new Uint8Array([])
     * })
     *
     * console.log('oid', oid) // should be 'e69de29bb2d1d6434b8b29ae775ad8c2e48c5391'
     *
     */
    async function writeBlob({ fs, dir, gitdir = join(dir, '.git'), blob }) {
      try {
        assertParameter('fs', fs);
        assertParameter('gitdir', gitdir);
        assertParameter('blob', blob);

        return await _writeObject({
          fs: new FileSystem(fs),
          gitdir,
          type: 'blob',
          object: blob,
          format: 'content',
        })
      } catch (err) {
        err.caller = 'git.writeBlob';
        throw err
      }
    }

    // @ts-check

    /**
     * @param {object} args
     * @param {import('../models/FileSystem.js').FileSystem} args.fs
     * @param {string} args.gitdir
     * @param {CommitObject} args.commit
     *
     * @returns {Promise<string>}
     * @see CommitObject
     *
     */
    async function _writeCommit({ fs, gitdir, commit }) {
      // Convert object to buffer
      const object = GitCommit.from(commit).toObject();
      const oid = await _writeObject({
        fs,
        gitdir,
        type: 'commit',
        object,
        format: 'content',
      });
      return oid
    }

    // @ts-check

    /**
     * Write a commit object directly
     *
     * @param {object} args
     * @param {FsClient} args.fs - a file system client
     * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path
     * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path
     * @param {CommitObject} args.commit - The object to write
     *
     * @returns {Promise<string>} Resolves successfully with the SHA-1 object id of the newly written object
     * @see CommitObject
     *
     */
    async function writeCommit({
      fs,
      dir,
      gitdir = join(dir, '.git'),
      commit,
    }) {
      try {
        assertParameter('fs', fs);
        assertParameter('gitdir', gitdir);
        assertParameter('commit', commit);

        return await _writeCommit({
          fs: new FileSystem(fs),
          gitdir,
          commit,
        })
      } catch (err) {
        err.caller = 'git.writeCommit';
        throw err
      }
    }

    // @ts-check

    /**
     * Write a git object directly
     *
     * `format` can have the following values:
     *
     * | param      | description                                                                                                                                                      |
     * | ---------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- |
     * | 'deflated' | Treat `object` as the raw deflate-compressed buffer for an object, meaning can be written to `.git/objects/**` as-is.                                           |
     * | 'wrapped'  | Treat `object` as the inflated object buffer wrapped in the git object header. This is the raw buffer used when calculating the SHA-1 object id of a git object. |
     * | 'content'  | Treat `object` as the object buffer without the git header.                                                                                                      |
     * | 'parsed'   | Treat `object` as a parsed representation of the object.                                                                                                         |
     *
     * If `format` is `'parsed'`, then `object` must match one of the schemas for `CommitObject`, `TreeObject`, `TagObject`, or a `string` (for blobs).
     *
     * {@link CommitObject typedef}
     *
     * {@link TreeObject typedef}
     *
     * {@link TagObject typedef}
     *
     * If `format` is `'content'`, `'wrapped'`, or `'deflated'`, `object` should be a `Uint8Array`.
     *
     * @deprecated
     * > This command is overly complicated.
     * >
     * > If you know the type of object you are writing, use [`writeBlob`](./writeBlob.md), [`writeCommit`](./writeCommit.md), [`writeTag`](./writeTag.md), or [`writeTree`](./writeTree.md).
     *
     * @param {object} args
     * @param {FsClient} args.fs - a file system client
     * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path
     * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path
     * @param {string | Uint8Array | CommitObject | TreeObject | TagObject} args.object - The object to write.
     * @param {'blob'|'tree'|'commit'|'tag'} [args.type] - The kind of object to write.
     * @param {'deflated' | 'wrapped' | 'content' | 'parsed'} [args.format = 'parsed'] - What format the object is in. The possible choices are listed below.
     * @param {string} [args.oid] - If `format` is `'deflated'` then this param is required. Otherwise it is calculated.
     * @param {string} [args.encoding] - If `type` is `'blob'` then `object` will be converted to a Uint8Array using `encoding`.
     *
     * @returns {Promise<string>} Resolves successfully with the SHA-1 object id of the newly written object.
     *
     * @example
     * // Manually create an annotated tag.
     * let sha = await git.resolveRef({ fs, dir: '/tutorial', ref: 'HEAD' })
     * console.log('commit', sha)
     *
     * let oid = await git.writeObject({
     *   fs,
     *   dir: '/tutorial',
     *   type: 'tag',
     *   object: {
     *     object: sha,
     *     type: 'commit',
     *     tag: 'my-tag',
     *     tagger: {
     *       name: 'your name',
     *       email: 'email@example.com',
     *       timestamp: Math.floor(Date.now()/1000),
     *       timezoneOffset: new Date().getTimezoneOffset()
     *     },
     *     message: 'Optional message'
     *   }
     * })
     *
     * console.log('tag', oid)
     *
     */
    async function writeObject({
      fs: _fs,
      dir,
      gitdir = join(dir, '.git'),
      type,
      object,
      format = 'parsed',
      oid,
      encoding = undefined,
    }) {
      try {
        const fs = new FileSystem(_fs);
        // Convert object to buffer
        if (format === 'parsed') {
          switch (type) {
            case 'commit':
              object = GitCommit.from(object).toObject();
              break
            case 'tree':
              object = GitTree.from(object).toObject();
              break
            case 'blob':
              object = Buffer.from(object, encoding);
              break
            case 'tag':
              object = GitAnnotatedTag.from(object).toObject();
              break
            default:
              throw new ObjectTypeError(oid || '', type, 'blob|commit|tag|tree')
          }
          // GitObjectManager does not know how to serialize content, so we tweak that parameter before passing it.
          format = 'content';
        }
        oid = await _writeObject({
          fs,
          gitdir,
          type,
          object,
          oid,
          format,
        });
        return oid
      } catch (err) {
        err.caller = 'git.writeObject';
        throw err
      }
    }

    // @ts-check

    /**
     * Write a ref which refers to the specified SHA-1 object id, or a symbolic ref which refers to the specified ref.
     *
     * @param {object} args
     * @param {FsClient} args.fs - a file system client
     * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path
     * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path
     * @param {string} args.ref - The name of the ref to write
     * @param {string} args.value - When `symbolic` is false, a ref or an SHA-1 object id. When true, a ref starting with `refs/`.
     * @param {boolean} [args.force = false] - Instead of throwing an error if a ref named `ref` already exists, overwrite the existing ref.
     * @param {boolean} [args.symbolic = false] - Whether the ref is symbolic or not.
     *
     * @returns {Promise<void>} Resolves successfully when filesystem operations are complete
     *
     * @example
     * await git.writeRef({
     *   fs,
     *   dir: '/tutorial',
     *   ref: 'refs/heads/another-branch',
     *   value: 'HEAD'
     * })
     * await git.writeRef({
     *   fs,
     *   dir: '/tutorial',
     *   ref: 'HEAD',
     *   value: 'refs/heads/another-branch',
     *   force: true,
     *   symbolic: true
     * })
     * console.log('done')
     *
     */
    async function writeRef({
      fs: _fs,
      dir,
      gitdir = join(dir, '.git'),
      ref,
      value,
      force = false,
      symbolic = false,
    }) {
      try {
        assertParameter('fs', _fs);
        assertParameter('gitdir', gitdir);
        assertParameter('ref', ref);
        assertParameter('value', value);

        const fs = new FileSystem(_fs);

        if (ref !== lib.clean(ref)) {
          throw new InvalidRefNameError(ref, lib.clean(ref))
        }

        if (!force && (await GitRefManager.exists({ fs, gitdir, ref }))) {
          throw new AlreadyExistsError('ref', ref)
        }

        if (symbolic) {
          await GitRefManager.writeSymbolicRef({
            fs,
            gitdir,
            ref,
            value,
          });
        } else {
          value = await GitRefManager.resolve({
            fs,
            gitdir,
            ref: value,
          });
          await GitRefManager.writeRef({
            fs,
            gitdir,
            ref,
            value,
          });
        }
      } catch (err) {
        err.caller = 'git.writeRef';
        throw err
      }
    }

    // @ts-check

    /**
     * @param {object} args
     * @param {import('../models/FileSystem.js').FileSystem} args.fs
     * @param {string} args.gitdir
     * @param {TagObject} args.tag
     *
     * @returns {Promise<string>}
     */
    async function _writeTag({ fs, gitdir, tag }) {
      // Convert object to buffer
      const object = GitAnnotatedTag.from(tag).toObject();
      const oid = await _writeObject({
        fs,
        gitdir,
        type: 'tag',
        object,
        format: 'content',
      });
      return oid
    }

    // @ts-check

    /**
     * Write an annotated tag object directly
     *
     * @param {object} args
     * @param {FsClient} args.fs - a file system client
     * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path
     * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path
     * @param {TagObject} args.tag - The object to write
     *
     * @returns {Promise<string>} Resolves successfully with the SHA-1 object id of the newly written object
     * @see TagObject
     *
     * @example
     * // Manually create an annotated tag.
     * let sha = await git.resolveRef({ fs, dir: '/tutorial', ref: 'HEAD' })
     * console.log('commit', sha)
     *
     * let oid = await git.writeTag({
     *   fs,
     *   dir: '/tutorial',
     *   tag: {
     *     object: sha,
     *     type: 'commit',
     *     tag: 'my-tag',
     *     tagger: {
     *       name: 'your name',
     *       email: 'email@example.com',
     *       timestamp: Math.floor(Date.now()/1000),
     *       timezoneOffset: new Date().getTimezoneOffset()
     *     },
     *     message: 'Optional message'
     *   }
     * })
     *
     * console.log('tag', oid)
     *
     */
    async function writeTag({ fs, dir, gitdir = join(dir, '.git'), tag }) {
      try {
        assertParameter('fs', fs);
        assertParameter('gitdir', gitdir);
        assertParameter('tag', tag);

        return await _writeTag({
          fs: new FileSystem(fs),
          gitdir,
          tag,
        })
      } catch (err) {
        err.caller = 'git.writeTag';
        throw err
      }
    }

    // @ts-check

    /**
     * Write a tree object directly
     *
     * @param {object} args
     * @param {FsClient} args.fs - a file system client
     * @param {string} [args.dir] - The [working tree](dir-vs-gitdir.md) directory path
     * @param {string} [args.gitdir=join(dir,'.git')] - [required] The [git directory](dir-vs-gitdir.md) path
     * @param {TreeObject} args.tree - The object to write
     *
     * @returns {Promise<string>} Resolves successfully with the SHA-1 object id of the newly written object.
     * @see TreeObject
     * @see TreeEntry
     *
     */
    async function writeTree({ fs, dir, gitdir = join(dir, '.git'), tree }) {
      try {
        assertParameter('fs', fs);
        assertParameter('gitdir', gitdir);
        assertParameter('tree', tree);

        return await _writeTree({
          fs: new FileSystem(fs),
          gitdir,
          tree,
        })
      } catch (err) {
        err.caller = 'git.writeTree';
        throw err
      }
    }

    // default export
    var index$1 = {
      Errors,
      STAGE,
      TREE,
      WORKDIR,
      add,
      abortMerge,
      addNote,
      addRemote,
      annotatedTag,
      branch,
      checkout,
      clone,
      commit,
      getConfig,
      getConfigAll,
      setConfig,
      currentBranch,
      deleteBranch,
      deleteRef,
      deleteRemote,
      deleteTag,
      expandOid,
      expandRef,
      fastForward,
      fetch: fetch$1,
      findMergeBase,
      findRoot,
      getRemoteInfo,
      getRemoteInfo2,
      hashBlob,
      indexPack,
      init: init$1,
      isDescendent,
      isIgnored,
      listBranches,
      listFiles,
      listNotes,
      listRemotes,
      listServerRefs,
      listTags,
      log,
      merge: merge$1,
      packObjects,
      pull,
      push,
      readBlob,
      readCommit,
      readNote,
      readObject,
      readTag,
      readTree,
      remove,
      removeNote,
      renameBranch,
      resetIndex,
      updateIndex,
      resolveRef,
      status,
      statusMatrix,
      tag,
      version,
      walk,
      writeBlob,
      writeCommit,
      writeObject,
      writeRef,
      writeTag,
      writeTree,
    };

    var git = index$1;

    /**
     * @typedef {Object} GitProgressEvent
     * @property {string} phase
     * @property {number} loaded
     * @property {number} total
     */

    /**
     * @callback ProgressCallback
     * @param {GitProgressEvent} progress
     * @returns {void | Promise<void>}
     */

    /**
     * @typedef {Object} GitHttpRequest
     * @property {string} url - The URL to request
     * @property {string} [method='GET'] - The HTTP method to use
     * @property {Object<string, string>} [headers={}] - Headers to include in the HTTP request
     * @property {Object} [agent] - An HTTP or HTTPS agent that manages connections for the HTTP client (Node.js only)
     * @property {AsyncIterableIterator<Uint8Array>} [body] - An async iterator of Uint8Arrays that make up the body of POST requests
     * @property {ProgressCallback} [onProgress] - Reserved for future use (emitting `GitProgressEvent`s)
     * @property {object} [signal] - Reserved for future use (canceling a request)
     */

    /**
     * @typedef {Object} GitHttpResponse
     * @property {string} url - The final URL that was fetched after any redirects
     * @property {string} [method] - The HTTP method that was used
     * @property {Object<string, string>} [headers] - HTTP response headers
     * @property {AsyncIterableIterator<Uint8Array>} [body] - An async iterator of Uint8Arrays that make up the body of the response
     * @property {number} statusCode - The HTTP status code
     * @property {string} statusMessage - The HTTP status message
     */

    /**
     * @callback HttpFetch
     * @param {GitHttpRequest} request
     * @returns {Promise<GitHttpResponse>}
     */

    /**
     * @typedef {Object} HttpClient
     * @property {HttpFetch} request
     */

    // Convert a value to an Async Iterator
    // This will be easier with async generator functions.
    function fromValue(value) {
      let queue = [value];
      return {
        next() {
          return Promise.resolve({ done: queue.length === 0, value: queue.pop() })
        },
        return() {
          queue = [];
          return {}
        },
        [Symbol.asyncIterator]() {
          return this
        },
      }
    }

    function getIterator(iterable) {
      if (iterable[Symbol.asyncIterator]) {
        return iterable[Symbol.asyncIterator]()
      }
      if (iterable[Symbol.iterator]) {
        return iterable[Symbol.iterator]()
      }
      if (iterable.next) {
        return iterable
      }
      return fromValue(iterable)
    }

    // Currently 'for await' upsets my linters.
    async function forAwait(iterable, cb) {
      const iter = getIterator(iterable);
      while (true) {
        const { value, done } = await iter.next();
        if (value) await cb(value);
        if (done) break
      }
      if (iter.return) iter.return();
    }

    async function collect(iterable) {
      let size = 0;
      const buffers = [];
      // This will be easier once `for await ... of` loops are available.
      await forAwait(iterable, value => {
        buffers.push(value);
        size += value.byteLength;
      });
      const result = new Uint8Array(size);
      let nextIndex = 0;
      for (const buffer of buffers) {
        result.set(buffer, nextIndex);
        nextIndex += buffer.byteLength;
      }
      return result
    }

    // Convert a web ReadableStream (not Node stream!) to an Async Iterator
    // adapted from https://jakearchibald.com/2017/async-iterators-and-generators/
    function fromStream(stream) {
      // Use native async iteration if it's available.
      if (stream[Symbol.asyncIterator]) return stream
      const reader = stream.getReader();
      return {
        next() {
          return reader.read()
        },
        return() {
          reader.releaseLock();
          return {}
        },
        [Symbol.asyncIterator]() {
          return this
        },
      }
    }

    /* eslint-env browser */

    /**
     * HttpClient
     *
     * @param {GitHttpRequest} request
     * @returns {Promise<GitHttpResponse>}
     */
    async function request({
      onProgress,
      url,
      method = 'GET',
      headers = {},
      body,
    }) {
      // streaming uploads aren't possible yet in the browser
      if (body) {
        body = await collect(body);
      }
      const res = await fetch(url, { method, headers, body });
      const iter =
        res.body && res.body.getReader
          ? fromStream(res.body)
          : [new Uint8Array(await res.arrayBuffer())];
      // convert Header object to ordinary JSON
      headers = {};
      for (const [key, value] of res.headers.entries()) {
        headers[key] = value;
      }
      return {
        url: res.url,
        method: res.method,
        statusCode: res.status,
        statusMessage: res.statusText,
        body: iter,
        headers: headers,
      }
    }

    var index = { request };

    //@ts-check


    const DEFAULT_CORS_PROXY_URL = 'https://cors.isomorphic-git.org';

    /** @typedef {import('isomorphic-git')} isomorphicGit */
    /** @typedef {import('isomorphic-git').GitAuth} GitAuth */

    class GitAgent {
      #fs
      #remoteURL;
      #repoId;
      #corsProxyURL;
      #onAuth;
      #onMergeConflict;

      // computed
      #origin;
      #hostname;
      #repoDirectory

      /**
       * @param { object } _
       * @param { string } _.repoId
       * @param { string } _.remoteURL
       * @param { string } [_.corsProxyURL]
       * @param { GitAuth } _.auth
       * @param {((resolutionOptions: import('./store.js').ResolutionOption[]) => void) | undefined } [_.onMergeConflict]
       */
      constructor({
        repoId,
        remoteURL,
        corsProxyURL = DEFAULT_CORS_PROXY_URL,
        auth,
        onMergeConflict
      }) {
        this.#fs = new src('scribouilli');

        this.#repoId = repoId;
        this.#remoteURL = remoteURL;
        this.#onAuth = () => auth;
        this.#onMergeConflict = onMergeConflict;
        this.#corsProxyURL = corsProxyURL;

        // computed
        this.#origin = new URL(this.#remoteURL).origin;
        this.#hostname = new URL(this.#origin).hostname;
        // filesystem directory
        this.#repoDirectory = `/${this.#hostname}/${this.#repoId}`;
      }

      
      /**
       *
       * @param {string} filename
       * @returns {string}
       */
      #path(filename) {
        return `${this.#repoDirectory}/${filename}`
      }
      
      /**
       * @summary helper to create ref strings for remotes
       *
       * @param {string} remote
       * @param {string} ref
       * @returns {string}
       */
      #createRemoteRef(remote, ref) {
        return `remotes/${remote}/${ref}`
      }

      /**
       *
       * @returns {ReturnType<isomorphicGit["clone"]>}
       */
      clone() {
        console.info('clone', this.#remoteURL);
        return git.clone({
          fs: this.#fs,
          dir: this.#repoDirectory,
          http: index,
          url: this.#remoteURL,
          // ref is purposefully omitted to get the default behavior (default repo branch)
          singleBranch: true,
          corsProxy: this.#corsProxyURL,
          depth: 5,
        })
      }

      /**
       *
       * @returns {ReturnType<isomorphicGit["currentBranch"]>}
       */
      currentBranch() {
        return git.currentBranch({
          fs: this.#fs,
          dir: this.#repoDirectory,
        })
      }

      /**
       *
       * @param {string} branch
       * @param {boolean} [force]
       * @param {boolean} [checkout]
       * @returns {ReturnType<isomorphicGit["branch"]>}
       */
      branch(branch, force = false, checkout = true) {
        return git.branch({
          fs: this.#fs,
          dir: this.#repoDirectory,
          ref: branch,
          force,
          checkout,
        })
      }



      /**
       *
       * @returns {ReturnType<isomorphicGit["listRemotes"]>}
       */
      listRemotes() {
        return git.listRemotes({
          fs: this.#fs,
          dir: this.#repoDirectory,
        })
      }

      /**
       *
       * @param {string} [remote]
       * @returns {ReturnType<isomorphicGit["listBranches"]>}
       */
      listBranches(remote) {
        return git.listBranches({
          fs: this.#fs,
          dir: this.#repoDirectory,
          remote,
        })
      }

      /**
       * @summary This version of git push may fail if the remote repo
       * has unmerged changes
       *
       * @returns {ReturnType<isomorphicGit["push"]>}
       */
      falliblePush() {
        console.info('falliblePush');
        return git.push({
          fs: this.#fs,
          http: index,
          // ref is purposefully omitted to get the default (checked out branch)
          dir: this.#repoDirectory,
          corsProxy: this.#corsProxyURL,
          // See https://isomorphic-git.org/docs/en/onAuth#oauth2-tokens
          onAuth: this.#onAuth
        })
      }

      /**
       * @summary This version of git push tries to push
       * then tries to pull if the push fails
       * and tries again to push if the pull succeeded
       *
       * @returns {Promise<any>}
       */
      safePush() {
        console.info('safePush');
        return this.falliblePush()
          .catch(err => {
            console.log(
              'failliblePush error ! Assuming the error is that we are not up to date with the remote',
              err,
            );
            return this.fetchAndTryMerging().then(() => {
              console.log('pull/merge succeeded, try to push again');
              return this.falliblePush()
            })
          })
          .catch(err => {
            console.log(
              'the merge failed or the second push failed, there is nothing much we can try automatocally',
              err,
            );
            return err
          })
      }

      /**
       * @summary like git push --force
       *
       * @returns {ReturnType<isomorphicGit["push"]>}
       */
      forcePush() {
        console.info('forcePush');
        return git.push({
          fs: this.#fs,
          http: index,
          // ref is purposefully omitted to get the default (checked out branch)
          dir: this.#repoDirectory,
          force: true,
          corsProxy: this.#corsProxyURL,
          // See https://isomorphic-git.org/docs/en/onAuth#oauth2-tokens
          onAuth: this.#onAuth
        })
      }

      /**
       *
       * @returns {ReturnType<isomorphicGit["fetch"]>}
       */
      async fetch() {
        return git.fetch({
          fs: this.#fs,
          http: index,
          // ref is purposefully omitted to get the default (checked out branch)
          singleBranch: false, // we want all the branches
          dir: this.#repoDirectory,
          corsProxy: this.#corsProxyURL,
        })
      }

      /**
       *
       * @param {string} [ref]
       * @returns {Promise<import('isomorphic-git').CommitObject>}
       */
      currentCommit(ref = undefined) {
        return git
          .log({
            fs: this.#fs,
            dir: this.#repoDirectory,
            ref,
            depth: 1,
          })
          .then(commits => commits[0].commit)
      }

      /**
       *
       * @param {string} [ref]
       * @returns {ReturnType<isomorphicGit["checkout"]>}
       */
      checkout(ref = undefined) {
        return git.checkout({
          fs: this.#fs,
          dir: this.#repoDirectory,
          ref,
        })
      }

      /**
       *
       * @summary This function tries to merge
       * If it fails, it forwards the conflict to this.onMergeConflict with resolution propositions
       *
       * @returns {Promise<any>}
       */
      async tryMerging() {
        console.info('tryMerging');
        const [currentBranch, remotes] = await Promise.all([
          this.currentBranch(),
          this.listRemotes(),
        ]);

        if (!currentBranch) {
          throw new TypeError('currentBranch is undefined')
        }

        const localBranch = currentBranch;
        const remoteBranch = this.#createRemoteRef(remotes[0].remote, localBranch);

        return git
          .merge({
            fs: this.#fs,
            dir: this.#repoDirectory,
            // ours is purposefully omitted to get the default behavior (current branch)
            // assuming their is only one remote
            // assuming the remote and local branch have the same name
            theirs: remoteBranch,
            fastForward: true,
            abortOnConflict: true,
          })
          .then(() => {
            // this checkout is necessary to update FS files
            return this.checkout()
          })
          .catch(err => {
            console.log('merge error', err);

            this.#onMergeConflict &&
              this.#onMergeConflict([
                {
                  message: `Garder la version actuelle du site web en ligne (et perdre les changements récents dans l'atelier)`,
                  resolution: async () => {
                    const currentBranch = await this.currentBranch();
                    if (!currentBranch) {
                      throw new TypeError('Missing currentBranch')
                    }

                    const remotes = await this.listRemotes();
                    const firstRemote = remotes[0].remote;
                    const remoteBranches = await this.listBranches(firstRemote);
                    const targetedRemoteBranch = this.#createRemoteRef(
                      firstRemote,
                      remoteBranches[0],
                    );

                    await this.checkout(targetedRemoteBranch);

                    await this.branch(currentBranch, true, true);
                  },
                },
                {
                  message: `Garder la version actuelle de l'atelier (et perdre la version en actuellement ligne)`,
                  resolution: () => {
                    return this.forcePush()
                  },
                },
              ]);
          })
      }

      /**
       * @summary Create a commit with the given message.
       *
       * @param {string} message
       *
       * @returns {ReturnType<isomorphicGit["commit"]>} sha of the commit
       */
      commit(message) {
        return git.commit({
          fs: this.#fs,
          dir: this.#repoDirectory,
          message,
        })
      }

      /**
       * @summary Remove file from git tree and from the file system
       *
       * @param {string} fileName
       * @returns {ReturnType<isomorphicGit["remove"]>}
       */
      async removeFile(fileName) {
        const path = this.#path(fileName);
        await this.#fs.promises.unlink(path);
        return await git.remove({
          fs: this.#fs,
          dir: this.#repoDirectory,
          filepath: fileName,
        })
      }

      /**
       * @summary like a git pull but the merge is better customized
       *
       * @returns {Promise<any>}
       */
      async fetchAndTryMerging() {
        await this.fetch();
        await this.tryMerging();
      }

      /**
       *
       * @return {Promise<any>}
       */
      async pullOrCloneRepo() {

        let dirExists = true;
        try {
          const stat = await this.#fs.promises.stat(this.#repoDirectory);
          dirExists = stat.isDirectory();
        } catch {
          dirExists = false;
        }

        if (dirExists) {
          return this.fetchAndTryMerging()
        } else {
          return this.clone()
        }
      }

      /**
       * Assigne l'auteur et l'email pour les commits git
       *
       * On voudrait le faire en global, mais ça n'est pas possible actuellement avec isomorphic-git (1.24.2)
       * > Currently only the local $GIT_DIR/config file can be read or written. However support for the global ~/.gitconfig and system $(prefix)/etc/gitconfig will be added in the future.
       * Voir https://github.com/isomorphic-git/isomorphic-git/pull/1779
       *
       *
       * https://isomorphic-git.org/docs/en/setConfig
       *
       * Alors, on doit passer le repoName
       *
       * @param {string} login
       * @param {string} email
       * @returns {Promise<ReturnType<isomorphicGit["setConfig"]>>}
       */
      async setAuthor(login, email) {
        if (!login || !email) {
          return
        }

        await git.setConfig({
          fs: this.#fs,
          dir: this.#repoDirectory,
          path: 'user.name',
          value: login,
        });
        return await git.setConfig({
          fs: this.#fs,
          dir: this.#repoDirectory,
          path: 'user.email',
          value: email,
        })
      }

      /**
       * @summary Get file informations
       *
       * @param {string} fileName
       * @returns {Promise<string>}
       */
      async getFile(fileName) {
        const content = await this.#fs.promises.readFile(
          this.#path(fileName),
          { encoding: 'utf8' },
        );
        if (content instanceof Uint8Array) {
          return content.toString()
        }
        return content
      }

      /**
       * @summary Create or update a file and add it to the git staging area
       *
       * @param {string | Uint8Array} content
       * @param {string} fileName
       *
       * @returns {Promise<void>}
       */
      async writeFile(fileName, content) {
        // This condition is here just in case, but it should not happen in practice
        // Having an empty file name will not lead immediately to a crash but will result in
        // some bugs later, see https://github.com/Scribouilli/scribouilli/issues/49#issuecomment-1648226372
        if (fileName === '') {
          throw new TypeError('Empty file name')
        }

        await this.#fs.promises.writeFile(this.#path(fileName), content);
        await git.add({
          fs: this.#fs,
          filepath: fileName,
          dir: this.#repoDirectory,
        });
      }

      /**
       *
       * @param {string} dir
       * @returns
       */
      listFiles(dir) {
        return this.#fs.promises.readdir(this.#path(dir))
      }

      /**
       *
       * @param {string} filename
       * @returns
       */
      async checkFileExistence(filename) {
        const stat = await this.#fs.promises.stat(this.#path(filename));
        return stat.isFile()
      }
    }

    //@ts-check


    /** @typedef { {message: string, resolution: (...args: any[]) => Promise<any>} } ResolutionOption */

    /**
     * @typedef {Object} OAuthProvider
     * @property {string} name
     * @property {string} accessToken
     * @property {string} origin
     */

    /**
     * @typedef {Object} ScribouilliState
     * @property {OAuthProvider} [oAuthProvider]
     * @property {Promise<string> | string} [login]
     * @property {string} [email]
     * @property {ScribouilliGitRepo | undefined} currentRepository
     * @property {GitAgent | undefined} gitAgent
     * @property {ResolutionOption[] | undefined} conflict
     * @property {any} reposByAccount
     * @property {Page[]} [pages]
     * @property {Article[]} [articles]
     * @property {any} buildStatus
     * @property {string} basePath
     * @property {{css?: string}} theme
     */

    /** @type {ScribouilliState} */
    const state = {
      // @ts-ignore
      oAuthProvider: undefined,
      login: undefined,
      email: undefined,
      currentRepository: undefined,
      gitAgent: undefined,
      conflict: undefined,
      // We use the term "account" to refer to user or organization.
      reposByAccount: {
        // [login: string]: Promise<Repository[]>
      },
      pages: [],
      articles: undefined,
      buildStatus: undefined,
      basePath: location.hostname.endsWith('.github.io') ? '/scribouilli' : '',
      theme: {
        css: undefined,
      },
    };

    const mutations = {
      /**
       * @param {ScribouilliState} state
       * @param {ScribouilliState['oAuthProvider']} oAuthProvider
       */
      setOAuthProvider(state, oAuthProvider) {
        state.oAuthProvider = oAuthProvider;
      },
      /**
       *
       * @param {ScribouilliState} state
       * @param {ScribouilliState['login']} login
       */
      setLogin(state, login) {
        state.login = login;
      },
      /**
       *
       * @param {ScribouilliState} state
       * @param {ScribouilliState['email']} email
       */
      setEmail(state, email) {
        state.email = email;
      },
      /**
       *
       * @param {ScribouilliState} state
       * @param {ScribouilliState['currentRepository']} repository
       */
      setCurrentRepository(state, repository) {
        state.currentRepository = repository;
      },
      /**
       *
       * @param {ScribouilliState} state
       * @param {ScribouilliState['gitAgent']} gitAgent
       */
      setGitAgent(state, gitAgent){
        state.gitAgent = gitAgent;
      },
      /**
       *
       * @param {ScribouilliState} state
       * @param {ScribouilliState['pages']} pages
       */
      setPages(state, pages) {
        state.pages = pages?.sort((pageA, pageB) => {
          const diffIndex = pageA.index - pageB.index;
          if (diffIndex === 0) {
            if (pageA.path < pageB.path) {
              return -1
            }
            if (pageA.path > pageB.path) {
              return 1
            }
            if (pageA.path === pageB.path) {
              return 0
            }
          }
          return diffIndex
        });
      },
      /**
       *
       * @param {ScribouilliState} state
       * @param {ScribouilliState['conflict']} conflict
       */
      setConflict(state, conflict) {
        state.conflict = conflict;
      },
      /**
       *
       * @param {ScribouilliState} state
       * @param {ScribouilliState['articles']} articles
       */
      setArticles(state, articles) {
        state.articles = articles?.sort((pageA, pageB) => {
          if (pageA.path < pageB.path) {
            return -1
          }
          if (pageA.path > pageB.path) {
            return 1
          }

          // pageA.path === pageB.path
          return 0
        });
      },
      /**
       *
       * @param {ScribouilliState} state
       * @param {any} buildStatus
       */
      setBuildStatus(state, buildStatus) {
        state.buildStatus = buildStatus;
      },
      /**
       * @param {ScribouilliState} state
       * @param {{ login: string, repos: any[] }} params
       */
      setReposForAccount(state, { login, repos }) {
        state.reposByAccount[login] = repos
          // on place ses propres dépôts avant les dépôts des autres
          .sort((a, b) => {
            if (state.login && typeof state.login === 'string') {
              if (a.owner.login != b.owner.login) {
                if (a.owner.login === state.login) {
                  return -1
                } else {
                  return 1
                }
              }
            }

            return 0
          });
      },
      /**
       *
       * @param {ScribouilliState} state
       * @param {ScribouilliState['theme']['css']} css
       */
      setTheme(state, css) {
        state.theme.css = css;
      },

      /**
       *
       * @param {ScribouilliState} state
       */
      logout(state) {
        // account-related
        state.oAuthProvider = undefined;
        state.login = undefined;
        state.email = undefined;
        state.reposByAccount = undefined;

        // repo-related
        state.pages = undefined;
        state.articles = undefined;
        state.currentRepository = undefined;
        state.gitAgent = undefined;
        state.conflict = undefined;
      },
    };

    /** @typedef { typeof mutations } ScribouilliMutations */

    /** @type { import('baredux').BareduxStore<ScribouilliState, ScribouilliMutations> } */
    const store = Store$1({ state, mutations });

    /**
     * @type {ScribouilliGitRepo}
     */
    class ScribouilliGitRepo {
      /**
       *
       * @param { object } _
       * @param { string } [_.repoId]
       * @param { string } _.origin
       * @param { string } _.publicRepositoryURL
       * @param { string } _.owner
       * @param { string } _.repoName
       * @param { OAuthServiceAPI } _.gitServiceProvider
       */
      constructor({
        repoId,
        origin,
        publicRepositoryURL,
        owner,
        repoName,
        gitServiceProvider
      }) {
        this.origin = origin;
        this.publicRepositoryURL = publicRepositoryURL;
        this.owner = owner;
        this.repoName = repoName;

        this.repoId = repoId ? repoId : makeRepoId(owner, repoName);

        this.publishedWebsiteURL = new Promise(resolve => {
          const interval = setInterval(() => {
            gitServiceProvider.getPublishedWebsiteURL(this)
            .then(url => { 
              if(url){
                clearInterval(interval);
                resolve(url); 
              }
            });
          }, 1000);
        });
      }

    }

    /**
     *
     * @param {string} owner // may be an individual Github user or an organisation
     * @param {string} repoName
     * @returns {string}
     */
    function makeRepoId(owner, repoName) {
      return `${owner}/${repoName}`
    }

    /**
     *
     * @param {string} owner // may be an individual Github user or an organisation
     * @param {string} repoName
     * @param {string} origin
     * @returns {string}
     */
    function makePublicRepositoryURL(owner, repoName, origin) {
      return `${origin}/${owner}/${repoName}`
    }

    const GITHUB_JSON_ACCEPT_HEADER = 'application/vnd.github+json';

    /**
     * @implements {OAuthServiceAPI}
     */
    class GitHubAPI {
      /**
       * @param {string} accessToken
       */
      constructor(accessToken) {
        /** @type {string | undefined} */
        this.accessToken = accessToken;
      }

      getOauthUsernameAndPassword() {
        if (!this.accessToken) {
          throw new TypeError('Missing accessToken')
        }

        return {
          username: this.accessToken,
          password: 'x-oauth-basic',
        }
      }

      getAuthenticatedUser() {
        return this.callAPI(`${gitHubApiBaseUrl}/user`).then(response => {
          return response.json()
        })
      }

      /** @type {OAuthServiceAPI["getUserEmails"]} */
      getUserEmails() {
        return this.callAPI(`${gitHubApiBaseUrl}/user/emails`).then(response => {
          return response.json()
        })
      }

      /** @type {OAuthServiceAPI["getCurrentUserRepositories"]} */
      getCurrentUserRepositories() {
        return this.callAPI(
          `${gitHubApiBaseUrl}/user/repos?sort=updated&visibility=public`,
        ).then(response => {
          return response.json()
        })
      }

      /** @type {OAuthServiceAPI["createDefaultRepository"]} */
      createDefaultRepository(
        { owner, repoName, repoId, publishedWebsiteURL },
        template,
      ) {
        // Generate a new repository from the theme repository
        return this.callAPI(
          `${gitHubApiBaseUrl}/repos/${template.githubRepoId}/generate`,
          {
            headers: {
              Authorization: 'token ' + this.accessToken,
              Accept: GITHUB_JSON_ACCEPT_HEADER,
            },
            method: 'POST',
            body: JSON.stringify({
              owner,
              name: repoName,
              description: 'Mon site Scribouilli',
            }),
          },
        ).then(() => {
          // Apply topic to the new repository
          return this.callAPI(`${gitHubApiBaseUrl}/repos/${repoId}/topics`, {
            headers: {
              Authorization: 'token ' + this.accessToken,
              Accept: GITHUB_JSON_ACCEPT_HEADER,
            },
            method: 'PUT',
            body: JSON.stringify({
              owner,
              repo: repoName,
              names: ['site-scribouilli'],
            }),
          })
            .then(() => {
              // Setup repository settings
              return this.callAPI(`${gitHubApiBaseUrl}/repos/${repoId}`, {
                method: 'POST',
                headers: {
                  Authorization: 'token ' + this.accessToken,
                  Accept: GITHUB_JSON_ACCEPT_HEADER,
                },
                body: JSON.stringify({
                  homepage: publishedWebsiteURL,
                  has_issues: false,
                  has_projects: false,
                  has_wiki: false,
                }),
              })
            })
            .then(() => {
              // Activate GitHub Pages
              return this.callAPI(`${gitHubApiBaseUrl}/repos/${repoId}/pages`, {
                method: 'POST',
                headers: {
                  Authorization: 'token ' + this.accessToken,
                  Accept: GITHUB_JSON_ACCEPT_HEADER,
                },
                body: JSON.stringify({
                  build_type: 'workflow',
                }),
              })
            })
        })
      }

      /** @type {OAuthServiceAPI["deploy"]} */
      deploy({ repoId }) {
        return this.callAPI(`${gitHubApiBaseUrl}/repos/${repoId}/dispatches`, {
          method: 'POST',
          headers: {
            Authorization: 'token ' + this.accessToken,
            Accept: GITHUB_JSON_ACCEPT_HEADER,
          },
          body: JSON.stringify({
            event_type: 'atelier-scribouilli',
          }),
        })
      }

      /** @type {OAuthServiceAPI["getPagesWebsiteDeploymentStatus"]} */
      getPagesWebsiteDeploymentStatus({ repoId }) {
        // TODO: We need to add the `sha` parameter to avoid the GitHub API to return
        // cached data.
        return this.callAPI(
          `${gitHubApiBaseUrl}/repos/${repoId}/deployments?environment=github-pages`,
        )
          .then(response => response.json())
          .then(json => {
            const statusesUrl = json[0].statuses_url;

            return this.callAPI(`${statusesUrl}?per_page=1`)
          })
          .then(response => response.json())
          .then(json => {
            return json[0].state
          })
      }

      /** @type {OAuthServiceAPI["isPagesWebsiteBuilt"]} */
      isPagesWebsiteBuilt(scribouilliGitRepo) {
        return this.getPagesWebsiteDeploymentStatus(scribouilliGitRepo)
          .then(response => {
            return response === 'success'
          })
          .catch(() => {
            return false
          })
      }

      /** @type {OAuthServiceAPI["isRepositoryReady"]} */
      isRepositoryReady({ repoId }) {
        return this.callAPI(
          `${gitHubApiBaseUrl}/repos/${repoId}/contents/_config.yml`,
        )
          .then(response => {
            return response.ok
          })
          .catch(() => {
            return false
          })
      }

      /** @type {OAuthServiceAPI["getPublishedWebsiteURL"]} */
      getPublishedWebsiteURL({ repoId }) {
        return this.callAPI(`${gitHubApiBaseUrl}/repos/${repoId}/pages`, {
          headers: {
            Authorization: 'token ' + this.accessToken,
            Accept: GITHUB_JSON_ACCEPT_HEADER,
          },
        })
          .then(resp => resp.json())
          .then(({ html_url }) => (html_url ? html_url : undefined))
      }

      /** @type {OAuthServiceAPI["callAPI"]} */
      callAPI(url, requestParams) {
        if (requestParams && requestParams.headers === undefined) {
          requestParams.headers = {
            Authorization: 'token ' + this.accessToken,
          };
        }

        if (requestParams === undefined) {
          requestParams = {
            headers: {
              Authorization: 'token ' + this.accessToken,
            },
          };
        }

        return fetch(url, requestParams).then(httpResp => {
          if (httpResp.status === 404) {
            throw 'NOT_FOUND'
          }

          if (httpResp.status === 401) {
            this.accessToken = undefined;
            console.debug('this accessToken : ', this.accessToken);
            throw 'INVALIDATE_TOKEN'
          }
          return httpResp
        })
      }
    }

    //@ts-check

    /**
     * @implements {OAuthServiceAPI}
     */
    class GitLabAPI {
      #gitAgentGetter
      /**
       * @param {string} accessToken
       * @param {string} origin
       * @param {() => GitAgent} gitAgent
       */
      constructor(accessToken, origin, gitAgent) {
        /** @type {string | undefined} */
        this.accessToken = accessToken;
        this.origin = origin;
        this.authenticatedUser = undefined;
        this.#gitAgentGetter = gitAgent;
      }

      get gitAgent(){
        return this.#gitAgentGetter()
      }

      get apiBaseUrl() {
        return `${this.origin}/api/v4`
      }

      /** @type {OAuthServiceAPI["getOauthUsernameAndPassword"]} */
      getOauthUsernameAndPassword() {
        if (!this.accessToken) {
          throw new TypeError('Missing accessToken')
        }

        // cf. https://isomorphic-git.org/docs/en/authentication
        return {
          username: 'oauth2',
          password: this.accessToken,
        }
      }

      /** @type {OAuthServiceAPI["getAuthenticatedUser"]} */
      getAuthenticatedUser() {
        if (this.authenticatedUser) {
          return Promise.resolve(this.authenticatedUser)
        }

        return this.callAPI(`${this.apiBaseUrl}/user`)
          .then(response => response.json())
          .then(json => {
            const user = {
              id: json.id,
              login: json.username,
              email: json.email,
            };

            this.authenticatedUser = user;

            return Promise.resolve(user)
          })
      }

      /** @type {OAuthServiceAPI["getUserEmails"]} */
      getUserEmails() {
        return this.getAuthenticatedUser().then(({ email }) => {
          return Promise.resolve([
            {
              email,
              primary: true,
            },
          ])
        })
      }

      /** @type {OAuthServiceAPI["getCurrentUserRepositories"]} */
      getCurrentUserRepositories() {
        return this.getAuthenticatedUser()
          .then(({ login }) => {
            return this.callAPI(
              `${this.apiBaseUrl}/users/${login}/projects?order_by=updated_at&sort=desc&per_page=30&visibility=public`,
            )
          })
          .then(response => response.json())
          .then(json => {
            // @ts-ignore
            const repositories = json.map(repo => {
              return {
                id: repo.id,
                name: repo.name,
                owner: {
                  login: repo.owner.username,
                },
              }
            });

            return Promise.resolve(repositories)
          })
      }

      /** @type {OAuthServiceAPI["createDefaultRepository"]} */
      createDefaultRepository(scribouilliGitRepo, { url: gitRepoUrl }) {
        const { repoName } = scribouilliGitRepo;

        return this.callAPI(`${this.apiBaseUrl}/projects`, {
          method: 'POST',
          headers: {
            Authorization: 'Bearer ' + this.accessToken,
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            import_url: gitRepoUrl,
            name: repoName,
            description: 'Mon site Scribouilli',
            topics: ['site-scribouilli'],
            visibility: 'public',
          }),
        }).then(response => response.json())
      }

      /** @type {OAuthServiceAPI["deploy"]} */
      deploy(scribouilliGitRepo) {
        console.log('gitlab.deploy', scribouilliGitRepo);
        return this.gitAgent.currentBranch().then(branch => {
          console.log('branch', branch);
          return this.callAPI(
            `${this.apiBaseUrl}/projects/${encodeURIComponent(
          scribouilliGitRepo.repoId,
        )}/pipeline`,
            {
              method: 'POST',
              headers: {
                Authorization: 'Bearer ' + this.accessToken,
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                ref: branch,
              }),
            },
          ).then(response => {
            console.log('response', response);
          })
        })
      }

      /** @type {OAuthServiceAPI["getPagesWebsiteDeploymentStatus"]} */
      getPagesWebsiteDeploymentStatus({ owner, repoName }) {
        const urlEncodedRepoPath = encodeURIComponent(`${owner}/${repoName}`);

        return this.callAPI(
          `${this.apiBaseUrl}/projects/${urlEncodedRepoPath}/deployments?per_page=1&order_by=updated_at&sort=desc`,
        )
          .then(response => response.json())
          .then(json => {
            const status = json[0].status;
            const matchingStatus = {
              running: 'in_progress',
              success: 'success',
              failed: 'error',
              created: 'in_progress',
              canceled: 'error',
              blocked: 'error',
            };

            console.debug('Deployment status: ', status);

            // @ts-ignore
            return Promise.resolve(matchingStatus[status])
          })
      }

      /** @type {OAuthServiceAPI["isPagesWebsiteBuilt"]} */
      isPagesWebsiteBuilt(scribouilliGitRepo) {
        return this.getPagesWebsiteDeploymentStatus(scribouilliGitRepo)
          .then(response => {
            return response === 'success'
          })
          .catch(() => {
            return false
          })
      }

      /** @type {OAuthServiceAPI["isRepositoryReady"]} */
      isRepositoryReady({ owner, repoName }) {
        const urlEncodedRepoPath = encodeURIComponent(`${owner}/${repoName}`);

        // This call is used only at the creation of the repository.
        // We assume that the git ref is `main`.
        return this.callAPI(
          `${this.apiBaseUrl}/projects/${urlEncodedRepoPath}/repository/files/_config.yml?ref=main`,
        )
          .then(response => {
            return response.ok
          })
          .catch(() => {
            return false
          })
      }

      /** @type {OAuthServiceAPI["getPublishedWebsiteURL"]} */
      getPublishedWebsiteURL({ repoName, owner, origin }) {
        if (origin === 'https://gitlab.com') {
          return Promise.resolve(`https://${owner}.gitlab.io/${repoName}/`)
        }

        if (origin === 'https://git.scribouilli.org') {
          return Promise.resolve(`https://${owner}.monpetitsite.org/${repoName}/`)
        }

        return Promise.reject('Unknown origin')

        // console.log('gitlab.getPublishedWebsiteURL', repoId)
        // return this.callAPI(
        // `${this.apiBaseUrl}/projects/${encodeURIComponent(
        // repoId,
        // )}/environments?per_page=1&order_by=updated_at&sort=desc`,
        // )
        // .then(response => response.json())
        // .then(environments => {
        // console.log('environments', environments)
        // return environments[0].external_url
        // })
        // .catch(error => {
        // console.log('error', error)
        // return undefined
        // })
      }

      /**
       * @type {OAuthServiceAPI["callAPI"]}
       */
      callAPI(url, requestParams) {
        if (requestParams && requestParams.headers === undefined) {
          requestParams.headers = {
            Authorization: 'Bearer ' + this.accessToken,
          };
        }

        if (requestParams === undefined) {
          requestParams = {
            headers: {
              Authorization: 'Bearer ' + this.accessToken,
            },
          };
        }

        return fetch(url, requestParams).then(httpResp => {
          if (httpResp.status === 404) {
            throw 'NOT_FOUND'
          }

          if (httpResp.status === 401) {
            this.accessToken = undefined;
            console.debug('this accessToken : ', this.accessToken);
            throw 'INVALIDATE_TOKEN'
          }
          return httpResp
        })
      }
    }

    /**
     * @overlaod
     * @param {'github'} type
     * @param {GithubOptions} options
     *
     * @returns {OAuthServiceAPI}
     */

    /**
     * @overlaod
     * @param {'gitlab'} type
     * @param {GitlabOptions} options
     *
     * @returns {OAuthServiceAPI}
     */

    /**
     * @param {import('./../store.js').OAuthProvider} _
     *
     * @returns {OAuthServiceAPI}
     */
    const makeOAuthServiceAPI = ({ accessToken, origin }) => {
      const hostname = new URL(origin).hostname;

      if (hostname === 'github.com') 
        return new GitHubAPI(accessToken)
      else {
        // assuming a gitlab instance
        return new GitLabAPI(accessToken, origin, () => {
          if(!store.state.gitAgent){
            throw new TypeError('store.state.gitAgent is undefined')
          }
          return store.state.gitAgent
        })
      }
    };

    /** @type {OAuthServiceAPI} */
    let oAuthServiceAPI;

    /**
     * @returns {OAuthServiceAPI}
     */
    const getOAuthServiceAPI = () => {
      // @ts-ignore
      if (oAuthServiceAPI) {
        return oAuthServiceAPI
      }

      const oAuthProvider = store.state.oAuthProvider;

      if (!oAuthProvider) {
        console.info("L'utilisateur n'est pas connecté. Redirection vers /");

        page('/');

        throw new TypeError('Missing accessToken or provider name')
      }

      oAuthServiceAPI = makeOAuthServiceAPI(oAuthProvider);

      return oAuthServiceAPI
    };

    /**
     *
     * @param {ScribouilliGitRepo} scribouilliGitRepo
     * @returns {string}
     */
    function makeAtelierListPageURL({ owner, repoName }) {
      return `/atelier-list-pages?account=${owner}&repoName=${repoName}`
    }

    function _typeof(obj) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    }

    function toInteger(dirtyNumber) {
      if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
        return NaN;
      }
      var number = Number(dirtyNumber);
      if (isNaN(number)) {
        return number;
      }
      return number < 0 ? Math.ceil(number) : Math.floor(number);
    }

    function requiredArgs(required, args) {
      if (args.length < required) {
        throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');
      }
    }

    /**
     * @name toDate
     * @category Common Helpers
     * @summary Convert the given argument to an instance of Date.
     *
     * @description
     * Convert the given argument to an instance of Date.
     *
     * If the argument is an instance of Date, the function returns its clone.
     *
     * If the argument is a number, it is treated as a timestamp.
     *
     * If the argument is none of the above, the function returns Invalid Date.
     *
     * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.
     *
     * @param {Date|Number} argument - the value to convert
     * @returns {Date} the parsed date in the local time zone
     * @throws {TypeError} 1 argument required
     *
     * @example
     * // Clone the date:
     * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))
     * //=> Tue Feb 11 2014 11:30:30
     *
     * @example
     * // Convert the timestamp to date:
     * const result = toDate(1392098430000)
     * //=> Tue Feb 11 2014 11:30:30
     */
    function toDate(argument) {
      requiredArgs(1, arguments);
      var argStr = Object.prototype.toString.call(argument);

      // Clone the date
      if (argument instanceof Date || _typeof(argument) === 'object' && argStr === '[object Date]') {
        // Prevent the date to lose the milliseconds when passed to new Date() in IE10
        return new Date(argument.getTime());
      } else if (typeof argument === 'number' || argStr === '[object Number]') {
        return new Date(argument);
      } else {
        if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {
          // eslint-disable-next-line no-console
          console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments");
          // eslint-disable-next-line no-console
          console.warn(new Error().stack);
        }
        return new Date(NaN);
      }
    }

    /**
     * @name addMilliseconds
     * @category Millisecond Helpers
     * @summary Add the specified number of milliseconds to the given date.
     *
     * @description
     * Add the specified number of milliseconds to the given date.
     *
     * @param {Date|Number} date - the date to be changed
     * @param {Number} amount - the amount of milliseconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
     * @returns {Date} the new date with the milliseconds added
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // Add 750 milliseconds to 10 July 2014 12:45:30.000:
     * const result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
     * //=> Thu Jul 10 2014 12:45:30.750
     */
    function addMilliseconds(dirtyDate, dirtyAmount) {
      requiredArgs(2, arguments);
      var timestamp = toDate(dirtyDate).getTime();
      var amount = toInteger(dirtyAmount);
      return new Date(timestamp + amount);
    }

    var defaultOptions = {};
    function getDefaultOptions() {
      return defaultOptions;
    }

    /**
     * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.
     * They usually appear for dates that denote time before the timezones were introduced
     * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891
     * and GMT+01:00:00 after that date)
     *
     * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,
     * which would lead to incorrect calculations.
     *
     * This function returns the timezone offset in milliseconds that takes seconds in account.
     */
    function getTimezoneOffsetInMilliseconds(date) {
      var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
      utcDate.setUTCFullYear(date.getFullYear());
      return date.getTime() - utcDate.getTime();
    }

    /**
     * @name isDate
     * @category Common Helpers
     * @summary Is the given value a date?
     *
     * @description
     * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.
     *
     * @param {*} value - the value to check
     * @returns {boolean} true if the given value is a date
     * @throws {TypeError} 1 arguments required
     *
     * @example
     * // For a valid date:
     * const result = isDate(new Date())
     * //=> true
     *
     * @example
     * // For an invalid date:
     * const result = isDate(new Date(NaN))
     * //=> true
     *
     * @example
     * // For some value:
     * const result = isDate('2014-02-31')
     * //=> false
     *
     * @example
     * // For an object:
     * const result = isDate({})
     * //=> false
     */
    function isDate(value) {
      requiredArgs(1, arguments);
      return value instanceof Date || _typeof(value) === 'object' && Object.prototype.toString.call(value) === '[object Date]';
    }

    /**
     * @name isValid
     * @category Common Helpers
     * @summary Is the given date valid?
     *
     * @description
     * Returns false if argument is Invalid Date and true otherwise.
     * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}
     * Invalid Date is a Date, whose time value is NaN.
     *
     * Time value of Date: http://es5.github.io/#x15.9.1.1
     *
     * @param {*} date - the date to check
     * @returns {Boolean} the date is valid
     * @throws {TypeError} 1 argument required
     *
     * @example
     * // For the valid date:
     * const result = isValid(new Date(2014, 1, 31))
     * //=> true
     *
     * @example
     * // For the value, convertable into a date:
     * const result = isValid(1393804800000)
     * //=> true
     *
     * @example
     * // For the invalid date:
     * const result = isValid(new Date(''))
     * //=> false
     */
    function isValid(dirtyDate) {
      requiredArgs(1, arguments);
      if (!isDate(dirtyDate) && typeof dirtyDate !== 'number') {
        return false;
      }
      var date = toDate(dirtyDate);
      return !isNaN(Number(date));
    }

    /**
     * @name subMilliseconds
     * @category Millisecond Helpers
     * @summary Subtract the specified number of milliseconds from the given date.
     *
     * @description
     * Subtract the specified number of milliseconds from the given date.
     *
     * @param {Date|Number} date - the date to be changed
     * @param {Number} amount - the amount of milliseconds to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
     * @returns {Date} the new date with the milliseconds subtracted
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:
     * const result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
     * //=> Thu Jul 10 2014 12:45:29.250
     */
    function subMilliseconds(dirtyDate, dirtyAmount) {
      requiredArgs(2, arguments);
      var amount = toInteger(dirtyAmount);
      return addMilliseconds(dirtyDate, -amount);
    }

    var MILLISECONDS_IN_DAY = 86400000;
    function getUTCDayOfYear(dirtyDate) {
      requiredArgs(1, arguments);
      var date = toDate(dirtyDate);
      var timestamp = date.getTime();
      date.setUTCMonth(0, 1);
      date.setUTCHours(0, 0, 0, 0);
      var startOfYearTimestamp = date.getTime();
      var difference = timestamp - startOfYearTimestamp;
      return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;
    }

    function startOfUTCISOWeek(dirtyDate) {
      requiredArgs(1, arguments);
      var weekStartsOn = 1;
      var date = toDate(dirtyDate);
      var day = date.getUTCDay();
      var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
      date.setUTCDate(date.getUTCDate() - diff);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }

    function getUTCISOWeekYear(dirtyDate) {
      requiredArgs(1, arguments);
      var date = toDate(dirtyDate);
      var year = date.getUTCFullYear();
      var fourthOfJanuaryOfNextYear = new Date(0);
      fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);
      fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);
      var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);
      var fourthOfJanuaryOfThisYear = new Date(0);
      fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);
      fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);
      var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);
      if (date.getTime() >= startOfNextYear.getTime()) {
        return year + 1;
      } else if (date.getTime() >= startOfThisYear.getTime()) {
        return year;
      } else {
        return year - 1;
      }
    }

    function startOfUTCISOWeekYear(dirtyDate) {
      requiredArgs(1, arguments);
      var year = getUTCISOWeekYear(dirtyDate);
      var fourthOfJanuary = new Date(0);
      fourthOfJanuary.setUTCFullYear(year, 0, 4);
      fourthOfJanuary.setUTCHours(0, 0, 0, 0);
      var date = startOfUTCISOWeek(fourthOfJanuary);
      return date;
    }

    var MILLISECONDS_IN_WEEK$1 = 604800000;
    function getUTCISOWeek(dirtyDate) {
      requiredArgs(1, arguments);
      var date = toDate(dirtyDate);
      var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime();

      // Round the number of days to the nearest integer
      // because the number of milliseconds in a week is not constant
      // (e.g. it's different in the week of the daylight saving time clock shift)
      return Math.round(diff / MILLISECONDS_IN_WEEK$1) + 1;
    }

    function startOfUTCWeek(dirtyDate, options) {
      var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
      requiredArgs(1, arguments);
      var defaultOptions = getDefaultOptions();
      var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);

      // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
      if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
        throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
      }
      var date = toDate(dirtyDate);
      var day = date.getUTCDay();
      var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
      date.setUTCDate(date.getUTCDate() - diff);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }

    function getUTCWeekYear(dirtyDate, options) {
      var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
      requiredArgs(1, arguments);
      var date = toDate(dirtyDate);
      var year = date.getUTCFullYear();
      var defaultOptions = getDefaultOptions();
      var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);

      // Test if weekStartsOn is between 1 and 7 _and_ is not NaN
      if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
        throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
      }
      var firstWeekOfNextYear = new Date(0);
      firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);
      firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);
      var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, options);
      var firstWeekOfThisYear = new Date(0);
      firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);
      firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);
      var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, options);
      if (date.getTime() >= startOfNextYear.getTime()) {
        return year + 1;
      } else if (date.getTime() >= startOfThisYear.getTime()) {
        return year;
      } else {
        return year - 1;
      }
    }

    function startOfUTCWeekYear(dirtyDate, options) {
      var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
      requiredArgs(1, arguments);
      var defaultOptions = getDefaultOptions();
      var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
      var year = getUTCWeekYear(dirtyDate, options);
      var firstWeek = new Date(0);
      firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);
      firstWeek.setUTCHours(0, 0, 0, 0);
      var date = startOfUTCWeek(firstWeek, options);
      return date;
    }

    var MILLISECONDS_IN_WEEK = 604800000;
    function getUTCWeek(dirtyDate, options) {
      requiredArgs(1, arguments);
      var date = toDate(dirtyDate);
      var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime();

      // Round the number of days to the nearest integer
      // because the number of milliseconds in a week is not constant
      // (e.g. it's different in the week of the daylight saving time clock shift)
      return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
    }

    function addLeadingZeros(number, targetLength) {
      var sign = number < 0 ? '-' : '';
      var output = Math.abs(number).toString();
      while (output.length < targetLength) {
        output = '0' + output;
      }
      return sign + output;
    }

    /*
     * |     | Unit                           |     | Unit                           |
     * |-----|--------------------------------|-----|--------------------------------|
     * |  a  | AM, PM                         |  A* |                                |
     * |  d  | Day of month                   |  D  |                                |
     * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
     * |  m  | Minute                         |  M  | Month                          |
     * |  s  | Second                         |  S  | Fraction of second             |
     * |  y  | Year (abs)                     |  Y  |                                |
     *
     * Letters marked by * are not implemented but reserved by Unicode standard.
     */
    var formatters$2 = {
      // Year
      y: function y(date, token) {
        // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens
        // | Year     |     y | yy |   yyy |  yyyy | yyyyy |
        // |----------|-------|----|-------|-------|-------|
        // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |
        // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |
        // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |
        // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |
        // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |

        var signedYear = date.getUTCFullYear();
        // Returns 1 for 1 BC (which is year 0 in JavaScript)
        var year = signedYear > 0 ? signedYear : 1 - signedYear;
        return addLeadingZeros(token === 'yy' ? year % 100 : year, token.length);
      },
      // Month
      M: function M(date, token) {
        var month = date.getUTCMonth();
        return token === 'M' ? String(month + 1) : addLeadingZeros(month + 1, 2);
      },
      // Day of the month
      d: function d(date, token) {
        return addLeadingZeros(date.getUTCDate(), token.length);
      },
      // AM or PM
      a: function a(date, token) {
        var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? 'pm' : 'am';
        switch (token) {
          case 'a':
          case 'aa':
            return dayPeriodEnumValue.toUpperCase();
          case 'aaa':
            return dayPeriodEnumValue;
          case 'aaaaa':
            return dayPeriodEnumValue[0];
          case 'aaaa':
          default:
            return dayPeriodEnumValue === 'am' ? 'a.m.' : 'p.m.';
        }
      },
      // Hour [1-12]
      h: function h(date, token) {
        return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);
      },
      // Hour [0-23]
      H: function H(date, token) {
        return addLeadingZeros(date.getUTCHours(), token.length);
      },
      // Minute
      m: function m(date, token) {
        return addLeadingZeros(date.getUTCMinutes(), token.length);
      },
      // Second
      s: function s(date, token) {
        return addLeadingZeros(date.getUTCSeconds(), token.length);
      },
      // Fraction of second
      S: function S(date, token) {
        var numberOfDigits = token.length;
        var milliseconds = date.getUTCMilliseconds();
        var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));
        return addLeadingZeros(fractionalSeconds, token.length);
      }
    };
    var formatters$3 = formatters$2;

    var dayPeriodEnum = {
      am: 'am',
      pm: 'pm',
      midnight: 'midnight',
      noon: 'noon',
      morning: 'morning',
      afternoon: 'afternoon',
      evening: 'evening',
      night: 'night'
    };
    /*
     * |     | Unit                           |     | Unit                           |
     * |-----|--------------------------------|-----|--------------------------------|
     * |  a  | AM, PM                         |  A* | Milliseconds in day            |
     * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |
     * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |
     * |  d  | Day of month                   |  D  | Day of year                    |
     * |  e  | Local day of week              |  E  | Day of week                    |
     * |  f  |                                |  F* | Day of week in month           |
     * |  g* | Modified Julian day            |  G  | Era                            |
     * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
     * |  i! | ISO day of week                |  I! | ISO week of year               |
     * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |
     * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |
     * |  l* | (deprecated)                   |  L  | Stand-alone month              |
     * |  m  | Minute                         |  M  | Month                          |
     * |  n  |                                |  N  |                                |
     * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |
     * |  p! | Long localized time            |  P! | Long localized date            |
     * |  q  | Stand-alone quarter            |  Q  | Quarter                        |
     * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |
     * |  s  | Second                         |  S  | Fraction of second             |
     * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |
     * |  u  | Extended year                  |  U* | Cyclic year                    |
     * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |
     * |  w  | Local week of year             |  W* | Week of month                  |
     * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |
     * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |
     * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |
     *
     * Letters marked by * are not implemented but reserved by Unicode standard.
     *
     * Letters marked by ! are non-standard, but implemented by date-fns:
     * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)
     * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,
     *   i.e. 7 for Sunday, 1 for Monday, etc.
     * - `I` is ISO week of year, as opposed to `w` which is local week of year.
     * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.
     *   `R` is supposed to be used in conjunction with `I` and `i`
     *   for universal ISO week-numbering date, whereas
     *   `Y` is supposed to be used in conjunction with `w` and `e`
     *   for week-numbering date specific to the locale.
     * - `P` is long localized date format
     * - `p` is long localized time format
     */

    var formatters = {
      // Era
      G: function G(date, token, localize) {
        var era = date.getUTCFullYear() > 0 ? 1 : 0;
        switch (token) {
          // AD, BC
          case 'G':
          case 'GG':
          case 'GGG':
            return localize.era(era, {
              width: 'abbreviated'
            });
          // A, B
          case 'GGGGG':
            return localize.era(era, {
              width: 'narrow'
            });
          // Anno Domini, Before Christ
          case 'GGGG':
          default:
            return localize.era(era, {
              width: 'wide'
            });
        }
      },
      // Year
      y: function y(date, token, localize) {
        // Ordinal number
        if (token === 'yo') {
          var signedYear = date.getUTCFullYear();
          // Returns 1 for 1 BC (which is year 0 in JavaScript)
          var year = signedYear > 0 ? signedYear : 1 - signedYear;
          return localize.ordinalNumber(year, {
            unit: 'year'
          });
        }
        return formatters$3.y(date, token);
      },
      // Local week-numbering year
      Y: function Y(date, token, localize, options) {
        var signedWeekYear = getUTCWeekYear(date, options);
        // Returns 1 for 1 BC (which is year 0 in JavaScript)
        var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;

        // Two digit year
        if (token === 'YY') {
          var twoDigitYear = weekYear % 100;
          return addLeadingZeros(twoDigitYear, 2);
        }

        // Ordinal number
        if (token === 'Yo') {
          return localize.ordinalNumber(weekYear, {
            unit: 'year'
          });
        }

        // Padding
        return addLeadingZeros(weekYear, token.length);
      },
      // ISO week-numbering year
      R: function R(date, token) {
        var isoWeekYear = getUTCISOWeekYear(date);

        // Padding
        return addLeadingZeros(isoWeekYear, token.length);
      },
      // Extended year. This is a single number designating the year of this calendar system.
      // The main difference between `y` and `u` localizers are B.C. years:
      // | Year | `y` | `u` |
      // |------|-----|-----|
      // | AC 1 |   1 |   1 |
      // | BC 1 |   1 |   0 |
      // | BC 2 |   2 |  -1 |
      // Also `yy` always returns the last two digits of a year,
      // while `uu` pads single digit years to 2 characters and returns other years unchanged.
      u: function u(date, token) {
        var year = date.getUTCFullYear();
        return addLeadingZeros(year, token.length);
      },
      // Quarter
      Q: function Q(date, token, localize) {
        var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
        switch (token) {
          // 1, 2, 3, 4
          case 'Q':
            return String(quarter);
          // 01, 02, 03, 04
          case 'QQ':
            return addLeadingZeros(quarter, 2);
          // 1st, 2nd, 3rd, 4th
          case 'Qo':
            return localize.ordinalNumber(quarter, {
              unit: 'quarter'
            });
          // Q1, Q2, Q3, Q4
          case 'QQQ':
            return localize.quarter(quarter, {
              width: 'abbreviated',
              context: 'formatting'
            });
          // 1, 2, 3, 4 (narrow quarter; could be not numerical)
          case 'QQQQQ':
            return localize.quarter(quarter, {
              width: 'narrow',
              context: 'formatting'
            });
          // 1st quarter, 2nd quarter, ...
          case 'QQQQ':
          default:
            return localize.quarter(quarter, {
              width: 'wide',
              context: 'formatting'
            });
        }
      },
      // Stand-alone quarter
      q: function q(date, token, localize) {
        var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
        switch (token) {
          // 1, 2, 3, 4
          case 'q':
            return String(quarter);
          // 01, 02, 03, 04
          case 'qq':
            return addLeadingZeros(quarter, 2);
          // 1st, 2nd, 3rd, 4th
          case 'qo':
            return localize.ordinalNumber(quarter, {
              unit: 'quarter'
            });
          // Q1, Q2, Q3, Q4
          case 'qqq':
            return localize.quarter(quarter, {
              width: 'abbreviated',
              context: 'standalone'
            });
          // 1, 2, 3, 4 (narrow quarter; could be not numerical)
          case 'qqqqq':
            return localize.quarter(quarter, {
              width: 'narrow',
              context: 'standalone'
            });
          // 1st quarter, 2nd quarter, ...
          case 'qqqq':
          default:
            return localize.quarter(quarter, {
              width: 'wide',
              context: 'standalone'
            });
        }
      },
      // Month
      M: function M(date, token, localize) {
        var month = date.getUTCMonth();
        switch (token) {
          case 'M':
          case 'MM':
            return formatters$3.M(date, token);
          // 1st, 2nd, ..., 12th
          case 'Mo':
            return localize.ordinalNumber(month + 1, {
              unit: 'month'
            });
          // Jan, Feb, ..., Dec
          case 'MMM':
            return localize.month(month, {
              width: 'abbreviated',
              context: 'formatting'
            });
          // J, F, ..., D
          case 'MMMMM':
            return localize.month(month, {
              width: 'narrow',
              context: 'formatting'
            });
          // January, February, ..., December
          case 'MMMM':
          default:
            return localize.month(month, {
              width: 'wide',
              context: 'formatting'
            });
        }
      },
      // Stand-alone month
      L: function L(date, token, localize) {
        var month = date.getUTCMonth();
        switch (token) {
          // 1, 2, ..., 12
          case 'L':
            return String(month + 1);
          // 01, 02, ..., 12
          case 'LL':
            return addLeadingZeros(month + 1, 2);
          // 1st, 2nd, ..., 12th
          case 'Lo':
            return localize.ordinalNumber(month + 1, {
              unit: 'month'
            });
          // Jan, Feb, ..., Dec
          case 'LLL':
            return localize.month(month, {
              width: 'abbreviated',
              context: 'standalone'
            });
          // J, F, ..., D
          case 'LLLLL':
            return localize.month(month, {
              width: 'narrow',
              context: 'standalone'
            });
          // January, February, ..., December
          case 'LLLL':
          default:
            return localize.month(month, {
              width: 'wide',
              context: 'standalone'
            });
        }
      },
      // Local week of year
      w: function w(date, token, localize, options) {
        var week = getUTCWeek(date, options);
        if (token === 'wo') {
          return localize.ordinalNumber(week, {
            unit: 'week'
          });
        }
        return addLeadingZeros(week, token.length);
      },
      // ISO week of year
      I: function I(date, token, localize) {
        var isoWeek = getUTCISOWeek(date);
        if (token === 'Io') {
          return localize.ordinalNumber(isoWeek, {
            unit: 'week'
          });
        }
        return addLeadingZeros(isoWeek, token.length);
      },
      // Day of the month
      d: function d(date, token, localize) {
        if (token === 'do') {
          return localize.ordinalNumber(date.getUTCDate(), {
            unit: 'date'
          });
        }
        return formatters$3.d(date, token);
      },
      // Day of year
      D: function D(date, token, localize) {
        var dayOfYear = getUTCDayOfYear(date);
        if (token === 'Do') {
          return localize.ordinalNumber(dayOfYear, {
            unit: 'dayOfYear'
          });
        }
        return addLeadingZeros(dayOfYear, token.length);
      },
      // Day of week
      E: function E(date, token, localize) {
        var dayOfWeek = date.getUTCDay();
        switch (token) {
          // Tue
          case 'E':
          case 'EE':
          case 'EEE':
            return localize.day(dayOfWeek, {
              width: 'abbreviated',
              context: 'formatting'
            });
          // T
          case 'EEEEE':
            return localize.day(dayOfWeek, {
              width: 'narrow',
              context: 'formatting'
            });
          // Tu
          case 'EEEEEE':
            return localize.day(dayOfWeek, {
              width: 'short',
              context: 'formatting'
            });
          // Tuesday
          case 'EEEE':
          default:
            return localize.day(dayOfWeek, {
              width: 'wide',
              context: 'formatting'
            });
        }
      },
      // Local day of week
      e: function e(date, token, localize, options) {
        var dayOfWeek = date.getUTCDay();
        var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
        switch (token) {
          // Numerical value (Nth day of week with current locale or weekStartsOn)
          case 'e':
            return String(localDayOfWeek);
          // Padded numerical value
          case 'ee':
            return addLeadingZeros(localDayOfWeek, 2);
          // 1st, 2nd, ..., 7th
          case 'eo':
            return localize.ordinalNumber(localDayOfWeek, {
              unit: 'day'
            });
          case 'eee':
            return localize.day(dayOfWeek, {
              width: 'abbreviated',
              context: 'formatting'
            });
          // T
          case 'eeeee':
            return localize.day(dayOfWeek, {
              width: 'narrow',
              context: 'formatting'
            });
          // Tu
          case 'eeeeee':
            return localize.day(dayOfWeek, {
              width: 'short',
              context: 'formatting'
            });
          // Tuesday
          case 'eeee':
          default:
            return localize.day(dayOfWeek, {
              width: 'wide',
              context: 'formatting'
            });
        }
      },
      // Stand-alone local day of week
      c: function c(date, token, localize, options) {
        var dayOfWeek = date.getUTCDay();
        var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
        switch (token) {
          // Numerical value (same as in `e`)
          case 'c':
            return String(localDayOfWeek);
          // Padded numerical value
          case 'cc':
            return addLeadingZeros(localDayOfWeek, token.length);
          // 1st, 2nd, ..., 7th
          case 'co':
            return localize.ordinalNumber(localDayOfWeek, {
              unit: 'day'
            });
          case 'ccc':
            return localize.day(dayOfWeek, {
              width: 'abbreviated',
              context: 'standalone'
            });
          // T
          case 'ccccc':
            return localize.day(dayOfWeek, {
              width: 'narrow',
              context: 'standalone'
            });
          // Tu
          case 'cccccc':
            return localize.day(dayOfWeek, {
              width: 'short',
              context: 'standalone'
            });
          // Tuesday
          case 'cccc':
          default:
            return localize.day(dayOfWeek, {
              width: 'wide',
              context: 'standalone'
            });
        }
      },
      // ISO day of week
      i: function i(date, token, localize) {
        var dayOfWeek = date.getUTCDay();
        var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;
        switch (token) {
          // 2
          case 'i':
            return String(isoDayOfWeek);
          // 02
          case 'ii':
            return addLeadingZeros(isoDayOfWeek, token.length);
          // 2nd
          case 'io':
            return localize.ordinalNumber(isoDayOfWeek, {
              unit: 'day'
            });
          // Tue
          case 'iii':
            return localize.day(dayOfWeek, {
              width: 'abbreviated',
              context: 'formatting'
            });
          // T
          case 'iiiii':
            return localize.day(dayOfWeek, {
              width: 'narrow',
              context: 'formatting'
            });
          // Tu
          case 'iiiiii':
            return localize.day(dayOfWeek, {
              width: 'short',
              context: 'formatting'
            });
          // Tuesday
          case 'iiii':
          default:
            return localize.day(dayOfWeek, {
              width: 'wide',
              context: 'formatting'
            });
        }
      },
      // AM or PM
      a: function a(date, token, localize) {
        var hours = date.getUTCHours();
        var dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';
        switch (token) {
          case 'a':
          case 'aa':
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'abbreviated',
              context: 'formatting'
            });
          case 'aaa':
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'abbreviated',
              context: 'formatting'
            }).toLowerCase();
          case 'aaaaa':
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'narrow',
              context: 'formatting'
            });
          case 'aaaa':
          default:
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'wide',
              context: 'formatting'
            });
        }
      },
      // AM, PM, midnight, noon
      b: function b(date, token, localize) {
        var hours = date.getUTCHours();
        var dayPeriodEnumValue;
        if (hours === 12) {
          dayPeriodEnumValue = dayPeriodEnum.noon;
        } else if (hours === 0) {
          dayPeriodEnumValue = dayPeriodEnum.midnight;
        } else {
          dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';
        }
        switch (token) {
          case 'b':
          case 'bb':
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'abbreviated',
              context: 'formatting'
            });
          case 'bbb':
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'abbreviated',
              context: 'formatting'
            }).toLowerCase();
          case 'bbbbb':
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'narrow',
              context: 'formatting'
            });
          case 'bbbb':
          default:
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'wide',
              context: 'formatting'
            });
        }
      },
      // in the morning, in the afternoon, in the evening, at night
      B: function B(date, token, localize) {
        var hours = date.getUTCHours();
        var dayPeriodEnumValue;
        if (hours >= 17) {
          dayPeriodEnumValue = dayPeriodEnum.evening;
        } else if (hours >= 12) {
          dayPeriodEnumValue = dayPeriodEnum.afternoon;
        } else if (hours >= 4) {
          dayPeriodEnumValue = dayPeriodEnum.morning;
        } else {
          dayPeriodEnumValue = dayPeriodEnum.night;
        }
        switch (token) {
          case 'B':
          case 'BB':
          case 'BBB':
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'abbreviated',
              context: 'formatting'
            });
          case 'BBBBB':
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'narrow',
              context: 'formatting'
            });
          case 'BBBB':
          default:
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'wide',
              context: 'formatting'
            });
        }
      },
      // Hour [1-12]
      h: function h(date, token, localize) {
        if (token === 'ho') {
          var hours = date.getUTCHours() % 12;
          if (hours === 0) hours = 12;
          return localize.ordinalNumber(hours, {
            unit: 'hour'
          });
        }
        return formatters$3.h(date, token);
      },
      // Hour [0-23]
      H: function H(date, token, localize) {
        if (token === 'Ho') {
          return localize.ordinalNumber(date.getUTCHours(), {
            unit: 'hour'
          });
        }
        return formatters$3.H(date, token);
      },
      // Hour [0-11]
      K: function K(date, token, localize) {
        var hours = date.getUTCHours() % 12;
        if (token === 'Ko') {
          return localize.ordinalNumber(hours, {
            unit: 'hour'
          });
        }
        return addLeadingZeros(hours, token.length);
      },
      // Hour [1-24]
      k: function k(date, token, localize) {
        var hours = date.getUTCHours();
        if (hours === 0) hours = 24;
        if (token === 'ko') {
          return localize.ordinalNumber(hours, {
            unit: 'hour'
          });
        }
        return addLeadingZeros(hours, token.length);
      },
      // Minute
      m: function m(date, token, localize) {
        if (token === 'mo') {
          return localize.ordinalNumber(date.getUTCMinutes(), {
            unit: 'minute'
          });
        }
        return formatters$3.m(date, token);
      },
      // Second
      s: function s(date, token, localize) {
        if (token === 'so') {
          return localize.ordinalNumber(date.getUTCSeconds(), {
            unit: 'second'
          });
        }
        return formatters$3.s(date, token);
      },
      // Fraction of second
      S: function S(date, token) {
        return formatters$3.S(date, token);
      },
      // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)
      X: function X(date, token, _localize, options) {
        var originalDate = options._originalDate || date;
        var timezoneOffset = originalDate.getTimezoneOffset();
        if (timezoneOffset === 0) {
          return 'Z';
        }
        switch (token) {
          // Hours and optional minutes
          case 'X':
            return formatTimezoneWithOptionalMinutes(timezoneOffset);

          // Hours, minutes and optional seconds without `:` delimiter
          // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
          // so this token always has the same output as `XX`
          case 'XXXX':
          case 'XX':
            // Hours and minutes without `:` delimiter
            return formatTimezone(timezoneOffset);

          // Hours, minutes and optional seconds with `:` delimiter
          // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
          // so this token always has the same output as `XXX`
          case 'XXXXX':
          case 'XXX': // Hours and minutes with `:` delimiter
          default:
            return formatTimezone(timezoneOffset, ':');
        }
      },
      // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)
      x: function x(date, token, _localize, options) {
        var originalDate = options._originalDate || date;
        var timezoneOffset = originalDate.getTimezoneOffset();
        switch (token) {
          // Hours and optional minutes
          case 'x':
            return formatTimezoneWithOptionalMinutes(timezoneOffset);

          // Hours, minutes and optional seconds without `:` delimiter
          // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
          // so this token always has the same output as `xx`
          case 'xxxx':
          case 'xx':
            // Hours and minutes without `:` delimiter
            return formatTimezone(timezoneOffset);

          // Hours, minutes and optional seconds with `:` delimiter
          // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
          // so this token always has the same output as `xxx`
          case 'xxxxx':
          case 'xxx': // Hours and minutes with `:` delimiter
          default:
            return formatTimezone(timezoneOffset, ':');
        }
      },
      // Timezone (GMT)
      O: function O(date, token, _localize, options) {
        var originalDate = options._originalDate || date;
        var timezoneOffset = originalDate.getTimezoneOffset();
        switch (token) {
          // Short
          case 'O':
          case 'OO':
          case 'OOO':
            return 'GMT' + formatTimezoneShort(timezoneOffset, ':');
          // Long
          case 'OOOO':
          default:
            return 'GMT' + formatTimezone(timezoneOffset, ':');
        }
      },
      // Timezone (specific non-location)
      z: function z(date, token, _localize, options) {
        var originalDate = options._originalDate || date;
        var timezoneOffset = originalDate.getTimezoneOffset();
        switch (token) {
          // Short
          case 'z':
          case 'zz':
          case 'zzz':
            return 'GMT' + formatTimezoneShort(timezoneOffset, ':');
          // Long
          case 'zzzz':
          default:
            return 'GMT' + formatTimezone(timezoneOffset, ':');
        }
      },
      // Seconds timestamp
      t: function t(date, token, _localize, options) {
        var originalDate = options._originalDate || date;
        var timestamp = Math.floor(originalDate.getTime() / 1000);
        return addLeadingZeros(timestamp, token.length);
      },
      // Milliseconds timestamp
      T: function T(date, token, _localize, options) {
        var originalDate = options._originalDate || date;
        var timestamp = originalDate.getTime();
        return addLeadingZeros(timestamp, token.length);
      }
    };
    function formatTimezoneShort(offset, dirtyDelimiter) {
      var sign = offset > 0 ? '-' : '+';
      var absOffset = Math.abs(offset);
      var hours = Math.floor(absOffset / 60);
      var minutes = absOffset % 60;
      if (minutes === 0) {
        return sign + String(hours);
      }
      var delimiter = dirtyDelimiter || '';
      return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);
    }
    function formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {
      if (offset % 60 === 0) {
        var sign = offset > 0 ? '-' : '+';
        return sign + addLeadingZeros(Math.abs(offset) / 60, 2);
      }
      return formatTimezone(offset, dirtyDelimiter);
    }
    function formatTimezone(offset, dirtyDelimiter) {
      var delimiter = dirtyDelimiter || '';
      var sign = offset > 0 ? '-' : '+';
      var absOffset = Math.abs(offset);
      var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);
      var minutes = addLeadingZeros(absOffset % 60, 2);
      return sign + hours + delimiter + minutes;
    }
    var formatters$1 = formatters;

    var dateLongFormatter = function dateLongFormatter(pattern, formatLong) {
      switch (pattern) {
        case 'P':
          return formatLong.date({
            width: 'short'
          });
        case 'PP':
          return formatLong.date({
            width: 'medium'
          });
        case 'PPP':
          return formatLong.date({
            width: 'long'
          });
        case 'PPPP':
        default:
          return formatLong.date({
            width: 'full'
          });
      }
    };
    var timeLongFormatter = function timeLongFormatter(pattern, formatLong) {
      switch (pattern) {
        case 'p':
          return formatLong.time({
            width: 'short'
          });
        case 'pp':
          return formatLong.time({
            width: 'medium'
          });
        case 'ppp':
          return formatLong.time({
            width: 'long'
          });
        case 'pppp':
        default:
          return formatLong.time({
            width: 'full'
          });
      }
    };
    var dateTimeLongFormatter = function dateTimeLongFormatter(pattern, formatLong) {
      var matchResult = pattern.match(/(P+)(p+)?/) || [];
      var datePattern = matchResult[1];
      var timePattern = matchResult[2];
      if (!timePattern) {
        return dateLongFormatter(pattern, formatLong);
      }
      var dateTimeFormat;
      switch (datePattern) {
        case 'P':
          dateTimeFormat = formatLong.dateTime({
            width: 'short'
          });
          break;
        case 'PP':
          dateTimeFormat = formatLong.dateTime({
            width: 'medium'
          });
          break;
        case 'PPP':
          dateTimeFormat = formatLong.dateTime({
            width: 'long'
          });
          break;
        case 'PPPP':
        default:
          dateTimeFormat = formatLong.dateTime({
            width: 'full'
          });
          break;
      }
      return dateTimeFormat.replace('{{date}}', dateLongFormatter(datePattern, formatLong)).replace('{{time}}', timeLongFormatter(timePattern, formatLong));
    };
    var longFormatters = {
      p: timeLongFormatter,
      P: dateTimeLongFormatter
    };
    var longFormatters$1 = longFormatters;

    var protectedDayOfYearTokens = ['D', 'DD'];
    var protectedWeekYearTokens = ['YY', 'YYYY'];
    function isProtectedDayOfYearToken(token) {
      return protectedDayOfYearTokens.indexOf(token) !== -1;
    }
    function isProtectedWeekYearToken(token) {
      return protectedWeekYearTokens.indexOf(token) !== -1;
    }
    function throwProtectedError(token, format, input) {
      if (token === 'YYYY') {
        throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(format, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
      } else if (token === 'YY') {
        throw new RangeError("Use `yy` instead of `YY` (in `".concat(format, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
      } else if (token === 'D') {
        throw new RangeError("Use `d` instead of `D` (in `".concat(format, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
      } else if (token === 'DD') {
        throw new RangeError("Use `dd` instead of `DD` (in `".concat(format, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
      }
    }

    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: 'less than a second',
        other: 'less than {{count}} seconds'
      },
      xSeconds: {
        one: '1 second',
        other: '{{count}} seconds'
      },
      halfAMinute: 'half a minute',
      lessThanXMinutes: {
        one: 'less than a minute',
        other: 'less than {{count}} minutes'
      },
      xMinutes: {
        one: '1 minute',
        other: '{{count}} minutes'
      },
      aboutXHours: {
        one: 'about 1 hour',
        other: 'about {{count}} hours'
      },
      xHours: {
        one: '1 hour',
        other: '{{count}} hours'
      },
      xDays: {
        one: '1 day',
        other: '{{count}} days'
      },
      aboutXWeeks: {
        one: 'about 1 week',
        other: 'about {{count}} weeks'
      },
      xWeeks: {
        one: '1 week',
        other: '{{count}} weeks'
      },
      aboutXMonths: {
        one: 'about 1 month',
        other: 'about {{count}} months'
      },
      xMonths: {
        one: '1 month',
        other: '{{count}} months'
      },
      aboutXYears: {
        one: 'about 1 year',
        other: 'about {{count}} years'
      },
      xYears: {
        one: '1 year',
        other: '{{count}} years'
      },
      overXYears: {
        one: 'over 1 year',
        other: 'over {{count}} years'
      },
      almostXYears: {
        one: 'almost 1 year',
        other: 'almost {{count}} years'
      }
    };
    var formatDistance = function formatDistance(token, count, options) {
      var result;
      var tokenValue = formatDistanceLocale[token];
      if (typeof tokenValue === 'string') {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace('{{count}}', count.toString());
      }
      if (options !== null && options !== void 0 && options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return 'in ' + result;
        } else {
          return result + ' ago';
        }
      }
      return result;
    };
    var formatDistance$1 = formatDistance;

    function buildFormatLongFn(args) {
      return function () {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        // TODO: Remove String()
        var width = options.width ? String(options.width) : args.defaultWidth;
        var format = args.formats[width] || args.formats[args.defaultWidth];
        return format;
      };
    }

    var dateFormats = {
      full: 'EEEE, MMMM do, y',
      long: 'MMMM do, y',
      medium: 'MMM d, y',
      short: 'MM/dd/yyyy'
    };
    var timeFormats = {
      full: 'h:mm:ss a zzzz',
      long: 'h:mm:ss a z',
      medium: 'h:mm:ss a',
      short: 'h:mm a'
    };
    var dateTimeFormats = {
      full: "{{date}} 'at' {{time}}",
      long: "{{date}} 'at' {{time}}",
      medium: '{{date}}, {{time}}',
      short: '{{date}}, {{time}}'
    };
    var formatLong = {
      date: buildFormatLongFn({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: buildFormatLongFn({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: buildFormatLongFn({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };
    var formatLong$1 = formatLong;

    var formatRelativeLocale = {
      lastWeek: "'last' eeee 'at' p",
      yesterday: "'yesterday at' p",
      today: "'today at' p",
      tomorrow: "'tomorrow at' p",
      nextWeek: "eeee 'at' p",
      other: 'P'
    };
    var formatRelative = function formatRelative(token, _date, _baseDate, _options) {
      return formatRelativeLocale[token];
    };
    var formatRelative$1 = formatRelative;

    function buildLocalizeFn(args) {
      return function (dirtyIndex, options) {
        var context = options !== null && options !== void 0 && options.context ? String(options.context) : 'standalone';
        var valuesArray;
        if (context === 'formatting' && args.formattingValues) {
          var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
          var width = options !== null && options !== void 0 && options.width ? String(options.width) : defaultWidth;
          valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
        } else {
          var _defaultWidth = args.defaultWidth;
          var _width = options !== null && options !== void 0 && options.width ? String(options.width) : args.defaultWidth;
          valuesArray = args.values[_width] || args.values[_defaultWidth];
        }
        var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;
        // @ts-ignore: For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!
        return valuesArray[index];
      };
    }

    var eraValues = {
      narrow: ['B', 'A'],
      abbreviated: ['BC', 'AD'],
      wide: ['Before Christ', 'Anno Domini']
    };
    var quarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
      wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter']
    };

    // Note: in English, the names of days of the week and months are capitalized.
    // If you are making a new locale based on this one, check if the same is true for the language you're working on.
    // Generally, formatted dates should look like they are in the middle of a sentence,
    // e.g. in Spanish language the weekdays and months should be in the lowercase.
    var monthValues = {
      narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
      abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
      wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
    };
    var dayValues = {
      narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],
      short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
      abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
      wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
    };
    var dayPeriodValues = {
      narrow: {
        am: 'a',
        pm: 'p',
        midnight: 'mi',
        noon: 'n',
        morning: 'morning',
        afternoon: 'afternoon',
        evening: 'evening',
        night: 'night'
      },
      abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'midnight',
        noon: 'noon',
        morning: 'morning',
        afternoon: 'afternoon',
        evening: 'evening',
        night: 'night'
      },
      wide: {
        am: 'a.m.',
        pm: 'p.m.',
        midnight: 'midnight',
        noon: 'noon',
        morning: 'morning',
        afternoon: 'afternoon',
        evening: 'evening',
        night: 'night'
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: 'a',
        pm: 'p',
        midnight: 'mi',
        noon: 'n',
        morning: 'in the morning',
        afternoon: 'in the afternoon',
        evening: 'in the evening',
        night: 'at night'
      },
      abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'midnight',
        noon: 'noon',
        morning: 'in the morning',
        afternoon: 'in the afternoon',
        evening: 'in the evening',
        night: 'at night'
      },
      wide: {
        am: 'a.m.',
        pm: 'p.m.',
        midnight: 'midnight',
        noon: 'noon',
        morning: 'in the morning',
        afternoon: 'in the afternoon',
        evening: 'in the evening',
        night: 'at night'
      }
    };
    var ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
      var number = Number(dirtyNumber);

      // If ordinal numbers depend on context, for example,
      // if they are different for different grammatical genders,
      // use `options.unit`.
      //
      // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',
      // 'day', 'hour', 'minute', 'second'.

      var rem100 = number % 100;
      if (rem100 > 20 || rem100 < 10) {
        switch (rem100 % 10) {
          case 1:
            return number + 'st';
          case 2:
            return number + 'nd';
          case 3:
            return number + 'rd';
        }
      }
      return number + 'th';
    };
    var localize = {
      ordinalNumber: ordinalNumber,
      era: buildLocalizeFn({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: buildLocalizeFn({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function argumentCallback(quarter) {
          return quarter - 1;
        }
      }),
      month: buildLocalizeFn({
        values: monthValues,
        defaultWidth: 'wide'
      }),
      day: buildLocalizeFn({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: buildLocalizeFn({
        values: dayPeriodValues,
        defaultWidth: 'wide',
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: 'wide'
      })
    };
    var localize$1 = localize;

    function buildMatchFn(args) {
      return function (string) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var width = options.width;
        var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
        var matchResult = string.match(matchPattern);
        if (!matchResult) {
          return null;
        }
        var matchedString = matchResult[0];
        var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
        var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function (pattern) {
          return pattern.test(matchedString);
        }) : findKey(parsePatterns, function (pattern) {
          return pattern.test(matchedString);
        });
        var value;
        value = args.valueCallback ? args.valueCallback(key) : key;
        value = options.valueCallback ? options.valueCallback(value) : value;
        var rest = string.slice(matchedString.length);
        return {
          value: value,
          rest: rest
        };
      };
    }
    function findKey(object, predicate) {
      for (var key in object) {
        if (object.hasOwnProperty(key) && predicate(object[key])) {
          return key;
        }
      }
      return undefined;
    }
    function findIndex(array, predicate) {
      for (var key = 0; key < array.length; key++) {
        if (predicate(array[key])) {
          return key;
        }
      }
      return undefined;
    }

    function buildMatchPatternFn(args) {
      return function (string) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var matchResult = string.match(args.matchPattern);
        if (!matchResult) return null;
        var matchedString = matchResult[0];
        var parseResult = string.match(args.parsePattern);
        if (!parseResult) return null;
        var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
        value = options.valueCallback ? options.valueCallback(value) : value;
        var rest = string.slice(matchedString.length);
        return {
          value: value,
          rest: rest
        };
      };
    }

    var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(b|a)/i,
      abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
      wide: /^(before christ|before common era|anno domini|common era)/i
    };
    var parseEraPatterns = {
      any: [/^b/i, /^(a|c)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^q[1234]/i,
      wide: /^[1234](th|st|nd|rd)? quarter/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[jfmasond]/i,
      abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
      wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
    };
    var parseMonthPatterns = {
      narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
      any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
    };
    var matchDayPatterns = {
      narrow: /^[smtwf]/i,
      short: /^(su|mo|tu|we|th|fr|sa)/i,
      abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
      wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
    };
    var parseDayPatterns = {
      narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
      any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
      any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^mi/i,
        noon: /^no/i,
        morning: /morning/i,
        afternoon: /afternoon/i,
        evening: /evening/i,
        night: /night/i
      }
    };
    var match = {
      ordinalNumber: buildMatchPatternFn({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function valueCallback(value) {
          return parseInt(value, 10);
        }
      }),
      era: buildMatchFn({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: buildMatchFn({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function valueCallback(index) {
          return index + 1;
        }
      }),
      month: buildMatchFn({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: buildMatchFn({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: buildMatchFn({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };
    var match$1 = match;

    /**
     * @type {Locale}
     * @category Locales
     * @summary English locale (United States).
     * @language English
     * @iso-639-2 eng
     * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}
     * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}
     */
    var locale = {
      code: 'en-US',
      formatDistance: formatDistance$1,
      formatLong: formatLong$1,
      formatRelative: formatRelative$1,
      localize: localize$1,
      match: match$1,
      options: {
        weekStartsOn: 0 /* Sunday */,
        firstWeekContainsDate: 1
      }
    };
    var defaultLocale = locale;

    // - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token
    //   (one of the certain letters followed by `o`)
    // - (\w)\1* matches any sequences of the same letter
    // - '' matches two quote characters in a row
    // - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),
    //   except a single quote symbol, which ends the sequence.
    //   Two quote characters do not end the sequence.
    //   If there is no matching single quote
    //   then the sequence will continue until the end of the string.
    // - . matches any single character unmatched by previous parts of the RegExps
    var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;

    // This RegExp catches symbols escaped by quotes, and also
    // sequences of symbols P, p, and the combinations like `PPPPPPPppppp`
    var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
    var escapedStringRegExp = /^'([^]*?)'?$/;
    var doubleQuoteRegExp = /''/g;
    var unescapedLatinCharacterRegExp = /[a-zA-Z]/;

    /**
     * @name format
     * @category Common Helpers
     * @summary Format the date.
     *
     * @description
     * Return the formatted date string in the given format. The result may vary by locale.
     *
     * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.
     * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     *
     * The characters wrapped between two single quotes characters (') are escaped.
     * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.
     * (see the last example)
     *
     * Format of the string is based on Unicode Technical Standard #35:
     * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
     * with a few additions (see note 7 below the table).
     *
     * Accepted patterns:
     * | Unit                            | Pattern | Result examples                   | Notes |
     * |---------------------------------|---------|-----------------------------------|-------|
     * | Era                             | G..GGG  | AD, BC                            |       |
     * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |
     * |                                 | GGGGG   | A, B                              |       |
     * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |
     * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |
     * |                                 | yy      | 44, 01, 00, 17                    | 5     |
     * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |
     * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |
     * |                                 | yyyyy   | ...                               | 3,5   |
     * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |
     * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |
     * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |
     * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |
     * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |
     * |                                 | YYYYY   | ...                               | 3,5   |
     * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |
     * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |
     * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |
     * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |
     * |                                 | RRRRR   | ...                               | 3,5,7 |
     * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |
     * |                                 | uu      | -43, 01, 1900, 2017               | 5     |
     * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |
     * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |
     * |                                 | uuuuu   | ...                               | 3,5   |
     * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |
     * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |
     * |                                 | QQ      | 01, 02, 03, 04                    |       |
     * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |
     * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |
     * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |
     * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |
     * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |
     * |                                 | qq      | 01, 02, 03, 04                    |       |
     * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |
     * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |
     * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |
     * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |
     * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |
     * |                                 | MM      | 01, 02, ..., 12                   |       |
     * |                                 | MMM     | Jan, Feb, ..., Dec                |       |
     * |                                 | MMMM    | January, February, ..., December  | 2     |
     * |                                 | MMMMM   | J, F, ..., D                      |       |
     * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |
     * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |
     * |                                 | LL      | 01, 02, ..., 12                   |       |
     * |                                 | LLL     | Jan, Feb, ..., Dec                |       |
     * |                                 | LLLL    | January, February, ..., December  | 2     |
     * |                                 | LLLLL   | J, F, ..., D                      |       |
     * | Local week of year              | w       | 1, 2, ..., 53                     |       |
     * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |
     * |                                 | ww      | 01, 02, ..., 53                   |       |
     * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |
     * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |
     * |                                 | II      | 01, 02, ..., 53                   | 7     |
     * | Day of month                    | d       | 1, 2, ..., 31                     |       |
     * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |
     * |                                 | dd      | 01, 02, ..., 31                   |       |
     * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |
     * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |
     * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |
     * |                                 | DDD     | 001, 002, ..., 365, 366           |       |
     * |                                 | DDDD    | ...                               | 3     |
     * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |
     * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |
     * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |
     * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
     * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |
     * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |
     * |                                 | ii      | 01, 02, ..., 07                   | 7     |
     * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |
     * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |
     * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |
     * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |
     * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |
     * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |
     * |                                 | ee      | 02, 03, ..., 01                   |       |
     * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |
     * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |
     * |                                 | eeeee   | M, T, W, T, F, S, S               |       |
     * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
     * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |
     * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |
     * |                                 | cc      | 02, 03, ..., 01                   |       |
     * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |
     * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |
     * |                                 | ccccc   | M, T, W, T, F, S, S               |       |
     * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
     * | AM, PM                          | a..aa   | AM, PM                            |       |
     * |                                 | aaa     | am, pm                            |       |
     * |                                 | aaaa    | a.m., p.m.                        | 2     |
     * |                                 | aaaaa   | a, p                              |       |
     * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |
     * |                                 | bbb     | am, pm, noon, midnight            |       |
     * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |
     * |                                 | bbbbb   | a, p, n, mi                       |       |
     * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |
     * |                                 | BBBB    | at night, in the morning, ...     | 2     |
     * |                                 | BBBBB   | at night, in the morning, ...     |       |
     * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |
     * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |
     * |                                 | hh      | 01, 02, ..., 11, 12               |       |
     * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |
     * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |
     * |                                 | HH      | 00, 01, 02, ..., 23               |       |
     * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |
     * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |
     * |                                 | KK      | 01, 02, ..., 11, 00               |       |
     * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |
     * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |
     * |                                 | kk      | 24, 01, 02, ..., 23               |       |
     * | Minute                          | m       | 0, 1, ..., 59                     |       |
     * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |
     * |                                 | mm      | 00, 01, ..., 59                   |       |
     * | Second                          | s       | 0, 1, ..., 59                     |       |
     * |                                 | so      | 0th, 1st, ..., 59th               | 7     |
     * |                                 | ss      | 00, 01, ..., 59                   |       |
     * | Fraction of second              | S       | 0, 1, ..., 9                      |       |
     * |                                 | SS      | 00, 01, ..., 99                   |       |
     * |                                 | SSS     | 000, 001, ..., 999                |       |
     * |                                 | SSSS    | ...                               | 3     |
     * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |
     * |                                 | XX      | -0800, +0530, Z                   |       |
     * |                                 | XXX     | -08:00, +05:30, Z                 |       |
     * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |
     * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |
     * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |
     * |                                 | xx      | -0800, +0530, +0000               |       |
     * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |
     * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |
     * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |
     * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |
     * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |
     * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |
     * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |
     * | Seconds timestamp               | t       | 512969520                         | 7     |
     * |                                 | tt      | ...                               | 3,7   |
     * | Milliseconds timestamp          | T       | 512969520900                      | 7     |
     * |                                 | TT      | ...                               | 3,7   |
     * | Long localized date             | P       | 04/29/1453                        | 7     |
     * |                                 | PP      | Apr 29, 1453                      | 7     |
     * |                                 | PPP     | April 29th, 1453                  | 7     |
     * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |
     * | Long localized time             | p       | 12:00 AM                          | 7     |
     * |                                 | pp      | 12:00:00 AM                       | 7     |
     * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |
     * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |
     * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |
     * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |
     * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |
     * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |
     * Notes:
     * 1. "Formatting" units (e.g. formatting quarter) in the default en-US locale
     *    are the same as "stand-alone" units, but are different in some languages.
     *    "Formatting" units are declined according to the rules of the language
     *    in the context of a date. "Stand-alone" units are always nominative singular:
     *
     *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`
     *
     *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`
     *
     * 2. Any sequence of the identical letters is a pattern, unless it is escaped by
     *    the single quote characters (see below).
     *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)
     *    the output will be the same as default pattern for this unit, usually
     *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units
     *    are marked with "2" in the last column of the table.
     *
     *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`
     *
     *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`
     *
     *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`
     *
     *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`
     *
     *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`
     *
     * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).
     *    The output will be padded with zeros to match the length of the pattern.
     *
     *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`
     *
     * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.
     *    These tokens represent the shortest form of the quarter.
     *
     * 5. The main difference between `y` and `u` patterns are B.C. years:
     *
     *    | Year | `y` | `u` |
     *    |------|-----|-----|
     *    | AC 1 |   1 |   1 |
     *    | BC 1 |   1 |   0 |
     *    | BC 2 |   2 |  -1 |
     *
     *    Also `yy` always returns the last two digits of a year,
     *    while `uu` pads single digit years to 2 characters and returns other years unchanged:
     *
     *    | Year | `yy` | `uu` |
     *    |------|------|------|
     *    | 1    |   01 |   01 |
     *    | 14   |   14 |   14 |
     *    | 376  |   76 |  376 |
     *    | 1453 |   53 | 1453 |
     *
     *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),
     *    except local week-numbering years are dependent on `options.weekStartsOn`
     *    and `options.firstWeekContainsDate` (compare [getISOWeekYear]{@link https://date-fns.org/docs/getISOWeekYear}
     *    and [getWeekYear]{@link https://date-fns.org/docs/getWeekYear}).
     *
     * 6. Specific non-location timezones are currently unavailable in `date-fns`,
     *    so right now these tokens fall back to GMT timezones.
     *
     * 7. These patterns are not in the Unicode Technical Standard #35:
     *    - `i`: ISO day of week
     *    - `I`: ISO week of year
     *    - `R`: ISO week-numbering year
     *    - `t`: seconds timestamp
     *    - `T`: milliseconds timestamp
     *    - `o`: ordinal number modifier
     *    - `P`: long localized date
     *    - `p`: long localized time
     *
     * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.
     *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     *
     * 9. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.
     *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     *
     * @param {Date|Number} date - the original date
     * @param {String} format - the string of tokens
     * @param {Object} [options] - an object with options.
     * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
     * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
     * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is
     * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;
     *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;
     *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     * @returns {String} the formatted date string
     * @throws {TypeError} 2 arguments required
     * @throws {RangeError} `date` must not be Invalid Date
     * @throws {RangeError} `options.locale` must contain `localize` property
     * @throws {RangeError} `options.locale` must contain `formatLong` property
     * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
     * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7
     * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
     * @throws {RangeError} format string contains an unescaped latin alphabet character
     *
     * @example
     * // Represent 11 February 2014 in middle-endian format:
     * const result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')
     * //=> '02/11/2014'
     *
     * @example
     * // Represent 2 July 2014 in Esperanto:
     * import { eoLocale } from 'date-fns/locale/eo'
     * const result = format(new Date(2014, 6, 2), "do 'de' MMMM yyyy", {
     *   locale: eoLocale
     * })
     * //=> '2-a de julio 2014'
     *
     * @example
     * // Escape string by single quote characters:
     * const result = format(new Date(2014, 6, 2, 15), "h 'o''clock'")
     * //=> "3 o'clock"
     */

    function format(dirtyDate, dirtyFormatStr, options) {
      var _ref, _options$locale, _ref2, _ref3, _ref4, _options$firstWeekCon, _options$locale2, _options$locale2$opti, _defaultOptions$local, _defaultOptions$local2, _ref5, _ref6, _ref7, _options$weekStartsOn, _options$locale3, _options$locale3$opti, _defaultOptions$local3, _defaultOptions$local4;
      requiredArgs(2, arguments);
      var formatStr = String(dirtyFormatStr);
      var defaultOptions = getDefaultOptions();
      var locale = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions.locale) !== null && _ref !== void 0 ? _ref : defaultLocale;
      var firstWeekContainsDate = toInteger((_ref2 = (_ref3 = (_ref4 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale2 = options.locale) === null || _options$locale2 === void 0 ? void 0 : (_options$locale2$opti = _options$locale2.options) === null || _options$locale2$opti === void 0 ? void 0 : _options$locale2$opti.firstWeekContainsDate) !== null && _ref4 !== void 0 ? _ref4 : defaultOptions.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : 1);

      // Test if weekStartsOn is between 1 and 7 _and_ is not NaN
      if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
        throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
      }
      var weekStartsOn = toInteger((_ref5 = (_ref6 = (_ref7 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale3 = options.locale) === null || _options$locale3 === void 0 ? void 0 : (_options$locale3$opti = _options$locale3.options) === null || _options$locale3$opti === void 0 ? void 0 : _options$locale3$opti.weekStartsOn) !== null && _ref7 !== void 0 ? _ref7 : defaultOptions.weekStartsOn) !== null && _ref6 !== void 0 ? _ref6 : (_defaultOptions$local3 = defaultOptions.locale) === null || _defaultOptions$local3 === void 0 ? void 0 : (_defaultOptions$local4 = _defaultOptions$local3.options) === null || _defaultOptions$local4 === void 0 ? void 0 : _defaultOptions$local4.weekStartsOn) !== null && _ref5 !== void 0 ? _ref5 : 0);

      // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
      if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
        throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
      }
      if (!locale.localize) {
        throw new RangeError('locale must contain localize property');
      }
      if (!locale.formatLong) {
        throw new RangeError('locale must contain formatLong property');
      }
      var originalDate = toDate(dirtyDate);
      if (!isValid(originalDate)) {
        throw new RangeError('Invalid time value');
      }

      // Convert the date in system timezone to the same date in UTC+00:00 timezone.
      // This ensures that when UTC functions will be implemented, locales will be compatible with them.
      // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/376
      var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);
      var utcDate = subMilliseconds(originalDate, timezoneOffset);
      var formatterOptions = {
        firstWeekContainsDate: firstWeekContainsDate,
        weekStartsOn: weekStartsOn,
        locale: locale,
        _originalDate: originalDate
      };
      var result = formatStr.match(longFormattingTokensRegExp).map(function (substring) {
        var firstCharacter = substring[0];
        if (firstCharacter === 'p' || firstCharacter === 'P') {
          var longFormatter = longFormatters$1[firstCharacter];
          return longFormatter(substring, locale.formatLong);
        }
        return substring;
      }).join('').match(formattingTokensRegExp).map(function (substring) {
        // Replace two single quote characters with one single quote character
        if (substring === "''") {
          return "'";
        }
        var firstCharacter = substring[0];
        if (firstCharacter === "'") {
          return cleanEscapedString(substring);
        }
        var formatter = formatters$1[firstCharacter];
        if (formatter) {
          if (!(options !== null && options !== void 0 && options.useAdditionalWeekYearTokens) && isProtectedWeekYearToken(substring)) {
            throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));
          }
          if (!(options !== null && options !== void 0 && options.useAdditionalDayOfYearTokens) && isProtectedDayOfYearToken(substring)) {
            throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));
          }
          return formatter(utcDate, substring, locale.localize, formatterOptions);
        }
        if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
          throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');
        }
        return substring;
      }).join('');
      return result;
    }
    function cleanEscapedString(input) {
      var matched = input.match(escapedStringRegExp);
      if (!matched) {
        return input;
      }
      return matched[1].replace(doubleQuoteRegExp, "'");
    }

    //@ts-check

    /**
     * @summary Handle errors catched by Promises
     * @param {string} errorMessage
     */
    const handleErrors = errorMessage => {
      switch (errorMessage) {
        case 'INVALIDATE_TOKEN': {
          store.mutations.logout();
          console.info('[invalid token] redirecting to /');
          page('/');

          break
        }
        case 'REPOSITORY_NOT_FOUND': {
          console.info(
            '[REPOSITORY_NOT_FOUND] redirecting to /selectionner-un-site',
          );
          page('/selectionner-un-site');

          break
        }
        case 'NOT_FOUND':
          const message = `gitAgent call failed: ${errorMessage}`;
          logMessage(message, 'handleErrors');

          break

        default:
          logMessage(errorMessage, 'handleErrors');
          throw errorMessage
      }
    };

    /**
     *
     * @param {string} string
     * @returns {string}
     */
    function makeFilenameCompatibleString(string) {
      return string
        .replace(/\/|#|\?|:|&|\(|\)/g, '-') // replace url confusing characters
        .normalize('NFD')
        .replace(/[\u0300-\u036f]/g, '') // remove accent because GH pages triggers file download
        .split('.')
        .join('') // Remove dot to avoid issues
        .toLowerCase()
    }

    /**
     *
     * @param {string} title
     * @returns {string}
     */
    function makeFileNameFromTitle(title) {
      return makeFilenameCompatibleString(title) + '.md'
    }

    /**
     *
     * @param {string} title
     * @param {Date} date
     * @returns {string}
     */
    function makeArticleFileName(title, date) {
      return `_posts/${format(date, 'yyyy-MM-dd')}-${makeFilenameCompatibleString(
    title,
  )}.md`
    }

    /**
     *
     * @param {string} title
     * @param {number?} index
     * @param {boolean} inMenu
     * @returns {string}
     */
    function makePageFrontMatter(title, index = 1, inMenu = true) {
      return [
        '---',
        'title: ' + '"' + title.replace(/"/g, '\\"') + '"',
        'order: ' + index,
        'in_menu: ' + inMenu,
        '---',
      ].join('\n')
    }

    /**
     *
     * @param {string} title
     * @returns {string}
     */
    function makeArticleFrontMatter(title) {
      return [
        '---',
        'title: ' + '"' + title.replace(/"/g, '\\"') + '"',
        '---',
      ].join('\n')
    }

    /**
     *
     * @param {string} errorMessage
     * @param {string} caller
     * @param {'log' | 'warn' | 'error'} level
     */
    const logMessage = (errorMessage, caller = 'unknown', level = 'log') => {
      console[level](`[${level}] [caller: ${caller}] ${errorMessage}`);
    };

    function isNothing(subject) {
      return (typeof subject === 'undefined') || (subject === null);
    }


    function isObject(subject) {
      return (typeof subject === 'object') && (subject !== null);
    }


    function toArray(sequence) {
      if (Array.isArray(sequence)) return sequence;
      else if (isNothing(sequence)) return [];

      return [ sequence ];
    }


    function extend(target, source) {
      var index, length, key, sourceKeys;

      if (source) {
        sourceKeys = Object.keys(source);

        for (index = 0, length = sourceKeys.length; index < length; index += 1) {
          key = sourceKeys[index];
          target[key] = source[key];
        }
      }

      return target;
    }


    function repeat(string, count) {
      var result = '', cycle;

      for (cycle = 0; cycle < count; cycle += 1) {
        result += string;
      }

      return result;
    }


    function isNegativeZero(number) {
      return (number === 0) && (Number.NEGATIVE_INFINITY === 1 / number);
    }


    var isNothing_1      = isNothing;
    var isObject_1       = isObject;
    var toArray_1        = toArray;
    var repeat_1         = repeat;
    var isNegativeZero_1 = isNegativeZero;
    var extend_1         = extend;

    var common = {
    	isNothing: isNothing_1,
    	isObject: isObject_1,
    	toArray: toArray_1,
    	repeat: repeat_1,
    	isNegativeZero: isNegativeZero_1,
    	extend: extend_1
    };

    // YAML error class. http://stackoverflow.com/questions/8458984

    function YAMLException$1(reason, mark) {
      // Super constructor
      Error.call(this);

      this.name = 'YAMLException';
      this.reason = reason;
      this.mark = mark;
      this.message = (this.reason || '(unknown reason)') + (this.mark ? ' ' + this.mark.toString() : '');

      // Include stack trace in error object
      if (Error.captureStackTrace) {
        // Chrome and NodeJS
        Error.captureStackTrace(this, this.constructor);
      } else {
        // FF, IE 10+ and Safari 6+. Fallback for others
        this.stack = (new Error()).stack || '';
      }
    }


    // Inherit from Error
    YAMLException$1.prototype = Object.create(Error.prototype);
    YAMLException$1.prototype.constructor = YAMLException$1;


    YAMLException$1.prototype.toString = function toString(compact) {
      var result = this.name + ': ';

      result += this.reason || '(unknown reason)';

      if (!compact && this.mark) {
        result += ' ' + this.mark.toString();
      }

      return result;
    };


    var exception = YAMLException$1;

    function Mark(name, buffer, position, line, column) {
      this.name     = name;
      this.buffer   = buffer;
      this.position = position;
      this.line     = line;
      this.column   = column;
    }


    Mark.prototype.getSnippet = function getSnippet(indent, maxLength) {
      var head, start, tail, end, snippet;

      if (!this.buffer) return null;

      indent = indent || 4;
      maxLength = maxLength || 75;

      head = '';
      start = this.position;

      while (start > 0 && '\x00\r\n\x85\u2028\u2029'.indexOf(this.buffer.charAt(start - 1)) === -1) {
        start -= 1;
        if (this.position - start > (maxLength / 2 - 1)) {
          head = ' ... ';
          start += 5;
          break;
        }
      }

      tail = '';
      end = this.position;

      while (end < this.buffer.length && '\x00\r\n\x85\u2028\u2029'.indexOf(this.buffer.charAt(end)) === -1) {
        end += 1;
        if (end - this.position > (maxLength / 2 - 1)) {
          tail = ' ... ';
          end -= 5;
          break;
        }
      }

      snippet = this.buffer.slice(start, end);

      return common.repeat(' ', indent) + head + snippet + tail + '\n' +
             common.repeat(' ', indent + this.position - start + head.length) + '^';
    };


    Mark.prototype.toString = function toString(compact) {
      var snippet, where = '';

      if (this.name) {
        where += 'in "' + this.name + '" ';
      }

      where += 'at line ' + (this.line + 1) + ', column ' + (this.column + 1);

      if (!compact) {
        snippet = this.getSnippet();

        if (snippet) {
          where += ':\n' + snippet;
        }
      }

      return where;
    };


    var mark = Mark;

    var TYPE_CONSTRUCTOR_OPTIONS = [
      'kind',
      'resolve',
      'construct',
      'instanceOf',
      'predicate',
      'represent',
      'defaultStyle',
      'styleAliases'
    ];

    var YAML_NODE_KINDS = [
      'scalar',
      'sequence',
      'mapping'
    ];

    function compileStyleAliases(map) {
      var result = {};

      if (map !== null) {
        Object.keys(map).forEach(function (style) {
          map[style].forEach(function (alias) {
            result[String(alias)] = style;
          });
        });
      }

      return result;
    }

    function Type$1(tag, options) {
      options = options || {};

      Object.keys(options).forEach(function (name) {
        if (TYPE_CONSTRUCTOR_OPTIONS.indexOf(name) === -1) {
          throw new exception('Unknown option "' + name + '" is met in definition of "' + tag + '" YAML type.');
        }
      });

      // TODO: Add tag format check.
      this.tag          = tag;
      this.kind         = options['kind']         || null;
      this.resolve      = options['resolve']      || function () { return true; };
      this.construct    = options['construct']    || function (data) { return data; };
      this.instanceOf   = options['instanceOf']   || null;
      this.predicate    = options['predicate']    || null;
      this.represent    = options['represent']    || null;
      this.defaultStyle = options['defaultStyle'] || null;
      this.styleAliases = compileStyleAliases(options['styleAliases'] || null);

      if (YAML_NODE_KINDS.indexOf(this.kind) === -1) {
        throw new exception('Unknown kind "' + this.kind + '" is specified for "' + tag + '" YAML type.');
      }
    }

    var type = Type$1;

    /*eslint-disable max-len*/






    function compileList(schema, name, result) {
      var exclude = [];

      schema.include.forEach(function (includedSchema) {
        result = compileList(includedSchema, name, result);
      });

      schema[name].forEach(function (currentType) {
        result.forEach(function (previousType, previousIndex) {
          if (previousType.tag === currentType.tag && previousType.kind === currentType.kind) {
            exclude.push(previousIndex);
          }
        });

        result.push(currentType);
      });

      return result.filter(function (type, index) {
        return exclude.indexOf(index) === -1;
      });
    }


    function compileMap(/* lists... */) {
      var result = {
            scalar: {},
            sequence: {},
            mapping: {},
            fallback: {}
          }, index, length;

      function collectType(type) {
        result[type.kind][type.tag] = result['fallback'][type.tag] = type;
      }

      for (index = 0, length = arguments.length; index < length; index += 1) {
        arguments[index].forEach(collectType);
      }
      return result;
    }


    function Schema$1(definition) {
      this.include  = definition.include  || [];
      this.implicit = definition.implicit || [];
      this.explicit = definition.explicit || [];

      this.implicit.forEach(function (type) {
        if (type.loadKind && type.loadKind !== 'scalar') {
          throw new exception('There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.');
        }
      });

      this.compiledImplicit = compileList(this, 'implicit', []);
      this.compiledExplicit = compileList(this, 'explicit', []);
      this.compiledTypeMap  = compileMap(this.compiledImplicit, this.compiledExplicit);
    }


    Schema$1.DEFAULT = null;


    Schema$1.create = function createSchema() {
      var schemas, types;

      switch (arguments.length) {
        case 1:
          schemas = Schema$1.DEFAULT;
          types = arguments[0];
          break;

        case 2:
          schemas = arguments[0];
          types = arguments[1];
          break;

        default:
          throw new exception('Wrong number of arguments for Schema.create function');
      }

      schemas = common.toArray(schemas);
      types = common.toArray(types);

      if (!schemas.every(function (schema) { return schema instanceof Schema$1; })) {
        throw new exception('Specified list of super schemas (or a single Schema object) contains a non-Schema object.');
      }

      if (!types.every(function (type$1) { return type$1 instanceof type; })) {
        throw new exception('Specified list of YAML types (or a single Type object) contains a non-Type object.');
      }

      return new Schema$1({
        include: schemas,
        explicit: types
      });
    };


    var schema = Schema$1;

    var str = new type('tag:yaml.org,2002:str', {
      kind: 'scalar',
      construct: function (data) { return data !== null ? data : ''; }
    });

    var seq = new type('tag:yaml.org,2002:seq', {
      kind: 'sequence',
      construct: function (data) { return data !== null ? data : []; }
    });

    var map = new type('tag:yaml.org,2002:map', {
      kind: 'mapping',
      construct: function (data) { return data !== null ? data : {}; }
    });

    var failsafe = new schema({
      explicit: [
        str,
        seq,
        map
      ]
    });

    function resolveYamlNull(data) {
      if (data === null) return true;

      var max = data.length;

      return (max === 1 && data === '~') ||
             (max === 4 && (data === 'null' || data === 'Null' || data === 'NULL'));
    }

    function constructYamlNull() {
      return null;
    }

    function isNull(object) {
      return object === null;
    }

    var _null = new type('tag:yaml.org,2002:null', {
      kind: 'scalar',
      resolve: resolveYamlNull,
      construct: constructYamlNull,
      predicate: isNull,
      represent: {
        canonical: function () { return '~';    },
        lowercase: function () { return 'null'; },
        uppercase: function () { return 'NULL'; },
        camelcase: function () { return 'Null'; }
      },
      defaultStyle: 'lowercase'
    });

    function resolveYamlBoolean(data) {
      if (data === null) return false;

      var max = data.length;

      return (max === 4 && (data === 'true' || data === 'True' || data === 'TRUE')) ||
             (max === 5 && (data === 'false' || data === 'False' || data === 'FALSE'));
    }

    function constructYamlBoolean(data) {
      return data === 'true' ||
             data === 'True' ||
             data === 'TRUE';
    }

    function isBoolean(object) {
      return Object.prototype.toString.call(object) === '[object Boolean]';
    }

    var bool = new type('tag:yaml.org,2002:bool', {
      kind: 'scalar',
      resolve: resolveYamlBoolean,
      construct: constructYamlBoolean,
      predicate: isBoolean,
      represent: {
        lowercase: function (object) { return object ? 'true' : 'false'; },
        uppercase: function (object) { return object ? 'TRUE' : 'FALSE'; },
        camelcase: function (object) { return object ? 'True' : 'False'; }
      },
      defaultStyle: 'lowercase'
    });

    function isHexCode(c) {
      return ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */)) ||
             ((0x41/* A */ <= c) && (c <= 0x46/* F */)) ||
             ((0x61/* a */ <= c) && (c <= 0x66/* f */));
    }

    function isOctCode(c) {
      return ((0x30/* 0 */ <= c) && (c <= 0x37/* 7 */));
    }

    function isDecCode(c) {
      return ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */));
    }

    function resolveYamlInteger(data) {
      if (data === null) return false;

      var max = data.length,
          index = 0,
          hasDigits = false,
          ch;

      if (!max) return false;

      ch = data[index];

      // sign
      if (ch === '-' || ch === '+') {
        ch = data[++index];
      }

      if (ch === '0') {
        // 0
        if (index + 1 === max) return true;
        ch = data[++index];

        // base 2, base 8, base 16

        if (ch === 'b') {
          // base 2
          index++;

          for (; index < max; index++) {
            ch = data[index];
            if (ch === '_') continue;
            if (ch !== '0' && ch !== '1') return false;
            hasDigits = true;
          }
          return hasDigits && ch !== '_';
        }


        if (ch === 'x') {
          // base 16
          index++;

          for (; index < max; index++) {
            ch = data[index];
            if (ch === '_') continue;
            if (!isHexCode(data.charCodeAt(index))) return false;
            hasDigits = true;
          }
          return hasDigits && ch !== '_';
        }

        // base 8
        for (; index < max; index++) {
          ch = data[index];
          if (ch === '_') continue;
          if (!isOctCode(data.charCodeAt(index))) return false;
          hasDigits = true;
        }
        return hasDigits && ch !== '_';
      }

      // base 10 (except 0) or base 60

      // value should not start with `_`;
      if (ch === '_') return false;

      for (; index < max; index++) {
        ch = data[index];
        if (ch === '_') continue;
        if (ch === ':') break;
        if (!isDecCode(data.charCodeAt(index))) {
          return false;
        }
        hasDigits = true;
      }

      // Should have digits and should not end with `_`
      if (!hasDigits || ch === '_') return false;

      // if !base60 - done;
      if (ch !== ':') return true;

      // base60 almost not used, no needs to optimize
      return /^(:[0-5]?[0-9])+$/.test(data.slice(index));
    }

    function constructYamlInteger(data) {
      var value = data, sign = 1, ch, base, digits = [];

      if (value.indexOf('_') !== -1) {
        value = value.replace(/_/g, '');
      }

      ch = value[0];

      if (ch === '-' || ch === '+') {
        if (ch === '-') sign = -1;
        value = value.slice(1);
        ch = value[0];
      }

      if (value === '0') return 0;

      if (ch === '0') {
        if (value[1] === 'b') return sign * parseInt(value.slice(2), 2);
        if (value[1] === 'x') return sign * parseInt(value, 16);
        return sign * parseInt(value, 8);
      }

      if (value.indexOf(':') !== -1) {
        value.split(':').forEach(function (v) {
          digits.unshift(parseInt(v, 10));
        });

        value = 0;
        base = 1;

        digits.forEach(function (d) {
          value += (d * base);
          base *= 60;
        });

        return sign * value;

      }

      return sign * parseInt(value, 10);
    }

    function isInteger(object) {
      return (Object.prototype.toString.call(object)) === '[object Number]' &&
             (object % 1 === 0 && !common.isNegativeZero(object));
    }

    var int_1 = new type('tag:yaml.org,2002:int', {
      kind: 'scalar',
      resolve: resolveYamlInteger,
      construct: constructYamlInteger,
      predicate: isInteger,
      represent: {
        binary:      function (obj) { return obj >= 0 ? '0b' + obj.toString(2) : '-0b' + obj.toString(2).slice(1); },
        octal:       function (obj) { return obj >= 0 ? '0'  + obj.toString(8) : '-0'  + obj.toString(8).slice(1); },
        decimal:     function (obj) { return obj.toString(10); },
        /* eslint-disable max-len */
        hexadecimal: function (obj) { return obj >= 0 ? '0x' + obj.toString(16).toUpperCase() :  '-0x' + obj.toString(16).toUpperCase().slice(1); }
      },
      defaultStyle: 'decimal',
      styleAliases: {
        binary:      [ 2,  'bin' ],
        octal:       [ 8,  'oct' ],
        decimal:     [ 10, 'dec' ],
        hexadecimal: [ 16, 'hex' ]
      }
    });

    var YAML_FLOAT_PATTERN = new RegExp(
      // 2.5e4, 2.5 and integers
      '^(?:[-+]?(?:0|[1-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?' +
      // .2e4, .2
      // special case, seems not from spec
      '|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?' +
      // 20:59
      '|[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\.[0-9_]*' +
      // .inf
      '|[-+]?\\.(?:inf|Inf|INF)' +
      // .nan
      '|\\.(?:nan|NaN|NAN))$');

    function resolveYamlFloat(data) {
      if (data === null) return false;

      if (!YAML_FLOAT_PATTERN.test(data) ||
          // Quick hack to not allow integers end with `_`
          // Probably should update regexp & check speed
          data[data.length - 1] === '_') {
        return false;
      }

      return true;
    }

    function constructYamlFloat(data) {
      var value, sign, base, digits;

      value  = data.replace(/_/g, '').toLowerCase();
      sign   = value[0] === '-' ? -1 : 1;
      digits = [];

      if ('+-'.indexOf(value[0]) >= 0) {
        value = value.slice(1);
      }

      if (value === '.inf') {
        return (sign === 1) ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;

      } else if (value === '.nan') {
        return NaN;

      } else if (value.indexOf(':') >= 0) {
        value.split(':').forEach(function (v) {
          digits.unshift(parseFloat(v, 10));
        });

        value = 0.0;
        base = 1;

        digits.forEach(function (d) {
          value += d * base;
          base *= 60;
        });

        return sign * value;

      }
      return sign * parseFloat(value, 10);
    }


    var SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;

    function representYamlFloat(object, style) {
      var res;

      if (isNaN(object)) {
        switch (style) {
          case 'lowercase': return '.nan';
          case 'uppercase': return '.NAN';
          case 'camelcase': return '.NaN';
        }
      } else if (Number.POSITIVE_INFINITY === object) {
        switch (style) {
          case 'lowercase': return '.inf';
          case 'uppercase': return '.INF';
          case 'camelcase': return '.Inf';
        }
      } else if (Number.NEGATIVE_INFINITY === object) {
        switch (style) {
          case 'lowercase': return '-.inf';
          case 'uppercase': return '-.INF';
          case 'camelcase': return '-.Inf';
        }
      } else if (common.isNegativeZero(object)) {
        return '-0.0';
      }

      res = object.toString(10);

      // JS stringifier can build scientific format without dots: 5e-100,
      // while YAML requres dot: 5.e-100. Fix it with simple hack

      return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace('e', '.e') : res;
    }

    function isFloat(object) {
      return (Object.prototype.toString.call(object) === '[object Number]') &&
             (object % 1 !== 0 || common.isNegativeZero(object));
    }

    var float_1 = new type('tag:yaml.org,2002:float', {
      kind: 'scalar',
      resolve: resolveYamlFloat,
      construct: constructYamlFloat,
      predicate: isFloat,
      represent: representYamlFloat,
      defaultStyle: 'lowercase'
    });

    var json = new schema({
      include: [
        failsafe
      ],
      implicit: [
        _null,
        bool,
        int_1,
        float_1
      ]
    });

    var core = new schema({
      include: [
        json
      ]
    });

    var YAML_DATE_REGEXP = new RegExp(
      '^([0-9][0-9][0-9][0-9])'          + // [1] year
      '-([0-9][0-9])'                    + // [2] month
      '-([0-9][0-9])$');                   // [3] day

    var YAML_TIMESTAMP_REGEXP = new RegExp(
      '^([0-9][0-9][0-9][0-9])'          + // [1] year
      '-([0-9][0-9]?)'                   + // [2] month
      '-([0-9][0-9]?)'                   + // [3] day
      '(?:[Tt]|[ \\t]+)'                 + // ...
      '([0-9][0-9]?)'                    + // [4] hour
      ':([0-9][0-9])'                    + // [5] minute
      ':([0-9][0-9])'                    + // [6] second
      '(?:\\.([0-9]*))?'                 + // [7] fraction
      '(?:[ \\t]*(Z|([-+])([0-9][0-9]?)' + // [8] tz [9] tz_sign [10] tz_hour
      '(?::([0-9][0-9]))?))?$');           // [11] tz_minute

    function resolveYamlTimestamp(data) {
      if (data === null) return false;
      if (YAML_DATE_REGEXP.exec(data) !== null) return true;
      if (YAML_TIMESTAMP_REGEXP.exec(data) !== null) return true;
      return false;
    }

    function constructYamlTimestamp(data) {
      var match, year, month, day, hour, minute, second, fraction = 0,
          delta = null, tz_hour, tz_minute, date;

      match = YAML_DATE_REGEXP.exec(data);
      if (match === null) match = YAML_TIMESTAMP_REGEXP.exec(data);

      if (match === null) throw new Error('Date resolve error');

      // match: [1] year [2] month [3] day

      year = +(match[1]);
      month = +(match[2]) - 1; // JS month starts with 0
      day = +(match[3]);

      if (!match[4]) { // no hour
        return new Date(Date.UTC(year, month, day));
      }

      // match: [4] hour [5] minute [6] second [7] fraction

      hour = +(match[4]);
      minute = +(match[5]);
      second = +(match[6]);

      if (match[7]) {
        fraction = match[7].slice(0, 3);
        while (fraction.length < 3) { // milli-seconds
          fraction += '0';
        }
        fraction = +fraction;
      }

      // match: [8] tz [9] tz_sign [10] tz_hour [11] tz_minute

      if (match[9]) {
        tz_hour = +(match[10]);
        tz_minute = +(match[11] || 0);
        delta = (tz_hour * 60 + tz_minute) * 60000; // delta in mili-seconds
        if (match[9] === '-') delta = -delta;
      }

      date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));

      if (delta) date.setTime(date.getTime() - delta);

      return date;
    }

    function representYamlTimestamp(object /*, style*/) {
      return object.toISOString();
    }

    var timestamp = new type('tag:yaml.org,2002:timestamp', {
      kind: 'scalar',
      resolve: resolveYamlTimestamp,
      construct: constructYamlTimestamp,
      instanceOf: Date,
      represent: representYamlTimestamp
    });

    function resolveYamlMerge(data) {
      return data === '<<' || data === null;
    }

    var merge = new type('tag:yaml.org,2002:merge', {
      kind: 'scalar',
      resolve: resolveYamlMerge
    });

    /*eslint-disable no-bitwise*/

    var NodeBuffer;

    try {
      // A trick for browserified version, to not include `Buffer` shim
      var _require$1 = commonjsRequire;
      NodeBuffer = _require$1('buffer').Buffer;
    } catch (__) {}




    // [ 64, 65, 66 ] -> [ padding, CR, LF ]
    var BASE64_MAP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\n\r';


    function resolveYamlBinary(data) {
      if (data === null) return false;

      var code, idx, bitlen = 0, max = data.length, map = BASE64_MAP;

      // Convert one by one.
      for (idx = 0; idx < max; idx++) {
        code = map.indexOf(data.charAt(idx));

        // Skip CR/LF
        if (code > 64) continue;

        // Fail on illegal characters
        if (code < 0) return false;

        bitlen += 6;
      }

      // If there are any bits left, source was corrupted
      return (bitlen % 8) === 0;
    }

    function constructYamlBinary(data) {
      var idx, tailbits,
          input = data.replace(/[\r\n=]/g, ''), // remove CR/LF & padding to simplify scan
          max = input.length,
          map = BASE64_MAP,
          bits = 0,
          result = [];

      // Collect by 6*4 bits (3 bytes)

      for (idx = 0; idx < max; idx++) {
        if ((idx % 4 === 0) && idx) {
          result.push((bits >> 16) & 0xFF);
          result.push((bits >> 8) & 0xFF);
          result.push(bits & 0xFF);
        }

        bits = (bits << 6) | map.indexOf(input.charAt(idx));
      }

      // Dump tail

      tailbits = (max % 4) * 6;

      if (tailbits === 0) {
        result.push((bits >> 16) & 0xFF);
        result.push((bits >> 8) & 0xFF);
        result.push(bits & 0xFF);
      } else if (tailbits === 18) {
        result.push((bits >> 10) & 0xFF);
        result.push((bits >> 2) & 0xFF);
      } else if (tailbits === 12) {
        result.push((bits >> 4) & 0xFF);
      }

      // Wrap into Buffer for NodeJS and leave Array for browser
      if (NodeBuffer) {
        // Support node 6.+ Buffer API when available
        return NodeBuffer.from ? NodeBuffer.from(result) : new NodeBuffer(result);
      }

      return result;
    }

    function representYamlBinary(object /*, style*/) {
      var result = '', bits = 0, idx, tail,
          max = object.length,
          map = BASE64_MAP;

      // Convert every three bytes to 4 ASCII characters.

      for (idx = 0; idx < max; idx++) {
        if ((idx % 3 === 0) && idx) {
          result += map[(bits >> 18) & 0x3F];
          result += map[(bits >> 12) & 0x3F];
          result += map[(bits >> 6) & 0x3F];
          result += map[bits & 0x3F];
        }

        bits = (bits << 8) + object[idx];
      }

      // Dump tail

      tail = max % 3;

      if (tail === 0) {
        result += map[(bits >> 18) & 0x3F];
        result += map[(bits >> 12) & 0x3F];
        result += map[(bits >> 6) & 0x3F];
        result += map[bits & 0x3F];
      } else if (tail === 2) {
        result += map[(bits >> 10) & 0x3F];
        result += map[(bits >> 4) & 0x3F];
        result += map[(bits << 2) & 0x3F];
        result += map[64];
      } else if (tail === 1) {
        result += map[(bits >> 2) & 0x3F];
        result += map[(bits << 4) & 0x3F];
        result += map[64];
        result += map[64];
      }

      return result;
    }

    function isBinary(object) {
      return NodeBuffer && NodeBuffer.isBuffer(object);
    }

    var binary = new type('tag:yaml.org,2002:binary', {
      kind: 'scalar',
      resolve: resolveYamlBinary,
      construct: constructYamlBinary,
      predicate: isBinary,
      represent: representYamlBinary
    });

    var _hasOwnProperty$3 = Object.prototype.hasOwnProperty;
    var _toString$2       = Object.prototype.toString;

    function resolveYamlOmap(data) {
      if (data === null) return true;

      var objectKeys = [], index, length, pair, pairKey, pairHasKey,
          object = data;

      for (index = 0, length = object.length; index < length; index += 1) {
        pair = object[index];
        pairHasKey = false;

        if (_toString$2.call(pair) !== '[object Object]') return false;

        for (pairKey in pair) {
          if (_hasOwnProperty$3.call(pair, pairKey)) {
            if (!pairHasKey) pairHasKey = true;
            else return false;
          }
        }

        if (!pairHasKey) return false;

        if (objectKeys.indexOf(pairKey) === -1) objectKeys.push(pairKey);
        else return false;
      }

      return true;
    }

    function constructYamlOmap(data) {
      return data !== null ? data : [];
    }

    var omap = new type('tag:yaml.org,2002:omap', {
      kind: 'sequence',
      resolve: resolveYamlOmap,
      construct: constructYamlOmap
    });

    var _toString$1 = Object.prototype.toString;

    function resolveYamlPairs(data) {
      if (data === null) return true;

      var index, length, pair, keys, result,
          object = data;

      result = new Array(object.length);

      for (index = 0, length = object.length; index < length; index += 1) {
        pair = object[index];

        if (_toString$1.call(pair) !== '[object Object]') return false;

        keys = Object.keys(pair);

        if (keys.length !== 1) return false;

        result[index] = [ keys[0], pair[keys[0]] ];
      }

      return true;
    }

    function constructYamlPairs(data) {
      if (data === null) return [];

      var index, length, pair, keys, result,
          object = data;

      result = new Array(object.length);

      for (index = 0, length = object.length; index < length; index += 1) {
        pair = object[index];

        keys = Object.keys(pair);

        result[index] = [ keys[0], pair[keys[0]] ];
      }

      return result;
    }

    var pairs = new type('tag:yaml.org,2002:pairs', {
      kind: 'sequence',
      resolve: resolveYamlPairs,
      construct: constructYamlPairs
    });

    var _hasOwnProperty$2 = Object.prototype.hasOwnProperty;

    function resolveYamlSet(data) {
      if (data === null) return true;

      var key, object = data;

      for (key in object) {
        if (_hasOwnProperty$2.call(object, key)) {
          if (object[key] !== null) return false;
        }
      }

      return true;
    }

    function constructYamlSet(data) {
      return data !== null ? data : {};
    }

    var set = new type('tag:yaml.org,2002:set', {
      kind: 'mapping',
      resolve: resolveYamlSet,
      construct: constructYamlSet
    });

    var default_safe = new schema({
      include: [
        core
      ],
      implicit: [
        timestamp,
        merge
      ],
      explicit: [
        binary,
        omap,
        pairs,
        set
      ]
    });

    function resolveJavascriptUndefined() {
      return true;
    }

    function constructJavascriptUndefined() {
      /*eslint-disable no-undefined*/
      return undefined;
    }

    function representJavascriptUndefined() {
      return '';
    }

    function isUndefined(object) {
      return typeof object === 'undefined';
    }

    var _undefined = new type('tag:yaml.org,2002:js/undefined', {
      kind: 'scalar',
      resolve: resolveJavascriptUndefined,
      construct: constructJavascriptUndefined,
      predicate: isUndefined,
      represent: representJavascriptUndefined
    });

    function resolveJavascriptRegExp(data) {
      if (data === null) return false;
      if (data.length === 0) return false;

      var regexp = data,
          tail   = /\/([gim]*)$/.exec(data),
          modifiers = '';

      // if regexp starts with '/' it can have modifiers and must be properly closed
      // `/foo/gim` - modifiers tail can be maximum 3 chars
      if (regexp[0] === '/') {
        if (tail) modifiers = tail[1];

        if (modifiers.length > 3) return false;
        // if expression starts with /, is should be properly terminated
        if (regexp[regexp.length - modifiers.length - 1] !== '/') return false;
      }

      return true;
    }

    function constructJavascriptRegExp(data) {
      var regexp = data,
          tail   = /\/([gim]*)$/.exec(data),
          modifiers = '';

      // `/foo/gim` - tail can be maximum 4 chars
      if (regexp[0] === '/') {
        if (tail) modifiers = tail[1];
        regexp = regexp.slice(1, regexp.length - modifiers.length - 1);
      }

      return new RegExp(regexp, modifiers);
    }

    function representJavascriptRegExp(object /*, style*/) {
      var result = '/' + object.source + '/';

      if (object.global) result += 'g';
      if (object.multiline) result += 'm';
      if (object.ignoreCase) result += 'i';

      return result;
    }

    function isRegExp(object) {
      return Object.prototype.toString.call(object) === '[object RegExp]';
    }

    var regexp = new type('tag:yaml.org,2002:js/regexp', {
      kind: 'scalar',
      resolve: resolveJavascriptRegExp,
      construct: constructJavascriptRegExp,
      predicate: isRegExp,
      represent: representJavascriptRegExp
    });

    var esprima;

    // Browserified version does not have esprima
    //
    // 1. For node.js just require module as deps
    // 2. For browser try to require mudule via external AMD system.
    //    If not found - try to fallback to window.esprima. If not
    //    found too - then fail to parse.
    //
    try {
      // workaround to exclude package from browserify list.
      var _require = commonjsRequire;
      esprima = _require('esprima');
    } catch (_) {
      /* eslint-disable no-redeclare */
      /* global window */
      if (typeof window !== 'undefined') esprima = window.esprima;
    }



    function resolveJavascriptFunction(data) {
      if (data === null) return false;

      try {
        var source = '(' + data + ')',
            ast    = esprima.parse(source, { range: true });

        if (ast.type                    !== 'Program'             ||
            ast.body.length             !== 1                     ||
            ast.body[0].type            !== 'ExpressionStatement' ||
            (ast.body[0].expression.type !== 'ArrowFunctionExpression' &&
              ast.body[0].expression.type !== 'FunctionExpression')) {
          return false;
        }

        return true;
      } catch (err) {
        return false;
      }
    }

    function constructJavascriptFunction(data) {
      /*jslint evil:true*/

      var source = '(' + data + ')',
          ast    = esprima.parse(source, { range: true }),
          params = [],
          body;

      if (ast.type                    !== 'Program'             ||
          ast.body.length             !== 1                     ||
          ast.body[0].type            !== 'ExpressionStatement' ||
          (ast.body[0].expression.type !== 'ArrowFunctionExpression' &&
            ast.body[0].expression.type !== 'FunctionExpression')) {
        throw new Error('Failed to resolve function');
      }

      ast.body[0].expression.params.forEach(function (param) {
        params.push(param.name);
      });

      body = ast.body[0].expression.body.range;

      // Esprima's ranges include the first '{' and the last '}' characters on
      // function expressions. So cut them out.
      if (ast.body[0].expression.body.type === 'BlockStatement') {
        /*eslint-disable no-new-func*/
        return new Function(params, source.slice(body[0] + 1, body[1] - 1));
      }
      // ES6 arrow functions can omit the BlockStatement. In that case, just return
      // the body.
      /*eslint-disable no-new-func*/
      return new Function(params, 'return ' + source.slice(body[0], body[1]));
    }

    function representJavascriptFunction(object /*, style*/) {
      return object.toString();
    }

    function isFunction(object) {
      return Object.prototype.toString.call(object) === '[object Function]';
    }

    var _function = new type('tag:yaml.org,2002:js/function', {
      kind: 'scalar',
      resolve: resolveJavascriptFunction,
      construct: constructJavascriptFunction,
      predicate: isFunction,
      represent: representJavascriptFunction
    });

    var default_full = schema.DEFAULT = new schema({
      include: [
        default_safe
      ],
      explicit: [
        _undefined,
        regexp,
        _function
      ]
    });

    /*eslint-disable max-len,no-use-before-define*/








    var _hasOwnProperty$1 = Object.prototype.hasOwnProperty;


    var CONTEXT_FLOW_IN   = 1;
    var CONTEXT_FLOW_OUT  = 2;
    var CONTEXT_BLOCK_IN  = 3;
    var CONTEXT_BLOCK_OUT = 4;


    var CHOMPING_CLIP  = 1;
    var CHOMPING_STRIP = 2;
    var CHOMPING_KEEP  = 3;


    var PATTERN_NON_PRINTABLE         = /[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
    var PATTERN_NON_ASCII_LINE_BREAKS = /[\x85\u2028\u2029]/;
    var PATTERN_FLOW_INDICATORS       = /[,\[\]\{\}]/;
    var PATTERN_TAG_HANDLE            = /^(?:!|!!|![a-z\-]+!)$/i;
    var PATTERN_TAG_URI               = /^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;


    function _class(obj) { return Object.prototype.toString.call(obj); }

    function is_EOL(c) {
      return (c === 0x0A/* LF */) || (c === 0x0D/* CR */);
    }

    function is_WHITE_SPACE(c) {
      return (c === 0x09/* Tab */) || (c === 0x20/* Space */);
    }

    function is_WS_OR_EOL(c) {
      return (c === 0x09/* Tab */) ||
             (c === 0x20/* Space */) ||
             (c === 0x0A/* LF */) ||
             (c === 0x0D/* CR */);
    }

    function is_FLOW_INDICATOR(c) {
      return c === 0x2C/* , */ ||
             c === 0x5B/* [ */ ||
             c === 0x5D/* ] */ ||
             c === 0x7B/* { */ ||
             c === 0x7D/* } */;
    }

    function fromHexCode(c) {
      var lc;

      if ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */)) {
        return c - 0x30;
      }

      /*eslint-disable no-bitwise*/
      lc = c | 0x20;

      if ((0x61/* a */ <= lc) && (lc <= 0x66/* f */)) {
        return lc - 0x61 + 10;
      }

      return -1;
    }

    function escapedHexLen(c) {
      if (c === 0x78/* x */) { return 2; }
      if (c === 0x75/* u */) { return 4; }
      if (c === 0x55/* U */) { return 8; }
      return 0;
    }

    function fromDecimalCode(c) {
      if ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */)) {
        return c - 0x30;
      }

      return -1;
    }

    function simpleEscapeSequence(c) {
      /* eslint-disable indent */
      return (c === 0x30/* 0 */) ? '\x00' :
            (c === 0x61/* a */) ? '\x07' :
            (c === 0x62/* b */) ? '\x08' :
            (c === 0x74/* t */) ? '\x09' :
            (c === 0x09/* Tab */) ? '\x09' :
            (c === 0x6E/* n */) ? '\x0A' :
            (c === 0x76/* v */) ? '\x0B' :
            (c === 0x66/* f */) ? '\x0C' :
            (c === 0x72/* r */) ? '\x0D' :
            (c === 0x65/* e */) ? '\x1B' :
            (c === 0x20/* Space */) ? ' ' :
            (c === 0x22/* " */) ? '\x22' :
            (c === 0x2F/* / */) ? '/' :
            (c === 0x5C/* \ */) ? '\x5C' :
            (c === 0x4E/* N */) ? '\x85' :
            (c === 0x5F/* _ */) ? '\xA0' :
            (c === 0x4C/* L */) ? '\u2028' :
            (c === 0x50/* P */) ? '\u2029' : '';
    }

    function charFromCodepoint(c) {
      if (c <= 0xFFFF) {
        return String.fromCharCode(c);
      }
      // Encode UTF-16 surrogate pair
      // https://en.wikipedia.org/wiki/UTF-16#Code_points_U.2B010000_to_U.2B10FFFF
      return String.fromCharCode(
        ((c - 0x010000) >> 10) + 0xD800,
        ((c - 0x010000) & 0x03FF) + 0xDC00
      );
    }

    var simpleEscapeCheck = new Array(256); // integer, for fast access
    var simpleEscapeMap = new Array(256);
    for (var i = 0; i < 256; i++) {
      simpleEscapeCheck[i] = simpleEscapeSequence(i) ? 1 : 0;
      simpleEscapeMap[i] = simpleEscapeSequence(i);
    }


    function State$1(input, options) {
      this.input = input;

      this.filename  = options['filename']  || null;
      this.schema    = options['schema']    || default_full;
      this.onWarning = options['onWarning'] || null;
      this.legacy    = options['legacy']    || false;
      this.json      = options['json']      || false;
      this.listener  = options['listener']  || null;

      this.implicitTypes = this.schema.compiledImplicit;
      this.typeMap       = this.schema.compiledTypeMap;

      this.length     = input.length;
      this.position   = 0;
      this.line       = 0;
      this.lineStart  = 0;
      this.lineIndent = 0;

      this.documents = [];

      /*
      this.version;
      this.checkLineBreaks;
      this.tagMap;
      this.anchorMap;
      this.tag;
      this.anchor;
      this.kind;
      this.result;*/

    }


    function generateError(state, message) {
      return new exception(
        message,
        new mark(state.filename, state.input, state.position, state.line, (state.position - state.lineStart)));
    }

    function throwError(state, message) {
      throw generateError(state, message);
    }

    function throwWarning(state, message) {
      if (state.onWarning) {
        state.onWarning.call(null, generateError(state, message));
      }
    }


    var directiveHandlers = {

      YAML: function handleYamlDirective(state, name, args) {

        var match, major, minor;

        if (state.version !== null) {
          throwError(state, 'duplication of %YAML directive');
        }

        if (args.length !== 1) {
          throwError(state, 'YAML directive accepts exactly one argument');
        }

        match = /^([0-9]+)\.([0-9]+)$/.exec(args[0]);

        if (match === null) {
          throwError(state, 'ill-formed argument of the YAML directive');
        }

        major = parseInt(match[1], 10);
        minor = parseInt(match[2], 10);

        if (major !== 1) {
          throwError(state, 'unacceptable YAML version of the document');
        }

        state.version = args[0];
        state.checkLineBreaks = (minor < 2);

        if (minor !== 1 && minor !== 2) {
          throwWarning(state, 'unsupported YAML version of the document');
        }
      },

      TAG: function handleTagDirective(state, name, args) {

        var handle, prefix;

        if (args.length !== 2) {
          throwError(state, 'TAG directive accepts exactly two arguments');
        }

        handle = args[0];
        prefix = args[1];

        if (!PATTERN_TAG_HANDLE.test(handle)) {
          throwError(state, 'ill-formed tag handle (first argument) of the TAG directive');
        }

        if (_hasOwnProperty$1.call(state.tagMap, handle)) {
          throwError(state, 'there is a previously declared suffix for "' + handle + '" tag handle');
        }

        if (!PATTERN_TAG_URI.test(prefix)) {
          throwError(state, 'ill-formed tag prefix (second argument) of the TAG directive');
        }

        state.tagMap[handle] = prefix;
      }
    };


    function captureSegment(state, start, end, checkJson) {
      var _position, _length, _character, _result;

      if (start < end) {
        _result = state.input.slice(start, end);

        if (checkJson) {
          for (_position = 0, _length = _result.length; _position < _length; _position += 1) {
            _character = _result.charCodeAt(_position);
            if (!(_character === 0x09 ||
                  (0x20 <= _character && _character <= 0x10FFFF))) {
              throwError(state, 'expected valid JSON character');
            }
          }
        } else if (PATTERN_NON_PRINTABLE.test(_result)) {
          throwError(state, 'the stream contains non-printable characters');
        }

        state.result += _result;
      }
    }

    function mergeMappings(state, destination, source, overridableKeys) {
      var sourceKeys, key, index, quantity;

      if (!common.isObject(source)) {
        throwError(state, 'cannot merge mappings; the provided source object is unacceptable');
      }

      sourceKeys = Object.keys(source);

      for (index = 0, quantity = sourceKeys.length; index < quantity; index += 1) {
        key = sourceKeys[index];

        if (!_hasOwnProperty$1.call(destination, key)) {
          destination[key] = source[key];
          overridableKeys[key] = true;
        }
      }
    }

    function storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, startLine, startPos) {
      var index, quantity;

      // The output is a plain object here, so keys can only be strings.
      // We need to convert keyNode to a string, but doing so can hang the process
      // (deeply nested arrays that explode exponentially using aliases).
      if (Array.isArray(keyNode)) {
        keyNode = Array.prototype.slice.call(keyNode);

        for (index = 0, quantity = keyNode.length; index < quantity; index += 1) {
          if (Array.isArray(keyNode[index])) {
            throwError(state, 'nested arrays are not supported inside keys');
          }

          if (typeof keyNode === 'object' && _class(keyNode[index]) === '[object Object]') {
            keyNode[index] = '[object Object]';
          }
        }
      }

      // Avoid code execution in load() via toString property
      // (still use its own toString for arrays, timestamps,
      // and whatever user schema extensions happen to have @@toStringTag)
      if (typeof keyNode === 'object' && _class(keyNode) === '[object Object]') {
        keyNode = '[object Object]';
      }


      keyNode = String(keyNode);

      if (_result === null) {
        _result = {};
      }

      if (keyTag === 'tag:yaml.org,2002:merge') {
        if (Array.isArray(valueNode)) {
          for (index = 0, quantity = valueNode.length; index < quantity; index += 1) {
            mergeMappings(state, _result, valueNode[index], overridableKeys);
          }
        } else {
          mergeMappings(state, _result, valueNode, overridableKeys);
        }
      } else {
        if (!state.json &&
            !_hasOwnProperty$1.call(overridableKeys, keyNode) &&
            _hasOwnProperty$1.call(_result, keyNode)) {
          state.line = startLine || state.line;
          state.position = startPos || state.position;
          throwError(state, 'duplicated mapping key');
        }
        _result[keyNode] = valueNode;
        delete overridableKeys[keyNode];
      }

      return _result;
    }

    function readLineBreak(state) {
      var ch;

      ch = state.input.charCodeAt(state.position);

      if (ch === 0x0A/* LF */) {
        state.position++;
      } else if (ch === 0x0D/* CR */) {
        state.position++;
        if (state.input.charCodeAt(state.position) === 0x0A/* LF */) {
          state.position++;
        }
      } else {
        throwError(state, 'a line break is expected');
      }

      state.line += 1;
      state.lineStart = state.position;
    }

    function skipSeparationSpace(state, allowComments, checkIndent) {
      var lineBreaks = 0,
          ch = state.input.charCodeAt(state.position);

      while (ch !== 0) {
        while (is_WHITE_SPACE(ch)) {
          ch = state.input.charCodeAt(++state.position);
        }

        if (allowComments && ch === 0x23/* # */) {
          do {
            ch = state.input.charCodeAt(++state.position);
          } while (ch !== 0x0A/* LF */ && ch !== 0x0D/* CR */ && ch !== 0);
        }

        if (is_EOL(ch)) {
          readLineBreak(state);

          ch = state.input.charCodeAt(state.position);
          lineBreaks++;
          state.lineIndent = 0;

          while (ch === 0x20/* Space */) {
            state.lineIndent++;
            ch = state.input.charCodeAt(++state.position);
          }
        } else {
          break;
        }
      }

      if (checkIndent !== -1 && lineBreaks !== 0 && state.lineIndent < checkIndent) {
        throwWarning(state, 'deficient indentation');
      }

      return lineBreaks;
    }

    function testDocumentSeparator(state) {
      var _position = state.position,
          ch;

      ch = state.input.charCodeAt(_position);

      // Condition state.position === state.lineStart is tested
      // in parent on each call, for efficiency. No needs to test here again.
      if ((ch === 0x2D/* - */ || ch === 0x2E/* . */) &&
          ch === state.input.charCodeAt(_position + 1) &&
          ch === state.input.charCodeAt(_position + 2)) {

        _position += 3;

        ch = state.input.charCodeAt(_position);

        if (ch === 0 || is_WS_OR_EOL(ch)) {
          return true;
        }
      }

      return false;
    }

    function writeFoldedLines(state, count) {
      if (count === 1) {
        state.result += ' ';
      } else if (count > 1) {
        state.result += common.repeat('\n', count - 1);
      }
    }


    function readPlainScalar(state, nodeIndent, withinFlowCollection) {
      var preceding,
          following,
          captureStart,
          captureEnd,
          hasPendingContent,
          _line,
          _lineStart,
          _lineIndent,
          _kind = state.kind,
          _result = state.result,
          ch;

      ch = state.input.charCodeAt(state.position);

      if (is_WS_OR_EOL(ch)      ||
          is_FLOW_INDICATOR(ch) ||
          ch === 0x23/* # */    ||
          ch === 0x26/* & */    ||
          ch === 0x2A/* * */    ||
          ch === 0x21/* ! */    ||
          ch === 0x7C/* | */    ||
          ch === 0x3E/* > */    ||
          ch === 0x27/* ' */    ||
          ch === 0x22/* " */    ||
          ch === 0x25/* % */    ||
          ch === 0x40/* @ */    ||
          ch === 0x60/* ` */) {
        return false;
      }

      if (ch === 0x3F/* ? */ || ch === 0x2D/* - */) {
        following = state.input.charCodeAt(state.position + 1);

        if (is_WS_OR_EOL(following) ||
            withinFlowCollection && is_FLOW_INDICATOR(following)) {
          return false;
        }
      }

      state.kind = 'scalar';
      state.result = '';
      captureStart = captureEnd = state.position;
      hasPendingContent = false;

      while (ch !== 0) {
        if (ch === 0x3A/* : */) {
          following = state.input.charCodeAt(state.position + 1);

          if (is_WS_OR_EOL(following) ||
              withinFlowCollection && is_FLOW_INDICATOR(following)) {
            break;
          }

        } else if (ch === 0x23/* # */) {
          preceding = state.input.charCodeAt(state.position - 1);

          if (is_WS_OR_EOL(preceding)) {
            break;
          }

        } else if ((state.position === state.lineStart && testDocumentSeparator(state)) ||
                   withinFlowCollection && is_FLOW_INDICATOR(ch)) {
          break;

        } else if (is_EOL(ch)) {
          _line = state.line;
          _lineStart = state.lineStart;
          _lineIndent = state.lineIndent;
          skipSeparationSpace(state, false, -1);

          if (state.lineIndent >= nodeIndent) {
            hasPendingContent = true;
            ch = state.input.charCodeAt(state.position);
            continue;
          } else {
            state.position = captureEnd;
            state.line = _line;
            state.lineStart = _lineStart;
            state.lineIndent = _lineIndent;
            break;
          }
        }

        if (hasPendingContent) {
          captureSegment(state, captureStart, captureEnd, false);
          writeFoldedLines(state, state.line - _line);
          captureStart = captureEnd = state.position;
          hasPendingContent = false;
        }

        if (!is_WHITE_SPACE(ch)) {
          captureEnd = state.position + 1;
        }

        ch = state.input.charCodeAt(++state.position);
      }

      captureSegment(state, captureStart, captureEnd, false);

      if (state.result) {
        return true;
      }

      state.kind = _kind;
      state.result = _result;
      return false;
    }

    function readSingleQuotedScalar(state, nodeIndent) {
      var ch,
          captureStart, captureEnd;

      ch = state.input.charCodeAt(state.position);

      if (ch !== 0x27/* ' */) {
        return false;
      }

      state.kind = 'scalar';
      state.result = '';
      state.position++;
      captureStart = captureEnd = state.position;

      while ((ch = state.input.charCodeAt(state.position)) !== 0) {
        if (ch === 0x27/* ' */) {
          captureSegment(state, captureStart, state.position, true);
          ch = state.input.charCodeAt(++state.position);

          if (ch === 0x27/* ' */) {
            captureStart = state.position;
            state.position++;
            captureEnd = state.position;
          } else {
            return true;
          }

        } else if (is_EOL(ch)) {
          captureSegment(state, captureStart, captureEnd, true);
          writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
          captureStart = captureEnd = state.position;

        } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
          throwError(state, 'unexpected end of the document within a single quoted scalar');

        } else {
          state.position++;
          captureEnd = state.position;
        }
      }

      throwError(state, 'unexpected end of the stream within a single quoted scalar');
    }

    function readDoubleQuotedScalar(state, nodeIndent) {
      var captureStart,
          captureEnd,
          hexLength,
          hexResult,
          tmp,
          ch;

      ch = state.input.charCodeAt(state.position);

      if (ch !== 0x22/* " */) {
        return false;
      }

      state.kind = 'scalar';
      state.result = '';
      state.position++;
      captureStart = captureEnd = state.position;

      while ((ch = state.input.charCodeAt(state.position)) !== 0) {
        if (ch === 0x22/* " */) {
          captureSegment(state, captureStart, state.position, true);
          state.position++;
          return true;

        } else if (ch === 0x5C/* \ */) {
          captureSegment(state, captureStart, state.position, true);
          ch = state.input.charCodeAt(++state.position);

          if (is_EOL(ch)) {
            skipSeparationSpace(state, false, nodeIndent);

            // TODO: rework to inline fn with no type cast?
          } else if (ch < 256 && simpleEscapeCheck[ch]) {
            state.result += simpleEscapeMap[ch];
            state.position++;

          } else if ((tmp = escapedHexLen(ch)) > 0) {
            hexLength = tmp;
            hexResult = 0;

            for (; hexLength > 0; hexLength--) {
              ch = state.input.charCodeAt(++state.position);

              if ((tmp = fromHexCode(ch)) >= 0) {
                hexResult = (hexResult << 4) + tmp;

              } else {
                throwError(state, 'expected hexadecimal character');
              }
            }

            state.result += charFromCodepoint(hexResult);

            state.position++;

          } else {
            throwError(state, 'unknown escape sequence');
          }

          captureStart = captureEnd = state.position;

        } else if (is_EOL(ch)) {
          captureSegment(state, captureStart, captureEnd, true);
          writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
          captureStart = captureEnd = state.position;

        } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
          throwError(state, 'unexpected end of the document within a double quoted scalar');

        } else {
          state.position++;
          captureEnd = state.position;
        }
      }

      throwError(state, 'unexpected end of the stream within a double quoted scalar');
    }

    function readFlowCollection(state, nodeIndent) {
      var readNext = true,
          _line,
          _tag     = state.tag,
          _result,
          _anchor  = state.anchor,
          following,
          terminator,
          isPair,
          isExplicitPair,
          isMapping,
          overridableKeys = {},
          keyNode,
          keyTag,
          valueNode,
          ch;

      ch = state.input.charCodeAt(state.position);

      if (ch === 0x5B/* [ */) {
        terminator = 0x5D;/* ] */
        isMapping = false;
        _result = [];
      } else if (ch === 0x7B/* { */) {
        terminator = 0x7D;/* } */
        isMapping = true;
        _result = {};
      } else {
        return false;
      }

      if (state.anchor !== null) {
        state.anchorMap[state.anchor] = _result;
      }

      ch = state.input.charCodeAt(++state.position);

      while (ch !== 0) {
        skipSeparationSpace(state, true, nodeIndent);

        ch = state.input.charCodeAt(state.position);

        if (ch === terminator) {
          state.position++;
          state.tag = _tag;
          state.anchor = _anchor;
          state.kind = isMapping ? 'mapping' : 'sequence';
          state.result = _result;
          return true;
        } else if (!readNext) {
          throwError(state, 'missed comma between flow collection entries');
        }

        keyTag = keyNode = valueNode = null;
        isPair = isExplicitPair = false;

        if (ch === 0x3F/* ? */) {
          following = state.input.charCodeAt(state.position + 1);

          if (is_WS_OR_EOL(following)) {
            isPair = isExplicitPair = true;
            state.position++;
            skipSeparationSpace(state, true, nodeIndent);
          }
        }

        _line = state.line;
        composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
        keyTag = state.tag;
        keyNode = state.result;
        skipSeparationSpace(state, true, nodeIndent);

        ch = state.input.charCodeAt(state.position);

        if ((isExplicitPair || state.line === _line) && ch === 0x3A/* : */) {
          isPair = true;
          ch = state.input.charCodeAt(++state.position);
          skipSeparationSpace(state, true, nodeIndent);
          composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
          valueNode = state.result;
        }

        if (isMapping) {
          storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode);
        } else if (isPair) {
          _result.push(storeMappingPair(state, null, overridableKeys, keyTag, keyNode, valueNode));
        } else {
          _result.push(keyNode);
        }

        skipSeparationSpace(state, true, nodeIndent);

        ch = state.input.charCodeAt(state.position);

        if (ch === 0x2C/* , */) {
          readNext = true;
          ch = state.input.charCodeAt(++state.position);
        } else {
          readNext = false;
        }
      }

      throwError(state, 'unexpected end of the stream within a flow collection');
    }

    function readBlockScalar(state, nodeIndent) {
      var captureStart,
          folding,
          chomping       = CHOMPING_CLIP,
          didReadContent = false,
          detectedIndent = false,
          textIndent     = nodeIndent,
          emptyLines     = 0,
          atMoreIndented = false,
          tmp,
          ch;

      ch = state.input.charCodeAt(state.position);

      if (ch === 0x7C/* | */) {
        folding = false;
      } else if (ch === 0x3E/* > */) {
        folding = true;
      } else {
        return false;
      }

      state.kind = 'scalar';
      state.result = '';

      while (ch !== 0) {
        ch = state.input.charCodeAt(++state.position);

        if (ch === 0x2B/* + */ || ch === 0x2D/* - */) {
          if (CHOMPING_CLIP === chomping) {
            chomping = (ch === 0x2B/* + */) ? CHOMPING_KEEP : CHOMPING_STRIP;
          } else {
            throwError(state, 'repeat of a chomping mode identifier');
          }

        } else if ((tmp = fromDecimalCode(ch)) >= 0) {
          if (tmp === 0) {
            throwError(state, 'bad explicit indentation width of a block scalar; it cannot be less than one');
          } else if (!detectedIndent) {
            textIndent = nodeIndent + tmp - 1;
            detectedIndent = true;
          } else {
            throwError(state, 'repeat of an indentation width identifier');
          }

        } else {
          break;
        }
      }

      if (is_WHITE_SPACE(ch)) {
        do { ch = state.input.charCodeAt(++state.position); }
        while (is_WHITE_SPACE(ch));

        if (ch === 0x23/* # */) {
          do { ch = state.input.charCodeAt(++state.position); }
          while (!is_EOL(ch) && (ch !== 0));
        }
      }

      while (ch !== 0) {
        readLineBreak(state);
        state.lineIndent = 0;

        ch = state.input.charCodeAt(state.position);

        while ((!detectedIndent || state.lineIndent < textIndent) &&
               (ch === 0x20/* Space */)) {
          state.lineIndent++;
          ch = state.input.charCodeAt(++state.position);
        }

        if (!detectedIndent && state.lineIndent > textIndent) {
          textIndent = state.lineIndent;
        }

        if (is_EOL(ch)) {
          emptyLines++;
          continue;
        }

        // End of the scalar.
        if (state.lineIndent < textIndent) {

          // Perform the chomping.
          if (chomping === CHOMPING_KEEP) {
            state.result += common.repeat('\n', didReadContent ? 1 + emptyLines : emptyLines);
          } else if (chomping === CHOMPING_CLIP) {
            if (didReadContent) { // i.e. only if the scalar is not empty.
              state.result += '\n';
            }
          }

          // Break this `while` cycle and go to the funciton's epilogue.
          break;
        }

        // Folded style: use fancy rules to handle line breaks.
        if (folding) {

          // Lines starting with white space characters (more-indented lines) are not folded.
          if (is_WHITE_SPACE(ch)) {
            atMoreIndented = true;
            // except for the first content line (cf. Example 8.1)
            state.result += common.repeat('\n', didReadContent ? 1 + emptyLines : emptyLines);

          // End of more-indented block.
          } else if (atMoreIndented) {
            atMoreIndented = false;
            state.result += common.repeat('\n', emptyLines + 1);

          // Just one line break - perceive as the same line.
          } else if (emptyLines === 0) {
            if (didReadContent) { // i.e. only if we have already read some scalar content.
              state.result += ' ';
            }

          // Several line breaks - perceive as different lines.
          } else {
            state.result += common.repeat('\n', emptyLines);
          }

        // Literal style: just add exact number of line breaks between content lines.
        } else {
          // Keep all line breaks except the header line break.
          state.result += common.repeat('\n', didReadContent ? 1 + emptyLines : emptyLines);
        }

        didReadContent = true;
        detectedIndent = true;
        emptyLines = 0;
        captureStart = state.position;

        while (!is_EOL(ch) && (ch !== 0)) {
          ch = state.input.charCodeAt(++state.position);
        }

        captureSegment(state, captureStart, state.position, false);
      }

      return true;
    }

    function readBlockSequence(state, nodeIndent) {
      var _line,
          _tag      = state.tag,
          _anchor   = state.anchor,
          _result   = [],
          following,
          detected  = false,
          ch;

      if (state.anchor !== null) {
        state.anchorMap[state.anchor] = _result;
      }

      ch = state.input.charCodeAt(state.position);

      while (ch !== 0) {

        if (ch !== 0x2D/* - */) {
          break;
        }

        following = state.input.charCodeAt(state.position + 1);

        if (!is_WS_OR_EOL(following)) {
          break;
        }

        detected = true;
        state.position++;

        if (skipSeparationSpace(state, true, -1)) {
          if (state.lineIndent <= nodeIndent) {
            _result.push(null);
            ch = state.input.charCodeAt(state.position);
            continue;
          }
        }

        _line = state.line;
        composeNode(state, nodeIndent, CONTEXT_BLOCK_IN, false, true);
        _result.push(state.result);
        skipSeparationSpace(state, true, -1);

        ch = state.input.charCodeAt(state.position);

        if ((state.line === _line || state.lineIndent > nodeIndent) && (ch !== 0)) {
          throwError(state, 'bad indentation of a sequence entry');
        } else if (state.lineIndent < nodeIndent) {
          break;
        }
      }

      if (detected) {
        state.tag = _tag;
        state.anchor = _anchor;
        state.kind = 'sequence';
        state.result = _result;
        return true;
      }
      return false;
    }

    function readBlockMapping(state, nodeIndent, flowIndent) {
      var following,
          allowCompact,
          _line,
          _pos,
          _tag          = state.tag,
          _anchor       = state.anchor,
          _result       = {},
          overridableKeys = {},
          keyTag        = null,
          keyNode       = null,
          valueNode     = null,
          atExplicitKey = false,
          detected      = false,
          ch;

      if (state.anchor !== null) {
        state.anchorMap[state.anchor] = _result;
      }

      ch = state.input.charCodeAt(state.position);

      while (ch !== 0) {
        following = state.input.charCodeAt(state.position + 1);
        _line = state.line; // Save the current line.
        _pos = state.position;

        //
        // Explicit notation case. There are two separate blocks:
        // first for the key (denoted by "?") and second for the value (denoted by ":")
        //
        if ((ch === 0x3F/* ? */ || ch === 0x3A/* : */) && is_WS_OR_EOL(following)) {

          if (ch === 0x3F/* ? */) {
            if (atExplicitKey) {
              storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);
              keyTag = keyNode = valueNode = null;
            }

            detected = true;
            atExplicitKey = true;
            allowCompact = true;

          } else if (atExplicitKey) {
            // i.e. 0x3A/* : */ === character after the explicit key.
            atExplicitKey = false;
            allowCompact = true;

          } else {
            throwError(state, 'incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line');
          }

          state.position += 1;
          ch = following;

        //
        // Implicit notation case. Flow-style node as the key first, then ":", and the value.
        //
        } else if (composeNode(state, flowIndent, CONTEXT_FLOW_OUT, false, true)) {

          if (state.line === _line) {
            ch = state.input.charCodeAt(state.position);

            while (is_WHITE_SPACE(ch)) {
              ch = state.input.charCodeAt(++state.position);
            }

            if (ch === 0x3A/* : */) {
              ch = state.input.charCodeAt(++state.position);

              if (!is_WS_OR_EOL(ch)) {
                throwError(state, 'a whitespace character is expected after the key-value separator within a block mapping');
              }

              if (atExplicitKey) {
                storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);
                keyTag = keyNode = valueNode = null;
              }

              detected = true;
              atExplicitKey = false;
              allowCompact = false;
              keyTag = state.tag;
              keyNode = state.result;

            } else if (detected) {
              throwError(state, 'can not read an implicit mapping pair; a colon is missed');

            } else {
              state.tag = _tag;
              state.anchor = _anchor;
              return true; // Keep the result of `composeNode`.
            }

          } else if (detected) {
            throwError(state, 'can not read a block mapping entry; a multiline key may not be an implicit key');

          } else {
            state.tag = _tag;
            state.anchor = _anchor;
            return true; // Keep the result of `composeNode`.
          }

        } else {
          break; // Reading is done. Go to the epilogue.
        }

        //
        // Common reading code for both explicit and implicit notations.
        //
        if (state.line === _line || state.lineIndent > nodeIndent) {
          if (composeNode(state, nodeIndent, CONTEXT_BLOCK_OUT, true, allowCompact)) {
            if (atExplicitKey) {
              keyNode = state.result;
            } else {
              valueNode = state.result;
            }
          }

          if (!atExplicitKey) {
            storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _line, _pos);
            keyTag = keyNode = valueNode = null;
          }

          skipSeparationSpace(state, true, -1);
          ch = state.input.charCodeAt(state.position);
        }

        if (state.lineIndent > nodeIndent && (ch !== 0)) {
          throwError(state, 'bad indentation of a mapping entry');
        } else if (state.lineIndent < nodeIndent) {
          break;
        }
      }

      //
      // Epilogue.
      //

      // Special case: last mapping's node contains only the key in explicit notation.
      if (atExplicitKey) {
        storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);
      }

      // Expose the resulting mapping.
      if (detected) {
        state.tag = _tag;
        state.anchor = _anchor;
        state.kind = 'mapping';
        state.result = _result;
      }

      return detected;
    }

    function readTagProperty(state) {
      var _position,
          isVerbatim = false,
          isNamed    = false,
          tagHandle,
          tagName,
          ch;

      ch = state.input.charCodeAt(state.position);

      if (ch !== 0x21/* ! */) return false;

      if (state.tag !== null) {
        throwError(state, 'duplication of a tag property');
      }

      ch = state.input.charCodeAt(++state.position);

      if (ch === 0x3C/* < */) {
        isVerbatim = true;
        ch = state.input.charCodeAt(++state.position);

      } else if (ch === 0x21/* ! */) {
        isNamed = true;
        tagHandle = '!!';
        ch = state.input.charCodeAt(++state.position);

      } else {
        tagHandle = '!';
      }

      _position = state.position;

      if (isVerbatim) {
        do { ch = state.input.charCodeAt(++state.position); }
        while (ch !== 0 && ch !== 0x3E/* > */);

        if (state.position < state.length) {
          tagName = state.input.slice(_position, state.position);
          ch = state.input.charCodeAt(++state.position);
        } else {
          throwError(state, 'unexpected end of the stream within a verbatim tag');
        }
      } else {
        while (ch !== 0 && !is_WS_OR_EOL(ch)) {

          if (ch === 0x21/* ! */) {
            if (!isNamed) {
              tagHandle = state.input.slice(_position - 1, state.position + 1);

              if (!PATTERN_TAG_HANDLE.test(tagHandle)) {
                throwError(state, 'named tag handle cannot contain such characters');
              }

              isNamed = true;
              _position = state.position + 1;
            } else {
              throwError(state, 'tag suffix cannot contain exclamation marks');
            }
          }

          ch = state.input.charCodeAt(++state.position);
        }

        tagName = state.input.slice(_position, state.position);

        if (PATTERN_FLOW_INDICATORS.test(tagName)) {
          throwError(state, 'tag suffix cannot contain flow indicator characters');
        }
      }

      if (tagName && !PATTERN_TAG_URI.test(tagName)) {
        throwError(state, 'tag name cannot contain such characters: ' + tagName);
      }

      if (isVerbatim) {
        state.tag = tagName;

      } else if (_hasOwnProperty$1.call(state.tagMap, tagHandle)) {
        state.tag = state.tagMap[tagHandle] + tagName;

      } else if (tagHandle === '!') {
        state.tag = '!' + tagName;

      } else if (tagHandle === '!!') {
        state.tag = 'tag:yaml.org,2002:' + tagName;

      } else {
        throwError(state, 'undeclared tag handle "' + tagHandle + '"');
      }

      return true;
    }

    function readAnchorProperty(state) {
      var _position,
          ch;

      ch = state.input.charCodeAt(state.position);

      if (ch !== 0x26/* & */) return false;

      if (state.anchor !== null) {
        throwError(state, 'duplication of an anchor property');
      }

      ch = state.input.charCodeAt(++state.position);
      _position = state.position;

      while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }

      if (state.position === _position) {
        throwError(state, 'name of an anchor node must contain at least one character');
      }

      state.anchor = state.input.slice(_position, state.position);
      return true;
    }

    function readAlias(state) {
      var _position, alias,
          ch;

      ch = state.input.charCodeAt(state.position);

      if (ch !== 0x2A/* * */) return false;

      ch = state.input.charCodeAt(++state.position);
      _position = state.position;

      while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }

      if (state.position === _position) {
        throwError(state, 'name of an alias node must contain at least one character');
      }

      alias = state.input.slice(_position, state.position);

      if (!_hasOwnProperty$1.call(state.anchorMap, alias)) {
        throwError(state, 'unidentified alias "' + alias + '"');
      }

      state.result = state.anchorMap[alias];
      skipSeparationSpace(state, true, -1);
      return true;
    }

    function composeNode(state, parentIndent, nodeContext, allowToSeek, allowCompact) {
      var allowBlockStyles,
          allowBlockScalars,
          allowBlockCollections,
          indentStatus = 1, // 1: this>parent, 0: this=parent, -1: this<parent
          atNewLine  = false,
          hasContent = false,
          typeIndex,
          typeQuantity,
          type,
          flowIndent,
          blockIndent;

      if (state.listener !== null) {
        state.listener('open', state);
      }

      state.tag    = null;
      state.anchor = null;
      state.kind   = null;
      state.result = null;

      allowBlockStyles = allowBlockScalars = allowBlockCollections =
        CONTEXT_BLOCK_OUT === nodeContext ||
        CONTEXT_BLOCK_IN  === nodeContext;

      if (allowToSeek) {
        if (skipSeparationSpace(state, true, -1)) {
          atNewLine = true;

          if (state.lineIndent > parentIndent) {
            indentStatus = 1;
          } else if (state.lineIndent === parentIndent) {
            indentStatus = 0;
          } else if (state.lineIndent < parentIndent) {
            indentStatus = -1;
          }
        }
      }

      if (indentStatus === 1) {
        while (readTagProperty(state) || readAnchorProperty(state)) {
          if (skipSeparationSpace(state, true, -1)) {
            atNewLine = true;
            allowBlockCollections = allowBlockStyles;

            if (state.lineIndent > parentIndent) {
              indentStatus = 1;
            } else if (state.lineIndent === parentIndent) {
              indentStatus = 0;
            } else if (state.lineIndent < parentIndent) {
              indentStatus = -1;
            }
          } else {
            allowBlockCollections = false;
          }
        }
      }

      if (allowBlockCollections) {
        allowBlockCollections = atNewLine || allowCompact;
      }

      if (indentStatus === 1 || CONTEXT_BLOCK_OUT === nodeContext) {
        if (CONTEXT_FLOW_IN === nodeContext || CONTEXT_FLOW_OUT === nodeContext) {
          flowIndent = parentIndent;
        } else {
          flowIndent = parentIndent + 1;
        }

        blockIndent = state.position - state.lineStart;

        if (indentStatus === 1) {
          if (allowBlockCollections &&
              (readBlockSequence(state, blockIndent) ||
               readBlockMapping(state, blockIndent, flowIndent)) ||
              readFlowCollection(state, flowIndent)) {
            hasContent = true;
          } else {
            if ((allowBlockScalars && readBlockScalar(state, flowIndent)) ||
                readSingleQuotedScalar(state, flowIndent) ||
                readDoubleQuotedScalar(state, flowIndent)) {
              hasContent = true;

            } else if (readAlias(state)) {
              hasContent = true;

              if (state.tag !== null || state.anchor !== null) {
                throwError(state, 'alias node should not have any properties');
              }

            } else if (readPlainScalar(state, flowIndent, CONTEXT_FLOW_IN === nodeContext)) {
              hasContent = true;

              if (state.tag === null) {
                state.tag = '?';
              }
            }

            if (state.anchor !== null) {
              state.anchorMap[state.anchor] = state.result;
            }
          }
        } else if (indentStatus === 0) {
          // Special case: block sequences are allowed to have same indentation level as the parent.
          // http://www.yaml.org/spec/1.2/spec.html#id2799784
          hasContent = allowBlockCollections && readBlockSequence(state, blockIndent);
        }
      }

      if (state.tag !== null && state.tag !== '!') {
        if (state.tag === '?') {
          // Implicit resolving is not allowed for non-scalar types, and '?'
          // non-specific tag is only automatically assigned to plain scalars.
          //
          // We only need to check kind conformity in case user explicitly assigns '?'
          // tag, for example like this: "!<?> [0]"
          //
          if (state.result !== null && state.kind !== 'scalar') {
            throwError(state, 'unacceptable node kind for !<?> tag; it should be "scalar", not "' + state.kind + '"');
          }

          for (typeIndex = 0, typeQuantity = state.implicitTypes.length; typeIndex < typeQuantity; typeIndex += 1) {
            type = state.implicitTypes[typeIndex];

            if (type.resolve(state.result)) { // `state.result` updated in resolver if matched
              state.result = type.construct(state.result);
              state.tag = type.tag;
              if (state.anchor !== null) {
                state.anchorMap[state.anchor] = state.result;
              }
              break;
            }
          }
        } else if (_hasOwnProperty$1.call(state.typeMap[state.kind || 'fallback'], state.tag)) {
          type = state.typeMap[state.kind || 'fallback'][state.tag];

          if (state.result !== null && type.kind !== state.kind) {
            throwError(state, 'unacceptable node kind for !<' + state.tag + '> tag; it should be "' + type.kind + '", not "' + state.kind + '"');
          }

          if (!type.resolve(state.result)) { // `state.result` updated in resolver if matched
            throwError(state, 'cannot resolve a node with !<' + state.tag + '> explicit tag');
          } else {
            state.result = type.construct(state.result);
            if (state.anchor !== null) {
              state.anchorMap[state.anchor] = state.result;
            }
          }
        } else {
          throwError(state, 'unknown tag !<' + state.tag + '>');
        }
      }

      if (state.listener !== null) {
        state.listener('close', state);
      }
      return state.tag !== null ||  state.anchor !== null || hasContent;
    }

    function readDocument(state) {
      var documentStart = state.position,
          _position,
          directiveName,
          directiveArgs,
          hasDirectives = false,
          ch;

      state.version = null;
      state.checkLineBreaks = state.legacy;
      state.tagMap = {};
      state.anchorMap = {};

      while ((ch = state.input.charCodeAt(state.position)) !== 0) {
        skipSeparationSpace(state, true, -1);

        ch = state.input.charCodeAt(state.position);

        if (state.lineIndent > 0 || ch !== 0x25/* % */) {
          break;
        }

        hasDirectives = true;
        ch = state.input.charCodeAt(++state.position);
        _position = state.position;

        while (ch !== 0 && !is_WS_OR_EOL(ch)) {
          ch = state.input.charCodeAt(++state.position);
        }

        directiveName = state.input.slice(_position, state.position);
        directiveArgs = [];

        if (directiveName.length < 1) {
          throwError(state, 'directive name must not be less than one character in length');
        }

        while (ch !== 0) {
          while (is_WHITE_SPACE(ch)) {
            ch = state.input.charCodeAt(++state.position);
          }

          if (ch === 0x23/* # */) {
            do { ch = state.input.charCodeAt(++state.position); }
            while (ch !== 0 && !is_EOL(ch));
            break;
          }

          if (is_EOL(ch)) break;

          _position = state.position;

          while (ch !== 0 && !is_WS_OR_EOL(ch)) {
            ch = state.input.charCodeAt(++state.position);
          }

          directiveArgs.push(state.input.slice(_position, state.position));
        }

        if (ch !== 0) readLineBreak(state);

        if (_hasOwnProperty$1.call(directiveHandlers, directiveName)) {
          directiveHandlers[directiveName](state, directiveName, directiveArgs);
        } else {
          throwWarning(state, 'unknown document directive "' + directiveName + '"');
        }
      }

      skipSeparationSpace(state, true, -1);

      if (state.lineIndent === 0 &&
          state.input.charCodeAt(state.position)     === 0x2D/* - */ &&
          state.input.charCodeAt(state.position + 1) === 0x2D/* - */ &&
          state.input.charCodeAt(state.position + 2) === 0x2D/* - */) {
        state.position += 3;
        skipSeparationSpace(state, true, -1);

      } else if (hasDirectives) {
        throwError(state, 'directives end mark is expected');
      }

      composeNode(state, state.lineIndent - 1, CONTEXT_BLOCK_OUT, false, true);
      skipSeparationSpace(state, true, -1);

      if (state.checkLineBreaks &&
          PATTERN_NON_ASCII_LINE_BREAKS.test(state.input.slice(documentStart, state.position))) {
        throwWarning(state, 'non-ASCII line breaks are interpreted as content');
      }

      state.documents.push(state.result);

      if (state.position === state.lineStart && testDocumentSeparator(state)) {

        if (state.input.charCodeAt(state.position) === 0x2E/* . */) {
          state.position += 3;
          skipSeparationSpace(state, true, -1);
        }
        return;
      }

      if (state.position < (state.length - 1)) {
        throwError(state, 'end of the stream or a document separator is expected');
      } else {
        return;
      }
    }


    function loadDocuments(input, options) {
      input = String(input);
      options = options || {};

      if (input.length !== 0) {

        // Add tailing `\n` if not exists
        if (input.charCodeAt(input.length - 1) !== 0x0A/* LF */ &&
            input.charCodeAt(input.length - 1) !== 0x0D/* CR */) {
          input += '\n';
        }

        // Strip BOM
        if (input.charCodeAt(0) === 0xFEFF) {
          input = input.slice(1);
        }
      }

      var state = new State$1(input, options);

      var nullpos = input.indexOf('\0');

      if (nullpos !== -1) {
        state.position = nullpos;
        throwError(state, 'null byte is not allowed in input');
      }

      // Use 0 as string terminator. That significantly simplifies bounds check.
      state.input += '\0';

      while (state.input.charCodeAt(state.position) === 0x20/* Space */) {
        state.lineIndent += 1;
        state.position += 1;
      }

      while (state.position < (state.length - 1)) {
        readDocument(state);
      }

      return state.documents;
    }


    function loadAll$1(input, iterator, options) {
      if (iterator !== null && typeof iterator === 'object' && typeof options === 'undefined') {
        options = iterator;
        iterator = null;
      }

      var documents = loadDocuments(input, options);

      if (typeof iterator !== 'function') {
        return documents;
      }

      for (var index = 0, length = documents.length; index < length; index += 1) {
        iterator(documents[index]);
      }
    }


    function load$1(input, options) {
      var documents = loadDocuments(input, options);

      if (documents.length === 0) {
        /*eslint-disable no-undefined*/
        return undefined;
      } else if (documents.length === 1) {
        return documents[0];
      }
      throw new exception('expected a single document in the stream, but found more');
    }


    function safeLoadAll$1(input, iterator, options) {
      if (typeof iterator === 'object' && iterator !== null && typeof options === 'undefined') {
        options = iterator;
        iterator = null;
      }

      return loadAll$1(input, iterator, common.extend({ schema: default_safe }, options));
    }


    function safeLoad$1(input, options) {
      return load$1(input, common.extend({ schema: default_safe }, options));
    }


    var loadAll_1     = loadAll$1;
    var load_1        = load$1;
    var safeLoadAll_1 = safeLoadAll$1;
    var safeLoad_1    = safeLoad$1;

    var loader = {
    	loadAll: loadAll_1,
    	load: load_1,
    	safeLoadAll: safeLoadAll_1,
    	safeLoad: safeLoad_1
    };

    /*eslint-disable no-use-before-define*/






    var _toString       = Object.prototype.toString;
    var _hasOwnProperty = Object.prototype.hasOwnProperty;

    var CHAR_TAB                  = 0x09; /* Tab */
    var CHAR_LINE_FEED            = 0x0A; /* LF */
    var CHAR_CARRIAGE_RETURN      = 0x0D; /* CR */
    var CHAR_SPACE                = 0x20; /* Space */
    var CHAR_EXCLAMATION          = 0x21; /* ! */
    var CHAR_DOUBLE_QUOTE         = 0x22; /* " */
    var CHAR_SHARP                = 0x23; /* # */
    var CHAR_PERCENT              = 0x25; /* % */
    var CHAR_AMPERSAND            = 0x26; /* & */
    var CHAR_SINGLE_QUOTE         = 0x27; /* ' */
    var CHAR_ASTERISK             = 0x2A; /* * */
    var CHAR_COMMA                = 0x2C; /* , */
    var CHAR_MINUS                = 0x2D; /* - */
    var CHAR_COLON                = 0x3A; /* : */
    var CHAR_EQUALS               = 0x3D; /* = */
    var CHAR_GREATER_THAN         = 0x3E; /* > */
    var CHAR_QUESTION             = 0x3F; /* ? */
    var CHAR_COMMERCIAL_AT        = 0x40; /* @ */
    var CHAR_LEFT_SQUARE_BRACKET  = 0x5B; /* [ */
    var CHAR_RIGHT_SQUARE_BRACKET = 0x5D; /* ] */
    var CHAR_GRAVE_ACCENT         = 0x60; /* ` */
    var CHAR_LEFT_CURLY_BRACKET   = 0x7B; /* { */
    var CHAR_VERTICAL_LINE        = 0x7C; /* | */
    var CHAR_RIGHT_CURLY_BRACKET  = 0x7D; /* } */

    var ESCAPE_SEQUENCES = {};

    ESCAPE_SEQUENCES[0x00]   = '\\0';
    ESCAPE_SEQUENCES[0x07]   = '\\a';
    ESCAPE_SEQUENCES[0x08]   = '\\b';
    ESCAPE_SEQUENCES[0x09]   = '\\t';
    ESCAPE_SEQUENCES[0x0A]   = '\\n';
    ESCAPE_SEQUENCES[0x0B]   = '\\v';
    ESCAPE_SEQUENCES[0x0C]   = '\\f';
    ESCAPE_SEQUENCES[0x0D]   = '\\r';
    ESCAPE_SEQUENCES[0x1B]   = '\\e';
    ESCAPE_SEQUENCES[0x22]   = '\\"';
    ESCAPE_SEQUENCES[0x5C]   = '\\\\';
    ESCAPE_SEQUENCES[0x85]   = '\\N';
    ESCAPE_SEQUENCES[0xA0]   = '\\_';
    ESCAPE_SEQUENCES[0x2028] = '\\L';
    ESCAPE_SEQUENCES[0x2029] = '\\P';

    var DEPRECATED_BOOLEANS_SYNTAX = [
      'y', 'Y', 'yes', 'Yes', 'YES', 'on', 'On', 'ON',
      'n', 'N', 'no', 'No', 'NO', 'off', 'Off', 'OFF'
    ];

    function compileStyleMap(schema, map) {
      var result, keys, index, length, tag, style, type;

      if (map === null) return {};

      result = {};
      keys = Object.keys(map);

      for (index = 0, length = keys.length; index < length; index += 1) {
        tag = keys[index];
        style = String(map[tag]);

        if (tag.slice(0, 2) === '!!') {
          tag = 'tag:yaml.org,2002:' + tag.slice(2);
        }
        type = schema.compiledTypeMap['fallback'][tag];

        if (type && _hasOwnProperty.call(type.styleAliases, style)) {
          style = type.styleAliases[style];
        }

        result[tag] = style;
      }

      return result;
    }

    function encodeHex(character) {
      var string, handle, length;

      string = character.toString(16).toUpperCase();

      if (character <= 0xFF) {
        handle = 'x';
        length = 2;
      } else if (character <= 0xFFFF) {
        handle = 'u';
        length = 4;
      } else if (character <= 0xFFFFFFFF) {
        handle = 'U';
        length = 8;
      } else {
        throw new exception('code point within a string may not be greater than 0xFFFFFFFF');
      }

      return '\\' + handle + common.repeat('0', length - string.length) + string;
    }

    function State(options) {
      this.schema        = options['schema'] || default_full;
      this.indent        = Math.max(1, (options['indent'] || 2));
      this.noArrayIndent = options['noArrayIndent'] || false;
      this.skipInvalid   = options['skipInvalid'] || false;
      this.flowLevel     = (common.isNothing(options['flowLevel']) ? -1 : options['flowLevel']);
      this.styleMap      = compileStyleMap(this.schema, options['styles'] || null);
      this.sortKeys      = options['sortKeys'] || false;
      this.lineWidth     = options['lineWidth'] || 80;
      this.noRefs        = options['noRefs'] || false;
      this.noCompatMode  = options['noCompatMode'] || false;
      this.condenseFlow  = options['condenseFlow'] || false;

      this.implicitTypes = this.schema.compiledImplicit;
      this.explicitTypes = this.schema.compiledExplicit;

      this.tag = null;
      this.result = '';

      this.duplicates = [];
      this.usedDuplicates = null;
    }

    // Indents every line in a string. Empty lines (\n only) are not indented.
    function indentString(string, spaces) {
      var ind = common.repeat(' ', spaces),
          position = 0,
          next = -1,
          result = '',
          line,
          length = string.length;

      while (position < length) {
        next = string.indexOf('\n', position);
        if (next === -1) {
          line = string.slice(position);
          position = length;
        } else {
          line = string.slice(position, next + 1);
          position = next + 1;
        }

        if (line.length && line !== '\n') result += ind;

        result += line;
      }

      return result;
    }

    function generateNextLine(state, level) {
      return '\n' + common.repeat(' ', state.indent * level);
    }

    function testImplicitResolving(state, str) {
      var index, length, type;

      for (index = 0, length = state.implicitTypes.length; index < length; index += 1) {
        type = state.implicitTypes[index];

        if (type.resolve(str)) {
          return true;
        }
      }

      return false;
    }

    // [33] s-white ::= s-space | s-tab
    function isWhitespace(c) {
      return c === CHAR_SPACE || c === CHAR_TAB;
    }

    // Returns true if the character can be printed without escaping.
    // From YAML 1.2: "any allowed characters known to be non-printable
    // should also be escaped. [However,] This isn’t mandatory"
    // Derived from nb-char - \t - #x85 - #xA0 - #x2028 - #x2029.
    function isPrintable(c) {
      return  (0x00020 <= c && c <= 0x00007E)
          || ((0x000A1 <= c && c <= 0x00D7FF) && c !== 0x2028 && c !== 0x2029)
          || ((0x0E000 <= c && c <= 0x00FFFD) && c !== 0xFEFF /* BOM */)
          ||  (0x10000 <= c && c <= 0x10FFFF);
    }

    // [34] ns-char ::= nb-char - s-white
    // [27] nb-char ::= c-printable - b-char - c-byte-order-mark
    // [26] b-char  ::= b-line-feed | b-carriage-return
    // [24] b-line-feed       ::=     #xA    /* LF */
    // [25] b-carriage-return ::=     #xD    /* CR */
    // [3]  c-byte-order-mark ::=     #xFEFF
    function isNsChar(c) {
      return isPrintable(c) && !isWhitespace(c)
        // byte-order-mark
        && c !== 0xFEFF
        // b-char
        && c !== CHAR_CARRIAGE_RETURN
        && c !== CHAR_LINE_FEED;
    }

    // Simplified test for values allowed after the first character in plain style.
    function isPlainSafe(c, prev) {
      // Uses a subset of nb-char - c-flow-indicator - ":" - "#"
      // where nb-char ::= c-printable - b-char - c-byte-order-mark.
      return isPrintable(c) && c !== 0xFEFF
        // - c-flow-indicator
        && c !== CHAR_COMMA
        && c !== CHAR_LEFT_SQUARE_BRACKET
        && c !== CHAR_RIGHT_SQUARE_BRACKET
        && c !== CHAR_LEFT_CURLY_BRACKET
        && c !== CHAR_RIGHT_CURLY_BRACKET
        // - ":" - "#"
        // /* An ns-char preceding */ "#"
        && c !== CHAR_COLON
        && ((c !== CHAR_SHARP) || (prev && isNsChar(prev)));
    }

    // Simplified test for values allowed as the first character in plain style.
    function isPlainSafeFirst(c) {
      // Uses a subset of ns-char - c-indicator
      // where ns-char = nb-char - s-white.
      return isPrintable(c) && c !== 0xFEFF
        && !isWhitespace(c) // - s-white
        // - (c-indicator ::=
        // “-” | “?” | “:” | “,” | “[” | “]” | “{” | “}”
        && c !== CHAR_MINUS
        && c !== CHAR_QUESTION
        && c !== CHAR_COLON
        && c !== CHAR_COMMA
        && c !== CHAR_LEFT_SQUARE_BRACKET
        && c !== CHAR_RIGHT_SQUARE_BRACKET
        && c !== CHAR_LEFT_CURLY_BRACKET
        && c !== CHAR_RIGHT_CURLY_BRACKET
        // | “#” | “&” | “*” | “!” | “|” | “=” | “>” | “'” | “"”
        && c !== CHAR_SHARP
        && c !== CHAR_AMPERSAND
        && c !== CHAR_ASTERISK
        && c !== CHAR_EXCLAMATION
        && c !== CHAR_VERTICAL_LINE
        && c !== CHAR_EQUALS
        && c !== CHAR_GREATER_THAN
        && c !== CHAR_SINGLE_QUOTE
        && c !== CHAR_DOUBLE_QUOTE
        // | “%” | “@” | “`”)
        && c !== CHAR_PERCENT
        && c !== CHAR_COMMERCIAL_AT
        && c !== CHAR_GRAVE_ACCENT;
    }

    // Determines whether block indentation indicator is required.
    function needIndentIndicator(string) {
      var leadingSpaceRe = /^\n* /;
      return leadingSpaceRe.test(string);
    }

    var STYLE_PLAIN   = 1,
        STYLE_SINGLE  = 2,
        STYLE_LITERAL = 3,
        STYLE_FOLDED  = 4,
        STYLE_DOUBLE  = 5;

    // Determines which scalar styles are possible and returns the preferred style.
    // lineWidth = -1 => no limit.
    // Pre-conditions: str.length > 0.
    // Post-conditions:
    //    STYLE_PLAIN or STYLE_SINGLE => no \n are in the string.
    //    STYLE_LITERAL => no lines are suitable for folding (or lineWidth is -1).
    //    STYLE_FOLDED => a line > lineWidth and can be folded (and lineWidth != -1).
    function chooseScalarStyle(string, singleLineOnly, indentPerLevel, lineWidth, testAmbiguousType) {
      var i;
      var char, prev_char;
      var hasLineBreak = false;
      var hasFoldableLine = false; // only checked if shouldTrackWidth
      var shouldTrackWidth = lineWidth !== -1;
      var previousLineBreak = -1; // count the first line correctly
      var plain = isPlainSafeFirst(string.charCodeAt(0))
              && !isWhitespace(string.charCodeAt(string.length - 1));

      if (singleLineOnly) {
        // Case: no block styles.
        // Check for disallowed characters to rule out plain and single.
        for (i = 0; i < string.length; i++) {
          char = string.charCodeAt(i);
          if (!isPrintable(char)) {
            return STYLE_DOUBLE;
          }
          prev_char = i > 0 ? string.charCodeAt(i - 1) : null;
          plain = plain && isPlainSafe(char, prev_char);
        }
      } else {
        // Case: block styles permitted.
        for (i = 0; i < string.length; i++) {
          char = string.charCodeAt(i);
          if (char === CHAR_LINE_FEED) {
            hasLineBreak = true;
            // Check if any line can be folded.
            if (shouldTrackWidth) {
              hasFoldableLine = hasFoldableLine ||
                // Foldable line = too long, and not more-indented.
                (i - previousLineBreak - 1 > lineWidth &&
                 string[previousLineBreak + 1] !== ' ');
              previousLineBreak = i;
            }
          } else if (!isPrintable(char)) {
            return STYLE_DOUBLE;
          }
          prev_char = i > 0 ? string.charCodeAt(i - 1) : null;
          plain = plain && isPlainSafe(char, prev_char);
        }
        // in case the end is missing a \n
        hasFoldableLine = hasFoldableLine || (shouldTrackWidth &&
          (i - previousLineBreak - 1 > lineWidth &&
           string[previousLineBreak + 1] !== ' '));
      }
      // Although every style can represent \n without escaping, prefer block styles
      // for multiline, since they're more readable and they don't add empty lines.
      // Also prefer folding a super-long line.
      if (!hasLineBreak && !hasFoldableLine) {
        // Strings interpretable as another type have to be quoted;
        // e.g. the string 'true' vs. the boolean true.
        return plain && !testAmbiguousType(string)
          ? STYLE_PLAIN : STYLE_SINGLE;
      }
      // Edge case: block indentation indicator can only have one digit.
      if (indentPerLevel > 9 && needIndentIndicator(string)) {
        return STYLE_DOUBLE;
      }
      // At this point we know block styles are valid.
      // Prefer literal style unless we want to fold.
      return hasFoldableLine ? STYLE_FOLDED : STYLE_LITERAL;
    }

    // Note: line breaking/folding is implemented for only the folded style.
    // NB. We drop the last trailing newline (if any) of a returned block scalar
    //  since the dumper adds its own newline. This always works:
    //    • No ending newline => unaffected; already using strip "-" chomping.
    //    • Ending newline    => removed then restored.
    //  Importantly, this keeps the "+" chomp indicator from gaining an extra line.
    function writeScalar(state, string, level, iskey) {
      state.dump = (function () {
        if (string.length === 0) {
          return "''";
        }
        if (!state.noCompatMode &&
            DEPRECATED_BOOLEANS_SYNTAX.indexOf(string) !== -1) {
          return "'" + string + "'";
        }

        var indent = state.indent * Math.max(1, level); // no 0-indent scalars
        // As indentation gets deeper, let the width decrease monotonically
        // to the lower bound min(state.lineWidth, 40).
        // Note that this implies
        //  state.lineWidth ≤ 40 + state.indent: width is fixed at the lower bound.
        //  state.lineWidth > 40 + state.indent: width decreases until the lower bound.
        // This behaves better than a constant minimum width which disallows narrower options,
        // or an indent threshold which causes the width to suddenly increase.
        var lineWidth = state.lineWidth === -1
          ? -1 : Math.max(Math.min(state.lineWidth, 40), state.lineWidth - indent);

        // Without knowing if keys are implicit/explicit, assume implicit for safety.
        var singleLineOnly = iskey
          // No block styles in flow mode.
          || (state.flowLevel > -1 && level >= state.flowLevel);
        function testAmbiguity(string) {
          return testImplicitResolving(state, string);
        }

        switch (chooseScalarStyle(string, singleLineOnly, state.indent, lineWidth, testAmbiguity)) {
          case STYLE_PLAIN:
            return string;
          case STYLE_SINGLE:
            return "'" + string.replace(/'/g, "''") + "'";
          case STYLE_LITERAL:
            return '|' + blockHeader(string, state.indent)
              + dropEndingNewline(indentString(string, indent));
          case STYLE_FOLDED:
            return '>' + blockHeader(string, state.indent)
              + dropEndingNewline(indentString(foldString(string, lineWidth), indent));
          case STYLE_DOUBLE:
            return '"' + escapeString(string) + '"';
          default:
            throw new exception('impossible error: invalid scalar style');
        }
      }());
    }

    // Pre-conditions: string is valid for a block scalar, 1 <= indentPerLevel <= 9.
    function blockHeader(string, indentPerLevel) {
      var indentIndicator = needIndentIndicator(string) ? String(indentPerLevel) : '';

      // note the special case: the string '\n' counts as a "trailing" empty line.
      var clip =          string[string.length - 1] === '\n';
      var keep = clip && (string[string.length - 2] === '\n' || string === '\n');
      var chomp = keep ? '+' : (clip ? '' : '-');

      return indentIndicator + chomp + '\n';
    }

    // (See the note for writeScalar.)
    function dropEndingNewline(string) {
      return string[string.length - 1] === '\n' ? string.slice(0, -1) : string;
    }

    // Note: a long line without a suitable break point will exceed the width limit.
    // Pre-conditions: every char in str isPrintable, str.length > 0, width > 0.
    function foldString(string, width) {
      // In folded style, $k$ consecutive newlines output as $k+1$ newlines—
      // unless they're before or after a more-indented line, or at the very
      // beginning or end, in which case $k$ maps to $k$.
      // Therefore, parse each chunk as newline(s) followed by a content line.
      var lineRe = /(\n+)([^\n]*)/g;

      // first line (possibly an empty line)
      var result = (function () {
        var nextLF = string.indexOf('\n');
        nextLF = nextLF !== -1 ? nextLF : string.length;
        lineRe.lastIndex = nextLF;
        return foldLine(string.slice(0, nextLF), width);
      }());
      // If we haven't reached the first content line yet, don't add an extra \n.
      var prevMoreIndented = string[0] === '\n' || string[0] === ' ';
      var moreIndented;

      // rest of the lines
      var match;
      while ((match = lineRe.exec(string))) {
        var prefix = match[1], line = match[2];
        moreIndented = (line[0] === ' ');
        result += prefix
          + (!prevMoreIndented && !moreIndented && line !== ''
            ? '\n' : '')
          + foldLine(line, width);
        prevMoreIndented = moreIndented;
      }

      return result;
    }

    // Greedy line breaking.
    // Picks the longest line under the limit each time,
    // otherwise settles for the shortest line over the limit.
    // NB. More-indented lines *cannot* be folded, as that would add an extra \n.
    function foldLine(line, width) {
      if (line === '' || line[0] === ' ') return line;

      // Since a more-indented line adds a \n, breaks can't be followed by a space.
      var breakRe = / [^ ]/g; // note: the match index will always be <= length-2.
      var match;
      // start is an inclusive index. end, curr, and next are exclusive.
      var start = 0, end, curr = 0, next = 0;
      var result = '';

      // Invariants: 0 <= start <= length-1.
      //   0 <= curr <= next <= max(0, length-2). curr - start <= width.
      // Inside the loop:
      //   A match implies length >= 2, so curr and next are <= length-2.
      while ((match = breakRe.exec(line))) {
        next = match.index;
        // maintain invariant: curr - start <= width
        if (next - start > width) {
          end = (curr > start) ? curr : next; // derive end <= length-2
          result += '\n' + line.slice(start, end);
          // skip the space that was output as \n
          start = end + 1;                    // derive start <= length-1
        }
        curr = next;
      }

      // By the invariants, start <= length-1, so there is something left over.
      // It is either the whole string or a part starting from non-whitespace.
      result += '\n';
      // Insert a break if the remainder is too long and there is a break available.
      if (line.length - start > width && curr > start) {
        result += line.slice(start, curr) + '\n' + line.slice(curr + 1);
      } else {
        result += line.slice(start);
      }

      return result.slice(1); // drop extra \n joiner
    }

    // Escapes a double-quoted string.
    function escapeString(string) {
      var result = '';
      var char, nextChar;
      var escapeSeq;

      for (var i = 0; i < string.length; i++) {
        char = string.charCodeAt(i);
        // Check for surrogate pairs (reference Unicode 3.0 section "3.7 Surrogates").
        if (char >= 0xD800 && char <= 0xDBFF/* high surrogate */) {
          nextChar = string.charCodeAt(i + 1);
          if (nextChar >= 0xDC00 && nextChar <= 0xDFFF/* low surrogate */) {
            // Combine the surrogate pair and store it escaped.
            result += encodeHex((char - 0xD800) * 0x400 + nextChar - 0xDC00 + 0x10000);
            // Advance index one extra since we already used that char here.
            i++; continue;
          }
        }
        escapeSeq = ESCAPE_SEQUENCES[char];
        result += !escapeSeq && isPrintable(char)
          ? string[i]
          : escapeSeq || encodeHex(char);
      }

      return result;
    }

    function writeFlowSequence(state, level, object) {
      var _result = '',
          _tag    = state.tag,
          index,
          length;

      for (index = 0, length = object.length; index < length; index += 1) {
        // Write only valid elements.
        if (writeNode(state, level, object[index], false, false)) {
          if (index !== 0) _result += ',' + (!state.condenseFlow ? ' ' : '');
          _result += state.dump;
        }
      }

      state.tag = _tag;
      state.dump = '[' + _result + ']';
    }

    function writeBlockSequence(state, level, object, compact) {
      var _result = '',
          _tag    = state.tag,
          index,
          length;

      for (index = 0, length = object.length; index < length; index += 1) {
        // Write only valid elements.
        if (writeNode(state, level + 1, object[index], true, true)) {
          if (!compact || index !== 0) {
            _result += generateNextLine(state, level);
          }

          if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
            _result += '-';
          } else {
            _result += '- ';
          }

          _result += state.dump;
        }
      }

      state.tag = _tag;
      state.dump = _result || '[]'; // Empty sequence if no valid values.
    }

    function writeFlowMapping(state, level, object) {
      var _result       = '',
          _tag          = state.tag,
          objectKeyList = Object.keys(object),
          index,
          length,
          objectKey,
          objectValue,
          pairBuffer;

      for (index = 0, length = objectKeyList.length; index < length; index += 1) {

        pairBuffer = '';
        if (index !== 0) pairBuffer += ', ';

        if (state.condenseFlow) pairBuffer += '"';

        objectKey = objectKeyList[index];
        objectValue = object[objectKey];

        if (!writeNode(state, level, objectKey, false, false)) {
          continue; // Skip this pair because of invalid key;
        }

        if (state.dump.length > 1024) pairBuffer += '? ';

        pairBuffer += state.dump + (state.condenseFlow ? '"' : '') + ':' + (state.condenseFlow ? '' : ' ');

        if (!writeNode(state, level, objectValue, false, false)) {
          continue; // Skip this pair because of invalid value.
        }

        pairBuffer += state.dump;

        // Both key and value are valid.
        _result += pairBuffer;
      }

      state.tag = _tag;
      state.dump = '{' + _result + '}';
    }

    function writeBlockMapping(state, level, object, compact) {
      var _result       = '',
          _tag          = state.tag,
          objectKeyList = Object.keys(object),
          index,
          length,
          objectKey,
          objectValue,
          explicitPair,
          pairBuffer;

      // Allow sorting keys so that the output file is deterministic
      if (state.sortKeys === true) {
        // Default sorting
        objectKeyList.sort();
      } else if (typeof state.sortKeys === 'function') {
        // Custom sort function
        objectKeyList.sort(state.sortKeys);
      } else if (state.sortKeys) {
        // Something is wrong
        throw new exception('sortKeys must be a boolean or a function');
      }

      for (index = 0, length = objectKeyList.length; index < length; index += 1) {
        pairBuffer = '';

        if (!compact || index !== 0) {
          pairBuffer += generateNextLine(state, level);
        }

        objectKey = objectKeyList[index];
        objectValue = object[objectKey];

        if (!writeNode(state, level + 1, objectKey, true, true, true)) {
          continue; // Skip this pair because of invalid key.
        }

        explicitPair = (state.tag !== null && state.tag !== '?') ||
                       (state.dump && state.dump.length > 1024);

        if (explicitPair) {
          if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
            pairBuffer += '?';
          } else {
            pairBuffer += '? ';
          }
        }

        pairBuffer += state.dump;

        if (explicitPair) {
          pairBuffer += generateNextLine(state, level);
        }

        if (!writeNode(state, level + 1, objectValue, true, explicitPair)) {
          continue; // Skip this pair because of invalid value.
        }

        if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
          pairBuffer += ':';
        } else {
          pairBuffer += ': ';
        }

        pairBuffer += state.dump;

        // Both key and value are valid.
        _result += pairBuffer;
      }

      state.tag = _tag;
      state.dump = _result || '{}'; // Empty mapping if no valid pairs.
    }

    function detectType(state, object, explicit) {
      var _result, typeList, index, length, type, style;

      typeList = explicit ? state.explicitTypes : state.implicitTypes;

      for (index = 0, length = typeList.length; index < length; index += 1) {
        type = typeList[index];

        if ((type.instanceOf  || type.predicate) &&
            (!type.instanceOf || ((typeof object === 'object') && (object instanceof type.instanceOf))) &&
            (!type.predicate  || type.predicate(object))) {

          state.tag = explicit ? type.tag : '?';

          if (type.represent) {
            style = state.styleMap[type.tag] || type.defaultStyle;

            if (_toString.call(type.represent) === '[object Function]') {
              _result = type.represent(object, style);
            } else if (_hasOwnProperty.call(type.represent, style)) {
              _result = type.represent[style](object, style);
            } else {
              throw new exception('!<' + type.tag + '> tag resolver accepts not "' + style + '" style');
            }

            state.dump = _result;
          }

          return true;
        }
      }

      return false;
    }

    // Serializes `object` and writes it to global `result`.
    // Returns true on success, or false on invalid object.
    //
    function writeNode(state, level, object, block, compact, iskey) {
      state.tag = null;
      state.dump = object;

      if (!detectType(state, object, false)) {
        detectType(state, object, true);
      }

      var type = _toString.call(state.dump);

      if (block) {
        block = (state.flowLevel < 0 || state.flowLevel > level);
      }

      var objectOrArray = type === '[object Object]' || type === '[object Array]',
          duplicateIndex,
          duplicate;

      if (objectOrArray) {
        duplicateIndex = state.duplicates.indexOf(object);
        duplicate = duplicateIndex !== -1;
      }

      if ((state.tag !== null && state.tag !== '?') || duplicate || (state.indent !== 2 && level > 0)) {
        compact = false;
      }

      if (duplicate && state.usedDuplicates[duplicateIndex]) {
        state.dump = '*ref_' + duplicateIndex;
      } else {
        if (objectOrArray && duplicate && !state.usedDuplicates[duplicateIndex]) {
          state.usedDuplicates[duplicateIndex] = true;
        }
        if (type === '[object Object]') {
          if (block && (Object.keys(state.dump).length !== 0)) {
            writeBlockMapping(state, level, state.dump, compact);
            if (duplicate) {
              state.dump = '&ref_' + duplicateIndex + state.dump;
            }
          } else {
            writeFlowMapping(state, level, state.dump);
            if (duplicate) {
              state.dump = '&ref_' + duplicateIndex + ' ' + state.dump;
            }
          }
        } else if (type === '[object Array]') {
          var arrayLevel = (state.noArrayIndent && (level > 0)) ? level - 1 : level;
          if (block && (state.dump.length !== 0)) {
            writeBlockSequence(state, arrayLevel, state.dump, compact);
            if (duplicate) {
              state.dump = '&ref_' + duplicateIndex + state.dump;
            }
          } else {
            writeFlowSequence(state, arrayLevel, state.dump);
            if (duplicate) {
              state.dump = '&ref_' + duplicateIndex + ' ' + state.dump;
            }
          }
        } else if (type === '[object String]') {
          if (state.tag !== '?') {
            writeScalar(state, state.dump, level, iskey);
          }
        } else {
          if (state.skipInvalid) return false;
          throw new exception('unacceptable kind of an object to dump ' + type);
        }

        if (state.tag !== null && state.tag !== '?') {
          state.dump = '!<' + state.tag + '> ' + state.dump;
        }
      }

      return true;
    }

    function getDuplicateReferences(object, state) {
      var objects = [],
          duplicatesIndexes = [],
          index,
          length;

      inspectNode(object, objects, duplicatesIndexes);

      for (index = 0, length = duplicatesIndexes.length; index < length; index += 1) {
        state.duplicates.push(objects[duplicatesIndexes[index]]);
      }
      state.usedDuplicates = new Array(length);
    }

    function inspectNode(object, objects, duplicatesIndexes) {
      var objectKeyList,
          index,
          length;

      if (object !== null && typeof object === 'object') {
        index = objects.indexOf(object);
        if (index !== -1) {
          if (duplicatesIndexes.indexOf(index) === -1) {
            duplicatesIndexes.push(index);
          }
        } else {
          objects.push(object);

          if (Array.isArray(object)) {
            for (index = 0, length = object.length; index < length; index += 1) {
              inspectNode(object[index], objects, duplicatesIndexes);
            }
          } else {
            objectKeyList = Object.keys(object);

            for (index = 0, length = objectKeyList.length; index < length; index += 1) {
              inspectNode(object[objectKeyList[index]], objects, duplicatesIndexes);
            }
          }
        }
      }
    }

    function dump$1(input, options) {
      options = options || {};

      var state = new State(options);

      if (!state.noRefs) getDuplicateReferences(input, state);

      if (writeNode(state, 0, input, true, true)) return state.dump + '\n';

      return '';
    }

    function safeDump$1(input, options) {
      return dump$1(input, common.extend({ schema: default_safe }, options));
    }

    var dump_1     = dump$1;
    var safeDump_1 = safeDump$1;

    var dumper = {
    	dump: dump_1,
    	safeDump: safeDump_1
    };

    function deprecated(name) {
      return function () {
        throw new Error('Function ' + name + ' is deprecated and cannot be used.');
      };
    }


    var Type                = type;
    var Schema              = schema;
    var FAILSAFE_SCHEMA     = failsafe;
    var JSON_SCHEMA         = json;
    var CORE_SCHEMA         = core;
    var DEFAULT_SAFE_SCHEMA = default_safe;
    var DEFAULT_FULL_SCHEMA = default_full;
    var load                = loader.load;
    var loadAll             = loader.loadAll;
    var safeLoad            = loader.safeLoad;
    var safeLoadAll         = loader.safeLoadAll;
    var dump                = dumper.dump;
    var safeDump            = dumper.safeDump;
    var YAMLException       = exception;

    // Deprecated schema names from JS-YAML 2.0.x
    var MINIMAL_SCHEMA = failsafe;
    var SAFE_SCHEMA    = default_safe;
    var DEFAULT_SCHEMA = default_full;

    // Deprecated functions from JS-YAML 1.x.x
    var scan           = deprecated('scan');
    var parse$1          = deprecated('parse');
    var compose        = deprecated('compose');
    var addConstructor = deprecated('addConstructor');

    var jsYaml$1 = {
    	Type: Type,
    	Schema: Schema,
    	FAILSAFE_SCHEMA: FAILSAFE_SCHEMA,
    	JSON_SCHEMA: JSON_SCHEMA,
    	CORE_SCHEMA: CORE_SCHEMA,
    	DEFAULT_SAFE_SCHEMA: DEFAULT_SAFE_SCHEMA,
    	DEFAULT_FULL_SCHEMA: DEFAULT_FULL_SCHEMA,
    	load: load,
    	loadAll: loadAll,
    	safeLoad: safeLoad,
    	safeLoadAll: safeLoadAll,
    	dump: dump,
    	safeDump: safeDump,
    	YAMLException: YAMLException,
    	MINIMAL_SCHEMA: MINIMAL_SCHEMA,
    	SAFE_SCHEMA: SAFE_SCHEMA,
    	DEFAULT_SCHEMA: DEFAULT_SCHEMA,
    	scan: scan,
    	parse: parse$1,
    	compose: compose,
    	addConstructor: addConstructor
    };

    var jsYaml = jsYaml$1;

    //@ts-check



    const logout = () => {
      forget(OAUTH_PROVIDER_STORAGE_KEY);
      store.mutations.logout();
      console.info('[logout] redirecting to /login');
      page('/login');
    };

    /**
     * @summary Fetch the current authenticated user login and set it in the store.
     *
     * @description This function is called on every page that needs authentication.
     * It returns the login of the user or the organization. If the user is not
     * logged in, it redirects to the authentication page.
     *
     * @returns {Promise<{login: string, email: string}>} A promise that resolves to the login of the
     * authenticated user or organization.
     *
     */
    const fetchAuthenticatedUserLogin = () => {
      const loginP = getOAuthServiceAPI()
        .getAuthenticatedUser()
        .then(({ login = '' }) => {
          if (login === '') {
            throw new Error('NO_LOGIN')
          }

          store.mutations.setLogin(login);

          return login
        })
        // @ts-ignore
        .catch(errorMessage => {
          switch (errorMessage) {
            case 'INVALIDATE_TOKEN':
            case 'NO_LOGIN': {
              logout();
              break;
            }

            default:
              const message = `The access token is invalid. ${errorMessage}`;

              logMessage(message, 'fetchAuthenticatedUserLogin');
          }

          throw errorMessage
        });

      const emailP = getOAuthServiceAPI()
        .getUserEmails()
        // @ts-ignore
        .then(emails => {
          // @ts-ignore
          const email = (emails.find(e => e.primary) ?? emails[0]).email;
          store.mutations.setEmail(email);
          return email
        })
        // @ts-ignore
        .catch(err => {
          // If we can't get email addresses, we ask the user to login again
          logout();
          throw err
        });

      store.mutations.setLogin(loginP);

      return Promise.all([loginP, emailP]).then(([login, email]) => ({
        login,
        email,
      }))
    };

    /**
     * @summary Fetch the list of repositories for the current user
     * and set it in the store.
     *
     * @description This function is called on every page that needs the list of
     * repositories for the current user. It returns a promise that resolves to the
     * list of repositories. If the user is not logged in, it redirects to the
     * authentication page.
     *
     * @returns A promise that resolves to the list of
     * repositories for the current user.
     *
     */

    const fetchCurrentUserRepositories = async () => {
      const { login } = await fetchAuthenticatedUserLogin();
      const currentUserRepositoriesP = getOAuthServiceAPI()
        .getCurrentUserRepositories()
        // @ts-ignore
        .then(repos => {
          store.mutations.setReposForAccount({ login, repos });

          return repos
        });

      return currentUserRepositoriesP
    };

    /**
     *
     * @param {import('./../store.js').ResolutionOption['resolution']} resolution
     * @returns {import('./../store.js').ResolutionOption['resolution']}
     */
    function addConflictRemovalAndRedirectToResolution(resolution) {
      return function (/** @type {any} */ ...args) {
        return resolution(...args).then(() => {
          store.mutations.setConflict(undefined);
          history.back();
        })
      }
    }

    //@ts-check

    /**
     * @typedef {"in_progress" | "success" | "error"} BuildStatus
     */

    /**
     *
     * @param {ScribouilliGitRepo} scribouilliGitRepo
     * @returns
     */
    function makeBuildStatus (scribouilliGitRepo) {
      /** @type {BuildStatus} */
      let repoStatus = 'in_progress';
      /** @type {(status: BuildStatus) => any} */
      let reaction;
      /** @type {ReturnType<setTimeout> | undefined} */
      let timeout;

      function scheduleCheck(delay = 5000) {
        if (!timeout) {
          timeout = setTimeout(() => {
            buildStatusObject.checkStatus();
            timeout = undefined;
          }, delay);
        }
      }

      const buildStatusObject = {
        get status() {
          return repoStatus
        },
        /**
         *
         * @param {(status: BuildStatus) => any} callback
         */
        subscribe(callback) {
          console.log('subscribe reaction.. ', callback);
          reaction = callback;
        },
        checkStatus() {
          return (
            getOAuthServiceAPI()
              .getPagesWebsiteDeploymentStatus(scribouilliGitRepo)
              // @ts-ignore
              .then(status => {
                logMessage(
                  `GitHub deployment's status is ${status}`,
                  'buildStatus.checkStatus',
                );

                if (['in_progress', 'success', 'error'].includes(status)) {
                  repoStatus = status;
                } else {
                  repoStatus = 'in_progress';
                }

                if (reaction) {
                  reaction(repoStatus);
                }

                if (repoStatus === 'in_progress') {
                  scheduleCheck();
                }
              })
              .catch(() => {
                repoStatus = 'error';
                if (reaction) {
                  reaction(repoStatus);
                }
              })
          )
        },
        setBuildingAndCheckStatusLater(t = 30000) {
          repoStatus = 'in_progress';
          // @ts-ignore
          clearTimeout(timeout);
          timeout = undefined;
          scheduleCheck(t);
        },
      };

      buildStatusObject.checkStatus();
      return buildStatusObject
    }

    //@ts-check

    /**
     * @param {string} fileName
     * @param {string|Uint8Array} content
     * @param {string} [commitMessage]
     *
     * @returns {Promise<string>}
     */
    const writeFileAndCommit = (fileName, content, commitMessage) => {
      if (typeof commitMessage !== 'string' || commitMessage === '') {
        commitMessage = `Modification du fichier ${fileName}`;
      }
      const {gitAgent} = store.state;

      if(!gitAgent){
        throw new TypeError('gitAgent is undefined')
      }

      return gitAgent.writeFile(fileName, content).then(() => {
        // @ts-ignore
        return gitAgent.commit(commitMessage)
      })
    };

    /**
     * @param {string} fileName
     * @param {string|Uint8Array} content
     * @param {string} [commitMessage]
     *
     * @returns {ReturnType<typeof GitAgent.prototype.safePush>}
     */
    const writeFileAndPushChanges = (
      fileName,
      content,
      commitMessage = '',
    ) => {
      const {gitAgent} = store.state;

      if(!gitAgent){
        throw new TypeError('gitAgent is undefined')
      }

      return writeFileAndCommit(fileName, content, commitMessage)
        .then(() => gitAgent.safePush())
    };

    /**
     * @param {string} fileName
     * @param {string} [commitMessage]
     *
     * @returns {ReturnType<typeof GitAgent.prototype.commit>}
     */
    const deleteFileAndCommit = (fileName, commitMessage = '') => {
      const {gitAgent} = store.state;

      if(!gitAgent){
        throw new TypeError('gitAgent is undefined')
      }

      if (commitMessage === '') {
        commitMessage = `Suppression du fichier ${fileName}`;
      }

      return gitAgent.removeFile(fileName).then(() => {
        return gitAgent.commit(commitMessage)
      })
    };

    /**
     * @param {string} fileName
     * @param {string} [commitMessage]
     *
     * @returns {ReturnType<typeof GitAgent.prototype.safePush>}
     */
    const deleteFileAndPushChanges = (fileName, commitMessage) => {
      const {gitAgent} = store.state;

      if(!gitAgent){
        throw new TypeError('gitAgent is undefined')
      }

      return deleteFileAndCommit(fileName, commitMessage)
        .then(() => gitAgent.safePush())
    };

    var optionalByteOrderMark = '\\ufeff?';
    var platform = typeof process !== 'undefined' ? process.platform : '';
    var pattern = '^(' +
      optionalByteOrderMark +
      '(= yaml =|---)' +
      '$([\\s\\S]*?)' +
      '^(?:\\2|\\.\\.\\.)\\s*' +
      '$' +
      (platform === 'win32' ? '\\r?' : '') +
      '(?:\\n)?)';
    // NOTE: If this pattern uses the 'g' flag the `regex` variable definition will
    // need to be moved down into the functions that use it.
    var regex = new RegExp(pattern, 'm');

    var frontMatter = extractor;
    var test_1 = test;

    function extractor (string, options) {
      string = string || '';
      var defaultOptions = { allowUnsafe: false };
      options = options instanceof Object ? { ...defaultOptions, ...options } : defaultOptions;
      options.allowUnsafe = Boolean(options.allowUnsafe);
      var lines = string.split(/(\r?\n)/);
      if (lines[0] && /= yaml =|---/.test(lines[0])) {
        return parse(string, options.allowUnsafe)
      } else {
        return {
          attributes: {},
          body: string,
          bodyBegin: 1
        }
      }
    }

    function computeLocation (match, body) {
      var line = 1;
      var pos = body.indexOf('\n');
      var offset = match.index + match[0].length;

      while (pos !== -1) {
        if (pos >= offset) {
          return line
        }
        line++;
        pos = body.indexOf('\n', pos + 1);
      }

      return line
    }

    function parse (string, allowUnsafe) {
      var match = regex.exec(string);
      if (!match) {
        return {
          attributes: {},
          body: string,
          bodyBegin: 1
        }
      }

      var loader = allowUnsafe ? jsYaml.load : jsYaml.safeLoad;
      var yaml = match[match.length - 1].replace(/^\s+|\s+$/g, '');
      var attributes = loader(yaml) || {};
      var body = string.replace(match[0], '');
      var line = computeLocation(match, string);

      return {
        attributes: attributes,
        body: body,
        bodyBegin: line,
        frontmatter: yaml
      }
    }

    function test (string) {
      string = string || '';

      return regex.test(string)
    }
    frontMatter.test = test_1;

    //@ts-check

    /**
     *
     * @param {string} filename
     * @returns {boolean}
     */
    function keepMarkdownAndHTMLFiles(filename) {
      return filename.endsWith('.md') || filename.endsWith('.html')
    }

    /**
     *
     * @returns {Promise<Page[]>}
     */
    async function getPagesList() {
      const {gitAgent} = store.state;

      if(!gitAgent){
        throw new TypeError('gitAgent is undefined')
      }

      const allFiles = await gitAgent.listFiles('');

      return Promise.all(
        allFiles.filter(keepMarkdownAndHTMLFiles).map(async filename => {
          const content = await gitAgent.getFile(filename);
          const { attributes: data, body: markdownContent } = frontMatter(
            content.toString(),
          );

          return {
            title: data?.title,
            index: data?.order,
            // no `in_menu` proprerty is interpreted as the page should be in the menu
            inMenu: data?.in_menu === true || data?.in_menu === undefined,
            path: filename,
            content: markdownContent,
          }
        }),
      )
    }

    /**
     * @param {string} fileName
     *
     * @returns {ReturnType<typeof deleteFileAndPushChanges>}
     */
    const deletePage = fileName => {
      const { state } = store;

      store.mutations.setPages(
        state.pages &&
          state.pages.filter(page => {
            return page.path !== fileName
          }),
      );

      return deleteFileAndPushChanges(
        fileName,
        `Suppression de la page ${fileName}`,
      )
    };

    /**
     * @param {string} content
     * @param {string} title
     * @param {number} index
     *
     * @returns {ReturnType<typeof writeFileAndPushChanges>}
     */
    const createPage = (content, title, index) => {
      const { state } = store;
      const fileName = makeFileNameFromTitle(title);

      let newPages =
        state.pages?.filter(page => {
          return page.path !== fileName
        }) || [];
      newPages.push({ title: title, path: fileName, index });

      store.mutations.setPages(newPages);

      const finalContent = `${
    title ? makePageFrontMatter(title, index) + '\n' : ''
  }${content} `;

      return writeFileAndPushChanges(
        fileName,
        finalContent,
        `Création de la page : ${title}`,
      )
    };

    /**
     * @param {string} fileName
     * @param {string} content
     * @param {string} title
     * @param {number} index
     *
     * @returns {ReturnType<typeof writeFileAndPushChanges>}
     */
    const updatePage = async (fileName, title, content, index) => {
      const {gitAgent} = store.state;

      if(!gitAgent){
        throw new TypeError('gitAgent is undefined')
      }
      let targetFileName = fileName;

      if (fileName !== 'index.md') {
        targetFileName = makeFileNameFromTitle(title);
      }

      // If the title has changed, we need to delete the old page and
      // create a new one because the file name has changed.
      if (fileName && fileName !== targetFileName) {
        await gitAgent.removeFile(fileName);
      }

      const finalContent = `${
    title ? makePageFrontMatter(title, index) + '\n' : ''
  }${content} `;

      return writeFileAndPushChanges(
        targetFileName,
        finalContent,
        `Modification de la page : ${title}`,
      )
    };

    //@ts-check

    /**
     *
     * @returns {Promise<Article[]>}
     */
    async function getArticlesList() {
      const {gitAgent} = store.state;

      if(!gitAgent){
        throw new TypeError('gitAgent is undefined')
      }

      const ARTICLES_DIRECTORY = '_posts';

      const allFiles = await gitAgent.listFiles(ARTICLES_DIRECTORY);

      return Promise.all(
        allFiles.filter(keepMarkdownAndHTMLFiles).map(async filename => {
          const fullName = `${ARTICLES_DIRECTORY}/${filename}`;
          const content = await gitAgent.getFile(fullName);
          const { attributes: data, body: markdownContent } = frontMatter(
            content.toString(),
          );
          return {
            title: data?.title,
            path: fullName,
            content: markdownContent,
          }
        }),
      )
    }

    /**
     * @param {string} fileName
     *
     * @returns {ReturnType<typeof deleteFileAndPushChanges>}
     */
    const deleteArticle = fileName => {
      const { state } = store;
      

      store.mutations.setArticles(
        (state.articles ?? []).filter(article => {
          return article.path !== fileName
        }),
      );

      return deleteFileAndPushChanges(
        fileName,
        `Suppression de l'article ${fileName}`,
      )
    };

    /**
     * @param {string} title
     * @param {string} content
     *
     * @returns {ReturnType<typeof writeFileAndPushChanges>}
     */
    const createArticle = (title, content) => {
      const { state } = store;

      const date = new Date();
      const targetFileName = makeArticleFileName(title, date);

      let newArticles =
        state.articles?.filter(article => {
          return article.path !== targetFileName
        }) || [];
      newArticles.push({ title: title, path: targetFileName });

      store.mutations.setArticles(newArticles);

      const finalContent = `${
    title ? makeArticleFrontMatter(title) + '\n' : ''
  }${content}`;

      return writeFileAndPushChanges(
        targetFileName,
        finalContent,
        `Création de l'article : ${title}`,
      )
    };

    /**
     * @param {string} fileName
     * @param {string} content
     * @param {string} title
     *
     * @returns {ReturnType<typeof writeFileAndPushChanges>}
     */
    const updateArticle = async (fileName, title, content) => {
      const {gitAgent} = store.state;

      if(!gitAgent){
        throw new TypeError('gitAgent is undefined')
      }

      const existingDate = fileName.slice(
        '_posts/'.length,
        '_posts/YYYY-MM-DD'.length,
      );
      const date = new Date(existingDate);

      const targetFileName = makeArticleFileName(title, date);

      // If the title has changed, we need to delete the old article and
      // create a new one because the file name has changed.
      if (fileName && fileName !== targetFileName) {
        await gitAgent.removeFile(fileName);
      }

      const finalContent = `${
    title ? makeArticleFrontMatter(title) + '\n' : ''
  }${content}`;

      return writeFileAndPushChanges(
        targetFileName,
        finalContent,
        `Modification de l'article : ${title}`,
      )
    };

    //@ts-check

    /** @typedef {import('isomorphic-git')} isomorphicGit */

    const getCurrentRepoPages = () => {
      return getPagesList().then(store.mutations.setPages).catch(handleErrors)
    };

    const getCurrentRepoArticles = () => {
      return getArticlesList().then(store.mutations.setArticles).catch(handleErrors)
    };

    /**
     * @summary Set the current repository from the owner and the name
     * of the repository in the URL
     *
     * @description This function is called on every page that needs a current
     * repository to be functionnal. It sets the current repository in the store,
     * but also the build status and the site repo config. If the user is not
     * logged in, it redirects to the authentication page.
     *
     * @param {string} querystring
     * @returns {Promise<void>}
     */
    const setCurrentRepositoryFromQuerystring = async querystring => {
      const params = new URLSearchParams(querystring);
      const repoName = params.get('repoName');
      const owner = params.get('account');

      const oAuthProvider = store.state.oAuthProvider;

      let message;

      if (!repoName || !owner || !oAuthProvider) {
        if (!repoName) {
          message = `Missing parameter 'repoName' in URL`;
        } else {
          if (!owner) {
            message = `Missing parameter 'account' in URL`;
          } else {
            message = `Missing store.state.oAuthProvider`;
          }
        }

        console.info('[missing URL param or oauthConfig] redirecting to /', message);
        page('/');
        throw new Error(message)
      }

      const origin = oAuthProvider.origin;
      const repoId = makeRepoId(owner, repoName);

      const scribouilliGitRepo = new ScribouilliGitRepo({
        owner,
        repoName,
        repoId,
        origin: origin,
        publicRepositoryURL: makePublicRepositoryURL(owner, repoName, origin),
        gitServiceProvider: getOAuthServiceAPI(),
      });

      store.mutations.setCurrentRepository(scribouilliGitRepo);

      const gitAgent = new GitAgent({
        repoId,
        remoteURL: `${origin}/${repoId}.git`,
        onMergeConflict : resolutionOptions => {
          store.mutations.setConflict(resolutionOptions);
        },
        auth: getOAuthServiceAPI().getOauthUsernameAndPassword()
      });

      store.mutations.setGitAgent(gitAgent);

      const { login, email } = await fetchAuthenticatedUserLogin();

      await gitAgent.pullOrCloneRepo();
      await gitAgent.setAuthor(login, email);
      await setBaseUrlInConfigIfNecessary();

      getCurrentRepoArticles();
      getCurrentRepoPages();

      setBuildStatus(scribouilliGitRepo);
    };

    /**
     * @param {ScribouilliGitRepo} scribouilliGitRepo
     */
    const setBuildStatus = scribouilliGitRepo => {
      store.mutations.setBuildStatus(makeBuildStatus(scribouilliGitRepo));
      /*
      Appel sans vérification,
      On suppose qu'au chargement initial,
      on peut faire confiance à ce que renvoit l'API
      */
      store.state.buildStatus.checkStatus();
    };

    /**
     * @description if baseurl param is set, always update the config with it
     * otherwise, wait for currentRepository.publishedWebsiteURL and
     * compute the new config.baseurl from it
     *
     * @param {string} [baseUrl]
     * @returns {Promise<any>}
     */
    const setBaseUrlInConfigIfNecessary = async baseUrl => {
      const currentRepository = store.state.currentRepository;

      if (!currentRepository) {
        throw new TypeError('currentRepository is undefined')
      }

      let newBaseUrl;

      if (baseUrl) {
        newBaseUrl = baseUrl.replace(/\/$/, '');
      } else {
        if (currentRepository.origin === 'https://github.com') {
          const publishedWebsiteURL = await currentRepository.publishedWebsiteURL;
          const url = new URL(publishedWebsiteURL);

          newBaseUrl = url.pathname.replace(/\/$/, '');
        } else {
          // GitLab instances use Single Domain Pages
          newBaseUrl = '';
        }
      }

      const config = await getCurrentRepoConfig();
      /** @type {string} */
      const currentBaseURL = config.baseurl || '';

      if (currentBaseURL === newBaseUrl) {
        // the config does not need to be changed, so let's skip both write/commit/push
        return
      } else {
        if (newBaseUrl === '') {
          console.log('delete baseurl from config');
          delete config.baseurl;
        } else {
          console.log('update baseurl in config');
          config.baseurl = newBaseUrl;
        }

        const configYmlContent = jsYaml.dump(config);

        console.log('configYmlContent', configYmlContent);
        return writeFileAndPushChanges(
          '_config.yml',
          configYmlContent,
          'Mise à jour de `baseurl` dans la config',
        )
      }
    };

    /**
     * @returns {Promise<any>}
     */
    const getCurrentRepoConfig = () => {
      const {currentRepository, gitAgent} = store.state;

      if (!currentRepository) {
        throw new TypeError('currentRepository is undefined')
      }
      if (!gitAgent) {
        throw new TypeError('gitAgent is undefined')
      }

      return gitAgent
        .getFile('_config.yml')
        .then(configStr => jsYaml.load(configStr))
        .catch(handleErrors)
    };

    /**
     * @param {string} css
     * @returns {ReturnType<typeof writeFileAndPushChanges>}
     */
    function saveCustomCSS(css) {
      store.mutations.setTheme(css);
      store.state.buildStatus.setBuildingAndCheckStatusLater(10000);
      return writeFileAndPushChanges(
        CUSTOM_CSS_PATH,
        css,
        'mise à jour du ficher de styles custom',
      )
    }

    //@ts-check

    /** @typedef {import('isomorphic-git')} isomorphicGit */

    /**
     * @param {ScribouilliGitRepo} scribouilliGitRepo
     * @returns {Promise<void>}
     */
    const waitRepoReady = scribouilliGitRepo => {
      return new Promise(resolve => {
        const timer = setInterval(() => {
          getOAuthServiceAPI()
            .isRepositoryReady(scribouilliGitRepo)
            // @ts-ignore
            .then(res => {
              if (res) {
                clearInterval(timer);
                resolve();
              }
            });
        }, 1000);
      })
    };

    /**
     * @returns {Promise<void>}
     */
    const waitOauthProvider = () => {
      return new Promise(resolve => {
        if (store.state.oAuthProvider) resolve();
        else {
          const unsubscribe = store.subscribe(state => {
            if (state.oAuthProvider) {
              unsubscribe();
              resolve();
            }
          });
        }
      })
    };

    /**
     * @returns {Promise<ReturnType<isomorphicGit["setConfig"]>>}
     */
    const setupLocalRepository = async () => {
      
      const login = await store.state.login;
      const {gitAgent, email} = store.state;

      if(!gitAgent){
        throw new TypeError('gitAgent is undefined')
      }
      if (!login) {
        throw new TypeError(`missing login in setupLocalRepository`)
      }
      if (!email) {
        throw new TypeError(`missing email in setupLocalRepository`)
      }

      await gitAgent.clone();

      return gitAgent.setAuthor(login, email)
    };

    /**
     * @summary guess the published URL until a call to OAuthServiceAPI.getPublishedWebsiteURL is made
     *
     * @param {ScribouilliGitRepo} _
     * @returns {string}
     */
    function guessBaseURL({ owner, repoName, origin }) {
      if (origin === 'https://github.com') {
        const publishedHostname = `${owner.toLowerCase()}.github.io`;
        repoName = repoName.toLowerCase();

        return publishedHostname === repoName ? '' : `/${repoName}`
      } else if (
        origin === 'https://gitlab.com' ||
        origin === 'https://git.scribouilli.org'
      ) {
        // because of Single Pages Domain enabled by default
        return `/`
      }

      return ''
    }

    /**
     * @summary Create a repository for the current account
     *
     * @description This function creates a repository for the current account
     * and set a GitHub Pages branch. It redirects to the
     * list of pages for the atelier.
     *
     * @param {string} repoName - The name of the repository to create
     * @param {GitSiteTemplate} template - The git site template to use
     *
     * @returns {Promise<void>} A promise that resolves when the repository
     * is created.
     *
     * @throws {string} An error message if the repository cannot be created.
     *
     */
    const createRepositoryForCurrentAccount = async (repoName, template) => {
      const owner = await store.state.login;

      if (!owner) {
        throw new TypeError(`missing login in createRepositoryForCurrentAccount`)
      }

      const escapedRepoName = repoName
        .normalize('NFD')
        .replace(/[\u0300-\u036f]/g, '')
        .replace(/[^a-zA-Z0-9_-]+/g, '-')
        .toLowerCase();

      const oAuthProvider = store.state.oAuthProvider;
      if (!oAuthProvider) {
        console.error('Missing oAuthProvider');
        page('/');
        return
      }

      const origin = oAuthProvider.origin;

      const scribouilliGitRepo = new ScribouilliGitRepo({
        owner: owner,
        repoName: escapedRepoName,
        origin: origin,
        publicRepositoryURL: makePublicRepositoryURL(
          owner,
          escapedRepoName,
          origin,
        ),
        gitServiceProvider: getOAuthServiceAPI(),
      });

      store.mutations.setCurrentRepository(scribouilliGitRepo);

      const repoId = makeRepoId(owner, repoName);

      const gitAgent = new GitAgent({
        repoId,
        remoteURL: `${origin}/${repoId}.git`,
        onMergeConflict : (/** @type {import("./../store.js").ResolutionOption[] | undefined} */ resolutionOptions) => {
          store.mutations.setConflict(resolutionOptions);
        },
        auth: getOAuthServiceAPI().getOauthUsernameAndPassword()
      });

      store.mutations.setGitAgent(gitAgent);

      return (
        getOAuthServiceAPI()
          .createDefaultRepository(scribouilliGitRepo, template)
          .then(() => {
            // Il est nécessaire d'attendre que le repo soit prêt sur la remote
            // avant de pouvoir le cloner localement.
            return waitRepoReady(scribouilliGitRepo)
          })
          .then(() => {
            return setupLocalRepository()
          })
          .then(() => {
            return getOAuthServiceAPI().deploy(scribouilliGitRepo)
          })
          .then(() => {
            return setBaseUrlInConfigIfNecessary(guessBaseURL(scribouilliGitRepo))
          })
          .then(() => {
            page(makeAtelierListPageURL(scribouilliGitRepo));
          })
          // @ts-ignore
          .catch(errorMessage => {
            logMessage(errorMessage, 'createRepositoryForCurrentAccount');
            throw errorMessage
          })
      )
    };

    function noop() { }
    function assign(tar, src) {
        // @ts-ignore
        for (const k in src)
            tar[k] = src[k];
        return tar;
    }
    // Adapted from https://github.com/then/is-promise/blob/master/index.js
    // Distributed under MIT License https://github.com/then/is-promise/blob/master/LICENSE
    function is_promise(value) {
        return !!value && (typeof value === 'object' || typeof value === 'function') && typeof value.then === 'function';
    }
    function add_location(element, file, line, column, char) {
        element.__svelte_meta = {
            loc: { file, line, column, char }
        };
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    let src_url_equal_anchor;
    function src_url_equal(element_src, url) {
        if (!src_url_equal_anchor) {
            src_url_equal_anchor = document.createElement('a');
        }
        src_url_equal_anchor.href = url;
        return element_src === src_url_equal_anchor.href;
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }
    function create_slot(definition, ctx, $$scope, fn) {
        if (definition) {
            const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
            return definition[0](slot_ctx);
        }
    }
    function get_slot_context(definition, ctx, $$scope, fn) {
        return definition[1] && fn
            ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
            : $$scope.ctx;
    }
    function get_slot_changes(definition, $$scope, dirty, fn) {
        if (definition[2] && fn) {
            const lets = definition[2](fn(dirty));
            if ($$scope.dirty === undefined) {
                return lets;
            }
            if (typeof lets === 'object') {
                const merged = [];
                const len = Math.max($$scope.dirty.length, lets.length);
                for (let i = 0; i < len; i += 1) {
                    merged[i] = $$scope.dirty[i] | lets[i];
                }
                return merged;
            }
            return $$scope.dirty | lets;
        }
        return $$scope.dirty;
    }
    function update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {
        if (slot_changes) {
            const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
            slot.p(slot_context, slot_changes);
        }
    }
    function get_all_dirty_from_scope($$scope) {
        if ($$scope.ctx.length > 32) {
            const dirty = [];
            const length = $$scope.ctx.length / 32;
            for (let i = 0; i < length; i++) {
                dirty[i] = -1;
            }
            return dirty;
        }
        return -1;
    }
    function null_to_empty(value) {
        return value == null ? '' : value;
    }
    function append(target, node) {
        target.appendChild(node);
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        if (node.parentNode) {
            node.parentNode.removeChild(node);
        }
    }
    function destroy_each(iterations, detaching) {
        for (let i = 0; i < iterations.length; i += 1) {
            if (iterations[i])
                iterations[i].d(detaching);
        }
    }
    function element(name) {
        return document.createElement(name);
    }
    function text(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text(' ');
    }
    function empty() {
        return text('');
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function prevent_default(fn) {
        return function (event) {
            event.preventDefault();
            // @ts-ignore
            return fn.call(this, event);
        };
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function to_number(value) {
        return value === '' ? null : +value;
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function set_input_value(input, value) {
        input.value = value == null ? '' : value;
    }
    function set_style(node, key, value, important) {
        if (value === null) {
            node.style.removeProperty(key);
        }
        else {
            node.style.setProperty(key, value, important ? 'important' : '');
        }
    }
    function select_option(select, value, mounting) {
        for (let i = 0; i < select.options.length; i += 1) {
            const option = select.options[i];
            if (option.__value === value) {
                option.selected = true;
                return;
            }
        }
        if (!mounting || value !== undefined) {
            select.selectedIndex = -1; // no option should be selected
        }
    }
    function select_value(select) {
        const selected_option = select.querySelector(':checked');
        return selected_option && selected_option.__value;
    }
    function custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, bubbles, cancelable, detail);
        return e;
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error('Function called outside component initialization');
        return current_component;
    }
    /**
     * Creates an event dispatcher that can be used to dispatch [component events](/docs#template-syntax-component-directives-on-eventname).
     * Event dispatchers are functions that can take two arguments: `name` and `detail`.
     *
     * Component events created with `createEventDispatcher` create a
     * [CustomEvent](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent).
     * These events do not [bubble](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture).
     * The `detail` argument corresponds to the [CustomEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/detail)
     * property and can contain any type of data.
     *
     * https://svelte.dev/docs#run-time-svelte-createeventdispatcher
     */
    function createEventDispatcher() {
        const component = get_current_component();
        return (type, detail, { cancelable = false } = {}) => {
            const callbacks = component.$$.callbacks[type];
            if (callbacks) {
                // TODO are there situations where events could be dispatched
                // in a server (non-DOM) environment?
                const event = custom_event(type, detail, { cancelable });
                callbacks.slice().forEach(fn => {
                    fn.call(component, event);
                });
                return !event.defaultPrevented;
            }
            return true;
        };
    }
    // TODO figure out if we still want to support
    // shorthand events, or if we want to implement
    // a real bubbling mechanism
    function bubble(component, event) {
        const callbacks = component.$$.callbacks[event.type];
        if (callbacks) {
            // @ts-ignore
            callbacks.slice().forEach(fn => fn.call(this, event));
        }
    }

    const dirty_components = [];
    const binding_callbacks = [];
    let render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = /* @__PURE__ */ Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    // flush() calls callbacks in this order:
    // 1. All beforeUpdate callbacks, in order: parents before children
    // 2. All bind:this callbacks, in reverse order: children before parents.
    // 3. All afterUpdate callbacks, in order: parents before children. EXCEPT
    //    for afterUpdates called during the initial onMount, which are called in
    //    reverse order: children before parents.
    // Since callbacks might update component values, which could trigger another
    // call to flush(), the following steps guard against this:
    // 1. During beforeUpdate, any updated components will be added to the
    //    dirty_components array and will cause a reentrant call to flush(). Because
    //    the flush index is kept outside the function, the reentrant call will pick
    //    up where the earlier call left off and go through all dirty components. The
    //    current_component value is saved and restored so that the reentrant call will
    //    not interfere with the "parent" flush() call.
    // 2. bind:this callbacks cannot trigger new flush() calls.
    // 3. During afterUpdate, any updated components will NOT have their afterUpdate
    //    callback called a second time; the seen_callbacks set, outside the flush()
    //    function, guarantees this behavior.
    const seen_callbacks = new Set();
    let flushidx = 0; // Do *not* move this inside the flush() function
    function flush() {
        // Do not reenter flush while dirty components are updated, as this can
        // result in an infinite loop. Instead, let the inner flush handle it.
        // Reentrancy is ok afterwards for bindings etc.
        if (flushidx !== 0) {
            return;
        }
        const saved_component = current_component;
        do {
            // first, call beforeUpdate functions
            // and update components
            try {
                while (flushidx < dirty_components.length) {
                    const component = dirty_components[flushidx];
                    flushidx++;
                    set_current_component(component);
                    update(component.$$);
                }
            }
            catch (e) {
                // reset dirty state to not end up in a deadlocked state and then rethrow
                dirty_components.length = 0;
                flushidx = 0;
                throw e;
            }
            set_current_component(null);
            dirty_components.length = 0;
            flushidx = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        seen_callbacks.clear();
        set_current_component(saved_component);
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }
    /**
     * Useful for example to execute remaining `afterUpdate` callbacks before executing `destroy`.
     */
    function flush_render_callbacks(fns) {
        const filtered = [];
        const targets = [];
        render_callbacks.forEach((c) => fns.indexOf(c) === -1 ? filtered.push(c) : targets.push(c));
        targets.forEach((c) => c());
        render_callbacks = filtered;
    }
    const outroing = new Set();
    let outros;
    function group_outros() {
        outros = {
            r: 0,
            c: [],
            p: outros // parent group
        };
    }
    function check_outros() {
        if (!outros.r) {
            run_all(outros.c);
        }
        outros = outros.p;
    }
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
        else if (callback) {
            callback();
        }
    }

    function handle_promise(promise, info) {
        const token = info.token = {};
        function update(type, index, key, value) {
            if (info.token !== token)
                return;
            info.resolved = value;
            let child_ctx = info.ctx;
            if (key !== undefined) {
                child_ctx = child_ctx.slice();
                child_ctx[key] = value;
            }
            const block = type && (info.current = type)(child_ctx);
            let needs_flush = false;
            if (info.block) {
                if (info.blocks) {
                    info.blocks.forEach((block, i) => {
                        if (i !== index && block) {
                            group_outros();
                            transition_out(block, 1, 1, () => {
                                if (info.blocks[i] === block) {
                                    info.blocks[i] = null;
                                }
                            });
                            check_outros();
                        }
                    });
                }
                else {
                    info.block.d(1);
                }
                block.c();
                transition_in(block, 1);
                block.m(info.mount(), info.anchor);
                needs_flush = true;
            }
            info.block = block;
            if (info.blocks)
                info.blocks[index] = block;
            if (needs_flush) {
                flush();
            }
        }
        if (is_promise(promise)) {
            const current_component = get_current_component();
            promise.then(value => {
                set_current_component(current_component);
                update(info.then, 1, info.value, value);
                set_current_component(null);
            }, error => {
                set_current_component(current_component);
                update(info.catch, 2, info.error, error);
                set_current_component(null);
                if (!info.hasCatch) {
                    throw error;
                }
            });
            // if we previously had a then/catch block, destroy it
            if (info.current !== info.pending) {
                update(info.pending, 0);
                return true;
            }
        }
        else {
            if (info.current !== info.then) {
                update(info.then, 1, info.value, promise);
                return true;
            }
            info.resolved = promise;
        }
    }
    function update_await_block_branch(info, ctx, dirty) {
        const child_ctx = ctx.slice();
        const { resolved } = info;
        if (info.current === info.then) {
            child_ctx[info.value] = resolved;
        }
        if (info.current === info.catch) {
            child_ctx[info.error] = resolved;
        }
        info.block.p(child_ctx, dirty);
    }
    function create_component(block) {
        block && block.c();
    }
    function mount_component(component, target, anchor, customElement) {
        const { fragment, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        if (!customElement) {
            // onMount happens before the initial afterUpdate
            add_render_callback(() => {
                const new_on_destroy = component.$$.on_mount.map(run).filter(is_function);
                // if the component was destroyed immediately
                // it will update the `$$.on_destroy` reference to `null`.
                // the destructured on_destroy may still reference to the old array
                if (component.$$.on_destroy) {
                    component.$$.on_destroy.push(...new_on_destroy);
                }
                else {
                    // Edge case - component was destroyed immediately,
                    // most likely as a result of a binding initialising
                    run_all(new_on_destroy);
                }
                component.$$.on_mount = [];
            });
        }
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            flush_render_callbacks($$.after_update);
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const $$ = component.$$ = {
            fragment: null,
            ctx: [],
            // state
            props,
            update: noop,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            on_disconnect: [],
            before_update: [],
            after_update: [],
            context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false,
            root: options.target || parent_component.$$.root
        };
        append_styles && append_styles($$.root);
        let ready = false;
        $$.ctx = instance
            ? instance(component, options.props || {}, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor, options.customElement);
            flush();
        }
        set_current_component(parent_component);
    }
    /**
     * Base class for Svelte components. Used when dev=false.
     */
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop;
        }
        $on(type, callback) {
            if (!is_function(callback)) {
                return noop;
            }
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    function dispatch_dev(type, detail) {
        document.dispatchEvent(custom_event(type, Object.assign({ version: '3.58.0' }, detail), { bubbles: true }));
    }
    function append_dev(target, node) {
        dispatch_dev('SvelteDOMInsert', { target, node });
        append(target, node);
    }
    function insert_dev(target, node, anchor) {
        dispatch_dev('SvelteDOMInsert', { target, node, anchor });
        insert(target, node, anchor);
    }
    function detach_dev(node) {
        dispatch_dev('SvelteDOMRemove', { node });
        detach(node);
    }
    function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation, has_stop_immediate_propagation) {
        const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];
        if (has_prevent_default)
            modifiers.push('preventDefault');
        if (has_stop_propagation)
            modifiers.push('stopPropagation');
        if (has_stop_immediate_propagation)
            modifiers.push('stopImmediatePropagation');
        dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });
        const dispose = listen(node, event, handler, options);
        return () => {
            dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });
            dispose();
        };
    }
    function attr_dev(node, attribute, value) {
        attr(node, attribute, value);
        if (value == null)
            dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });
        else
            dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });
    }
    function prop_dev(node, property, value) {
        node[property] = value;
        dispatch_dev('SvelteDOMSetProperty', { node, property, value });
    }
    function set_data_dev(text, data) {
        data = '' + data;
        if (text.data === data)
            return;
        dispatch_dev('SvelteDOMSetData', { node: text, data });
        text.data = data;
    }
    function validate_each_argument(arg) {
        if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {
            let msg = '{#each} only iterates over array-like objects.';
            if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {
                msg += ' You can use a spread to convert this iterable into an array.';
            }
            throw new Error(msg);
        }
    }
    function validate_slots(name, slot, keys) {
        for (const slot_key of Object.keys(slot)) {
            if (!~keys.indexOf(slot_key)) {
                console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
            }
        }
    }
    /**
     * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.
     */
    class SvelteComponentDev extends SvelteComponent {
        constructor(options) {
            if (!options || (!options.target && !options.$$inline)) {
                throw new Error("'target' is a required option");
            }
            super();
        }
        $destroy() {
            super.$destroy();
            this.$destroy = () => {
                console.warn('Component was already destroyed'); // eslint-disable-line no-console
            };
        }
        $capture_state() { }
        $inject_state() { }
    }

    //@ts-check

    /** @typedef {import("./store.js").ScribouilliState} ScribouilliState */
    /** @typedef {(state: ScribouilliState) => any} MapStateToPropsFunction */

    /** @type {SvelteComponent} */
    let currentComponent;
    /** @type {MapStateToPropsFunction} */
    let currentMapStateToProps = (_) => {};

    /**
     * 
     * @param {SvelteComponent} newComponent 
     * @param {MapStateToPropsFunction} newMapStateToProps 
     */
    function replaceComponent(newComponent, newMapStateToProps) {
      if (!newMapStateToProps) {
        throw new Error("Missing _mapStateToProps in replaceComponent");
      }

      if (currentComponent) currentComponent.$destroy();

      currentComponent = newComponent;
      currentMapStateToProps = newMapStateToProps;
    }

    /**
     * 
     * @param {ScribouilliState} state 
     */
    function render(state) {
      const props = currentMapStateToProps(state);
      // @ts-ignore
      if (props) {
        currentComponent.$set(props);
      }
    }

    store.subscribe(render);

    /* assets/scripts/components/Header.svelte generated by Svelte v3.58.0 */

    const file$g = "assets/scripts/components/Header.svelte";

    // (68:2) {#if currentRepository}
    function create_if_block_4(ctx) {
    	let await_block_anchor;
    	let promise;

    	let info = {
    		ctx,
    		current: null,
    		token: null,
    		hasCatch: false,
    		pending: create_pending_block_1,
    		then: create_then_block_1,
    		catch: create_catch_block_1,
    		value: 14
    	};

    	handle_promise(promise = /*publishedWebsiteURL*/ ctx[5], info);

    	const block = {
    		c: function create() {
    			await_block_anchor = empty();
    			info.block.c();
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, await_block_anchor, anchor);
    			info.block.m(target, info.anchor = anchor);
    			info.mount = () => await_block_anchor.parentNode;
    			info.anchor = await_block_anchor;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			info.ctx = ctx;

    			if (dirty & /*publishedWebsiteURL*/ 32 && promise !== (promise = /*publishedWebsiteURL*/ ctx[5]) && handle_promise(promise, info)) ; else {
    				update_await_block_branch(info, ctx, dirty);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(await_block_anchor);
    			info.block.d(detaching);
    			info.token = null;
    			info = null;
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4.name,
    		type: "if",
    		source: "(68:2) {#if currentRepository}",
    		ctx
    	});

    	return block;
    }

    // (1:0) <script>   /** @type {any}
    function create_catch_block_1(ctx) {
    	const block = { c: noop, m: noop, p: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_catch_block_1.name,
    		type: "catch",
    		source: "(1:0) <script>   /** @type {any}",
    		ctx
    	});

    	return block;
    }

    // (78:4) {:then publishedURL}
    function create_then_block_1(ctx) {
    	let div;
    	let p;
    	let a;
    	let t0_value = /*publishedURL*/ ctx[14] + "";
    	let t0;
    	let a_href_value;
    	let t1;
    	let if_block = /*buildStatusClass*/ ctx[9] && create_if_block_6(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			p = element("p");
    			a = element("a");
    			t0 = text(t0_value);
    			t1 = space();
    			if (if_block) if_block.c();
    			attr_dev(a, "href", a_href_value = /*publishedURL*/ ctx[14]);
    			attr_dev(a, "class", "project-name");
    			attr_dev(a, "target", "_blank");
    			add_location(a, file$g, 80, 10, 1930);
    			attr_dev(p, "class", "svelte-o3pa4w");
    			add_location(p, file$g, 79, 8, 1916);
    			attr_dev(div, "class", "svelte-o3pa4w");
    			add_location(div, file$g, 78, 6, 1902);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, p);
    			append_dev(p, a);
    			append_dev(a, t0);
    			append_dev(div, t1);
    			if (if_block) if_block.m(div, null);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*publishedWebsiteURL*/ 32 && t0_value !== (t0_value = /*publishedURL*/ ctx[14] + "")) set_data_dev(t0, t0_value);

    			if (dirty & /*publishedWebsiteURL*/ 32 && a_href_value !== (a_href_value = /*publishedURL*/ ctx[14])) {
    				attr_dev(a, "href", a_href_value);
    			}

    			if (/*buildStatusClass*/ ctx[9]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_6(ctx);
    					if_block.c();
    					if_block.m(div, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_then_block_1.name,
    		type: "then",
    		source: "(78:4) {:then publishedURL}",
    		ctx
    	});

    	return block;
    }

    // (89:8) {#if buildStatusClass}
    function create_if_block_6(ctx) {
    	let p;
    	let p_class_value;

    	const block = {
    		c: function create() {
    			p = element("p");
    			attr_dev(p, "class", p_class_value = "" + (null_to_empty(/*buildStatusClass*/ ctx[9]) + " svelte-o3pa4w"));
    			add_location(p, file$g, 89, 10, 2136);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*buildStatusClass*/ 512 && p_class_value !== (p_class_value = "" + (null_to_empty(/*buildStatusClass*/ ctx[9]) + " svelte-o3pa4w"))) {
    				attr_dev(p, "class", p_class_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6.name,
    		type: "if",
    		source: "(89:8) {#if buildStatusClass}",
    		ctx
    	});

    	return block;
    }

    // (69:32)        <div>         <p>           (L'adresse du site va apparaître ici…)         </p>         {#if buildStatusClass}
    function create_pending_block_1(ctx) {
    	let div;
    	let p;
    	let t1;
    	let if_block = /*buildStatusClass*/ ctx[9] && create_if_block_5(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			p = element("p");
    			p.textContent = "(L'adresse du site va apparaître ici…)";
    			t1 = space();
    			if (if_block) if_block.c();
    			attr_dev(p, "class", "svelte-o3pa4w");
    			add_location(p, file$g, 70, 8, 1706);
    			attr_dev(div, "class", "svelte-o3pa4w");
    			add_location(div, file$g, 69, 6, 1692);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, p);
    			append_dev(div, t1);
    			if (if_block) if_block.m(div, null);
    		},
    		p: function update(ctx, dirty) {
    			if (/*buildStatusClass*/ ctx[9]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_5(ctx);
    					if_block.c();
    					if_block.m(div, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_pending_block_1.name,
    		type: "pending",
    		source: "(69:32)        <div>         <p>           (L'adresse du site va apparaître ici…)         </p>         {#if buildStatusClass}",
    		ctx
    	});

    	return block;
    }

    // (74:8) {#if buildStatusClass}
    function create_if_block_5(ctx) {
    	let p;
    	let p_class_value;

    	const block = {
    		c: function create() {
    			p = element("p");
    			attr_dev(p, "class", p_class_value = "" + (null_to_empty(/*buildStatusClass*/ ctx[9]) + " svelte-o3pa4w"));
    			add_location(p, file$g, 74, 10, 1813);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*buildStatusClass*/ 512 && p_class_value !== (p_class_value = "" + (null_to_empty(/*buildStatusClass*/ ctx[9]) + " svelte-o3pa4w"))) {
    				attr_dev(p, "class", p_class_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5.name,
    		type: "if",
    		source: "(74:8) {#if buildStatusClass}",
    		ctx
    	});

    	return block;
    }

    // (105:2) {#if currentRepository}
    function create_if_block_1$8(ctx) {
    	let nav;
    	let ul;
    	let li0;
    	let a0;
    	let t0;
    	let a0_href_value;
    	let t1;
    	let t2;
    	let li1;
    	let a1;
    	let t3;
    	let a1_href_value;
    	let t4;
    	let li2;
    	let if_block0 = /*showArticles*/ ctx[1] && create_if_block_3(ctx);
    	let if_block1 = /*repositoryURL*/ ctx[6] && create_if_block_2$4(ctx);

    	const block = {
    		c: function create() {
    			nav = element("nav");
    			ul = element("ul");
    			li0 = element("li");
    			a0 = element("a");
    			t0 = text("Pages");
    			t1 = space();
    			if (if_block0) if_block0.c();
    			t2 = space();
    			li1 = element("li");
    			a1 = element("a");
    			t3 = text("Paramètres");
    			t4 = space();
    			li2 = element("li");
    			if (if_block1) if_block1.c();
    			attr_dev(a0, "href", a0_href_value = "/atelier-list-pages?repoName=" + /*repoName*/ ctx[3] + "&account=" + /*account*/ ctx[4]);
    			add_location(a0, file$g, 108, 10, 2456);
    			add_location(li0, file$g, 107, 8, 2441);
    			attr_dev(a1, "href", a1_href_value = "/settings?repoName=" + /*repoName*/ ctx[3] + "&account=" + /*account*/ ctx[4]);
    			add_location(a1, file$g, 124, 10, 2820);
    			add_location(li1, file$g, 123, 8, 2805);
    			add_location(li2, file$g, 128, 8, 2939);
    			add_location(ul, file$g, 106, 6, 2428);
    			attr_dev(nav, "class", "svelte-o3pa4w");
    			add_location(nav, file$g, 105, 4, 2416);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, nav, anchor);
    			append_dev(nav, ul);
    			append_dev(ul, li0);
    			append_dev(li0, a0);
    			append_dev(a0, t0);
    			append_dev(ul, t1);
    			if (if_block0) if_block0.m(ul, null);
    			append_dev(ul, t2);
    			append_dev(ul, li1);
    			append_dev(li1, a1);
    			append_dev(a1, t3);
    			append_dev(ul, t4);
    			append_dev(ul, li2);
    			if (if_block1) if_block1.m(li2, null);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*repoName, account*/ 24 && a0_href_value !== (a0_href_value = "/atelier-list-pages?repoName=" + /*repoName*/ ctx[3] + "&account=" + /*account*/ ctx[4])) {
    				attr_dev(a0, "href", a0_href_value);
    			}

    			if (/*showArticles*/ ctx[1]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_3(ctx);
    					if_block0.c();
    					if_block0.m(ul, t2);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (dirty & /*repoName, account*/ 24 && a1_href_value !== (a1_href_value = "/settings?repoName=" + /*repoName*/ ctx[3] + "&account=" + /*account*/ ctx[4])) {
    				attr_dev(a1, "href", a1_href_value);
    			}

    			if (/*repositoryURL*/ ctx[6]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_2$4(ctx);
    					if_block1.c();
    					if_block1.m(li2, null);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(nav);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$8.name,
    		type: "if",
    		source: "(105:2) {#if currentRepository}",
    		ctx
    	});

    	return block;
    }

    // (114:8) {#if showArticles}
    function create_if_block_3(ctx) {
    	let li;
    	let a;
    	let t;
    	let a_href_value;

    	const block = {
    		c: function create() {
    			li = element("li");
    			a = element("a");
    			t = text("Articles");
    			attr_dev(a, "href", a_href_value = "/atelier-list-articles?repoName=" + /*repoName*/ ctx[3] + "&account=" + /*account*/ ctx[4]);
    			add_location(a, file$g, 115, 12, 2627);
    			add_location(li, file$g, 114, 10, 2610);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			append_dev(li, a);
    			append_dev(a, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*repoName, account*/ 24 && a_href_value !== (a_href_value = "/atelier-list-articles?repoName=" + /*repoName*/ ctx[3] + "&account=" + /*account*/ ctx[4])) {
    				attr_dev(a, "href", a_href_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3.name,
    		type: "if",
    		source: "(114:8) {#if showArticles}",
    		ctx
    	});

    	return block;
    }

    // (130:10) {#if repositoryURL}
    function create_if_block_2$4(ctx) {
    	let await_block_anchor;
    	let promise;

    	let info = {
    		ctx,
    		current: null,
    		token: null,
    		hasCatch: false,
    		pending: create_pending_block$2,
    		then: create_then_block$2,
    		catch: create_catch_block$2,
    		value: 13
    	};

    	handle_promise(promise = /*repositoryURL*/ ctx[6], info);

    	const block = {
    		c: function create() {
    			await_block_anchor = empty();
    			info.block.c();
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, await_block_anchor, anchor);
    			info.block.m(target, info.anchor = anchor);
    			info.mount = () => await_block_anchor.parentNode;
    			info.anchor = await_block_anchor;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			info.ctx = ctx;

    			if (dirty & /*repositoryURL*/ 64 && promise !== (promise = /*repositoryURL*/ ctx[6]) && handle_promise(promise, info)) ; else {
    				update_await_block_branch(info, ctx, dirty);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(await_block_anchor);
    			info.block.d(detaching);
    			info.token = null;
    			info = null;
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$4.name,
    		type: "if",
    		source: "(130:10) {#if repositoryURL}",
    		ctx
    	});

    	return block;
    }

    // (1:0) <script>   /** @type {any}
    function create_catch_block$2(ctx) {
    	const block = { c: noop, m: noop, p: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_catch_block$2.name,
    		type: "catch",
    		source: "(1:0) <script>   /** @type {any}",
    		ctx
    	});

    	return block;
    }

    // (131:53)                <a href={urlrepository}
    function create_then_block$2(ctx) {
    	let a;
    	let t0;
    	let t1_value = new URL(/*urlrepository*/ ctx[13]).hostname + "";
    	let t1;
    	let a_href_value;

    	const block = {
    		c: function create() {
    			a = element("a");
    			t0 = text("Sur ");
    			t1 = text(t1_value);
    			attr_dev(a, "href", a_href_value = /*urlrepository*/ ctx[13]);
    			attr_dev(a, "target", "_blank");
    			add_location(a, file$g, 131, 14, 3042);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    			append_dev(a, t0);
    			append_dev(a, t1);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*repositoryURL*/ 64 && t1_value !== (t1_value = new URL(/*urlrepository*/ ctx[13]).hostname + "")) set_data_dev(t1, t1_value);

    			if (dirty & /*repositoryURL*/ 64 && a_href_value !== (a_href_value = /*urlrepository*/ ctx[13])) {
    				attr_dev(a, "href", a_href_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_then_block$2.name,
    		type: "then",
    		source: "(131:53)                <a href={urlrepository}",
    		ctx
    	});

    	return block;
    }

    // (1:0) <script>   /** @type {any}
    function create_pending_block$2(ctx) {
    	const block = { c: noop, m: noop, p: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_pending_block$2.name,
    		type: "pending",
    		source: "(1:0) <script>   /** @type {any}",
    		ctx
    	});

    	return block;
    }

    // (141:0) {#if conflict}
    function create_if_block$a(ctx) {
    	let section;
    	let p0;
    	let t1;
    	let p1;
    	let a;
    	let t2;

    	const block = {
    		c: function create() {
    			section = element("section");
    			p0 = element("p");
    			p0.textContent = "⚠️ Attention ! L'atelier ne peut plus se synchroniser avec le site web parce que les versions\n    de l'un et de l'autre sont irréconciliables. Le site ne va plus se mettre à jour";
    			t1 = space();
    			p1 = element("p");
    			a = element("a");
    			t2 = text("Aller sur la page dédiée de résolution du problème");
    			attr_dev(p0, "class", "svelte-o3pa4w");
    			add_location(p0, file$g, 142, 4, 3266);
    			attr_dev(a, "href", /*resolutionURL*/ ctx[7]);
    			add_location(a, file$g, 145, 7, 3460);
    			attr_dev(p1, "class", "svelte-o3pa4w");
    			add_location(p1, file$g, 145, 4, 3457);
    			attr_dev(section, "class", "warning svelte-o3pa4w");
    			add_location(section, file$g, 141, 2, 3236);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, p0);
    			append_dev(section, t1);
    			append_dev(section, p1);
    			append_dev(p1, a);
    			append_dev(a, t2);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*resolutionURL*/ 128) {
    				attr_dev(a, "href", /*resolutionURL*/ ctx[7]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$a.name,
    		type: "if",
    		source: "(141:0) {#if conflict}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$l(ctx) {
    	let header;
    	let t0;
    	let h1;
    	let a;
    	let img;
    	let img_src_value;
    	let t1;
    	let t2;
    	let if_block2_anchor;
    	let if_block0 = /*currentRepository*/ ctx[0] && create_if_block_4(ctx);
    	let if_block1 = /*currentRepository*/ ctx[0] && create_if_block_1$8(ctx);
    	let if_block2 = /*conflict*/ ctx[2] && create_if_block$a(ctx);

    	const block = {
    		c: function create() {
    			header = element("header");
    			if (if_block0) if_block0.c();
    			t0 = space();
    			h1 = element("h1");
    			a = element("a");
    			img = element("img");
    			t1 = space();
    			if (if_block1) if_block1.c();
    			t2 = space();
    			if (if_block2) if_block2.c();
    			if_block2_anchor = empty();
    			if (!src_url_equal(img.src, img_src_value = "./assets/images/logo_atelier.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "L'atelier de Scribouilli");
    			attr_dev(img, "class", "svelte-o3pa4w");
    			add_location(img, file$g, 97, 7, 2268);
    			attr_dev(a, "href", /*homeURL*/ ctx[8]);
    			attr_dev(a, "class", "go-home");
    			add_location(a, file$g, 96, 4, 2227);
    			attr_dev(h1, "class", "svelte-o3pa4w");
    			add_location(h1, file$g, 95, 2, 2218);
    			attr_dev(header, "class", "svelte-o3pa4w");
    			add_location(header, file$g, 66, 0, 1618);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, header, anchor);
    			if (if_block0) if_block0.m(header, null);
    			append_dev(header, t0);
    			append_dev(header, h1);
    			append_dev(h1, a);
    			append_dev(a, img);
    			append_dev(header, t1);
    			if (if_block1) if_block1.m(header, null);
    			insert_dev(target, t2, anchor);
    			if (if_block2) if_block2.m(target, anchor);
    			insert_dev(target, if_block2_anchor, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*currentRepository*/ ctx[0]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_4(ctx);
    					if_block0.c();
    					if_block0.m(header, t0);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (dirty & /*homeURL*/ 256) {
    				attr_dev(a, "href", /*homeURL*/ ctx[8]);
    			}

    			if (/*currentRepository*/ ctx[0]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_1$8(ctx);
    					if_block1.c();
    					if_block1.m(header, null);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (/*conflict*/ ctx[2]) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    				} else {
    					if_block2 = create_if_block$a(ctx);
    					if_block2.c();
    					if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(header);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if (detaching) detach_dev(t2);
    			if (if_block2) if_block2.d(detaching);
    			if (detaching) detach_dev(if_block2_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$l.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$l($$self, $$props, $$invalidate) {
    	let buildStatusClass;
    	let homeURL;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Header', slots, []);
    	let { buildStatus } = $$props;
    	let { currentRepository } = $$props;
    	let { showArticles } = $$props;
    	let { conflict } = $$props;

    	/** @type {string} */
    	let status;

    	if (buildStatus) {
    		// @ts-ignore
    		buildStatus.subscribe(s => {
    			if (s) {
    				$$invalidate(11, status = s);
    			}
    		});
    	}

    	/** @type {Promise<string> | undefined } */
    	let publishedWebsiteURL;

    	/** @type {string | undefined} */
    	let repositoryURL;

    	/** @type {string | undefined} */
    	let repoName;

    	/** @type {string | undefined} */
    	let account;

    	/**
     *
     * @param {string} account
     * @param {string} repoName
     * @returns {string}
     */
    	function makeResolutionDesynchronisationURL(account, repoName) {
    		return `/resolution-desynchronisation?account=${account}&repoName=${repoName}`;
    	}

    	/** @type {string} */
    	let resolutionURL;

    	$$self.$$.on_mount.push(function () {
    		if (buildStatus === undefined && !('buildStatus' in $$props || $$self.$$.bound[$$self.$$.props['buildStatus']])) {
    			console.warn("<Header> was created without expected prop 'buildStatus'");
    		}

    		if (currentRepository === undefined && !('currentRepository' in $$props || $$self.$$.bound[$$self.$$.props['currentRepository']])) {
    			console.warn("<Header> was created without expected prop 'currentRepository'");
    		}

    		if (showArticles === undefined && !('showArticles' in $$props || $$self.$$.bound[$$self.$$.props['showArticles']])) {
    			console.warn("<Header> was created without expected prop 'showArticles'");
    		}

    		if (conflict === undefined && !('conflict' in $$props || $$self.$$.bound[$$self.$$.props['conflict']])) {
    			console.warn("<Header> was created without expected prop 'conflict'");
    		}
    	});

    	const writable_props = ['buildStatus', 'currentRepository', 'showArticles', 'conflict'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Header> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('buildStatus' in $$props) $$invalidate(10, buildStatus = $$props.buildStatus);
    		if ('currentRepository' in $$props) $$invalidate(0, currentRepository = $$props.currentRepository);
    		if ('showArticles' in $$props) $$invalidate(1, showArticles = $$props.showArticles);
    		if ('conflict' in $$props) $$invalidate(2, conflict = $$props.conflict);
    	};

    	$$self.$capture_state = () => ({
    		buildStatus,
    		currentRepository,
    		showArticles,
    		conflict,
    		status,
    		publishedWebsiteURL,
    		repositoryURL,
    		repoName,
    		account,
    		makeResolutionDesynchronisationURL,
    		resolutionURL,
    		homeURL,
    		buildStatusClass
    	});

    	$$self.$inject_state = $$props => {
    		if ('buildStatus' in $$props) $$invalidate(10, buildStatus = $$props.buildStatus);
    		if ('currentRepository' in $$props) $$invalidate(0, currentRepository = $$props.currentRepository);
    		if ('showArticles' in $$props) $$invalidate(1, showArticles = $$props.showArticles);
    		if ('conflict' in $$props) $$invalidate(2, conflict = $$props.conflict);
    		if ('status' in $$props) $$invalidate(11, status = $$props.status);
    		if ('publishedWebsiteURL' in $$props) $$invalidate(5, publishedWebsiteURL = $$props.publishedWebsiteURL);
    		if ('repositoryURL' in $$props) $$invalidate(6, repositoryURL = $$props.repositoryURL);
    		if ('repoName' in $$props) $$invalidate(3, repoName = $$props.repoName);
    		if ('account' in $$props) $$invalidate(4, account = $$props.account);
    		if ('resolutionURL' in $$props) $$invalidate(7, resolutionURL = $$props.resolutionURL);
    		if ('homeURL' in $$props) $$invalidate(8, homeURL = $$props.homeURL);
    		if ('buildStatusClass' in $$props) $$invalidate(9, buildStatusClass = $$props.buildStatusClass);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*buildStatus*/ 1024) {
    			$$invalidate(11, status = buildStatus?.status);
    		}

    		if ($$self.$$.dirty & /*buildStatus, status*/ 3072) {
    			$$invalidate(9, buildStatusClass = buildStatus ? `build-${status}` : undefined);
    		}

    		if ($$self.$$.dirty & /*currentRepository*/ 1) {
    			$$invalidate(5, publishedWebsiteURL = currentRepository?.publishedWebsiteURL);
    		}

    		if ($$self.$$.dirty & /*currentRepository*/ 1) {
    			$$invalidate(6, repositoryURL = currentRepository?.publicRepositoryURL);
    		}

    		if ($$self.$$.dirty & /*currentRepository*/ 1) {
    			$$invalidate(3, repoName = currentRepository?.repoName);
    		}

    		if ($$self.$$.dirty & /*currentRepository*/ 1) {
    			$$invalidate(4, account = currentRepository?.owner);
    		}

    		if ($$self.$$.dirty & /*repoName, account*/ 24) {
    			/** @type {string | undefined} */
    			$$invalidate(8, homeURL = repoName && account
    			? `/atelier-list-pages?repoName=${repoName}&account=${account}`
    			: '/');
    		}

    		if ($$self.$$.dirty & /*account, repoName*/ 24) {
    			$$invalidate(7, resolutionURL = makeResolutionDesynchronisationURL(account || '', repoName || ''));
    		}
    	};

    	return [
    		currentRepository,
    		showArticles,
    		conflict,
    		repoName,
    		account,
    		publishedWebsiteURL,
    		repositoryURL,
    		resolutionURL,
    		homeURL,
    		buildStatusClass,
    		buildStatus,
    		status
    	];
    }

    class Header extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$l, create_fragment$l, safe_not_equal, {
    			buildStatus: 10,
    			currentRepository: 0,
    			showArticles: 1,
    			conflict: 2
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Header",
    			options,
    			id: create_fragment$l.name
    		});
    	}

    	get buildStatus() {
    		throw new Error("<Header>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set buildStatus(value) {
    		throw new Error("<Header>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get currentRepository() {
    		throw new Error("<Header>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set currentRepository(value) {
    		throw new Error("<Header>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get showArticles() {
    		throw new Error("<Header>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set showArticles(value) {
    		throw new Error("<Header>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get conflict() {
    		throw new Error("<Header>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set conflict(value) {
    		throw new Error("<Header>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* assets/scripts/components/Footer.svelte generated by Svelte v3.58.0 */

    const file$f = "assets/scripts/components/Footer.svelte";

    function create_fragment$k(ctx) {
    	let footer;
    	let div;
    	let a;

    	const block = {
    		c: function create() {
    			footer = element("footer");
    			div = element("div");
    			a = element("a");
    			a.textContent = "Site explicatif Scribouilli";
    			attr_dev(a, "href", "https://scribouilli.org/");
    			attr_dev(a, "target", "_blank");
    			add_location(a, file$f, 2, 4, 21);
    			add_location(div, file$f, 1, 2, 11);
    			add_location(footer, file$f, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, footer, anchor);
    			append_dev(footer, div);
    			append_dev(div, a);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(footer);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$k.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$k($$self, $$props) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Footer', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Footer> was created with unknown prop '${key}'`);
    	});

    	return [];
    }

    class Footer extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$k, create_fragment$k, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Footer",
    			options,
    			id: create_fragment$k.name
    		});
    	}
    }

    /* assets/scripts/components/Skeleton.svelte generated by Svelte v3.58.0 */
    const file$e = "assets/scripts/components/Skeleton.svelte";

    function create_fragment$j(ctx) {
    	let header;
    	let t0;
    	let main;
    	let t1;
    	let footer;
    	let current;

    	header = new Header({
    			props: {
    				showArticles: /*showArticles*/ ctx[0],
    				currentRepository: /*currentRepository*/ ctx[2],
    				buildStatus: /*buildStatus*/ ctx[1],
    				conflict: /*conflict*/ ctx[3]
    			},
    			$$inline: true
    		});

    	const default_slot_template = /*#slots*/ ctx[5].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);
    	footer = new Footer({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(header.$$.fragment);
    			t0 = space();
    			main = element("main");
    			if (default_slot) default_slot.c();
    			t1 = space();
    			create_component(footer.$$.fragment);
    			add_location(main, file$e, 20, 0, 563);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(header, target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, main, anchor);

    			if (default_slot) {
    				default_slot.m(main, null);
    			}

    			insert_dev(target, t1, anchor);
    			mount_component(footer, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const header_changes = {};
    			if (dirty & /*showArticles*/ 1) header_changes.showArticles = /*showArticles*/ ctx[0];
    			if (dirty & /*currentRepository*/ 4) header_changes.currentRepository = /*currentRepository*/ ctx[2];
    			if (dirty & /*buildStatus*/ 2) header_changes.buildStatus = /*buildStatus*/ ctx[1];
    			if (dirty & /*conflict*/ 8) header_changes.conflict = /*conflict*/ ctx[3];
    			header.$set(header_changes);

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 16)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[4],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[4])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[4], dirty, null),
    						null
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(header.$$.fragment, local);
    			transition_in(default_slot, local);
    			transition_in(footer.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(header.$$.fragment, local);
    			transition_out(default_slot, local);
    			transition_out(footer.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(header, detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(main);
    			if (default_slot) default_slot.d(detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(footer, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$j.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$j($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Skeleton', slots, ['default']);
    	let { showArticles = false } = $$props;
    	let { buildStatus = undefined } = $$props;
    	let { currentRepository = undefined } = $$props;
    	let { conflict = undefined } = $$props;
    	const writable_props = ['showArticles', 'buildStatus', 'currentRepository', 'conflict'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Skeleton> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('showArticles' in $$props) $$invalidate(0, showArticles = $$props.showArticles);
    		if ('buildStatus' in $$props) $$invalidate(1, buildStatus = $$props.buildStatus);
    		if ('currentRepository' in $$props) $$invalidate(2, currentRepository = $$props.currentRepository);
    		if ('conflict' in $$props) $$invalidate(3, conflict = $$props.conflict);
    		if ('$$scope' in $$props) $$invalidate(4, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		Header,
    		Footer,
    		showArticles,
    		buildStatus,
    		currentRepository,
    		conflict
    	});

    	$$self.$inject_state = $$props => {
    		if ('showArticles' in $$props) $$invalidate(0, showArticles = $$props.showArticles);
    		if ('buildStatus' in $$props) $$invalidate(1, buildStatus = $$props.buildStatus);
    		if ('currentRepository' in $$props) $$invalidate(2, currentRepository = $$props.currentRepository);
    		if ('conflict' in $$props) $$invalidate(3, conflict = $$props.conflict);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [showArticles, buildStatus, currentRepository, conflict, $$scope, slots];
    }

    class Skeleton extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$j, create_fragment$j, safe_not_equal, {
    			showArticles: 0,
    			buildStatus: 1,
    			currentRepository: 2,
    			conflict: 3
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Skeleton",
    			options,
    			id: create_fragment$j.name
    		});
    	}

    	get showArticles() {
    		throw new Error("<Skeleton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set showArticles(value) {
    		throw new Error("<Skeleton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get buildStatus() {
    		throw new Error("<Skeleton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set buildStatus(value) {
    		throw new Error("<Skeleton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get currentRepository() {
    		throw new Error("<Skeleton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set currentRepository(value) {
    		throw new Error("<Skeleton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get conflict() {
    		throw new Error("<Skeleton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set conflict(value) {
    		throw new Error("<Skeleton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* assets/scripts/components/screens/Welcome.svelte generated by Svelte v3.58.0 */
    const file$d = "assets/scripts/components/screens/Welcome.svelte";

    // (14:42) 
    function create_if_block_1$7(ctx) {
    	let h2;
    	let t1;
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			h2 = element("h2");
    			h2.textContent = "Nous regardons si vous avez plusieurs sites Scribouilli…";
    			t1 = space();
    			img = element("img");
    			add_location(h2, file$d, 14, 6, 386);
    			if (!src_url_equal(img.src, img_src_value = "./assets/images/hearts.svg")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "cœur sur toi le temps que ça charge");
    			add_location(img, file$d, 15, 6, 458);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h2, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, img, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h2);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$7.name,
    		type: "if",
    		source: "(14:42) ",
    		ctx
    	});

    	return block;
    }

    // (10:4) {#if showWelcome}
    function create_if_block$9(ctx) {
    	let h2;
    	let t1;
    	let a;

    	const block = {
    		c: function create() {
    			h2 = element("h2");
    			h2.textContent = "Créez votre petit site facilement !";
    			t1 = space();
    			a = element("a");
    			a.textContent = "C'est parti !";
    			add_location(h2, file$d, 10, 6, 228);
    			attr_dev(a, "href", "./choose-account");
    			attr_dev(a, "class", "btn");
    			add_location(a, file$d, 12, 6, 280);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h2, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, a, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h2);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(a);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$9.name,
    		type: "if",
    		source: "(10:4) {#if showWelcome}",
    		ctx
    	});

    	return block;
    }

    // (8:0) <Skeleton>
    function create_default_slot$c(ctx) {
    	let section;

    	function select_block_type(ctx, dirty) {
    		if (/*showWelcome*/ ctx[0]) return create_if_block$9;
    		if (/*isFetchingCurrentUserRepos*/ ctx[1]) return create_if_block_1$7;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type && current_block_type(ctx);

    	const block = {
    		c: function create() {
    			section = element("section");
    			if (if_block) if_block.c();
    			attr_dev(section, "class", "screen");
    			attr_dev(section, "id", "welcome");
    			add_location(section, file$d, 8, 2, 162);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			if (if_block) if_block.m(section, null);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type !== (current_block_type = select_block_type(ctx))) {
    				if (if_block) if_block.d(1);
    				if_block = current_block_type && current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(section, null);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);

    			if (if_block) {
    				if_block.d();
    			}
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$c.name,
    		type: "slot",
    		source: "(8:0) <Skeleton>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$i(ctx) {
    	let skeleton;
    	let current;

    	skeleton = new Skeleton({
    			props: {
    				$$slots: { default: [create_default_slot$c] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(skeleton.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(skeleton, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const skeleton_changes = {};

    			if (dirty & /*$$scope, showWelcome, isFetchingCurrentUserRepos*/ 7) {
    				skeleton_changes.$$scope = { dirty, ctx };
    			}

    			skeleton.$set(skeleton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(skeleton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(skeleton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(skeleton, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$i.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$i($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Welcome', slots, []);
    	let { showWelcome = false } = $$props;
    	let { isFetchingCurrentUserRepos = false } = $$props;
    	const writable_props = ['showWelcome', 'isFetchingCurrentUserRepos'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Welcome> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('showWelcome' in $$props) $$invalidate(0, showWelcome = $$props.showWelcome);
    		if ('isFetchingCurrentUserRepos' in $$props) $$invalidate(1, isFetchingCurrentUserRepos = $$props.isFetchingCurrentUserRepos);
    	};

    	$$self.$capture_state = () => ({
    		Skeleton,
    		showWelcome,
    		isFetchingCurrentUserRepos
    	});

    	$$self.$inject_state = $$props => {
    		if ('showWelcome' in $$props) $$invalidate(0, showWelcome = $$props.showWelcome);
    		if ('isFetchingCurrentUserRepos' in $$props) $$invalidate(1, isFetchingCurrentUserRepos = $$props.isFetchingCurrentUserRepos);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [showWelcome, isFetchingCurrentUserRepos];
    }

    class Welcome extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$i, create_fragment$i, safe_not_equal, {
    			showWelcome: 0,
    			isFetchingCurrentUserRepos: 1
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Welcome",
    			options,
    			id: create_fragment$i.name
    		});
    	}

    	get showWelcome() {
    		throw new Error("<Welcome>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set showWelcome(value) {
    		throw new Error("<Welcome>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isFetchingCurrentUserRepos() {
    		throw new Error("<Welcome>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isFetchingCurrentUserRepos(value) {
    		throw new Error("<Welcome>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    //@ts-check

    var welcome = () => {
      let props = {};

      if (store.state.oAuthProvider) {
        props = {
          isFetchingCurrentUserRepos: true,
        };

        fetchCurrentUserRepositories().then(repos => {
          if (repos.length === 1) {
            const repoName = repos[0].name;
            const account = repos[0].owner.login;

            page(`/atelier-list-pages?repoName=${repoName}&account=${account}`);
          } else {
            store.mutations.setReposForAccount({
              // @ts-ignore
              login: store.state.login,
              repos,
            });

            page.redirect('/selectionner-un-site');
          }
        });
      } else {
        props = {
          showWelcome: true,
        };
      }

      const welcome = new Welcome({
        target: svelteTarget,
        props,
      });

      replaceComponent(welcome, () => {});
    };

    /* assets/scripts/components/screens/ChooseAccount.svelte generated by Svelte v3.58.0 */
    const file$c = "assets/scripts/components/screens/ChooseAccount.svelte";

    // (5:0) <Skeleton>
    function create_default_slot$b(ctx) {
    	let section;
    	let h2;
    	let t1;
    	let p0;
    	let t3;
    	let p1;
    	let t5;
    	let ul0;
    	let li0;
    	let strong0;
    	let t7;
    	let a0;
    	let t9;
    	let t10;
    	let li1;
    	let strong1;
    	let t12;
    	let t13;
    	let li2;
    	let t15;
    	let ul1;
    	let li3;
    	let a1;
    	let t17;
    	let li4;
    	let a2;
    	let t19;
    	let li5;
    	let a3;

    	const block = {
    		c: function create() {
    			section = element("section");
    			h2 = element("h2");
    			h2.textContent = "Se connecter";
    			t1 = space();
    			p0 = element("p");
    			p0.textContent = "Scribouilli a besoin de se connecter à l'application qui hébergera votre petit site";
    			t3 = space();
    			p1 = element("p");
    			p1.textContent = "Vous pouvez utiliser :";
    			t5 = space();
    			ul0 = element("ul");
    			li0 = element("li");
    			strong0 = element("strong");
    			strong0.textContent = "Gitlab.com";
    			t7 = text(" qui est un hébergeur professionnel\n        (si vous n'avez pas encore de compte, Gitlab ");
    			a0 = element("a");
    			a0.textContent = "vous demandera votre numéro de carte de crédit";
    			t9 = text(" pour vérifier votre identité)");
    			t10 = space();
    			li1 = element("li");
    			strong1 = element("strong");
    			strong1.textContent = "ScribouGit";
    			t12 = text(", l'hébergement géré par l'équipe de Scribouilli\n        (si vous n'avez pas encore de compte, nous prendrons le temps de le valider manuellement)");
    			t13 = space();
    			li2 = element("li");
    			li2.textContent = "Microsoft GitHub®, si vous l'utilisez déjà";
    			t15 = space();
    			ul1 = element("ul");
    			li3 = element("li");
    			a1 = element("a");
    			a1.textContent = "Gitlab";
    			t17 = space();
    			li4 = element("li");
    			a2 = element("a");
    			a2.textContent = "ScribouGit";
    			t19 = space();
    			li5 = element("li");
    			a3 = element("a");
    			a3.textContent = "Github";
    			add_location(h2, file$c, 7, 4, 127);
    			attr_dev(p0, "class", "svelte-108opgq");
    			add_location(p0, file$c, 8, 4, 153);
    			attr_dev(p1, "class", "svelte-108opgq");
    			add_location(p1, file$c, 11, 4, 265);
    			add_location(strong0, file$c, 17, 8, 357);
    			attr_dev(a0, "href", "https://docs.gitlab.com/ee/security/identity_verification.html#credit-card-verification");
    			add_location(a0, file$c, 18, 53, 473);
    			attr_dev(li0, "class", "svelte-108opgq");
    			add_location(li0, file$c, 16, 6, 344);
    			add_location(strong1, file$c, 21, 8, 683);
    			attr_dev(li1, "class", "svelte-108opgq");
    			add_location(li1, file$c, 20, 6, 670);
    			attr_dev(li2, "class", "svelte-108opgq");
    			add_location(li2, file$c, 24, 6, 875);
    			attr_dev(ul0, "class", "descriptions svelte-108opgq");
    			add_location(ul0, file$c, 15, 4, 312);
    			attr_dev(a1, "href", "./account?provider=gitlab.com");
    			attr_dev(a1, "class", "btn");
    			add_location(a1, file$c, 28, 10, 973);
    			attr_dev(li3, "class", "svelte-108opgq");
    			add_location(li3, file$c, 28, 6, 969);
    			attr_dev(a2, "href", "./account?provider=git.scribouilli.org");
    			attr_dev(a2, "class", "btn");
    			add_location(a2, file$c, 29, 10, 1051);
    			attr_dev(li4, "class", "svelte-108opgq");
    			add_location(li4, file$c, 29, 6, 1047);
    			attr_dev(a3, "href", "./account?provider=github.com");
    			attr_dev(a3, "class", "btn");
    			add_location(a3, file$c, 30, 10, 1142);
    			attr_dev(li5, "class", "svelte-108opgq");
    			add_location(li5, file$c, 30, 6, 1138);
    			attr_dev(ul1, "class", "buttons svelte-108opgq");
    			add_location(ul1, file$c, 27, 4, 942);
    			attr_dev(section, "class", "screen svelte-108opgq");
    			attr_dev(section, "id", "choose-account");
    			add_location(section, file$c, 5, 2, 77);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, h2);
    			append_dev(section, t1);
    			append_dev(section, p0);
    			append_dev(section, t3);
    			append_dev(section, p1);
    			append_dev(section, t5);
    			append_dev(section, ul0);
    			append_dev(ul0, li0);
    			append_dev(li0, strong0);
    			append_dev(li0, t7);
    			append_dev(li0, a0);
    			append_dev(li0, t9);
    			append_dev(ul0, t10);
    			append_dev(ul0, li1);
    			append_dev(li1, strong1);
    			append_dev(li1, t12);
    			append_dev(ul0, t13);
    			append_dev(ul0, li2);
    			append_dev(section, t15);
    			append_dev(section, ul1);
    			append_dev(ul1, li3);
    			append_dev(li3, a1);
    			append_dev(ul1, t17);
    			append_dev(ul1, li4);
    			append_dev(li4, a2);
    			append_dev(ul1, t19);
    			append_dev(ul1, li5);
    			append_dev(li5, a3);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$b.name,
    		type: "slot",
    		source: "(5:0) <Skeleton>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$h(ctx) {
    	let skeleton;
    	let current;

    	skeleton = new Skeleton({
    			props: {
    				$$slots: { default: [create_default_slot$b] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(skeleton.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(skeleton, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const skeleton_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				skeleton_changes.$$scope = { dirty, ctx };
    			}

    			skeleton.$set(skeleton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(skeleton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(skeleton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(skeleton, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$h.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$h($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ChooseAccount', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ChooseAccount> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ Skeleton });
    	return [];
    }

    class ChooseAccount extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$h, create_fragment$h, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ChooseAccount",
    			options,
    			id: create_fragment$h.name
    		});
    	}
    }

    // @ts-check

    var chooseAccount = () => {
      const chooseAccount = new ChooseAccount({
        target: svelteTarget,
        props: {},
      });

      replaceComponent(chooseAccount, () => {});
    };

    /* assets/scripts/components/screens/Account.svelte generated by Svelte v3.58.0 */
    const file$b = "assets/scripts/components/screens/Account.svelte";

    // (9:2) {#if gitProvider === 'github.com'}
    function create_if_block_2$3(ctx) {
    	let section;
    	let div1;
    	let h2;
    	let t1;
    	let div0;
    	let a0;
    	let t3;
    	let a1;

    	const block = {
    		c: function create() {
    			section = element("section");
    			div1 = element("div");
    			h2 = element("h2");
    			h2.textContent = "Avez-vous un compte GitHub ?";
    			t1 = space();
    			div0 = element("div");
    			a0 = element("a");
    			a0.textContent = "Oui, je me connecte";
    			t3 = space();
    			a1 = element("a");
    			a1.textContent = "Non, je veux créer un compte";
    			attr_dev(h2, "class", "svelte-1dhq6yg");
    			add_location(h2, file$b, 11, 8, 226);
    			attr_dev(a0, "href", "./login?provider=github.com");
    			attr_dev(a0, "class", "btn");
    			add_location(a0, file$b, 14, 10, 294);
    			attr_dev(a1, "href", "./create-account?provider=github.com");
    			attr_dev(a1, "class", "btn");
    			add_location(a1, file$b, 15, 10, 378);
    			attr_dev(div0, "class", "svelte-1dhq6yg");
    			add_location(div0, file$b, 13, 8, 278);
    			attr_dev(div1, "class", "svelte-1dhq6yg");
    			add_location(div1, file$b, 10, 6, 212);
    			attr_dev(section, "class", "screen svelte-1dhq6yg");
    			attr_dev(section, "id", "account");
    			add_location(section, file$b, 9, 4, 168);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, div1);
    			append_dev(div1, h2);
    			append_dev(div1, t1);
    			append_dev(div1, div0);
    			append_dev(div0, a0);
    			append_dev(div0, t3);
    			append_dev(div0, a1);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$3.name,
    		type: "if",
    		source: "(9:2) {#if gitProvider === 'github.com'}",
    		ctx
    	});

    	return block;
    }

    // (24:2) {#if gitProvider === 'gitlab.com'}
    function create_if_block_1$6(ctx) {
    	let section;
    	let div1;
    	let h2;
    	let t1;
    	let div0;
    	let a0;
    	let t3;
    	let a1;

    	const block = {
    		c: function create() {
    			section = element("section");
    			div1 = element("div");
    			h2 = element("h2");
    			h2.textContent = "Avez-vous un compte sur gitlab.com ?";
    			t1 = space();
    			div0 = element("div");
    			a0 = element("a");
    			a0.textContent = "Oui, je me connecte";
    			t3 = space();
    			a1 = element("a");
    			a1.textContent = "Non, je veux créer un compte";
    			attr_dev(h2, "class", "svelte-1dhq6yg");
    			add_location(h2, file$b, 26, 6, 639);
    			attr_dev(a0, "href", "./login?provider=gitlab.com");
    			attr_dev(a0, "class", "btn");
    			add_location(a0, file$b, 29, 8, 711);
    			attr_dev(a1, "href", "./create-account?provider=gitlab.com");
    			attr_dev(a1, "class", "btn");
    			add_location(a1, file$b, 30, 8, 793);
    			attr_dev(div0, "class", "svelte-1dhq6yg");
    			add_location(div0, file$b, 28, 6, 697);
    			attr_dev(div1, "class", "svelte-1dhq6yg");
    			add_location(div1, file$b, 25, 4, 627);
    			attr_dev(section, "class", "screen svelte-1dhq6yg");
    			attr_dev(section, "id", "account");
    			add_location(section, file$b, 24, 2, 585);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, div1);
    			append_dev(div1, h2);
    			append_dev(div1, t1);
    			append_dev(div1, div0);
    			append_dev(div0, a0);
    			append_dev(div0, t3);
    			append_dev(div0, a1);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$6.name,
    		type: "if",
    		source: "(24:2) {#if gitProvider === 'gitlab.com'}",
    		ctx
    	});

    	return block;
    }

    // (39:2) {#if gitProvider === 'git.scribouilli.org'}
    function create_if_block$8(ctx) {
    	let section;
    	let div1;
    	let h2;
    	let t1;
    	let div0;
    	let a0;
    	let t3;
    	let a1;

    	const block = {
    		c: function create() {
    			section = element("section");
    			div1 = element("div");
    			h2 = element("h2");
    			h2.textContent = "Avez-vous un compte sur git.scribouilli.org ?";
    			t1 = space();
    			div0 = element("div");
    			a0 = element("a");
    			a0.textContent = "Oui, je me connecte";
    			t3 = space();
    			a1 = element("a");
    			a1.textContent = "Non, je veux créer un compte";
    			attr_dev(h2, "class", "svelte-1dhq6yg");
    			add_location(h2, file$b, 41, 6, 1053);
    			attr_dev(a0, "href", "./login?provider=git.scribouilli.org");
    			attr_dev(a0, "class", "btn");
    			add_location(a0, file$b, 44, 8, 1134);
    			attr_dev(a1, "href", "./create-account?provider=git.scribouilli.org");
    			attr_dev(a1, "class", "btn");
    			add_location(a1, file$b, 45, 8, 1225);
    			attr_dev(div0, "class", "svelte-1dhq6yg");
    			add_location(div0, file$b, 43, 6, 1120);
    			attr_dev(div1, "class", "svelte-1dhq6yg");
    			add_location(div1, file$b, 40, 4, 1041);
    			attr_dev(section, "class", "screen svelte-1dhq6yg");
    			attr_dev(section, "id", "account");
    			add_location(section, file$b, 39, 2, 999);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, div1);
    			append_dev(div1, h2);
    			append_dev(div1, t1);
    			append_dev(div1, div0);
    			append_dev(div0, a0);
    			append_dev(div0, t3);
    			append_dev(div0, a1);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$8.name,
    		type: "if",
    		source: "(39:2) {#if gitProvider === 'git.scribouilli.org'}",
    		ctx
    	});

    	return block;
    }

    // (8:0) <Skeleton>
    function create_default_slot$a(ctx) {
    	let t0;
    	let t1;
    	let if_block2_anchor;
    	let if_block0 = /*gitProvider*/ ctx[0] === 'github.com' && create_if_block_2$3(ctx);
    	let if_block1 = /*gitProvider*/ ctx[0] === 'gitlab.com' && create_if_block_1$6(ctx);
    	let if_block2 = /*gitProvider*/ ctx[0] === 'git.scribouilli.org' && create_if_block$8(ctx);

    	const block = {
    		c: function create() {
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			if (if_block2) if_block2.c();
    			if_block2_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t0, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, t1, anchor);
    			if (if_block2) if_block2.m(target, anchor);
    			insert_dev(target, if_block2_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (/*gitProvider*/ ctx[0] === 'github.com') {
    				if (if_block0) ; else {
    					if_block0 = create_if_block_2$3(ctx);
    					if_block0.c();
    					if_block0.m(t0.parentNode, t0);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*gitProvider*/ ctx[0] === 'gitlab.com') {
    				if (if_block1) ; else {
    					if_block1 = create_if_block_1$6(ctx);
    					if_block1.c();
    					if_block1.m(t1.parentNode, t1);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (/*gitProvider*/ ctx[0] === 'git.scribouilli.org') {
    				if (if_block2) ; else {
    					if_block2 = create_if_block$8(ctx);
    					if_block2.c();
    					if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t0);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(t1);
    			if (if_block2) if_block2.d(detaching);
    			if (detaching) detach_dev(if_block2_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$a.name,
    		type: "slot",
    		source: "(8:0) <Skeleton>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$g(ctx) {
    	let skeleton;
    	let current;

    	skeleton = new Skeleton({
    			props: {
    				$$slots: { default: [create_default_slot$a] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(skeleton.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(skeleton, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const skeleton_changes = {};

    			if (dirty & /*$$scope, gitProvider*/ 3) {
    				skeleton_changes.$$scope = { dirty, ctx };
    			}

    			skeleton.$set(skeleton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(skeleton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(skeleton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(skeleton, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$g.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$g($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Account', slots, []);
    	let { gitProvider } = $$props;

    	$$self.$$.on_mount.push(function () {
    		if (gitProvider === undefined && !('gitProvider' in $$props || $$self.$$.bound[$$self.$$.props['gitProvider']])) {
    			console.warn("<Account> was created without expected prop 'gitProvider'");
    		}
    	});

    	const writable_props = ['gitProvider'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Account> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('gitProvider' in $$props) $$invalidate(0, gitProvider = $$props.gitProvider);
    	};

    	$$self.$capture_state = () => ({ Skeleton, gitProvider });

    	$$self.$inject_state = $$props => {
    		if ('gitProvider' in $$props) $$invalidate(0, gitProvider = $$props.gitProvider);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [gitProvider];
    }

    class Account extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$g, create_fragment$g, safe_not_equal, { gitProvider: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Account",
    			options,
    			id: create_fragment$g.name
    		});
    	}

    	get gitProvider() {
    		throw new Error("<Account>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set gitProvider(value) {
    		throw new Error("<Account>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    // @ts-check

    /**
     * @param {import('page').Context} _
     */
    var account = ({ querystring }) => {
      const params = new URLSearchParams(querystring);
      const gitProvider = params.get('provider');

      console.log('gitProvider', gitProvider);

      if (!gitProvider) {
        throw new TypeError(`Missing 'provider' parameter`)
      }

      const account = new Account({
        target: svelteTarget,
        props: { gitProvider },
      });

      replaceComponent(account, () => {});
    };

    /* assets/scripts/components/screens/Login.svelte generated by Svelte v3.58.0 */
    const file$a = "assets/scripts/components/screens/Login.svelte";

    // (13:2) {#if gitProvider === 'github.com'}
    function create_if_block_2$2(ctx) {
    	let section;
    	let h2;
    	let t1;
    	let a;
    	let t2;

    	const block = {
    		c: function create() {
    			section = element("section");
    			h2 = element("h2");
    			h2.textContent = "Super, nous allons vous demander les clefs sur la page suivante.";
    			t1 = space();
    			a = element("a");
    			t2 = text("Je me connecte via GitHub");
    			add_location(h2, file$a, 14, 4, 250);
    			attr_dev(a, "href", /*href*/ ctx[0]);
    			attr_dev(a, "class", "btn");
    			add_location(a, file$a, 16, 4, 329);
    			attr_dev(section, "class", "screen svelte-6ru570");
    			attr_dev(section, "id", "login");
    			add_location(section, file$a, 13, 2, 210);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, h2);
    			append_dev(section, t1);
    			append_dev(section, a);
    			append_dev(a, t2);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*href*/ 1) {
    				attr_dev(a, "href", /*href*/ ctx[0]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$2.name,
    		type: "if",
    		source: "(13:2) {#if gitProvider === 'github.com'}",
    		ctx
    	});

    	return block;
    }

    // (20:2) {#if gitProvider === 'gitlab.com'}
    function create_if_block_1$5(ctx) {
    	let section;
    	let h2;
    	let t1;
    	let a;
    	let t2;

    	const block = {
    		c: function create() {
    			section = element("section");
    			h2 = element("h2");
    			h2.textContent = "Super, nous allons vous demander les clefs sur la page suivante.";
    			t1 = space();
    			a = element("a");
    			t2 = text("Je me connecte via gitlab.com");
    			add_location(h2, file$a, 21, 4, 481);
    			attr_dev(a, "href", /*href*/ ctx[0]);
    			attr_dev(a, "class", "btn");
    			add_location(a, file$a, 23, 4, 560);
    			attr_dev(section, "class", "screen svelte-6ru570");
    			attr_dev(section, "id", "login");
    			add_location(section, file$a, 20, 2, 441);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, h2);
    			append_dev(section, t1);
    			append_dev(section, a);
    			append_dev(a, t2);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*href*/ 1) {
    				attr_dev(a, "href", /*href*/ ctx[0]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$5.name,
    		type: "if",
    		source: "(20:2) {#if gitProvider === 'gitlab.com'}",
    		ctx
    	});

    	return block;
    }

    // (27:2) {#if gitProvider === 'git.scribouilli.org'}
    function create_if_block$7(ctx) {
    	let section;
    	let h2;
    	let t1;
    	let a;
    	let t2;

    	const block = {
    		c: function create() {
    			section = element("section");
    			h2 = element("h2");
    			h2.textContent = "Super, nous allons vous demander les clefs sur la page suivante.";
    			t1 = space();
    			a = element("a");
    			t2 = text("Je me connecte via git.scribouilli.org");
    			add_location(h2, file$a, 28, 4, 725);
    			attr_dev(a, "href", /*href*/ ctx[0]);
    			attr_dev(a, "class", "btn");
    			add_location(a, file$a, 30, 4, 804);
    			attr_dev(section, "class", "screen svelte-6ru570");
    			attr_dev(section, "id", "login");
    			add_location(section, file$a, 27, 2, 685);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, h2);
    			append_dev(section, t1);
    			append_dev(section, a);
    			append_dev(a, t2);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*href*/ 1) {
    				attr_dev(a, "href", /*href*/ ctx[0]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$7.name,
    		type: "if",
    		source: "(27:2) {#if gitProvider === 'git.scribouilli.org'}",
    		ctx
    	});

    	return block;
    }

    // (12:0) <Skeleton>
    function create_default_slot$9(ctx) {
    	let t0;
    	let t1;
    	let if_block2_anchor;
    	let if_block0 = /*gitProvider*/ ctx[1] === 'github.com' && create_if_block_2$2(ctx);
    	let if_block1 = /*gitProvider*/ ctx[1] === 'gitlab.com' && create_if_block_1$5(ctx);
    	let if_block2 = /*gitProvider*/ ctx[1] === 'git.scribouilli.org' && create_if_block$7(ctx);

    	const block = {
    		c: function create() {
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			if (if_block2) if_block2.c();
    			if_block2_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t0, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, t1, anchor);
    			if (if_block2) if_block2.m(target, anchor);
    			insert_dev(target, if_block2_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (/*gitProvider*/ ctx[1] === 'github.com') {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_2$2(ctx);
    					if_block0.c();
    					if_block0.m(t0.parentNode, t0);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*gitProvider*/ ctx[1] === 'gitlab.com') {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_1$5(ctx);
    					if_block1.c();
    					if_block1.m(t1.parentNode, t1);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (/*gitProvider*/ ctx[1] === 'git.scribouilli.org') {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    				} else {
    					if_block2 = create_if_block$7(ctx);
    					if_block2.c();
    					if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t0);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(t1);
    			if (if_block2) if_block2.d(detaching);
    			if (detaching) detach_dev(if_block2_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$9.name,
    		type: "slot",
    		source: "(12:0) <Skeleton>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$f(ctx) {
    	let skeleton;
    	let current;

    	skeleton = new Skeleton({
    			props: {
    				$$slots: { default: [create_default_slot$9] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(skeleton.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(skeleton, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const skeleton_changes = {};

    			if (dirty & /*$$scope, href, gitProvider*/ 7) {
    				skeleton_changes.$$scope = { dirty, ctx };
    			}

    			skeleton.$set(skeleton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(skeleton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(skeleton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(skeleton, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$f.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$f($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Login', slots, []);
    	let { href } = $$props;
    	let { gitProvider } = $$props;

    	$$self.$$.on_mount.push(function () {
    		if (href === undefined && !('href' in $$props || $$self.$$.bound[$$self.$$.props['href']])) {
    			console.warn("<Login> was created without expected prop 'href'");
    		}

    		if (gitProvider === undefined && !('gitProvider' in $$props || $$self.$$.bound[$$self.$$.props['gitProvider']])) {
    			console.warn("<Login> was created without expected prop 'gitProvider'");
    		}
    	});

    	const writable_props = ['href', 'gitProvider'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Login> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('href' in $$props) $$invalidate(0, href = $$props.href);
    		if ('gitProvider' in $$props) $$invalidate(1, gitProvider = $$props.gitProvider);
    	};

    	$$self.$capture_state = () => ({ Skeleton, href, gitProvider });

    	$$self.$inject_state = $$props => {
    		if ('href' in $$props) $$invalidate(0, href = $$props.href);
    		if ('gitProvider' in $$props) $$invalidate(1, gitProvider = $$props.gitProvider);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [href, gitProvider];
    }

    class Login extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$f, create_fragment$f, safe_not_equal, { href: 0, gitProvider: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Login",
    			options,
    			id: create_fragment$f.name
    		});
    	}

    	get href() {
    		throw new Error("<Login>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set href(value) {
    		throw new Error("<Login>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get gitProvider() {
    		throw new Error("<Login>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set gitProvider(value) {
    		throw new Error("<Login>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    // @ts-check

    const TOCTOCTOC_ORIGIN = `https://toctoctoc.lechappeebelle.team`;


    const oAuthAppByProvider = new Map([
      [
        'github.com',
        {
          origin: 'https://github.com',
          client_id: '64ecce0b01397c2499a6',
        },
      ],
      [
        'gitlab.com',
        {
          origin: 'https://gitlab.com',
          client_id:
            'b943c32d1a30f316cf4a72b5e40b05b6e71a1e3df34e2233c51e79838b22f7e8',
        },
      ],
      [
        'git.scribouilli.org',
        {
          origin: 'https://git.scribouilli.org',
          client_id:
            '3e8ac6636615d396a8f73e02fa3880e7e2140981b0ca27b0f240a450f69f1c76',
        },
      ],
    ]);

    /**
     * @param {string} gitProvider
     * @param {string} destination
     */
    function redirectURLByProvider(gitProvider, destination) {
      if (gitProvider === 'github.com') {
        return `${TOCTOCTOC_ORIGIN}/github-callback?destination=${destination}`
      } else {
        // assume Gitlab and assume HTTPS
        return `${TOCTOCTOC_ORIGIN}/gitlab-callback/https://${gitProvider}/?destination=${destination}`
      }
    }

    /**
     *
     * @param {string} gitProvider
     * @param {string} client_id
     * @param {string} redirect_url
     * @returns
     */
    function makeLoginHref(gitProvider, client_id, redirect_url) {
      if (gitProvider === 'github.com') {
        return `https://github.com/login/oauth/authorize?client_id=${client_id}&scope=public_repo,user:email&redirect_uri=${redirect_url}`
      } else {
        // assume HTTPS
        return `https://${gitProvider}/oauth/authorize?client_id=${client_id}&redirect_uri=${redirect_url}&response_type=code&scope=api+read_api`
      }
    }

    /**
     * @param {import('page').Context} _
     */
    var login = ({ querystring }) => {
      const params = new URLSearchParams(querystring);
      const gitProvider = params.get('provider');

      console.log('gitProvider', gitProvider);

      if (!gitProvider) {
        throw new TypeError(`Missing 'provider' parameter`)
      }

      const destination =
        location.origin + store.state.basePath + '/after-oauth-login';
      const client_id = oAuthAppByProvider.get(gitProvider)?.client_id;
      if (!client_id) {
        throw new TypeError(`Missing client_id`)
      }

      const redirect_url = redirectURLByProvider(gitProvider, destination);
      const loginHref = makeLoginHref(gitProvider, client_id, redirect_url);

      const login = new Login({
        target: svelteTarget,
        props: {
          href: loginHref,
          gitProvider,
        },
      });

      replaceComponent(login, () => {});
    };

    /* assets/scripts/components/loaders/SiteCreationLoader.svelte generated by Svelte v3.58.0 */

    const file$9 = "assets/scripts/components/loaders/SiteCreationLoader.svelte";

    function create_fragment$e(ctx) {
    	let h2;
    	let t1;
    	let p0;
    	let t3;
    	let img;
    	let img_src_value;
    	let t4;
    	let div;
    	let p1;
    	let t6;
    	let ul;
    	let li0;
    	let t7;
    	let a;
    	let t9;
    	let t10;
    	let li1;

    	const block = {
    		c: function create() {
    			h2 = element("h2");
    			h2.textContent = "Nous sommes en train de créer le site !";
    			t1 = space();
    			p0 = element("p");
    			p0.textContent = "Cela peut prendre 2-3 minutes…";
    			t3 = space();
    			img = element("img");
    			t4 = space();
    			div = element("div");
    			p1 = element("p");
    			p1.textContent = "Pendant le chargement, vous pouvez :";
    			t6 = space();
    			ul = element("ul");
    			li0 = element("li");
    			t7 = text("lire un article pour apprendre à ");
    			a = element("a");
    			a.textContent = "bidouiller avec du Markdown";
    			t9 = text(".");
    			t10 = space();
    			li1 = element("li");
    			li1.textContent = "ou chanter une petite chanson.";
    			add_location(h2, file$9, 0, 0, 0);
    			add_location(p0, file$9, 1, 0, 54);
    			if (!src_url_equal(img.src, img_src_value = "./assets/images/hearts.svg")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "cœur sur toi le temps que ça charge");
    			add_location(img, file$9, 2, 0, 92);
    			add_location(p1, file$9, 7, 2, 187);
    			attr_dev(a, "href", "https://flus.fr/carnet/markdown.html");
    			attr_dev(a, "target", "_blank");
    			add_location(a, file$9, 10, 39, 291);
    			add_location(li0, file$9, 9, 4, 247);
    			add_location(li1, file$9, 15, 4, 424);
    			add_location(ul, file$9, 8, 2, 238);
    			add_location(div, file$9, 6, 0, 179);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h2, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, p0, anchor);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, img, anchor);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, div, anchor);
    			append_dev(div, p1);
    			append_dev(div, t6);
    			append_dev(div, ul);
    			append_dev(ul, li0);
    			append_dev(li0, t7);
    			append_dev(li0, a);
    			append_dev(li0, t9);
    			append_dev(ul, t10);
    			append_dev(ul, li1);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h2);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(p0);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(img);
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$e.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$e($$self, $$props) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('SiteCreationLoader', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<SiteCreationLoader> was created with unknown prop '${key}'`);
    	});

    	return [];
    }

    class SiteCreationLoader extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$e, create_fragment$e, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SiteCreationLoader",
    			options,
    			id: create_fragment$e.name
    		});
    	}
    }

    /* assets/scripts/components/screens/AfterOauthLogin.svelte generated by Svelte v3.58.0 */
    const file$8 = "assets/scripts/components/screens/AfterOauthLogin.svelte";

    // (1:0) <script>   import Skeleton from "./../Skeleton.svelte";   import SiteCreationLoader from "./../loaders/SiteCreationLoader.svelte";   import './../../types.js'   /** @type {Promise<GithubRepository[]|Void>}
    function create_catch_block$1(ctx) {
    	const block = {
    		c: noop,
    		m: noop,
    		i: noop,
    		o: noop,
    		d: noop
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_catch_block$1.name,
    		type: "catch",
    		source: "(1:0) <script>   import Skeleton from \\\"./../Skeleton.svelte\\\";   import SiteCreationLoader from \\\"./../loaders/SiteCreationLoader.svelte\\\";   import './../../types.js'   /** @type {Promise<GithubRepository[]|Void>}",
    		ctx
    	});

    	return block;
    }

    // (18:4) {:then}
    function create_then_block$1(ctx) {
    	let sitecreationloader;
    	let current;
    	sitecreationloader = new SiteCreationLoader({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(sitecreationloader.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(sitecreationloader, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(sitecreationloader.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(sitecreationloader.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(sitecreationloader, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_then_block$1.name,
    		type: "then",
    		source: "(18:4) {:then}",
    		ctx
    	});

    	return block;
    }

    // (12:30)          <h2>Nous regardons si vous avez plusieurs sites Scribouilli…</h2>         <img         src="./assets/images/hearts.svg"         alt="cœur sur toi le temps que ça charge"         />     {:then}
    function create_pending_block$1(ctx) {
    	let h2;
    	let t1;
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			h2 = element("h2");
    			h2.textContent = "Nous regardons si vous avez plusieurs sites Scribouilli…";
    			t1 = space();
    			img = element("img");
    			add_location(h2, file$8, 12, 8, 365);
    			if (!src_url_equal(img.src, img_src_value = "./assets/images/hearts.svg")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "cœur sur toi le temps que ça charge");
    			add_location(img, file$8, 13, 8, 439);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h2, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, img, anchor);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h2);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_pending_block$1.name,
    		type: "pending",
    		source: "(12:30)          <h2>Nous regardons si vous avez plusieurs sites Scribouilli…</h2>         <img         src=\\\"./assets/images/hearts.svg\\\"         alt=\\\"cœur sur toi le temps que ça charge\\\"         />     {:then}",
    		ctx
    	});

    	return block;
    }

    // (10:0) <Skeleton>
    function create_default_slot$8(ctx) {
    	let section;
    	let promise;
    	let current;

    	let info = {
    		ctx,
    		current: null,
    		token: null,
    		hasCatch: false,
    		pending: create_pending_block$1,
    		then: create_then_block$1,
    		catch: create_catch_block$1,
    		blocks: [,,,]
    	};

    	handle_promise(promise = /*currentUserReposP*/ ctx[0], info);

    	const block = {
    		c: function create() {
    			section = element("section");
    			info.block.c();
    			attr_dev(section, "class", "screen");
    			attr_dev(section, "id", "loader");
    			add_location(section, file$8, 10, 2, 289);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			info.block.m(section, info.anchor = null);
    			info.mount = () => section;
    			info.anchor = null;
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			info.ctx = ctx;
    			dirty & /*currentUserReposP*/ 1 && promise !== (promise = /*currentUserReposP*/ ctx[0]) && handle_promise(promise, info);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(info.block);
    			current = true;
    		},
    		o: function outro(local) {
    			for (let i = 0; i < 3; i += 1) {
    				const block = info.blocks[i];
    				transition_out(block);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			info.block.d();
    			info.token = null;
    			info = null;
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$8.name,
    		type: "slot",
    		source: "(10:0) <Skeleton>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$d(ctx) {
    	let skeleton;
    	let current;

    	skeleton = new Skeleton({
    			props: {
    				$$slots: { default: [create_default_slot$8] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(skeleton.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(skeleton, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const skeleton_changes = {};

    			if (dirty & /*$$scope, currentUserReposP*/ 3) {
    				skeleton_changes.$$scope = { dirty, ctx };
    			}

    			skeleton.$set(skeleton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(skeleton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(skeleton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(skeleton, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$d.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$d($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('AfterOauthLogin', slots, []);
    	let { currentUserReposP } = $$props;

    	$$self.$$.on_mount.push(function () {
    		if (currentUserReposP === undefined && !('currentUserReposP' in $$props || $$self.$$.bound[$$self.$$.props['currentUserReposP']])) {
    			console.warn("<AfterOauthLogin> was created without expected prop 'currentUserReposP'");
    		}
    	});

    	const writable_props = ['currentUserReposP'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<AfterOauthLogin> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('currentUserReposP' in $$props) $$invalidate(0, currentUserReposP = $$props.currentUserReposP);
    	};

    	$$self.$capture_state = () => ({
    		Skeleton,
    		SiteCreationLoader,
    		currentUserReposP
    	});

    	$$self.$inject_state = $$props => {
    		if ('currentUserReposP' in $$props) $$invalidate(0, currentUserReposP = $$props.currentUserReposP);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [currentUserReposP];
    }

    class AfterOauthLogin extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$d, create_fragment$d, safe_not_equal, { currentUserReposP: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "AfterOauthLogin",
    			options,
    			id: create_fragment$d.name
    		});
    	}

    	get currentUserReposP() {
    		throw new Error("<AfterOauthLogin>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set currentUserReposP(value) {
    		throw new Error("<AfterOauthLogin>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    // @ts-check

    const storeOAuthProviderAccess = () => {
      const url = new URL(location.href);

      console.log(
        'type',
        url.searchParams.get(TOCTOCTOC_OAUTH_PROVIDER_URL_PARAMETER),
      );

      const accessToken = url.searchParams.get(TOCTOCTOC_ACCESS_TOKEN_URL_PARAMETER);
      const providerName = url.searchParams.get(
        TOCTOCTOC_OAUTH_PROVIDER_URL_PARAMETER,
      );

      let origin = url.searchParams.get(TOCTOCTOC_OAUTH_PROVIDER_ORIGIN_PARAMETER);

      if (!origin) {
        if (providerName === 'github') {
          origin = 'https://github.com';
        } else {
          throw new TypeError('missing origin')
        }
      }

      if (accessToken && providerName) {
        /** @type {import('../store').OAuthProvider} */
        const oAuthProvider = {
          name: providerName,
          accessToken,
          origin,
        };

        store.mutations.setOAuthProvider(oAuthProvider);

        remember(OAUTH_PROVIDER_STORAGE_KEY, oAuthProvider);
      }
    };

    var afterOauthLogin = () => {
      storeOAuthProviderAccess();

      const oAuthProvider = store.state.oAuthProvider;
      let type = oAuthProvider?.name;

      console.log('type', type);
      console.log('oAuthProvider', oAuthProvider);

      // no type is implicitly github for historical reasons (which will certainly be irrelevant in, say, 2025)
      if (!type) {
        type = 'github';
      }

      let currentUserReposP;

      if (type === 'github' || type === 'gitlab') {
        currentUserReposP = fetchCurrentUserRepositories().then(repos => {
          if (repos.length === 0) {
            page.redirect('/creer-un-nouveau-site');
          } else {
            store.mutations.setReposForAccount({
              // @ts-ignore
              login: store.state.login,
              repos,
            });

            page.redirect('/selectionner-un-site');
          }
        });
      } else {
        throw new Error(`Unknown OAuth provider type: ${type}`)
      }

      const afterOauthLogin = new AfterOauthLogin({
        target: svelteTarget,
        props: {
          // @ts-ignore
          currentUserReposP,
        },
      });

      replaceComponent(afterOauthLogin, () => {});
    };

    /* assets/scripts/components/screens/intern/ListContenu.svelte generated by Svelte v3.58.0 */
    const file$7 = "assets/scripts/components/screens/intern/ListContenu.svelte";

    function get_each_context$4(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[16] = list[i];
    	child_ctx[17] = list;
    	child_ctx[18] = i;
    	return child_ctx;
    }

    // (121:14) {:else}
    function create_else_block_1$2(ctx) {
    	let a;
    	let t;
    	let a_href_value;

    	const block = {
    		c: function create() {
    			a = element("a");
    			t = text("Modifier");
    			attr_dev(a, "href", a_href_value = "" + (/*atelierPrefix*/ ctx[3] + "?path=" + encodeURIComponent(/*contenu*/ ctx[16].path) + "&repoName=" + /*repoName*/ ctx[9] + "&account=" + /*account*/ ctx[10]));
    			attr_dev(a, "class", "svelte-9zz0yw");
    			add_location(a, file$7, 121, 16, 3068);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    			append_dev(a, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*atelierPrefix, listContenu, repoName, account*/ 1545 && a_href_value !== (a_href_value = "" + (/*atelierPrefix*/ ctx[3] + "?path=" + encodeURIComponent(/*contenu*/ ctx[16].path) + "&repoName=" + /*repoName*/ ctx[9] + "&account=" + /*account*/ ctx[10]))) {
    				attr_dev(a, "href", a_href_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1$2.name,
    		type: "else",
    		source: "(121:14) {:else}",
    		ctx
    	});

    	return block;
    }

    // (98:14) {#if modification}
    function create_if_block_2$1(ctx) {
    	let div;
    	let label0;
    	let t0;
    	let input0;
    	let t1;
    	let label1;
    	let t2;
    	let input1;
    	let mounted;
    	let dispose;

    	function input0_input_handler() {
    		/*input0_input_handler*/ ctx[13].call(input0, /*each_value*/ ctx[17], /*contenu_index*/ ctx[18]);
    	}

    	function input1_change_handler() {
    		/*input1_change_handler*/ ctx[14].call(input1, /*each_value*/ ctx[17], /*contenu_index*/ ctx[18]);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			label0 = element("label");
    			t0 = text("Ordre de la page dans le menu\n                    ");
    			input0 = element("input");
    			t1 = space();
    			label1 = element("label");
    			t2 = text("Afficher dans le menu\n                    ");
    			input1 = element("input");
    			attr_dev(input0, "class", "order svelte-9zz0yw");
    			attr_dev(input0, "aria-label", "Ordre de la page dans le menu");
    			attr_dev(input0, "type", "number");
    			attr_dev(input0, "min", "1");
    			attr_dev(input0, "max", store.state.pages?.length);
    			add_location(input0, file$7, 101, 20, 2339);
    			attr_dev(label0, "class", "svelte-9zz0yw");
    			add_location(label0, file$7, 99, 18, 2261);
    			attr_dev(input1, "class", "inMenu svelte-9zz0yw");
    			attr_dev(input1, "aria-label", "Affichage de la page dans le menu");
    			attr_dev(input1, "type", "checkbox");
    			add_location(input1, file$7, 112, 20, 2754);
    			attr_dev(label1, "class", "svelte-9zz0yw");
    			add_location(label1, file$7, 110, 18, 2684);
    			attr_dev(div, "class", "gestionMenu");
    			add_location(div, file$7, 98, 16, 2217);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, label0);
    			append_dev(label0, t0);
    			append_dev(label0, input0);
    			set_input_value(input0, /*contenu*/ ctx[16].index);
    			append_dev(div, t1);
    			append_dev(div, label1);
    			append_dev(label1, t2);
    			append_dev(label1, input1);
    			input1.checked = /*contenu*/ ctx[16].inMenu;

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "input", input0_input_handler),
    					listen_dev(input1, "change", input1_change_handler)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty & /*listContenu*/ 1 && to_number(input0.value) !== /*contenu*/ ctx[16].index) {
    				set_input_value(input0, /*contenu*/ ctx[16].index);
    			}

    			if (dirty & /*listContenu*/ 1) {
    				input1.checked = /*contenu*/ ctx[16].inMenu;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$1.name,
    		type: "if",
    		source: "(98:14) {#if modification}",
    		ctx
    	});

    	return block;
    }

    // (95:10) {#each listContenu as contenu}
    function create_each_block$4(ctx) {
    	let li;
    	let span;
    	let t0_value = /*contenu*/ ctx[16].title + "";
    	let t0;
    	let t1;
    	let t2;

    	function select_block_type(ctx, dirty) {
    		if (/*modification*/ ctx[11]) return create_if_block_2$1;
    		return create_else_block_1$2;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			li = element("li");
    			span = element("span");
    			t0 = text(t0_value);
    			t1 = space();
    			if_block.c();
    			t2 = space();
    			add_location(span, file$7, 96, 14, 2139);
    			attr_dev(li, "class", "svelte-9zz0yw");
    			add_location(li, file$7, 95, 12, 2120);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			append_dev(li, span);
    			append_dev(span, t0);
    			append_dev(li, t1);
    			if_block.m(li, null);
    			append_dev(li, t2);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*listContenu*/ 1 && t0_value !== (t0_value = /*contenu*/ ctx[16].title + "")) set_data_dev(t0, t0_value);

    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(li, t2);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    			if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$4.name,
    		type: "each",
    		source: "(95:10) {#each listContenu as contenu}",
    		ctx
    	});

    	return block;
    }

    // (131:8) {#if allowModification}
    function create_if_block$6(ctx) {
    	let button;
    	let mounted;
    	let dispose;

    	function select_block_type_1(ctx, dirty) {
    		if (/*modification*/ ctx[11]) return create_if_block_1$4;
    		return create_else_block$4;
    	}

    	let current_block_type = select_block_type_1(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			button = element("button");
    			if_block.c();
    			attr_dev(button, "class", "btn btn_small btn_secondary");
    			add_location(button, file$7, 131, 10, 3368);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			if_block.m(button, null);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*editClick*/ ctx[12], false, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type !== (current_block_type = select_block_type_1(ctx))) {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(button, null);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			if_block.d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$6.name,
    		type: "if",
    		source: "(131:8) {#if allowModification}",
    		ctx
    	});

    	return block;
    }

    // (135:12) {:else}
    function create_else_block$4(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Modifier le menu");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$4.name,
    		type: "else",
    		source: "(135:12) {:else}",
    		ctx
    	});

    	return block;
    }

    // (133:13) {#if modification}
    function create_if_block_1$4(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Enregistrer");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$4.name,
    		type: "if",
    		source: "(133:13) {#if modification}",
    		ctx
    	});

    	return block;
    }

    // (80:0) <Skeleton {currentRepository} {buildStatus} {showArticles} {conflict}>
    function create_default_slot$7(ctx) {
    	let section;
    	let div1;
    	let header;
    	let h2;
    	let t0;
    	let t1;
    	let a;
    	let t2;
    	let a_href_value;
    	let t3;
    	let div0;
    	let ul;
    	let t4;
    	let each_value = /*listContenu*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$4(get_each_context$4(ctx, each_value, i));
    	}

    	let if_block = /*allowModification*/ ctx[7] && create_if_block$6(ctx);

    	const block = {
    		c: function create() {
    			section = element("section");
    			div1 = element("div");
    			header = element("header");
    			h2 = element("h2");
    			t0 = text(/*title*/ ctx[2]);
    			t1 = space();
    			a = element("a");
    			t2 = text(/*newContentButtonText*/ ctx[4]);
    			t3 = space();
    			div0 = element("div");
    			ul = element("ul");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t4 = space();
    			if (if_block) if_block.c();
    			attr_dev(h2, "class", "svelte-9zz0yw");
    			add_location(h2, file$7, 83, 8, 1836);
    			attr_dev(a, "href", a_href_value = "" + (/*atelierPrefix*/ ctx[3] + "?repoName=" + /*repoName*/ ctx[9] + "&account=" + /*account*/ ctx[10]));
    			attr_dev(a, "class", "btn btn__medium svelte-9zz0yw");
    			add_location(a, file$7, 86, 8, 1881);
    			attr_dev(header, "class", "svelte-9zz0yw");
    			add_location(header, file$7, 82, 6, 1819);
    			attr_dev(ul, "class", "svelte-9zz0yw");
    			add_location(ul, file$7, 93, 8, 2062);
    			add_location(div0, file$7, 92, 6, 2048);
    			add_location(div1, file$7, 81, 4, 1807);
    			attr_dev(section, "class", "screen");
    			add_location(section, file$7, 80, 2, 1778);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, div1);
    			append_dev(div1, header);
    			append_dev(header, h2);
    			append_dev(h2, t0);
    			append_dev(header, t1);
    			append_dev(header, a);
    			append_dev(a, t2);
    			append_dev(div1, t3);
    			append_dev(div1, div0);
    			append_dev(div0, ul);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(ul, null);
    				}
    			}

    			append_dev(div0, t4);
    			if (if_block) if_block.m(div0, null);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*title*/ 4) set_data_dev(t0, /*title*/ ctx[2]);
    			if (dirty & /*newContentButtonText*/ 16) set_data_dev(t2, /*newContentButtonText*/ ctx[4]);

    			if (dirty & /*atelierPrefix, repoName, account*/ 1544 && a_href_value !== (a_href_value = "" + (/*atelierPrefix*/ ctx[3] + "?repoName=" + /*repoName*/ ctx[9] + "&account=" + /*account*/ ctx[10]))) {
    				attr_dev(a, "href", a_href_value);
    			}

    			if (dirty & /*listContenu, store, modification, atelierPrefix, encodeURIComponent, repoName, account*/ 3593) {
    				each_value = /*listContenu*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$4(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$4(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(ul, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (/*allowModification*/ ctx[7]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$6(ctx);
    					if_block.c();
    					if_block.m(div0, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			destroy_each(each_blocks, detaching);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$7.name,
    		type: "slot",
    		source: "(80:0) <Skeleton {currentRepository} {buildStatus} {showArticles} {conflict}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$c(ctx) {
    	let skeleton;
    	let current;

    	skeleton = new Skeleton({
    			props: {
    				currentRepository: /*currentRepository*/ ctx[6],
    				buildStatus: /*buildStatus*/ ctx[1],
    				showArticles: /*showArticles*/ ctx[5],
    				conflict: /*conflict*/ ctx[8],
    				$$slots: { default: [create_default_slot$7] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(skeleton.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(skeleton, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const skeleton_changes = {};
    			if (dirty & /*currentRepository*/ 64) skeleton_changes.currentRepository = /*currentRepository*/ ctx[6];
    			if (dirty & /*buildStatus*/ 2) skeleton_changes.buildStatus = /*buildStatus*/ ctx[1];
    			if (dirty & /*showArticles*/ 32) skeleton_changes.showArticles = /*showArticles*/ ctx[5];
    			if (dirty & /*conflict*/ 256) skeleton_changes.conflict = /*conflict*/ ctx[8];

    			if (dirty & /*$$scope, modification, allowModification, listContenu, atelierPrefix, repoName, account, newContentButtonText, title*/ 528029) {
    				skeleton_changes.$$scope = { dirty, ctx };
    			}

    			skeleton.$set(skeleton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(skeleton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(skeleton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(skeleton, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$c.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$c($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ListContenu', slots, []);
    	let { buildStatus } = $$props;
    	let { listContenu = [] } = $$props;
    	let { title } = $$props;
    	let { atelierPrefix } = $$props;
    	let { newContentButtonText } = $$props;
    	let { showArticles } = $$props;
    	let { currentRepository } = $$props;
    	let { allowModification } = $$props;
    	let { conflict } = $$props;

    	/** @type {string} */
    	let repoName;

    	/** @type {string} */
    	let account;

    	let modification = false;
    	const gitAgent = store.state.gitAgent;

    	if (!gitAgent) {
    		throw new TypeError('gitAgent is undefined');
    	}

    	// PPP move this to an action
    	// @ts-ignore
    	const editClick = async e => {
    		if (modification) {
    			for (let page of listContenu) {
    				// for + await leads to poor pref. PPP: do a Promise.all
    				await gitAgent.writeFile(page.path, `${page.title
				? makePageFrontMatter(page.title, page.index, page.inMenu) + '\n'
				: ''}${page.content}`);
    			}

    			await gitAgent.commit('Changements menu');
    			await gitAgent.safePush();
    		}

    		$$invalidate(11, modification = !modification);
    	};

    	$$self.$$.on_mount.push(function () {
    		if (buildStatus === undefined && !('buildStatus' in $$props || $$self.$$.bound[$$self.$$.props['buildStatus']])) {
    			console.warn("<ListContenu> was created without expected prop 'buildStatus'");
    		}

    		if (title === undefined && !('title' in $$props || $$self.$$.bound[$$self.$$.props['title']])) {
    			console.warn("<ListContenu> was created without expected prop 'title'");
    		}

    		if (atelierPrefix === undefined && !('atelierPrefix' in $$props || $$self.$$.bound[$$self.$$.props['atelierPrefix']])) {
    			console.warn("<ListContenu> was created without expected prop 'atelierPrefix'");
    		}

    		if (newContentButtonText === undefined && !('newContentButtonText' in $$props || $$self.$$.bound[$$self.$$.props['newContentButtonText']])) {
    			console.warn("<ListContenu> was created without expected prop 'newContentButtonText'");
    		}

    		if (showArticles === undefined && !('showArticles' in $$props || $$self.$$.bound[$$self.$$.props['showArticles']])) {
    			console.warn("<ListContenu> was created without expected prop 'showArticles'");
    		}

    		if (currentRepository === undefined && !('currentRepository' in $$props || $$self.$$.bound[$$self.$$.props['currentRepository']])) {
    			console.warn("<ListContenu> was created without expected prop 'currentRepository'");
    		}

    		if (allowModification === undefined && !('allowModification' in $$props || $$self.$$.bound[$$self.$$.props['allowModification']])) {
    			console.warn("<ListContenu> was created without expected prop 'allowModification'");
    		}

    		if (conflict === undefined && !('conflict' in $$props || $$self.$$.bound[$$self.$$.props['conflict']])) {
    			console.warn("<ListContenu> was created without expected prop 'conflict'");
    		}
    	});

    	const writable_props = [
    		'buildStatus',
    		'listContenu',
    		'title',
    		'atelierPrefix',
    		'newContentButtonText',
    		'showArticles',
    		'currentRepository',
    		'allowModification',
    		'conflict'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ListContenu> was created with unknown prop '${key}'`);
    	});

    	function input0_input_handler(each_value, contenu_index) {
    		each_value[contenu_index].index = to_number(this.value);
    		$$invalidate(0, listContenu);
    	}

    	function input1_change_handler(each_value, contenu_index) {
    		each_value[contenu_index].inMenu = this.checked;
    		$$invalidate(0, listContenu);
    	}

    	$$self.$$set = $$props => {
    		if ('buildStatus' in $$props) $$invalidate(1, buildStatus = $$props.buildStatus);
    		if ('listContenu' in $$props) $$invalidate(0, listContenu = $$props.listContenu);
    		if ('title' in $$props) $$invalidate(2, title = $$props.title);
    		if ('atelierPrefix' in $$props) $$invalidate(3, atelierPrefix = $$props.atelierPrefix);
    		if ('newContentButtonText' in $$props) $$invalidate(4, newContentButtonText = $$props.newContentButtonText);
    		if ('showArticles' in $$props) $$invalidate(5, showArticles = $$props.showArticles);
    		if ('currentRepository' in $$props) $$invalidate(6, currentRepository = $$props.currentRepository);
    		if ('allowModification' in $$props) $$invalidate(7, allowModification = $$props.allowModification);
    		if ('conflict' in $$props) $$invalidate(8, conflict = $$props.conflict);
    	};

    	$$self.$capture_state = () => ({
    		store,
    		Skeleton,
    		makePageFrontMatter,
    		buildStatus,
    		listContenu,
    		title,
    		atelierPrefix,
    		newContentButtonText,
    		showArticles,
    		currentRepository,
    		allowModification,
    		conflict,
    		repoName,
    		account,
    		modification,
    		gitAgent,
    		editClick
    	});

    	$$self.$inject_state = $$props => {
    		if ('buildStatus' in $$props) $$invalidate(1, buildStatus = $$props.buildStatus);
    		if ('listContenu' in $$props) $$invalidate(0, listContenu = $$props.listContenu);
    		if ('title' in $$props) $$invalidate(2, title = $$props.title);
    		if ('atelierPrefix' in $$props) $$invalidate(3, atelierPrefix = $$props.atelierPrefix);
    		if ('newContentButtonText' in $$props) $$invalidate(4, newContentButtonText = $$props.newContentButtonText);
    		if ('showArticles' in $$props) $$invalidate(5, showArticles = $$props.showArticles);
    		if ('currentRepository' in $$props) $$invalidate(6, currentRepository = $$props.currentRepository);
    		if ('allowModification' in $$props) $$invalidate(7, allowModification = $$props.allowModification);
    		if ('conflict' in $$props) $$invalidate(8, conflict = $$props.conflict);
    		if ('repoName' in $$props) $$invalidate(9, repoName = $$props.repoName);
    		if ('account' in $$props) $$invalidate(10, account = $$props.account);
    		if ('modification' in $$props) $$invalidate(11, modification = $$props.modification);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*currentRepository*/ 64) {
    			$$invalidate(9, repoName = currentRepository.repoName);
    		}

    		if ($$self.$$.dirty & /*currentRepository*/ 64) {
    			$$invalidate(10, account = currentRepository.owner);
    		}
    	};

    	return [
    		listContenu,
    		buildStatus,
    		title,
    		atelierPrefix,
    		newContentButtonText,
    		showArticles,
    		currentRepository,
    		allowModification,
    		conflict,
    		repoName,
    		account,
    		modification,
    		editClick,
    		input0_input_handler,
    		input1_change_handler
    	];
    }

    class ListContenu extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$c, create_fragment$c, safe_not_equal, {
    			buildStatus: 1,
    			listContenu: 0,
    			title: 2,
    			atelierPrefix: 3,
    			newContentButtonText: 4,
    			showArticles: 5,
    			currentRepository: 6,
    			allowModification: 7,
    			conflict: 8
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ListContenu",
    			options,
    			id: create_fragment$c.name
    		});
    	}

    	get buildStatus() {
    		throw new Error("<ListContenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set buildStatus(value) {
    		throw new Error("<ListContenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get listContenu() {
    		throw new Error("<ListContenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set listContenu(value) {
    		throw new Error("<ListContenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get title() {
    		throw new Error("<ListContenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set title(value) {
    		throw new Error("<ListContenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get atelierPrefix() {
    		throw new Error("<ListContenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set atelierPrefix(value) {
    		throw new Error("<ListContenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get newContentButtonText() {
    		throw new Error("<ListContenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set newContentButtonText(value) {
    		throw new Error("<ListContenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get showArticles() {
    		throw new Error("<ListContenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set showArticles(value) {
    		throw new Error("<ListContenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get currentRepository() {
    		throw new Error("<ListContenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set currentRepository(value) {
    		throw new Error("<ListContenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get allowModification() {
    		throw new Error("<ListContenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set allowModification(value) {
    		throw new Error("<ListContenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get conflict() {
    		throw new Error("<ListContenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set conflict(value) {
    		throw new Error("<ListContenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* assets/scripts/components/screens/AtelierArticles.svelte generated by Svelte v3.58.0 */

    function create_fragment$b(ctx) {
    	let listcontenu;
    	let current;

    	listcontenu = new ListContenu({
    			props: {
    				currentRepository: /*currentRepository*/ ctx[3],
    				buildStatus: /*buildStatus*/ ctx[0],
    				listContenu: /*articles*/ ctx[1],
    				showArticles: /*showArticles*/ ctx[2],
    				title: "Articles",
    				atelierPrefix: "./atelier-article",
    				newContentButtonText: "Nouvel article",
    				allowModification: false,
    				conflict: /*conflict*/ ctx[4]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(listcontenu.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(listcontenu, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const listcontenu_changes = {};
    			if (dirty & /*currentRepository*/ 8) listcontenu_changes.currentRepository = /*currentRepository*/ ctx[3];
    			if (dirty & /*buildStatus*/ 1) listcontenu_changes.buildStatus = /*buildStatus*/ ctx[0];
    			if (dirty & /*articles*/ 2) listcontenu_changes.listContenu = /*articles*/ ctx[1];
    			if (dirty & /*showArticles*/ 4) listcontenu_changes.showArticles = /*showArticles*/ ctx[2];
    			if (dirty & /*conflict*/ 16) listcontenu_changes.conflict = /*conflict*/ ctx[4];
    			listcontenu.$set(listcontenu_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(listcontenu.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(listcontenu.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(listcontenu, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$b.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$b($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('AtelierArticles', slots, []);
    	let { buildStatus } = $$props;
    	let { articles } = $$props;
    	let { showArticles } = $$props;
    	let { currentRepository } = $$props;
    	let { conflict } = $$props;

    	$$self.$$.on_mount.push(function () {
    		if (buildStatus === undefined && !('buildStatus' in $$props || $$self.$$.bound[$$self.$$.props['buildStatus']])) {
    			console.warn("<AtelierArticles> was created without expected prop 'buildStatus'");
    		}

    		if (articles === undefined && !('articles' in $$props || $$self.$$.bound[$$self.$$.props['articles']])) {
    			console.warn("<AtelierArticles> was created without expected prop 'articles'");
    		}

    		if (showArticles === undefined && !('showArticles' in $$props || $$self.$$.bound[$$self.$$.props['showArticles']])) {
    			console.warn("<AtelierArticles> was created without expected prop 'showArticles'");
    		}

    		if (currentRepository === undefined && !('currentRepository' in $$props || $$self.$$.bound[$$self.$$.props['currentRepository']])) {
    			console.warn("<AtelierArticles> was created without expected prop 'currentRepository'");
    		}

    		if (conflict === undefined && !('conflict' in $$props || $$self.$$.bound[$$self.$$.props['conflict']])) {
    			console.warn("<AtelierArticles> was created without expected prop 'conflict'");
    		}
    	});

    	const writable_props = ['buildStatus', 'articles', 'showArticles', 'currentRepository', 'conflict'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<AtelierArticles> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('buildStatus' in $$props) $$invalidate(0, buildStatus = $$props.buildStatus);
    		if ('articles' in $$props) $$invalidate(1, articles = $$props.articles);
    		if ('showArticles' in $$props) $$invalidate(2, showArticles = $$props.showArticles);
    		if ('currentRepository' in $$props) $$invalidate(3, currentRepository = $$props.currentRepository);
    		if ('conflict' in $$props) $$invalidate(4, conflict = $$props.conflict);
    	};

    	$$self.$capture_state = () => ({
    		ListContenu,
    		buildStatus,
    		articles,
    		showArticles,
    		currentRepository,
    		conflict
    	});

    	$$self.$inject_state = $$props => {
    		if ('buildStatus' in $$props) $$invalidate(0, buildStatus = $$props.buildStatus);
    		if ('articles' in $$props) $$invalidate(1, articles = $$props.articles);
    		if ('showArticles' in $$props) $$invalidate(2, showArticles = $$props.showArticles);
    		if ('currentRepository' in $$props) $$invalidate(3, currentRepository = $$props.currentRepository);
    		if ('conflict' in $$props) $$invalidate(4, conflict = $$props.conflict);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [buildStatus, articles, showArticles, currentRepository, conflict];
    }

    class AtelierArticles extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$b, create_fragment$b, safe_not_equal, {
    			buildStatus: 0,
    			articles: 1,
    			showArticles: 2,
    			currentRepository: 3,
    			conflict: 4
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "AtelierArticles",
    			options,
    			id: create_fragment$b.name
    		});
    	}

    	get buildStatus() {
    		throw new Error("<AtelierArticles>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set buildStatus(value) {
    		throw new Error("<AtelierArticles>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get articles() {
    		throw new Error("<AtelierArticles>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set articles(value) {
    		throw new Error("<AtelierArticles>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get showArticles() {
    		throw new Error("<AtelierArticles>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set showArticles(value) {
    		throw new Error("<AtelierArticles>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get currentRepository() {
    		throw new Error("<AtelierArticles>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set currentRepository(value) {
    		throw new Error("<AtelierArticles>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get conflict() {
    		throw new Error("<AtelierArticles>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set conflict(value) {
    		throw new Error("<AtelierArticles>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    // @ts-check

    /**
     *
     * @param {import('../store').ScribouilliState} state
     * @returns
     */
    function mapStateToProps$4(state) {
      if (!state.currentRepository) {
        throw new TypeError('currentRepository is undefined')
      }

      return {
        articles: state.articles,
        buildStatus: state.buildStatus,
        currentRepository: state.currentRepository,
        showArticles:
          (state.pages &&
            state.pages.find(p => p.path === 'blog.md') !== undefined) ||
          (state.articles && state.articles.length > 0),
        conflict: state.conflict,
      }
    }

    /**
     * @param {import('page').Context} _
     */
    var atelierListArticles = async ({ querystring }) => {
      await setCurrentRepositoryFromQuerystring(querystring);

      const state = store.state;
      const atelierArticles = new AtelierArticles({
        target: svelteTarget,
        props: mapStateToProps$4(state),
      });

      getCurrentRepoArticles();

      replaceComponent(atelierArticles, mapStateToProps$4);
    };

    /**
     *
     * @param {ScribouilliGitRepo} scribouilliGitRepo
     * @returns {string}
     */
    function makeAtelierListArticlesURL({ owner, repoName }) {
      return `/atelier-list-articles?account=${owner}&repoName=${repoName}`
    }

    /* assets/scripts/components/screens/AtelierPages.svelte generated by Svelte v3.58.0 */

    function create_fragment$a(ctx) {
    	let listcontenu;
    	let current;

    	listcontenu = new ListContenu({
    			props: {
    				currentRepository: /*currentRepository*/ ctx[3],
    				buildStatus: /*buildStatus*/ ctx[0],
    				listContenu: /*pages*/ ctx[1],
    				showArticles: /*showArticles*/ ctx[2],
    				title: "Pages",
    				atelierPrefix: "./atelier-page",
    				newContentButtonText: "Nouvelle page",
    				allowModification: true,
    				conflict: /*conflict*/ ctx[4]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(listcontenu.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(listcontenu, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const listcontenu_changes = {};
    			if (dirty & /*currentRepository*/ 8) listcontenu_changes.currentRepository = /*currentRepository*/ ctx[3];
    			if (dirty & /*buildStatus*/ 1) listcontenu_changes.buildStatus = /*buildStatus*/ ctx[0];
    			if (dirty & /*pages*/ 2) listcontenu_changes.listContenu = /*pages*/ ctx[1];
    			if (dirty & /*showArticles*/ 4) listcontenu_changes.showArticles = /*showArticles*/ ctx[2];
    			if (dirty & /*conflict*/ 16) listcontenu_changes.conflict = /*conflict*/ ctx[4];
    			listcontenu.$set(listcontenu_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(listcontenu.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(listcontenu.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(listcontenu, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$a.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$a($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('AtelierPages', slots, []);
    	let { buildStatus } = $$props;
    	let { pages } = $$props;
    	let { showArticles } = $$props;
    	let { currentRepository } = $$props;
    	let { conflict } = $$props;

    	$$self.$$.on_mount.push(function () {
    		if (buildStatus === undefined && !('buildStatus' in $$props || $$self.$$.bound[$$self.$$.props['buildStatus']])) {
    			console.warn("<AtelierPages> was created without expected prop 'buildStatus'");
    		}

    		if (pages === undefined && !('pages' in $$props || $$self.$$.bound[$$self.$$.props['pages']])) {
    			console.warn("<AtelierPages> was created without expected prop 'pages'");
    		}

    		if (showArticles === undefined && !('showArticles' in $$props || $$self.$$.bound[$$self.$$.props['showArticles']])) {
    			console.warn("<AtelierPages> was created without expected prop 'showArticles'");
    		}

    		if (currentRepository === undefined && !('currentRepository' in $$props || $$self.$$.bound[$$self.$$.props['currentRepository']])) {
    			console.warn("<AtelierPages> was created without expected prop 'currentRepository'");
    		}

    		if (conflict === undefined && !('conflict' in $$props || $$self.$$.bound[$$self.$$.props['conflict']])) {
    			console.warn("<AtelierPages> was created without expected prop 'conflict'");
    		}
    	});

    	const writable_props = ['buildStatus', 'pages', 'showArticles', 'currentRepository', 'conflict'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<AtelierPages> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('buildStatus' in $$props) $$invalidate(0, buildStatus = $$props.buildStatus);
    		if ('pages' in $$props) $$invalidate(1, pages = $$props.pages);
    		if ('showArticles' in $$props) $$invalidate(2, showArticles = $$props.showArticles);
    		if ('currentRepository' in $$props) $$invalidate(3, currentRepository = $$props.currentRepository);
    		if ('conflict' in $$props) $$invalidate(4, conflict = $$props.conflict);
    	};

    	$$self.$capture_state = () => ({
    		ListContenu,
    		buildStatus,
    		pages,
    		showArticles,
    		currentRepository,
    		conflict
    	});

    	$$self.$inject_state = $$props => {
    		if ('buildStatus' in $$props) $$invalidate(0, buildStatus = $$props.buildStatus);
    		if ('pages' in $$props) $$invalidate(1, pages = $$props.pages);
    		if ('showArticles' in $$props) $$invalidate(2, showArticles = $$props.showArticles);
    		if ('currentRepository' in $$props) $$invalidate(3, currentRepository = $$props.currentRepository);
    		if ('conflict' in $$props) $$invalidate(4, conflict = $$props.conflict);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [buildStatus, pages, showArticles, currentRepository, conflict];
    }

    class AtelierPages extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$a, create_fragment$a, safe_not_equal, {
    			buildStatus: 0,
    			pages: 1,
    			showArticles: 2,
    			currentRepository: 3,
    			conflict: 4
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "AtelierPages",
    			options,
    			id: create_fragment$a.name
    		});
    	}

    	get buildStatus() {
    		throw new Error("<AtelierPages>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set buildStatus(value) {
    		throw new Error("<AtelierPages>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get pages() {
    		throw new Error("<AtelierPages>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set pages(value) {
    		throw new Error("<AtelierPages>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get showArticles() {
    		throw new Error("<AtelierPages>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set showArticles(value) {
    		throw new Error("<AtelierPages>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get currentRepository() {
    		throw new Error("<AtelierPages>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set currentRepository(value) {
    		throw new Error("<AtelierPages>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get conflict() {
    		throw new Error("<AtelierPages>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set conflict(value) {
    		throw new Error("<AtelierPages>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    // @ts-check

    /**
     *
     * @param {import("../store").ScribouilliState} state
     * @returns
     */
    const mapStateToProps$3 = state => {
      if (!state.currentRepository) {
        throw new TypeError('currentRepository is undefined')
      }

      return {
        pages: state.pages && state.pages.filter(p => p.path !== 'blog.md'),
        buildStatus: state.buildStatus,
        currentRepository: state.currentRepository,
        showArticles:
          (state.pages &&
            state.pages.find(p => p.path === 'blog.md') !== undefined) ||
          (state.articles && state.articles.length > 0),
        conflict: state.conflict,
      }
    };

    /**
     * @param {import('page').Context} _
     */
    var atelierListPages = async ({ querystring }) => {
      await setCurrentRepositoryFromQuerystring(querystring);

      const state = store.state;
      const atelierPages = new AtelierPages({
        target: svelteTarget,
        props: mapStateToProps$3(state),
      });

      replaceComponent(atelierPages, mapStateToProps$3);
    };

    var marked_umd = createCommonjsModule(function (module, exports) {
    /**
     * marked v11.0.0 - a markdown parser
     * Copyright (c) 2011-2023, Christopher Jeffrey. (MIT Licensed)
     * https://github.com/markedjs/marked
     */

    /**
     * DO NOT EDIT THIS FILE
     * The code in this file is generated from files in ./src/
     */

    (function (global, factory) {
        factory(exports) ;
    })(commonjsGlobal, (function (exports) {
        /**
         * Gets the original marked default options.
         */
        function _getDefaults() {
            return {
                async: false,
                breaks: false,
                extensions: null,
                gfm: true,
                hooks: null,
                pedantic: false,
                renderer: null,
                silent: false,
                tokenizer: null,
                walkTokens: null
            };
        }
        exports.defaults = _getDefaults();
        function changeDefaults(newDefaults) {
            exports.defaults = newDefaults;
        }

        /**
         * Helpers
         */
        const escapeTest = /[&<>"']/;
        const escapeReplace = new RegExp(escapeTest.source, 'g');
        const escapeTestNoEncode = /[<>"']|&(?!(#\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\w+);)/;
        const escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, 'g');
        const escapeReplacements = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#39;'
        };
        const getEscapeReplacement = (ch) => escapeReplacements[ch];
        function escape$1(html, encode) {
            if (encode) {
                if (escapeTest.test(html)) {
                    return html.replace(escapeReplace, getEscapeReplacement);
                }
            }
            else {
                if (escapeTestNoEncode.test(html)) {
                    return html.replace(escapeReplaceNoEncode, getEscapeReplacement);
                }
            }
            return html;
        }
        const unescapeTest = /&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/ig;
        function unescape(html) {
            // explicitly match decimal, hex, and named HTML entities
            return html.replace(unescapeTest, (_, n) => {
                n = n.toLowerCase();
                if (n === 'colon')
                    return ':';
                if (n.charAt(0) === '#') {
                    return n.charAt(1) === 'x'
                        ? String.fromCharCode(parseInt(n.substring(2), 16))
                        : String.fromCharCode(+n.substring(1));
                }
                return '';
            });
        }
        const caret = /(^|[^\[])\^/g;
        function edit(regex, opt) {
            let source = typeof regex === 'string' ? regex : regex.source;
            opt = opt || '';
            const obj = {
                replace: (name, val) => {
                    let valSource = typeof val === 'string' ? val : val.source;
                    valSource = valSource.replace(caret, '$1');
                    source = source.replace(name, valSource);
                    return obj;
                },
                getRegex: () => {
                    return new RegExp(source, opt);
                }
            };
            return obj;
        }
        function cleanUrl(href) {
            try {
                href = encodeURI(href).replace(/%25/g, '%');
            }
            catch (e) {
                return null;
            }
            return href;
        }
        const noopTest = { exec: () => null };
        function splitCells(tableRow, count) {
            // ensure that every cell-delimiting pipe has a space
            // before it to distinguish it from an escaped pipe
            const row = tableRow.replace(/\|/g, (match, offset, str) => {
                let escaped = false;
                let curr = offset;
                while (--curr >= 0 && str[curr] === '\\')
                    escaped = !escaped;
                if (escaped) {
                    // odd number of slashes means | is escaped
                    // so we leave it alone
                    return '|';
                }
                else {
                    // add space before unescaped |
                    return ' |';
                }
            }), cells = row.split(/ \|/);
            let i = 0;
            // First/last cell in a row cannot be empty if it has no leading/trailing pipe
            if (!cells[0].trim()) {
                cells.shift();
            }
            if (cells.length > 0 && !cells[cells.length - 1].trim()) {
                cells.pop();
            }
            if (count) {
                if (cells.length > count) {
                    cells.splice(count);
                }
                else {
                    while (cells.length < count)
                        cells.push('');
                }
            }
            for (; i < cells.length; i++) {
                // leading or trailing whitespace is ignored per the gfm spec
                cells[i] = cells[i].trim().replace(/\\\|/g, '|');
            }
            return cells;
        }
        /**
         * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').
         * /c*$/ is vulnerable to REDOS.
         *
         * @param str
         * @param c
         * @param invert Remove suffix of non-c chars instead. Default falsey.
         */
        function rtrim(str, c, invert) {
            const l = str.length;
            if (l === 0) {
                return '';
            }
            // Length of suffix matching the invert condition.
            let suffLen = 0;
            // Step left until we fail to match the invert condition.
            while (suffLen < l) {
                const currChar = str.charAt(l - suffLen - 1);
                if (currChar === c && !invert) {
                    suffLen++;
                }
                else if (currChar !== c && invert) {
                    suffLen++;
                }
                else {
                    break;
                }
            }
            return str.slice(0, l - suffLen);
        }
        function findClosingBracket(str, b) {
            if (str.indexOf(b[1]) === -1) {
                return -1;
            }
            let level = 0;
            for (let i = 0; i < str.length; i++) {
                if (str[i] === '\\') {
                    i++;
                }
                else if (str[i] === b[0]) {
                    level++;
                }
                else if (str[i] === b[1]) {
                    level--;
                    if (level < 0) {
                        return i;
                    }
                }
            }
            return -1;
        }

        function outputLink(cap, link, raw, lexer) {
            const href = link.href;
            const title = link.title ? escape$1(link.title) : null;
            const text = cap[1].replace(/\\([\[\]])/g, '$1');
            if (cap[0].charAt(0) !== '!') {
                lexer.state.inLink = true;
                const token = {
                    type: 'link',
                    raw,
                    href,
                    title,
                    text,
                    tokens: lexer.inlineTokens(text)
                };
                lexer.state.inLink = false;
                return token;
            }
            return {
                type: 'image',
                raw,
                href,
                title,
                text: escape$1(text)
            };
        }
        function indentCodeCompensation(raw, text) {
            const matchIndentToCode = raw.match(/^(\s+)(?:```)/);
            if (matchIndentToCode === null) {
                return text;
            }
            const indentToCode = matchIndentToCode[1];
            return text
                .split('\n')
                .map(node => {
                const matchIndentInNode = node.match(/^\s+/);
                if (matchIndentInNode === null) {
                    return node;
                }
                const [indentInNode] = matchIndentInNode;
                if (indentInNode.length >= indentToCode.length) {
                    return node.slice(indentToCode.length);
                }
                return node;
            })
                .join('\n');
        }
        /**
         * Tokenizer
         */
        class _Tokenizer {
            options;
            rules; // set by the lexer
            lexer; // set by the lexer
            constructor(options) {
                this.options = options || exports.defaults;
            }
            space(src) {
                const cap = this.rules.block.newline.exec(src);
                if (cap && cap[0].length > 0) {
                    return {
                        type: 'space',
                        raw: cap[0]
                    };
                }
            }
            code(src) {
                const cap = this.rules.block.code.exec(src);
                if (cap) {
                    const text = cap[0].replace(/^ {1,4}/gm, '');
                    return {
                        type: 'code',
                        raw: cap[0],
                        codeBlockStyle: 'indented',
                        text: !this.options.pedantic
                            ? rtrim(text, '\n')
                            : text
                    };
                }
            }
            fences(src) {
                const cap = this.rules.block.fences.exec(src);
                if (cap) {
                    const raw = cap[0];
                    const text = indentCodeCompensation(raw, cap[3] || '');
                    return {
                        type: 'code',
                        raw,
                        lang: cap[2] ? cap[2].trim().replace(this.rules.inline.anyPunctuation, '$1') : cap[2],
                        text
                    };
                }
            }
            heading(src) {
                const cap = this.rules.block.heading.exec(src);
                if (cap) {
                    let text = cap[2].trim();
                    // remove trailing #s
                    if (/#$/.test(text)) {
                        const trimmed = rtrim(text, '#');
                        if (this.options.pedantic) {
                            text = trimmed.trim();
                        }
                        else if (!trimmed || / $/.test(trimmed)) {
                            // CommonMark requires space before trailing #s
                            text = trimmed.trim();
                        }
                    }
                    return {
                        type: 'heading',
                        raw: cap[0],
                        depth: cap[1].length,
                        text,
                        tokens: this.lexer.inline(text)
                    };
                }
            }
            hr(src) {
                const cap = this.rules.block.hr.exec(src);
                if (cap) {
                    return {
                        type: 'hr',
                        raw: cap[0]
                    };
                }
            }
            blockquote(src) {
                const cap = this.rules.block.blockquote.exec(src);
                if (cap) {
                    const text = rtrim(cap[0].replace(/^ *>[ \t]?/gm, ''), '\n');
                    const top = this.lexer.state.top;
                    this.lexer.state.top = true;
                    const tokens = this.lexer.blockTokens(text);
                    this.lexer.state.top = top;
                    return {
                        type: 'blockquote',
                        raw: cap[0],
                        tokens,
                        text
                    };
                }
            }
            list(src) {
                let cap = this.rules.block.list.exec(src);
                if (cap) {
                    let bull = cap[1].trim();
                    const isordered = bull.length > 1;
                    const list = {
                        type: 'list',
                        raw: '',
                        ordered: isordered,
                        start: isordered ? +bull.slice(0, -1) : '',
                        loose: false,
                        items: []
                    };
                    bull = isordered ? `\\d{1,9}\\${bull.slice(-1)}` : `\\${bull}`;
                    if (this.options.pedantic) {
                        bull = isordered ? bull : '[*+-]';
                    }
                    // Get next list item
                    const itemRegex = new RegExp(`^( {0,3}${bull})((?:[\t ][^\\n]*)?(?:\\n|$))`);
                    let raw = '';
                    let itemContents = '';
                    let endsWithBlankLine = false;
                    // Check if current bullet point can start a new List Item
                    while (src) {
                        let endEarly = false;
                        if (!(cap = itemRegex.exec(src))) {
                            break;
                        }
                        if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)
                            break;
                        }
                        raw = cap[0];
                        src = src.substring(raw.length);
                        let line = cap[2].split('\n', 1)[0].replace(/^\t+/, (t) => ' '.repeat(3 * t.length));
                        let nextLine = src.split('\n', 1)[0];
                        let indent = 0;
                        if (this.options.pedantic) {
                            indent = 2;
                            itemContents = line.trimStart();
                        }
                        else {
                            indent = cap[2].search(/[^ ]/); // Find first non-space char
                            indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent
                            itemContents = line.slice(indent);
                            indent += cap[1].length;
                        }
                        let blankLine = false;
                        if (!line && /^ *$/.test(nextLine)) { // Items begin with at most one blank line
                            raw += nextLine + '\n';
                            src = src.substring(nextLine.length + 1);
                            endEarly = true;
                        }
                        if (!endEarly) {
                            const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\d{1,9}[.)])((?:[ \t][^\\n]*)?(?:\\n|$))`);
                            const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$)`);
                            const fencesBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\`\`\`|~~~)`);
                            const headingBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`);
                            // Check if following lines should be included in List Item
                            while (src) {
                                const rawLine = src.split('\n', 1)[0];
                                nextLine = rawLine;
                                // Re-align to follow commonmark nesting rules
                                if (this.options.pedantic) {
                                    nextLine = nextLine.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');
                                }
                                // End list item if found code fences
                                if (fencesBeginRegex.test(nextLine)) {
                                    break;
                                }
                                // End list item if found start of new heading
                                if (headingBeginRegex.test(nextLine)) {
                                    break;
                                }
                                // End list item if found start of new bullet
                                if (nextBulletRegex.test(nextLine)) {
                                    break;
                                }
                                // Horizontal rule found
                                if (hrRegex.test(src)) {
                                    break;
                                }
                                if (nextLine.search(/[^ ]/) >= indent || !nextLine.trim()) { // Dedent if possible
                                    itemContents += '\n' + nextLine.slice(indent);
                                }
                                else {
                                    // not enough indentation
                                    if (blankLine) {
                                        break;
                                    }
                                    // paragraph continuation unless last line was a different block level element
                                    if (line.search(/[^ ]/) >= 4) { // indented code block
                                        break;
                                    }
                                    if (fencesBeginRegex.test(line)) {
                                        break;
                                    }
                                    if (headingBeginRegex.test(line)) {
                                        break;
                                    }
                                    if (hrRegex.test(line)) {
                                        break;
                                    }
                                    itemContents += '\n' + nextLine;
                                }
                                if (!blankLine && !nextLine.trim()) { // Check if current line is blank
                                    blankLine = true;
                                }
                                raw += rawLine + '\n';
                                src = src.substring(rawLine.length + 1);
                                line = nextLine.slice(indent);
                            }
                        }
                        if (!list.loose) {
                            // If the previous item ended with a blank line, the list is loose
                            if (endsWithBlankLine) {
                                list.loose = true;
                            }
                            else if (/\n *\n *$/.test(raw)) {
                                endsWithBlankLine = true;
                            }
                        }
                        let istask = null;
                        let ischecked;
                        // Check for task list items
                        if (this.options.gfm) {
                            istask = /^\[[ xX]\] /.exec(itemContents);
                            if (istask) {
                                ischecked = istask[0] !== '[ ] ';
                                itemContents = itemContents.replace(/^\[[ xX]\] +/, '');
                            }
                        }
                        list.items.push({
                            type: 'list_item',
                            raw,
                            task: !!istask,
                            checked: ischecked,
                            loose: false,
                            text: itemContents,
                            tokens: []
                        });
                        list.raw += raw;
                    }
                    // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic
                    list.items[list.items.length - 1].raw = raw.trimEnd();
                    (list.items[list.items.length - 1]).text = itemContents.trimEnd();
                    list.raw = list.raw.trimEnd();
                    // Item child tokens handled here at end because we needed to have the final item to trim it first
                    for (let i = 0; i < list.items.length; i++) {
                        this.lexer.state.top = false;
                        list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);
                        if (!list.loose) {
                            // Check if list should be loose
                            const spacers = list.items[i].tokens.filter(t => t.type === 'space');
                            const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => /\n.*\n/.test(t.raw));
                            list.loose = hasMultipleLineBreaks;
                        }
                    }
                    // Set all items to loose if list is loose
                    if (list.loose) {
                        for (let i = 0; i < list.items.length; i++) {
                            list.items[i].loose = true;
                        }
                    }
                    return list;
                }
            }
            html(src) {
                const cap = this.rules.block.html.exec(src);
                if (cap) {
                    const token = {
                        type: 'html',
                        block: true,
                        raw: cap[0],
                        pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',
                        text: cap[0]
                    };
                    return token;
                }
            }
            def(src) {
                const cap = this.rules.block.def.exec(src);
                if (cap) {
                    const tag = cap[1].toLowerCase().replace(/\s+/g, ' ');
                    const href = cap[2] ? cap[2].replace(/^<(.*)>$/, '$1').replace(this.rules.inline.anyPunctuation, '$1') : '';
                    const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline.anyPunctuation, '$1') : cap[3];
                    return {
                        type: 'def',
                        tag,
                        raw: cap[0],
                        href,
                        title
                    };
                }
            }
            table(src) {
                const cap = this.rules.block.table.exec(src);
                if (!cap) {
                    return;
                }
                if (!/[:|]/.test(cap[2])) {
                    // delimiter row must have a pipe (|) or colon (:) otherwise it is a setext heading
                    return;
                }
                const headers = splitCells(cap[1]);
                const aligns = cap[2].replace(/^\||\| *$/g, '').split('|');
                const rows = cap[3] && cap[3].trim() ? cap[3].replace(/\n[ \t]*$/, '').split('\n') : [];
                const item = {
                    type: 'table',
                    raw: cap[0],
                    header: [],
                    align: [],
                    rows: []
                };
                if (headers.length !== aligns.length) {
                    // header and align columns must be equal, rows can be different.
                    return;
                }
                for (const align of aligns) {
                    if (/^ *-+: *$/.test(align)) {
                        item.align.push('right');
                    }
                    else if (/^ *:-+: *$/.test(align)) {
                        item.align.push('center');
                    }
                    else if (/^ *:-+ *$/.test(align)) {
                        item.align.push('left');
                    }
                    else {
                        item.align.push(null);
                    }
                }
                for (const header of headers) {
                    item.header.push({
                        text: header,
                        tokens: this.lexer.inline(header)
                    });
                }
                for (const row of rows) {
                    item.rows.push(splitCells(row, item.header.length).map(cell => {
                        return {
                            text: cell,
                            tokens: this.lexer.inline(cell)
                        };
                    }));
                }
                return item;
            }
            lheading(src) {
                const cap = this.rules.block.lheading.exec(src);
                if (cap) {
                    return {
                        type: 'heading',
                        raw: cap[0],
                        depth: cap[2].charAt(0) === '=' ? 1 : 2,
                        text: cap[1],
                        tokens: this.lexer.inline(cap[1])
                    };
                }
            }
            paragraph(src) {
                const cap = this.rules.block.paragraph.exec(src);
                if (cap) {
                    const text = cap[1].charAt(cap[1].length - 1) === '\n'
                        ? cap[1].slice(0, -1)
                        : cap[1];
                    return {
                        type: 'paragraph',
                        raw: cap[0],
                        text,
                        tokens: this.lexer.inline(text)
                    };
                }
            }
            text(src) {
                const cap = this.rules.block.text.exec(src);
                if (cap) {
                    return {
                        type: 'text',
                        raw: cap[0],
                        text: cap[0],
                        tokens: this.lexer.inline(cap[0])
                    };
                }
            }
            escape(src) {
                const cap = this.rules.inline.escape.exec(src);
                if (cap) {
                    return {
                        type: 'escape',
                        raw: cap[0],
                        text: escape$1(cap[1])
                    };
                }
            }
            tag(src) {
                const cap = this.rules.inline.tag.exec(src);
                if (cap) {
                    if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {
                        this.lexer.state.inLink = true;
                    }
                    else if (this.lexer.state.inLink && /^<\/a>/i.test(cap[0])) {
                        this.lexer.state.inLink = false;
                    }
                    if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\s|>)/i.test(cap[0])) {
                        this.lexer.state.inRawBlock = true;
                    }
                    else if (this.lexer.state.inRawBlock && /^<\/(pre|code|kbd|script)(\s|>)/i.test(cap[0])) {
                        this.lexer.state.inRawBlock = false;
                    }
                    return {
                        type: 'html',
                        raw: cap[0],
                        inLink: this.lexer.state.inLink,
                        inRawBlock: this.lexer.state.inRawBlock,
                        block: false,
                        text: cap[0]
                    };
                }
            }
            link(src) {
                const cap = this.rules.inline.link.exec(src);
                if (cap) {
                    const trimmedUrl = cap[2].trim();
                    if (!this.options.pedantic && /^</.test(trimmedUrl)) {
                        // commonmark requires matching angle brackets
                        if (!(/>$/.test(trimmedUrl))) {
                            return;
                        }
                        // ending angle bracket cannot be escaped
                        const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\');
                        if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {
                            return;
                        }
                    }
                    else {
                        // find closing parenthesis
                        const lastParenIndex = findClosingBracket(cap[2], '()');
                        if (lastParenIndex > -1) {
                            const start = cap[0].indexOf('!') === 0 ? 5 : 4;
                            const linkLen = start + cap[1].length + lastParenIndex;
                            cap[2] = cap[2].substring(0, lastParenIndex);
                            cap[0] = cap[0].substring(0, linkLen).trim();
                            cap[3] = '';
                        }
                    }
                    let href = cap[2];
                    let title = '';
                    if (this.options.pedantic) {
                        // split pedantic href and title
                        const link = /^([^'"]*[^\s])\s+(['"])(.*)\2/.exec(href);
                        if (link) {
                            href = link[1];
                            title = link[3];
                        }
                    }
                    else {
                        title = cap[3] ? cap[3].slice(1, -1) : '';
                    }
                    href = href.trim();
                    if (/^</.test(href)) {
                        if (this.options.pedantic && !(/>$/.test(trimmedUrl))) {
                            // pedantic allows starting angle bracket without ending angle bracket
                            href = href.slice(1);
                        }
                        else {
                            href = href.slice(1, -1);
                        }
                    }
                    return outputLink(cap, {
                        href: href ? href.replace(this.rules.inline.anyPunctuation, '$1') : href,
                        title: title ? title.replace(this.rules.inline.anyPunctuation, '$1') : title
                    }, cap[0], this.lexer);
                }
            }
            reflink(src, links) {
                let cap;
                if ((cap = this.rules.inline.reflink.exec(src))
                    || (cap = this.rules.inline.nolink.exec(src))) {
                    const linkString = (cap[2] || cap[1]).replace(/\s+/g, ' ');
                    const link = links[linkString.toLowerCase()];
                    if (!link) {
                        const text = cap[0].charAt(0);
                        return {
                            type: 'text',
                            raw: text,
                            text
                        };
                    }
                    return outputLink(cap, link, cap[0], this.lexer);
                }
            }
            emStrong(src, maskedSrc, prevChar = '') {
                let match = this.rules.inline.emStrongLDelim.exec(src);
                if (!match)
                    return;
                // _ can't be between two alphanumerics. \p{L}\p{N} includes non-english alphabet/numbers as well
                if (match[3] && prevChar.match(/[\p{L}\p{N}]/u))
                    return;
                const nextChar = match[1] || match[2] || '';
                if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {
                    // unicode Regex counts emoji as 1 char; spread into array for proper count (used multiple times below)
                    const lLength = [...match[0]].length - 1;
                    let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;
                    const endReg = match[0][0] === '*' ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd;
                    endReg.lastIndex = 0;
                    // Clip maskedSrc to same section of string as src (move to lexer?)
                    maskedSrc = maskedSrc.slice(-1 * src.length + lLength);
                    while ((match = endReg.exec(maskedSrc)) != null) {
                        rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];
                        if (!rDelim)
                            continue; // skip single * in __abc*abc__
                        rLength = [...rDelim].length;
                        if (match[3] || match[4]) { // found another Left Delim
                            delimTotal += rLength;
                            continue;
                        }
                        else if (match[5] || match[6]) { // either Left or Right Delim
                            if (lLength % 3 && !((lLength + rLength) % 3)) {
                                midDelimTotal += rLength;
                                continue; // CommonMark Emphasis Rules 9-10
                            }
                        }
                        delimTotal -= rLength;
                        if (delimTotal > 0)
                            continue; // Haven't found enough closing delimiters
                        // Remove extra characters. *a*** -> *a*
                        rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);
                        // char length can be >1 for unicode characters;
                        const lastCharLength = [...match[0]][0].length;
                        const raw = src.slice(0, lLength + match.index + lastCharLength + rLength);
                        // Create `em` if smallest delimiter has odd char count. *a***
                        if (Math.min(lLength, rLength) % 2) {
                            const text = raw.slice(1, -1);
                            return {
                                type: 'em',
                                raw,
                                text,
                                tokens: this.lexer.inlineTokens(text)
                            };
                        }
                        // Create 'strong' if smallest delimiter has even char count. **a***
                        const text = raw.slice(2, -2);
                        return {
                            type: 'strong',
                            raw,
                            text,
                            tokens: this.lexer.inlineTokens(text)
                        };
                    }
                }
            }
            codespan(src) {
                const cap = this.rules.inline.code.exec(src);
                if (cap) {
                    let text = cap[2].replace(/\n/g, ' ');
                    const hasNonSpaceChars = /[^ ]/.test(text);
                    const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);
                    if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {
                        text = text.substring(1, text.length - 1);
                    }
                    text = escape$1(text, true);
                    return {
                        type: 'codespan',
                        raw: cap[0],
                        text
                    };
                }
            }
            br(src) {
                const cap = this.rules.inline.br.exec(src);
                if (cap) {
                    return {
                        type: 'br',
                        raw: cap[0]
                    };
                }
            }
            del(src) {
                const cap = this.rules.inline.del.exec(src);
                if (cap) {
                    return {
                        type: 'del',
                        raw: cap[0],
                        text: cap[2],
                        tokens: this.lexer.inlineTokens(cap[2])
                    };
                }
            }
            autolink(src) {
                const cap = this.rules.inline.autolink.exec(src);
                if (cap) {
                    let text, href;
                    if (cap[2] === '@') {
                        text = escape$1(cap[1]);
                        href = 'mailto:' + text;
                    }
                    else {
                        text = escape$1(cap[1]);
                        href = text;
                    }
                    return {
                        type: 'link',
                        raw: cap[0],
                        text,
                        href,
                        tokens: [
                            {
                                type: 'text',
                                raw: text,
                                text
                            }
                        ]
                    };
                }
            }
            url(src) {
                let cap;
                if (cap = this.rules.inline.url.exec(src)) {
                    let text, href;
                    if (cap[2] === '@') {
                        text = escape$1(cap[0]);
                        href = 'mailto:' + text;
                    }
                    else {
                        // do extended autolink path validation
                        let prevCapZero;
                        do {
                            prevCapZero = cap[0];
                            cap[0] = this.rules.inline._backpedal.exec(cap[0])?.[0] ?? '';
                        } while (prevCapZero !== cap[0]);
                        text = escape$1(cap[0]);
                        if (cap[1] === 'www.') {
                            href = 'http://' + cap[0];
                        }
                        else {
                            href = cap[0];
                        }
                    }
                    return {
                        type: 'link',
                        raw: cap[0],
                        text,
                        href,
                        tokens: [
                            {
                                type: 'text',
                                raw: text,
                                text
                            }
                        ]
                    };
                }
            }
            inlineText(src) {
                const cap = this.rules.inline.text.exec(src);
                if (cap) {
                    let text;
                    if (this.lexer.state.inRawBlock) {
                        text = cap[0];
                    }
                    else {
                        text = escape$1(cap[0]);
                    }
                    return {
                        type: 'text',
                        raw: cap[0],
                        text
                    };
                }
            }
        }

        /**
         * Block-Level Grammar
         */
        const newline = /^(?: *(?:\n|$))+/;
        const blockCode = /^( {4}[^\n]+(?:\n(?: *(?:\n|$))*)?)+/;
        const fences = /^ {0,3}(`{3,}(?=[^`\n]*(?:\n|$))|~{3,})([^\n]*)(?:\n|$)(?:|([\s\S]*?)(?:\n|$))(?: {0,3}\1[~`]* *(?=\n|$)|$)/;
        const hr = /^ {0,3}((?:-[\t ]*){3,}|(?:_[ \t]*){3,}|(?:\*[ \t]*){3,})(?:\n+|$)/;
        const heading = /^ {0,3}(#{1,6})(?=\s|$)(.*)(?:\n+|$)/;
        const bullet = /(?:[*+-]|\d{1,9}[.)])/;
        const lheading = edit(/^(?!bull )((?:.|\n(?!\s*?\n|bull ))+?)\n {0,3}(=+|-+) *(?:\n+|$)/)
            .replace(/bull/g, bullet) // lists can interrupt
            .getRegex();
        const _paragraph = /^([^\n]+(?:\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\n)[^\n]+)*)/;
        const blockText = /^[^\n]+/;
        const _blockLabel = /(?!\s*\])(?:\\.|[^\[\]\\])+/;
        const def = edit(/^ {0,3}\[(label)\]: *(?:\n *)?([^<\s][^\s]*|<.*?>)(?:(?: +(?:\n *)?| *\n *)(title))? *(?:\n+|$)/)
            .replace('label', _blockLabel)
            .replace('title', /(?:"(?:\\"?|[^"\\])*"|'[^'\n]*(?:\n[^'\n]+)*\n?'|\([^()]*\))/)
            .getRegex();
        const list = edit(/^( {0,3}bull)([ \t][^\n]+?)?(?:\n|$)/)
            .replace(/bull/g, bullet)
            .getRegex();
        const _tag = 'address|article|aside|base|basefont|blockquote|body|caption'
            + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'
            + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'
            + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'
            + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr'
            + '|track|ul';
        const _comment = /<!--(?!-?>)[\s\S]*?(?:-->|$)/;
        const html = edit('^ {0,3}(?:' // optional indentation
            + '<(script|pre|style|textarea)[\\s>][\\s\\S]*?(?:</\\1>[^\\n]*\\n+|$)' // (1)
            + '|comment[^\\n]*(\\n+|$)' // (2)
            + '|<\\?[\\s\\S]*?(?:\\?>\\n*|$)' // (3)
            + '|<![A-Z][\\s\\S]*?(?:>\\n*|$)' // (4)
            + '|<!\\[CDATA\\[[\\s\\S]*?(?:\\]\\]>\\n*|$)' // (5)
            + '|</?(tag)(?: +|\\n|/?>)[\\s\\S]*?(?:(?:\\n *)+\\n|$)' // (6)
            + '|<(?!script|pre|style|textarea)([a-z][\\w-]*)(?:attribute)*? */?>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$)' // (7) open tag
            + '|</(?!script|pre|style|textarea)[a-z][\\w-]*\\s*>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$)' // (7) closing tag
            + ')', 'i')
            .replace('comment', _comment)
            .replace('tag', _tag)
            .replace('attribute', / +[a-zA-Z:_][\w.:-]*(?: *= *"[^"\n]*"| *= *'[^'\n]*'| *= *[^\s"'=<>`]+)?/)
            .getRegex();
        const paragraph = edit(_paragraph)
            .replace('hr', hr)
            .replace('heading', ' {0,3}#{1,6}(?:\\s|$)')
            .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs
            .replace('|table', '')
            .replace('blockquote', ' {0,3}>')
            .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n')
            .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt
            .replace('html', '</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)')
            .replace('tag', _tag) // pars can be interrupted by type (6) html blocks
            .getRegex();
        const blockquote = edit(/^( {0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/)
            .replace('paragraph', paragraph)
            .getRegex();
        /**
         * Normal Block Grammar
         */
        const blockNormal = {
            blockquote,
            code: blockCode,
            def,
            fences,
            heading,
            hr,
            html,
            lheading,
            list,
            newline,
            paragraph,
            table: noopTest,
            text: blockText
        };
        /**
         * GFM Block Grammar
         */
        const gfmTable = edit('^ *([^\\n ].*)\\n' // Header
            + ' {0,3}((?:\\| *)?:?-+:? *(?:\\| *:?-+:? *)*(?:\\| *)?)' // Align
            + '(?:\\n((?:(?! *\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\n|$))*)\\n*|$)') // Cells
            .replace('hr', hr)
            .replace('heading', ' {0,3}#{1,6}(?:\\s|$)')
            .replace('blockquote', ' {0,3}>')
            .replace('code', ' {4}[^\\n]')
            .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n')
            .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt
            .replace('html', '</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)')
            .replace('tag', _tag) // tables can be interrupted by type (6) html blocks
            .getRegex();
        const blockGfm = {
            ...blockNormal,
            table: gfmTable,
            paragraph: edit(_paragraph)
                .replace('hr', hr)
                .replace('heading', ' {0,3}#{1,6}(?:\\s|$)')
                .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs
                .replace('table', gfmTable) // interrupt paragraphs with table
                .replace('blockquote', ' {0,3}>')
                .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n')
                .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt
                .replace('html', '</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)')
                .replace('tag', _tag) // pars can be interrupted by type (6) html blocks
                .getRegex()
        };
        /**
         * Pedantic grammar (original John Gruber's loose markdown specification)
         */
        const blockPedantic = {
            ...blockNormal,
            html: edit('^ *(?:comment *(?:\\n|\\s*$)'
                + '|<(tag)[\\s\\S]+?</\\1> *(?:\\n{2,}|\\s*$)' // closed tag
                + '|<tag(?:"[^"]*"|\'[^\']*\'|\\s[^\'"/>\\s]*)*?/?> *(?:\\n{2,}|\\s*$))')
                .replace('comment', _comment)
                .replace(/tag/g, '(?!(?:'
                + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'
                + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'
                + '\\b)\\w+(?!:|[^\\w\\s@]*@)\\b')
                .getRegex(),
            def: /^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +(["(][^\n]+[")]))? *(?:\n+|$)/,
            heading: /^(#{1,6})(.*)(?:\n+|$)/,
            fences: noopTest, // fences not supported
            lheading: /^(.+?)\n {0,3}(=+|-+) *(?:\n+|$)/,
            paragraph: edit(_paragraph)
                .replace('hr', hr)
                .replace('heading', ' *#{1,6} *[^\n]')
                .replace('lheading', lheading)
                .replace('|table', '')
                .replace('blockquote', ' {0,3}>')
                .replace('|fences', '')
                .replace('|list', '')
                .replace('|html', '')
                .replace('|tag', '')
                .getRegex()
        };
        /**
         * Inline-Level Grammar
         */
        const escape = /^\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/;
        const inlineCode = /^(`+)([^`]|[^`][\s\S]*?[^`])\1(?!`)/;
        const br = /^( {2,}|\\)\n(?!\s*$)/;
        const inlineText = /^(`+|[^`])(?:(?= {2,}\n)|[\s\S]*?(?:(?=[\\<!\[`*_]|\b_|$)|[^ ](?= {2,}\n)))/;
        // list of unicode punctuation marks, plus any missing characters from CommonMark spec
        const _punctuation = '\\p{P}$+<=>`^|~';
        const punctuation = edit(/^((?![*_])[\spunctuation])/, 'u')
            .replace(/punctuation/g, _punctuation).getRegex();
        // sequences em should skip over [title](link), `code`, <html>
        const blockSkip = /\[[^[\]]*?\]\([^\(\)]*?\)|`[^`]*?`|<[^<>]*?>/g;
        const emStrongLDelim = edit(/^(?:\*+(?:((?!\*)[punct])|[^\s*]))|^_+(?:((?!_)[punct])|([^\s_]))/, 'u')
            .replace(/punct/g, _punctuation)
            .getRegex();
        const emStrongRDelimAst = edit('^[^_*]*?__[^_*]*?\\*[^_*]*?(?=__)' // Skip orphan inside strong
            + '|[^*]+(?=[^*])' // Consume to delim
            + '|(?!\\*)[punct](\\*+)(?=[\\s]|$)' // (1) #*** can only be a Right Delimiter
            + '|[^punct\\s](\\*+)(?!\\*)(?=[punct\\s]|$)' // (2) a***#, a*** can only be a Right Delimiter
            + '|(?!\\*)[punct\\s](\\*+)(?=[^punct\\s])' // (3) #***a, ***a can only be Left Delimiter
            + '|[\\s](\\*+)(?!\\*)(?=[punct])' // (4) ***# can only be Left Delimiter
            + '|(?!\\*)[punct](\\*+)(?!\\*)(?=[punct])' // (5) #***# can be either Left or Right Delimiter
            + '|[^punct\\s](\\*+)(?=[^punct\\s])', 'gu') // (6) a***a can be either Left or Right Delimiter
            .replace(/punct/g, _punctuation)
            .getRegex();
        // (6) Not allowed for _
        const emStrongRDelimUnd = edit('^[^_*]*?\\*\\*[^_*]*?_[^_*]*?(?=\\*\\*)' // Skip orphan inside strong
            + '|[^_]+(?=[^_])' // Consume to delim
            + '|(?!_)[punct](_+)(?=[\\s]|$)' // (1) #___ can only be a Right Delimiter
            + '|[^punct\\s](_+)(?!_)(?=[punct\\s]|$)' // (2) a___#, a___ can only be a Right Delimiter
            + '|(?!_)[punct\\s](_+)(?=[^punct\\s])' // (3) #___a, ___a can only be Left Delimiter
            + '|[\\s](_+)(?!_)(?=[punct])' // (4) ___# can only be Left Delimiter
            + '|(?!_)[punct](_+)(?!_)(?=[punct])', 'gu') // (5) #___# can be either Left or Right Delimiter
            .replace(/punct/g, _punctuation)
            .getRegex();
        const anyPunctuation = edit(/\\([punct])/, 'gu')
            .replace(/punct/g, _punctuation)
            .getRegex();
        const autolink = edit(/^<(scheme:[^\s\x00-\x1f<>]*|email)>/)
            .replace('scheme', /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/)
            .replace('email', /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/)
            .getRegex();
        const _inlineComment = edit(_comment).replace('(?:-->|$)', '-->').getRegex();
        const tag = edit('^comment'
            + '|^</[a-zA-Z][\\w:-]*\\s*>' // self-closing tag
            + '|^<[a-zA-Z][\\w-]*(?:attribute)*?\\s*/?>' // open tag
            + '|^<\\?[\\s\\S]*?\\?>' // processing instruction, e.g. <?php ?>
            + '|^<![a-zA-Z]+\\s[\\s\\S]*?>' // declaration, e.g. <!DOCTYPE html>
            + '|^<!\\[CDATA\\[[\\s\\S]*?\\]\\]>') // CDATA section
            .replace('comment', _inlineComment)
            .replace('attribute', /\s+[a-zA-Z:_][\w.:-]*(?:\s*=\s*"[^"]*"|\s*=\s*'[^']*'|\s*=\s*[^\s"'=<>`]+)?/)
            .getRegex();
        const _inlineLabel = /(?:\[(?:\\.|[^\[\]\\])*\]|\\.|`[^`]*`|[^\[\]\\`])*?/;
        const link = edit(/^!?\[(label)\]\(\s*(href)(?:\s+(title))?\s*\)/)
            .replace('label', _inlineLabel)
            .replace('href', /<(?:\\.|[^\n<>\\])+>|[^\s\x00-\x1f]*/)
            .replace('title', /"(?:\\"?|[^"\\])*"|'(?:\\'?|[^'\\])*'|\((?:\\\)?|[^)\\])*\)/)
            .getRegex();
        const reflink = edit(/^!?\[(label)\]\[(ref)\]/)
            .replace('label', _inlineLabel)
            .replace('ref', _blockLabel)
            .getRegex();
        const nolink = edit(/^!?\[(ref)\](?:\[\])?/)
            .replace('ref', _blockLabel)
            .getRegex();
        const reflinkSearch = edit('reflink|nolink(?!\\()', 'g')
            .replace('reflink', reflink)
            .replace('nolink', nolink)
            .getRegex();
        /**
         * Normal Inline Grammar
         */
        const inlineNormal = {
            _backpedal: noopTest, // only used for GFM url
            anyPunctuation,
            autolink,
            blockSkip,
            br,
            code: inlineCode,
            del: noopTest,
            emStrongLDelim,
            emStrongRDelimAst,
            emStrongRDelimUnd,
            escape,
            link,
            nolink,
            punctuation,
            reflink,
            reflinkSearch,
            tag,
            text: inlineText,
            url: noopTest
        };
        /**
         * Pedantic Inline Grammar
         */
        const inlinePedantic = {
            ...inlineNormal,
            link: edit(/^!?\[(label)\]\((.*?)\)/)
                .replace('label', _inlineLabel)
                .getRegex(),
            reflink: edit(/^!?\[(label)\]\s*\[([^\]]*)\]/)
                .replace('label', _inlineLabel)
                .getRegex()
        };
        /**
         * GFM Inline Grammar
         */
        const inlineGfm = {
            ...inlineNormal,
            escape: edit(escape).replace('])', '~|])').getRegex(),
            url: edit(/^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/, 'i')
                .replace('email', /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/)
                .getRegex(),
            _backpedal: /(?:[^?!.,:;*_'"~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'"~)]+(?!$))+/,
            del: /^(~~?)(?=[^\s~])([\s\S]*?[^\s~])\1(?=[^~]|$)/,
            text: /^([`~]+|[^`~])(?:(?= {2,}\n)|(?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)|[\s\S]*?(?:(?=[\\<!\[`*~_]|\b_|https?:\/\/|ftp:\/\/|www\.|$)|[^ ](?= {2,}\n)|[^a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-](?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)))/
        };
        /**
         * GFM + Line Breaks Inline Grammar
         */
        const inlineBreaks = {
            ...inlineGfm,
            br: edit(br).replace('{2,}', '*').getRegex(),
            text: edit(inlineGfm.text)
                .replace('\\b_', '\\b_| {2,}\\n')
                .replace(/\{2,\}/g, '*')
                .getRegex()
        };
        /**
         * exports
         */
        const block = {
            normal: blockNormal,
            gfm: blockGfm,
            pedantic: blockPedantic
        };
        const inline = {
            normal: inlineNormal,
            gfm: inlineGfm,
            breaks: inlineBreaks,
            pedantic: inlinePedantic
        };

        /**
         * Block Lexer
         */
        class _Lexer {
            tokens;
            options;
            state;
            tokenizer;
            inlineQueue;
            constructor(options) {
                // TokenList cannot be created in one go
                this.tokens = [];
                this.tokens.links = Object.create(null);
                this.options = options || exports.defaults;
                this.options.tokenizer = this.options.tokenizer || new _Tokenizer();
                this.tokenizer = this.options.tokenizer;
                this.tokenizer.options = this.options;
                this.tokenizer.lexer = this;
                this.inlineQueue = [];
                this.state = {
                    inLink: false,
                    inRawBlock: false,
                    top: true
                };
                const rules = {
                    block: block.normal,
                    inline: inline.normal
                };
                if (this.options.pedantic) {
                    rules.block = block.pedantic;
                    rules.inline = inline.pedantic;
                }
                else if (this.options.gfm) {
                    rules.block = block.gfm;
                    if (this.options.breaks) {
                        rules.inline = inline.breaks;
                    }
                    else {
                        rules.inline = inline.gfm;
                    }
                }
                this.tokenizer.rules = rules;
            }
            /**
             * Expose Rules
             */
            static get rules() {
                return {
                    block,
                    inline
                };
            }
            /**
             * Static Lex Method
             */
            static lex(src, options) {
                const lexer = new _Lexer(options);
                return lexer.lex(src);
            }
            /**
             * Static Lex Inline Method
             */
            static lexInline(src, options) {
                const lexer = new _Lexer(options);
                return lexer.inlineTokens(src);
            }
            /**
             * Preprocessing
             */
            lex(src) {
                src = src
                    .replace(/\r\n|\r/g, '\n');
                this.blockTokens(src, this.tokens);
                let next;
                while (next = this.inlineQueue.shift()) {
                    this.inlineTokens(next.src, next.tokens);
                }
                return this.tokens;
            }
            blockTokens(src, tokens = []) {
                if (this.options.pedantic) {
                    src = src.replace(/\t/g, '    ').replace(/^ +$/gm, '');
                }
                else {
                    src = src.replace(/^( *)(\t+)/gm, (_, leading, tabs) => {
                        return leading + '    '.repeat(tabs.length);
                    });
                }
                let token;
                let lastToken;
                let cutSrc;
                let lastParagraphClipped;
                while (src) {
                    if (this.options.extensions
                        && this.options.extensions.block
                        && this.options.extensions.block.some((extTokenizer) => {
                            if (token = extTokenizer.call({ lexer: this }, src, tokens)) {
                                src = src.substring(token.raw.length);
                                tokens.push(token);
                                return true;
                            }
                            return false;
                        })) {
                        continue;
                    }
                    // newline
                    if (token = this.tokenizer.space(src)) {
                        src = src.substring(token.raw.length);
                        if (token.raw.length === 1 && tokens.length > 0) {
                            // if there's a single \n as a spacer, it's terminating the last line,
                            // so move it there so that we don't get unnecessary paragraph tags
                            tokens[tokens.length - 1].raw += '\n';
                        }
                        else {
                            tokens.push(token);
                        }
                        continue;
                    }
                    // code
                    if (token = this.tokenizer.code(src)) {
                        src = src.substring(token.raw.length);
                        lastToken = tokens[tokens.length - 1];
                        // An indented code block cannot interrupt a paragraph.
                        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {
                            lastToken.raw += '\n' + token.raw;
                            lastToken.text += '\n' + token.text;
                            this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
                        }
                        else {
                            tokens.push(token);
                        }
                        continue;
                    }
                    // fences
                    if (token = this.tokenizer.fences(src)) {
                        src = src.substring(token.raw.length);
                        tokens.push(token);
                        continue;
                    }
                    // heading
                    if (token = this.tokenizer.heading(src)) {
                        src = src.substring(token.raw.length);
                        tokens.push(token);
                        continue;
                    }
                    // hr
                    if (token = this.tokenizer.hr(src)) {
                        src = src.substring(token.raw.length);
                        tokens.push(token);
                        continue;
                    }
                    // blockquote
                    if (token = this.tokenizer.blockquote(src)) {
                        src = src.substring(token.raw.length);
                        tokens.push(token);
                        continue;
                    }
                    // list
                    if (token = this.tokenizer.list(src)) {
                        src = src.substring(token.raw.length);
                        tokens.push(token);
                        continue;
                    }
                    // html
                    if (token = this.tokenizer.html(src)) {
                        src = src.substring(token.raw.length);
                        tokens.push(token);
                        continue;
                    }
                    // def
                    if (token = this.tokenizer.def(src)) {
                        src = src.substring(token.raw.length);
                        lastToken = tokens[tokens.length - 1];
                        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {
                            lastToken.raw += '\n' + token.raw;
                            lastToken.text += '\n' + token.raw;
                            this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
                        }
                        else if (!this.tokens.links[token.tag]) {
                            this.tokens.links[token.tag] = {
                                href: token.href,
                                title: token.title
                            };
                        }
                        continue;
                    }
                    // table (gfm)
                    if (token = this.tokenizer.table(src)) {
                        src = src.substring(token.raw.length);
                        tokens.push(token);
                        continue;
                    }
                    // lheading
                    if (token = this.tokenizer.lheading(src)) {
                        src = src.substring(token.raw.length);
                        tokens.push(token);
                        continue;
                    }
                    // top-level paragraph
                    // prevent paragraph consuming extensions by clipping 'src' to extension start
                    cutSrc = src;
                    if (this.options.extensions && this.options.extensions.startBlock) {
                        let startIndex = Infinity;
                        const tempSrc = src.slice(1);
                        let tempStart;
                        this.options.extensions.startBlock.forEach((getStartIndex) => {
                            tempStart = getStartIndex.call({ lexer: this }, tempSrc);
                            if (typeof tempStart === 'number' && tempStart >= 0) {
                                startIndex = Math.min(startIndex, tempStart);
                            }
                        });
                        if (startIndex < Infinity && startIndex >= 0) {
                            cutSrc = src.substring(0, startIndex + 1);
                        }
                    }
                    if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {
                        lastToken = tokens[tokens.length - 1];
                        if (lastParagraphClipped && lastToken.type === 'paragraph') {
                            lastToken.raw += '\n' + token.raw;
                            lastToken.text += '\n' + token.text;
                            this.inlineQueue.pop();
                            this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
                        }
                        else {
                            tokens.push(token);
                        }
                        lastParagraphClipped = (cutSrc.length !== src.length);
                        src = src.substring(token.raw.length);
                        continue;
                    }
                    // text
                    if (token = this.tokenizer.text(src)) {
                        src = src.substring(token.raw.length);
                        lastToken = tokens[tokens.length - 1];
                        if (lastToken && lastToken.type === 'text') {
                            lastToken.raw += '\n' + token.raw;
                            lastToken.text += '\n' + token.text;
                            this.inlineQueue.pop();
                            this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
                        }
                        else {
                            tokens.push(token);
                        }
                        continue;
                    }
                    if (src) {
                        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);
                        if (this.options.silent) {
                            console.error(errMsg);
                            break;
                        }
                        else {
                            throw new Error(errMsg);
                        }
                    }
                }
                this.state.top = true;
                return tokens;
            }
            inline(src, tokens = []) {
                this.inlineQueue.push({ src, tokens });
                return tokens;
            }
            /**
             * Lexing/Compiling
             */
            inlineTokens(src, tokens = []) {
                let token, lastToken, cutSrc;
                // String with links masked to avoid interference with em and strong
                let maskedSrc = src;
                let match;
                let keepPrevChar, prevChar;
                // Mask out reflinks
                if (this.tokens.links) {
                    const links = Object.keys(this.tokens.links);
                    if (links.length > 0) {
                        while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {
                            if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {
                                maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);
                            }
                        }
                    }
                }
                // Mask out other blocks
                while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {
                    maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);
                }
                // Mask out escaped characters
                while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {
                    maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);
                }
                while (src) {
                    if (!keepPrevChar) {
                        prevChar = '';
                    }
                    keepPrevChar = false;
                    // extensions
                    if (this.options.extensions
                        && this.options.extensions.inline
                        && this.options.extensions.inline.some((extTokenizer) => {
                            if (token = extTokenizer.call({ lexer: this }, src, tokens)) {
                                src = src.substring(token.raw.length);
                                tokens.push(token);
                                return true;
                            }
                            return false;
                        })) {
                        continue;
                    }
                    // escape
                    if (token = this.tokenizer.escape(src)) {
                        src = src.substring(token.raw.length);
                        tokens.push(token);
                        continue;
                    }
                    // tag
                    if (token = this.tokenizer.tag(src)) {
                        src = src.substring(token.raw.length);
                        lastToken = tokens[tokens.length - 1];
                        if (lastToken && token.type === 'text' && lastToken.type === 'text') {
                            lastToken.raw += token.raw;
                            lastToken.text += token.text;
                        }
                        else {
                            tokens.push(token);
                        }
                        continue;
                    }
                    // link
                    if (token = this.tokenizer.link(src)) {
                        src = src.substring(token.raw.length);
                        tokens.push(token);
                        continue;
                    }
                    // reflink, nolink
                    if (token = this.tokenizer.reflink(src, this.tokens.links)) {
                        src = src.substring(token.raw.length);
                        lastToken = tokens[tokens.length - 1];
                        if (lastToken && token.type === 'text' && lastToken.type === 'text') {
                            lastToken.raw += token.raw;
                            lastToken.text += token.text;
                        }
                        else {
                            tokens.push(token);
                        }
                        continue;
                    }
                    // em & strong
                    if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {
                        src = src.substring(token.raw.length);
                        tokens.push(token);
                        continue;
                    }
                    // code
                    if (token = this.tokenizer.codespan(src)) {
                        src = src.substring(token.raw.length);
                        tokens.push(token);
                        continue;
                    }
                    // br
                    if (token = this.tokenizer.br(src)) {
                        src = src.substring(token.raw.length);
                        tokens.push(token);
                        continue;
                    }
                    // del (gfm)
                    if (token = this.tokenizer.del(src)) {
                        src = src.substring(token.raw.length);
                        tokens.push(token);
                        continue;
                    }
                    // autolink
                    if (token = this.tokenizer.autolink(src)) {
                        src = src.substring(token.raw.length);
                        tokens.push(token);
                        continue;
                    }
                    // url (gfm)
                    if (!this.state.inLink && (token = this.tokenizer.url(src))) {
                        src = src.substring(token.raw.length);
                        tokens.push(token);
                        continue;
                    }
                    // text
                    // prevent inlineText consuming extensions by clipping 'src' to extension start
                    cutSrc = src;
                    if (this.options.extensions && this.options.extensions.startInline) {
                        let startIndex = Infinity;
                        const tempSrc = src.slice(1);
                        let tempStart;
                        this.options.extensions.startInline.forEach((getStartIndex) => {
                            tempStart = getStartIndex.call({ lexer: this }, tempSrc);
                            if (typeof tempStart === 'number' && tempStart >= 0) {
                                startIndex = Math.min(startIndex, tempStart);
                            }
                        });
                        if (startIndex < Infinity && startIndex >= 0) {
                            cutSrc = src.substring(0, startIndex + 1);
                        }
                    }
                    if (token = this.tokenizer.inlineText(cutSrc)) {
                        src = src.substring(token.raw.length);
                        if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started
                            prevChar = token.raw.slice(-1);
                        }
                        keepPrevChar = true;
                        lastToken = tokens[tokens.length - 1];
                        if (lastToken && lastToken.type === 'text') {
                            lastToken.raw += token.raw;
                            lastToken.text += token.text;
                        }
                        else {
                            tokens.push(token);
                        }
                        continue;
                    }
                    if (src) {
                        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);
                        if (this.options.silent) {
                            console.error(errMsg);
                            break;
                        }
                        else {
                            throw new Error(errMsg);
                        }
                    }
                }
                return tokens;
            }
        }

        /**
         * Renderer
         */
        class _Renderer {
            options;
            constructor(options) {
                this.options = options || exports.defaults;
            }
            code(code, infostring, escaped) {
                const lang = (infostring || '').match(/^\S*/)?.[0];
                code = code.replace(/\n$/, '') + '\n';
                if (!lang) {
                    return '<pre><code>'
                        + (escaped ? code : escape$1(code, true))
                        + '</code></pre>\n';
                }
                return '<pre><code class="language-'
                    + escape$1(lang)
                    + '">'
                    + (escaped ? code : escape$1(code, true))
                    + '</code></pre>\n';
            }
            blockquote(quote) {
                return `<blockquote>\n${quote}</blockquote>\n`;
            }
            html(html, block) {
                return html;
            }
            heading(text, level, raw) {
                // ignore IDs
                return `<h${level}>${text}</h${level}>\n`;
            }
            hr() {
                return '<hr>\n';
            }
            list(body, ordered, start) {
                const type = ordered ? 'ol' : 'ul';
                const startatt = (ordered && start !== 1) ? (' start="' + start + '"') : '';
                return '<' + type + startatt + '>\n' + body + '</' + type + '>\n';
            }
            listitem(text, task, checked) {
                return `<li>${text}</li>\n`;
            }
            checkbox(checked) {
                return '<input '
                    + (checked ? 'checked="" ' : '')
                    + 'disabled="" type="checkbox">';
            }
            paragraph(text) {
                return `<p>${text}</p>\n`;
            }
            table(header, body) {
                if (body)
                    body = `<tbody>${body}</tbody>`;
                return '<table>\n'
                    + '<thead>\n'
                    + header
                    + '</thead>\n'
                    + body
                    + '</table>\n';
            }
            tablerow(content) {
                return `<tr>\n${content}</tr>\n`;
            }
            tablecell(content, flags) {
                const type = flags.header ? 'th' : 'td';
                const tag = flags.align
                    ? `<${type} align="${flags.align}">`
                    : `<${type}>`;
                return tag + content + `</${type}>\n`;
            }
            /**
             * span level renderer
             */
            strong(text) {
                return `<strong>${text}</strong>`;
            }
            em(text) {
                return `<em>${text}</em>`;
            }
            codespan(text) {
                return `<code>${text}</code>`;
            }
            br() {
                return '<br>';
            }
            del(text) {
                return `<del>${text}</del>`;
            }
            link(href, title, text) {
                const cleanHref = cleanUrl(href);
                if (cleanHref === null) {
                    return text;
                }
                href = cleanHref;
                let out = '<a href="' + href + '"';
                if (title) {
                    out += ' title="' + title + '"';
                }
                out += '>' + text + '</a>';
                return out;
            }
            image(href, title, text) {
                const cleanHref = cleanUrl(href);
                if (cleanHref === null) {
                    return text;
                }
                href = cleanHref;
                let out = `<img src="${href}" alt="${text}"`;
                if (title) {
                    out += ` title="${title}"`;
                }
                out += '>';
                return out;
            }
            text(text) {
                return text;
            }
        }

        /**
         * TextRenderer
         * returns only the textual part of the token
         */
        class _TextRenderer {
            // no need for block level renderers
            strong(text) {
                return text;
            }
            em(text) {
                return text;
            }
            codespan(text) {
                return text;
            }
            del(text) {
                return text;
            }
            html(text) {
                return text;
            }
            text(text) {
                return text;
            }
            link(href, title, text) {
                return '' + text;
            }
            image(href, title, text) {
                return '' + text;
            }
            br() {
                return '';
            }
        }

        /**
         * Parsing & Compiling
         */
        class _Parser {
            options;
            renderer;
            textRenderer;
            constructor(options) {
                this.options = options || exports.defaults;
                this.options.renderer = this.options.renderer || new _Renderer();
                this.renderer = this.options.renderer;
                this.renderer.options = this.options;
                this.textRenderer = new _TextRenderer();
            }
            /**
             * Static Parse Method
             */
            static parse(tokens, options) {
                const parser = new _Parser(options);
                return parser.parse(tokens);
            }
            /**
             * Static Parse Inline Method
             */
            static parseInline(tokens, options) {
                const parser = new _Parser(options);
                return parser.parseInline(tokens);
            }
            /**
             * Parse Loop
             */
            parse(tokens, top = true) {
                let out = '';
                for (let i = 0; i < tokens.length; i++) {
                    const token = tokens[i];
                    // Run any renderer extensions
                    if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {
                        const genericToken = token;
                        const ret = this.options.extensions.renderers[genericToken.type].call({ parser: this }, genericToken);
                        if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(genericToken.type)) {
                            out += ret || '';
                            continue;
                        }
                    }
                    switch (token.type) {
                        case 'space': {
                            continue;
                        }
                        case 'hr': {
                            out += this.renderer.hr();
                            continue;
                        }
                        case 'heading': {
                            const headingToken = token;
                            out += this.renderer.heading(this.parseInline(headingToken.tokens), headingToken.depth, unescape(this.parseInline(headingToken.tokens, this.textRenderer)));
                            continue;
                        }
                        case 'code': {
                            const codeToken = token;
                            out += this.renderer.code(codeToken.text, codeToken.lang, !!codeToken.escaped);
                            continue;
                        }
                        case 'table': {
                            const tableToken = token;
                            let header = '';
                            // header
                            let cell = '';
                            for (let j = 0; j < tableToken.header.length; j++) {
                                cell += this.renderer.tablecell(this.parseInline(tableToken.header[j].tokens), { header: true, align: tableToken.align[j] });
                            }
                            header += this.renderer.tablerow(cell);
                            let body = '';
                            for (let j = 0; j < tableToken.rows.length; j++) {
                                const row = tableToken.rows[j];
                                cell = '';
                                for (let k = 0; k < row.length; k++) {
                                    cell += this.renderer.tablecell(this.parseInline(row[k].tokens), { header: false, align: tableToken.align[k] });
                                }
                                body += this.renderer.tablerow(cell);
                            }
                            out += this.renderer.table(header, body);
                            continue;
                        }
                        case 'blockquote': {
                            const blockquoteToken = token;
                            const body = this.parse(blockquoteToken.tokens);
                            out += this.renderer.blockquote(body);
                            continue;
                        }
                        case 'list': {
                            const listToken = token;
                            const ordered = listToken.ordered;
                            const start = listToken.start;
                            const loose = listToken.loose;
                            let body = '';
                            for (let j = 0; j < listToken.items.length; j++) {
                                const item = listToken.items[j];
                                const checked = item.checked;
                                const task = item.task;
                                let itemBody = '';
                                if (item.task) {
                                    const checkbox = this.renderer.checkbox(!!checked);
                                    if (loose) {
                                        if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {
                                            item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;
                                            if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {
                                                item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;
                                            }
                                        }
                                        else {
                                            item.tokens.unshift({
                                                type: 'text',
                                                text: checkbox + ' '
                                            });
                                        }
                                    }
                                    else {
                                        itemBody += checkbox + ' ';
                                    }
                                }
                                itemBody += this.parse(item.tokens, loose);
                                body += this.renderer.listitem(itemBody, task, !!checked);
                            }
                            out += this.renderer.list(body, ordered, start);
                            continue;
                        }
                        case 'html': {
                            const htmlToken = token;
                            out += this.renderer.html(htmlToken.text, htmlToken.block);
                            continue;
                        }
                        case 'paragraph': {
                            const paragraphToken = token;
                            out += this.renderer.paragraph(this.parseInline(paragraphToken.tokens));
                            continue;
                        }
                        case 'text': {
                            let textToken = token;
                            let body = textToken.tokens ? this.parseInline(textToken.tokens) : textToken.text;
                            while (i + 1 < tokens.length && tokens[i + 1].type === 'text') {
                                textToken = tokens[++i];
                                body += '\n' + (textToken.tokens ? this.parseInline(textToken.tokens) : textToken.text);
                            }
                            out += top ? this.renderer.paragraph(body) : body;
                            continue;
                        }
                        default: {
                            const errMsg = 'Token with "' + token.type + '" type was not found.';
                            if (this.options.silent) {
                                console.error(errMsg);
                                return '';
                            }
                            else {
                                throw new Error(errMsg);
                            }
                        }
                    }
                }
                return out;
            }
            /**
             * Parse Inline Tokens
             */
            parseInline(tokens, renderer) {
                renderer = renderer || this.renderer;
                let out = '';
                for (let i = 0; i < tokens.length; i++) {
                    const token = tokens[i];
                    // Run any renderer extensions
                    if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {
                        const ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);
                        if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(token.type)) {
                            out += ret || '';
                            continue;
                        }
                    }
                    switch (token.type) {
                        case 'escape': {
                            const escapeToken = token;
                            out += renderer.text(escapeToken.text);
                            break;
                        }
                        case 'html': {
                            const tagToken = token;
                            out += renderer.html(tagToken.text);
                            break;
                        }
                        case 'link': {
                            const linkToken = token;
                            out += renderer.link(linkToken.href, linkToken.title, this.parseInline(linkToken.tokens, renderer));
                            break;
                        }
                        case 'image': {
                            const imageToken = token;
                            out += renderer.image(imageToken.href, imageToken.title, imageToken.text);
                            break;
                        }
                        case 'strong': {
                            const strongToken = token;
                            out += renderer.strong(this.parseInline(strongToken.tokens, renderer));
                            break;
                        }
                        case 'em': {
                            const emToken = token;
                            out += renderer.em(this.parseInline(emToken.tokens, renderer));
                            break;
                        }
                        case 'codespan': {
                            const codespanToken = token;
                            out += renderer.codespan(codespanToken.text);
                            break;
                        }
                        case 'br': {
                            out += renderer.br();
                            break;
                        }
                        case 'del': {
                            const delToken = token;
                            out += renderer.del(this.parseInline(delToken.tokens, renderer));
                            break;
                        }
                        case 'text': {
                            const textToken = token;
                            out += renderer.text(textToken.text);
                            break;
                        }
                        default: {
                            const errMsg = 'Token with "' + token.type + '" type was not found.';
                            if (this.options.silent) {
                                console.error(errMsg);
                                return '';
                            }
                            else {
                                throw new Error(errMsg);
                            }
                        }
                    }
                }
                return out;
            }
        }

        class _Hooks {
            options;
            constructor(options) {
                this.options = options || exports.defaults;
            }
            static passThroughHooks = new Set([
                'preprocess',
                'postprocess'
            ]);
            /**
             * Process markdown before marked
             */
            preprocess(markdown) {
                return markdown;
            }
            /**
             * Process HTML after marked is finished
             */
            postprocess(html) {
                return html;
            }
        }

        class Marked {
            defaults = _getDefaults();
            options = this.setOptions;
            parse = this.#parseMarkdown(_Lexer.lex, _Parser.parse);
            parseInline = this.#parseMarkdown(_Lexer.lexInline, _Parser.parseInline);
            Parser = _Parser;
            Renderer = _Renderer;
            TextRenderer = _TextRenderer;
            Lexer = _Lexer;
            Tokenizer = _Tokenizer;
            Hooks = _Hooks;
            constructor(...args) {
                this.use(...args);
            }
            /**
             * Run callback for every token
             */
            walkTokens(tokens, callback) {
                let values = [];
                for (const token of tokens) {
                    values = values.concat(callback.call(this, token));
                    switch (token.type) {
                        case 'table': {
                            const tableToken = token;
                            for (const cell of tableToken.header) {
                                values = values.concat(this.walkTokens(cell.tokens, callback));
                            }
                            for (const row of tableToken.rows) {
                                for (const cell of row) {
                                    values = values.concat(this.walkTokens(cell.tokens, callback));
                                }
                            }
                            break;
                        }
                        case 'list': {
                            const listToken = token;
                            values = values.concat(this.walkTokens(listToken.items, callback));
                            break;
                        }
                        default: {
                            const genericToken = token;
                            if (this.defaults.extensions?.childTokens?.[genericToken.type]) {
                                this.defaults.extensions.childTokens[genericToken.type].forEach((childTokens) => {
                                    values = values.concat(this.walkTokens(genericToken[childTokens], callback));
                                });
                            }
                            else if (genericToken.tokens) {
                                values = values.concat(this.walkTokens(genericToken.tokens, callback));
                            }
                        }
                    }
                }
                return values;
            }
            use(...args) {
                const extensions = this.defaults.extensions || { renderers: {}, childTokens: {} };
                args.forEach((pack) => {
                    // copy options to new object
                    const opts = { ...pack };
                    // set async to true if it was set to true before
                    opts.async = this.defaults.async || opts.async || false;
                    // ==-- Parse "addon" extensions --== //
                    if (pack.extensions) {
                        pack.extensions.forEach((ext) => {
                            if (!ext.name) {
                                throw new Error('extension name required');
                            }
                            if ('renderer' in ext) { // Renderer extensions
                                const prevRenderer = extensions.renderers[ext.name];
                                if (prevRenderer) {
                                    // Replace extension with func to run new extension but fall back if false
                                    extensions.renderers[ext.name] = function (...args) {
                                        let ret = ext.renderer.apply(this, args);
                                        if (ret === false) {
                                            ret = prevRenderer.apply(this, args);
                                        }
                                        return ret;
                                    };
                                }
                                else {
                                    extensions.renderers[ext.name] = ext.renderer;
                                }
                            }
                            if ('tokenizer' in ext) { // Tokenizer Extensions
                                if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {
                                    throw new Error("extension level must be 'block' or 'inline'");
                                }
                                const extLevel = extensions[ext.level];
                                if (extLevel) {
                                    extLevel.unshift(ext.tokenizer);
                                }
                                else {
                                    extensions[ext.level] = [ext.tokenizer];
                                }
                                if (ext.start) { // Function to check for start of token
                                    if (ext.level === 'block') {
                                        if (extensions.startBlock) {
                                            extensions.startBlock.push(ext.start);
                                        }
                                        else {
                                            extensions.startBlock = [ext.start];
                                        }
                                    }
                                    else if (ext.level === 'inline') {
                                        if (extensions.startInline) {
                                            extensions.startInline.push(ext.start);
                                        }
                                        else {
                                            extensions.startInline = [ext.start];
                                        }
                                    }
                                }
                            }
                            if ('childTokens' in ext && ext.childTokens) { // Child tokens to be visited by walkTokens
                                extensions.childTokens[ext.name] = ext.childTokens;
                            }
                        });
                        opts.extensions = extensions;
                    }
                    // ==-- Parse "overwrite" extensions --== //
                    if (pack.renderer) {
                        const renderer = this.defaults.renderer || new _Renderer(this.defaults);
                        for (const prop in pack.renderer) {
                            if (!(prop in renderer) || prop === 'options') {
                                throw new Error(`renderer '${prop}' does not exist`);
                            }
                            const rendererProp = prop;
                            const rendererFunc = pack.renderer[rendererProp];
                            const prevRenderer = renderer[rendererProp];
                            // Replace renderer with func to run extension, but fall back if false
                            renderer[rendererProp] = (...args) => {
                                let ret = rendererFunc.apply(renderer, args);
                                if (ret === false) {
                                    ret = prevRenderer.apply(renderer, args);
                                }
                                return ret || '';
                            };
                        }
                        opts.renderer = renderer;
                    }
                    if (pack.tokenizer) {
                        const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);
                        for (const prop in pack.tokenizer) {
                            if (!(prop in tokenizer) || ['options', 'rules', 'lexer'].includes(prop)) {
                                throw new Error(`tokenizer '${prop}' does not exist`);
                            }
                            const tokenizerProp = prop;
                            const tokenizerFunc = pack.tokenizer[tokenizerProp];
                            const prevTokenizer = tokenizer[tokenizerProp];
                            // Replace tokenizer with func to run extension, but fall back if false
                            // @ts-expect-error cannot type tokenizer function dynamically
                            tokenizer[tokenizerProp] = (...args) => {
                                let ret = tokenizerFunc.apply(tokenizer, args);
                                if (ret === false) {
                                    ret = prevTokenizer.apply(tokenizer, args);
                                }
                                return ret;
                            };
                        }
                        opts.tokenizer = tokenizer;
                    }
                    // ==-- Parse Hooks extensions --== //
                    if (pack.hooks) {
                        const hooks = this.defaults.hooks || new _Hooks();
                        for (const prop in pack.hooks) {
                            if (!(prop in hooks) || prop === 'options') {
                                throw new Error(`hook '${prop}' does not exist`);
                            }
                            const hooksProp = prop;
                            const hooksFunc = pack.hooks[hooksProp];
                            const prevHook = hooks[hooksProp];
                            if (_Hooks.passThroughHooks.has(prop)) {
                                hooks[hooksProp] = (arg) => {
                                    if (this.defaults.async) {
                                        return Promise.resolve(hooksFunc.call(hooks, arg)).then(ret => {
                                            return prevHook.call(hooks, ret);
                                        });
                                    }
                                    const ret = hooksFunc.call(hooks, arg);
                                    return prevHook.call(hooks, ret);
                                };
                            }
                            else {
                                hooks[hooksProp] = (...args) => {
                                    let ret = hooksFunc.apply(hooks, args);
                                    if (ret === false) {
                                        ret = prevHook.apply(hooks, args);
                                    }
                                    return ret;
                                };
                            }
                        }
                        opts.hooks = hooks;
                    }
                    // ==-- Parse WalkTokens extensions --== //
                    if (pack.walkTokens) {
                        const walkTokens = this.defaults.walkTokens;
                        const packWalktokens = pack.walkTokens;
                        opts.walkTokens = function (token) {
                            let values = [];
                            values.push(packWalktokens.call(this, token));
                            if (walkTokens) {
                                values = values.concat(walkTokens.call(this, token));
                            }
                            return values;
                        };
                    }
                    this.defaults = { ...this.defaults, ...opts };
                });
                return this;
            }
            setOptions(opt) {
                this.defaults = { ...this.defaults, ...opt };
                return this;
            }
            lexer(src, options) {
                return _Lexer.lex(src, options ?? this.defaults);
            }
            parser(tokens, options) {
                return _Parser.parse(tokens, options ?? this.defaults);
            }
            #parseMarkdown(lexer, parser) {
                return (src, options) => {
                    const origOpt = { ...options };
                    const opt = { ...this.defaults, ...origOpt };
                    // Show warning if an extension set async to true but the parse was called with async: false
                    if (this.defaults.async === true && origOpt.async === false) {
                        if (!opt.silent) {
                            console.warn('marked(): The async option was set to true by an extension. The async: false option sent to parse will be ignored.');
                        }
                        opt.async = true;
                    }
                    const throwError = this.#onError(!!opt.silent, !!opt.async);
                    // throw error in case of non string input
                    if (typeof src === 'undefined' || src === null) {
                        return throwError(new Error('marked(): input parameter is undefined or null'));
                    }
                    if (typeof src !== 'string') {
                        return throwError(new Error('marked(): input parameter is of type '
                            + Object.prototype.toString.call(src) + ', string expected'));
                    }
                    if (opt.hooks) {
                        opt.hooks.options = opt;
                    }
                    if (opt.async) {
                        return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src)
                            .then(src => lexer(src, opt))
                            .then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens)
                            .then(tokens => parser(tokens, opt))
                            .then(html => opt.hooks ? opt.hooks.postprocess(html) : html)
                            .catch(throwError);
                    }
                    try {
                        if (opt.hooks) {
                            src = opt.hooks.preprocess(src);
                        }
                        const tokens = lexer(src, opt);
                        if (opt.walkTokens) {
                            this.walkTokens(tokens, opt.walkTokens);
                        }
                        let html = parser(tokens, opt);
                        if (opt.hooks) {
                            html = opt.hooks.postprocess(html);
                        }
                        return html;
                    }
                    catch (e) {
                        return throwError(e);
                    }
                };
            }
            #onError(silent, async) {
                return (e) => {
                    e.message += '\nPlease report this to https://github.com/markedjs/marked.';
                    if (silent) {
                        const msg = '<p>An error occurred:</p><pre>'
                            + escape$1(e.message + '', true)
                            + '</pre>';
                        if (async) {
                            return Promise.resolve(msg);
                        }
                        return msg;
                    }
                    if (async) {
                        return Promise.reject(e);
                    }
                    throw e;
                };
            }
        }

        const markedInstance = new Marked();
        function marked(src, opt) {
            return markedInstance.parse(src, opt);
        }
        /**
         * Sets the default options.
         *
         * @param options Hash of options
         */
        marked.options =
            marked.setOptions = function (options) {
                markedInstance.setOptions(options);
                marked.defaults = markedInstance.defaults;
                changeDefaults(marked.defaults);
                return marked;
            };
        /**
         * Gets the original marked default options.
         */
        marked.getDefaults = _getDefaults;
        marked.defaults = exports.defaults;
        /**
         * Use Extension
         */
        marked.use = function (...args) {
            markedInstance.use(...args);
            marked.defaults = markedInstance.defaults;
            changeDefaults(marked.defaults);
            return marked;
        };
        /**
         * Run callback for every token
         */
        marked.walkTokens = function (tokens, callback) {
            return markedInstance.walkTokens(tokens, callback);
        };
        /**
         * Compiles markdown to HTML without enclosing `p` tag.
         *
         * @param src String of markdown source to be compiled
         * @param options Hash of options
         * @return String of compiled HTML
         */
        marked.parseInline = markedInstance.parseInline;
        /**
         * Expose
         */
        marked.Parser = _Parser;
        marked.parser = _Parser.parse;
        marked.Renderer = _Renderer;
        marked.TextRenderer = _TextRenderer;
        marked.Lexer = _Lexer;
        marked.lexer = _Lexer.lex;
        marked.Tokenizer = _Tokenizer;
        marked.Hooks = _Hooks;
        marked.parse = marked;
        const options = marked.options;
        const setOptions = marked.setOptions;
        const use = marked.use;
        const walkTokens = marked.walkTokens;
        const parseInline = marked.parseInline;
        const parse = marked;
        const parser = _Parser.parse;
        const lexer = _Lexer.lex;

        exports.Hooks = _Hooks;
        exports.Lexer = _Lexer;
        exports.Marked = Marked;
        exports.Parser = _Parser;
        exports.Renderer = _Renderer;
        exports.TextRenderer = _TextRenderer;
        exports.Tokenizer = _Tokenizer;
        exports.getDefaults = _getDefaults;
        exports.lexer = lexer;
        exports.marked = marked;
        exports.options = options;
        exports.parse = parse;
        exports.parseInline = parseInline;
        exports.parser = parser;
        exports.setOptions = setOptions;
        exports.use = use;
        exports.walkTokens = walkTokens;

    }));

    });

    var purify = createCommonjsModule(function (module, exports) {
    /*! @license DOMPurify 3.0.5 | (c) Cure53 and other contributors | Released under the Apache license 2.0 and Mozilla Public License 2.0 | github.com/cure53/DOMPurify/blob/3.0.5/LICENSE */

    (function (global, factory) {
      module.exports = factory() ;
    })(commonjsGlobal, (function () {
      const {
        entries,
        setPrototypeOf,
        isFrozen,
        getPrototypeOf,
        getOwnPropertyDescriptor
      } = Object;
      let {
        freeze,
        seal,
        create
      } = Object; // eslint-disable-line import/no-mutable-exports

      let {
        apply,
        construct
      } = typeof Reflect !== 'undefined' && Reflect;

      if (!apply) {
        apply = function apply(fun, thisValue, args) {
          return fun.apply(thisValue, args);
        };
      }

      if (!freeze) {
        freeze = function freeze(x) {
          return x;
        };
      }

      if (!seal) {
        seal = function seal(x) {
          return x;
        };
      }

      if (!construct) {
        construct = function construct(Func, args) {
          return new Func(...args);
        };
      }

      const arrayForEach = unapply(Array.prototype.forEach);
      const arrayPop = unapply(Array.prototype.pop);
      const arrayPush = unapply(Array.prototype.push);
      const stringToLowerCase = unapply(String.prototype.toLowerCase);
      const stringToString = unapply(String.prototype.toString);
      const stringMatch = unapply(String.prototype.match);
      const stringReplace = unapply(String.prototype.replace);
      const stringIndexOf = unapply(String.prototype.indexOf);
      const stringTrim = unapply(String.prototype.trim);
      const regExpTest = unapply(RegExp.prototype.test);
      const typeErrorCreate = unconstruct(TypeError);
      function unapply(func) {
        return function (thisArg) {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }

          return apply(func, thisArg, args);
        };
      }
      function unconstruct(func) {
        return function () {
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }

          return construct(func, args);
        };
      }
      /* Add properties to a lookup table */

      function addToSet(set, array, transformCaseFunc) {
        var _transformCaseFunc;

        transformCaseFunc = (_transformCaseFunc = transformCaseFunc) !== null && _transformCaseFunc !== void 0 ? _transformCaseFunc : stringToLowerCase;

        if (setPrototypeOf) {
          // Make 'in' and truthy checks like Boolean(set.constructor)
          // independent of any properties defined on Object.prototype.
          // Prevent prototype setters from intercepting set as a this value.
          setPrototypeOf(set, null);
        }

        let l = array.length;

        while (l--) {
          let element = array[l];

          if (typeof element === 'string') {
            const lcElement = transformCaseFunc(element);

            if (lcElement !== element) {
              // Config presets (e.g. tags.js, attrs.js) are immutable.
              if (!isFrozen(array)) {
                array[l] = lcElement;
              }

              element = lcElement;
            }
          }

          set[element] = true;
        }

        return set;
      }
      /* Shallow clone an object */

      function clone(object) {
        const newObject = create(null);

        for (const [property, value] of entries(object)) {
          newObject[property] = value;
        }

        return newObject;
      }
      /* This method automatically checks if the prop is function
       * or getter and behaves accordingly. */

      function lookupGetter(object, prop) {
        while (object !== null) {
          const desc = getOwnPropertyDescriptor(object, prop);

          if (desc) {
            if (desc.get) {
              return unapply(desc.get);
            }

            if (typeof desc.value === 'function') {
              return unapply(desc.value);
            }
          }

          object = getPrototypeOf(object);
        }

        function fallbackValue(element) {
          console.warn('fallback value for', element);
          return null;
        }

        return fallbackValue;
      }

      const html$1 = freeze(['a', 'abbr', 'acronym', 'address', 'area', 'article', 'aside', 'audio', 'b', 'bdi', 'bdo', 'big', 'blink', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'center', 'cite', 'code', 'col', 'colgroup', 'content', 'data', 'datalist', 'dd', 'decorator', 'del', 'details', 'dfn', 'dialog', 'dir', 'div', 'dl', 'dt', 'element', 'em', 'fieldset', 'figcaption', 'figure', 'font', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'img', 'input', 'ins', 'kbd', 'label', 'legend', 'li', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meter', 'nav', 'nobr', 'ol', 'optgroup', 'option', 'output', 'p', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'section', 'select', 'shadow', 'small', 'source', 'spacer', 'span', 'strike', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'time', 'tr', 'track', 'tt', 'u', 'ul', 'var', 'video', 'wbr']); // SVG

      const svg$1 = freeze(['svg', 'a', 'altglyph', 'altglyphdef', 'altglyphitem', 'animatecolor', 'animatemotion', 'animatetransform', 'circle', 'clippath', 'defs', 'desc', 'ellipse', 'filter', 'font', 'g', 'glyph', 'glyphref', 'hkern', 'image', 'line', 'lineargradient', 'marker', 'mask', 'metadata', 'mpath', 'path', 'pattern', 'polygon', 'polyline', 'radialgradient', 'rect', 'stop', 'style', 'switch', 'symbol', 'text', 'textpath', 'title', 'tref', 'tspan', 'view', 'vkern']);
      const svgFilters = freeze(['feBlend', 'feColorMatrix', 'feComponentTransfer', 'feComposite', 'feConvolveMatrix', 'feDiffuseLighting', 'feDisplacementMap', 'feDistantLight', 'feDropShadow', 'feFlood', 'feFuncA', 'feFuncB', 'feFuncG', 'feFuncR', 'feGaussianBlur', 'feImage', 'feMerge', 'feMergeNode', 'feMorphology', 'feOffset', 'fePointLight', 'feSpecularLighting', 'feSpotLight', 'feTile', 'feTurbulence']); // List of SVG elements that are disallowed by default.
      // We still need to know them so that we can do namespace
      // checks properly in case one wants to add them to
      // allow-list.

      const svgDisallowed = freeze(['animate', 'color-profile', 'cursor', 'discard', 'font-face', 'font-face-format', 'font-face-name', 'font-face-src', 'font-face-uri', 'foreignobject', 'hatch', 'hatchpath', 'mesh', 'meshgradient', 'meshpatch', 'meshrow', 'missing-glyph', 'script', 'set', 'solidcolor', 'unknown', 'use']);
      const mathMl$1 = freeze(['math', 'menclose', 'merror', 'mfenced', 'mfrac', 'mglyph', 'mi', 'mlabeledtr', 'mmultiscripts', 'mn', 'mo', 'mover', 'mpadded', 'mphantom', 'mroot', 'mrow', 'ms', 'mspace', 'msqrt', 'mstyle', 'msub', 'msup', 'msubsup', 'mtable', 'mtd', 'mtext', 'mtr', 'munder', 'munderover', 'mprescripts']); // Similarly to SVG, we want to know all MathML elements,
      // even those that we disallow by default.

      const mathMlDisallowed = freeze(['maction', 'maligngroup', 'malignmark', 'mlongdiv', 'mscarries', 'mscarry', 'msgroup', 'mstack', 'msline', 'msrow', 'semantics', 'annotation', 'annotation-xml', 'mprescripts', 'none']);
      const text = freeze(['#text']);

      const html = freeze(['accept', 'action', 'align', 'alt', 'autocapitalize', 'autocomplete', 'autopictureinpicture', 'autoplay', 'background', 'bgcolor', 'border', 'capture', 'cellpadding', 'cellspacing', 'checked', 'cite', 'class', 'clear', 'color', 'cols', 'colspan', 'controls', 'controlslist', 'coords', 'crossorigin', 'datetime', 'decoding', 'default', 'dir', 'disabled', 'disablepictureinpicture', 'disableremoteplayback', 'download', 'draggable', 'enctype', 'enterkeyhint', 'face', 'for', 'headers', 'height', 'hidden', 'high', 'href', 'hreflang', 'id', 'inputmode', 'integrity', 'ismap', 'kind', 'label', 'lang', 'list', 'loading', 'loop', 'low', 'max', 'maxlength', 'media', 'method', 'min', 'minlength', 'multiple', 'muted', 'name', 'nonce', 'noshade', 'novalidate', 'nowrap', 'open', 'optimum', 'pattern', 'placeholder', 'playsinline', 'poster', 'preload', 'pubdate', 'radiogroup', 'readonly', 'rel', 'required', 'rev', 'reversed', 'role', 'rows', 'rowspan', 'spellcheck', 'scope', 'selected', 'shape', 'size', 'sizes', 'span', 'srclang', 'start', 'src', 'srcset', 'step', 'style', 'summary', 'tabindex', 'title', 'translate', 'type', 'usemap', 'valign', 'value', 'width', 'xmlns', 'slot']);
      const svg = freeze(['accent-height', 'accumulate', 'additive', 'alignment-baseline', 'ascent', 'attributename', 'attributetype', 'azimuth', 'basefrequency', 'baseline-shift', 'begin', 'bias', 'by', 'class', 'clip', 'clippathunits', 'clip-path', 'clip-rule', 'color', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'cx', 'cy', 'd', 'dx', 'dy', 'diffuseconstant', 'direction', 'display', 'divisor', 'dur', 'edgemode', 'elevation', 'end', 'fill', 'fill-opacity', 'fill-rule', 'filter', 'filterunits', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'fx', 'fy', 'g1', 'g2', 'glyph-name', 'glyphref', 'gradientunits', 'gradienttransform', 'height', 'href', 'id', 'image-rendering', 'in', 'in2', 'k', 'k1', 'k2', 'k3', 'k4', 'kerning', 'keypoints', 'keysplines', 'keytimes', 'lang', 'lengthadjust', 'letter-spacing', 'kernelmatrix', 'kernelunitlength', 'lighting-color', 'local', 'marker-end', 'marker-mid', 'marker-start', 'markerheight', 'markerunits', 'markerwidth', 'maskcontentunits', 'maskunits', 'max', 'mask', 'media', 'method', 'mode', 'min', 'name', 'numoctaves', 'offset', 'operator', 'opacity', 'order', 'orient', 'orientation', 'origin', 'overflow', 'paint-order', 'path', 'pathlength', 'patterncontentunits', 'patterntransform', 'patternunits', 'points', 'preservealpha', 'preserveaspectratio', 'primitiveunits', 'r', 'rx', 'ry', 'radius', 'refx', 'refy', 'repeatcount', 'repeatdur', 'restart', 'result', 'rotate', 'scale', 'seed', 'shape-rendering', 'specularconstant', 'specularexponent', 'spreadmethod', 'startoffset', 'stddeviation', 'stitchtiles', 'stop-color', 'stop-opacity', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke', 'stroke-width', 'style', 'surfacescale', 'systemlanguage', 'tabindex', 'targetx', 'targety', 'transform', 'transform-origin', 'text-anchor', 'text-decoration', 'text-rendering', 'textlength', 'type', 'u1', 'u2', 'unicode', 'values', 'viewbox', 'visibility', 'version', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'width', 'word-spacing', 'wrap', 'writing-mode', 'xchannelselector', 'ychannelselector', 'x', 'x1', 'x2', 'xmlns', 'y', 'y1', 'y2', 'z', 'zoomandpan']);
      const mathMl = freeze(['accent', 'accentunder', 'align', 'bevelled', 'close', 'columnsalign', 'columnlines', 'columnspan', 'denomalign', 'depth', 'dir', 'display', 'displaystyle', 'encoding', 'fence', 'frame', 'height', 'href', 'id', 'largeop', 'length', 'linethickness', 'lspace', 'lquote', 'mathbackground', 'mathcolor', 'mathsize', 'mathvariant', 'maxsize', 'minsize', 'movablelimits', 'notation', 'numalign', 'open', 'rowalign', 'rowlines', 'rowspacing', 'rowspan', 'rspace', 'rquote', 'scriptlevel', 'scriptminsize', 'scriptsizemultiplier', 'selection', 'separator', 'separators', 'stretchy', 'subscriptshift', 'supscriptshift', 'symmetric', 'voffset', 'width', 'xmlns']);
      const xml = freeze(['xlink:href', 'xml:id', 'xlink:title', 'xml:space', 'xmlns:xlink']);

      const MUSTACHE_EXPR = seal(/\{\{[\w\W]*|[\w\W]*\}\}/gm); // Specify template detection regex for SAFE_FOR_TEMPLATES mode

      const ERB_EXPR = seal(/<%[\w\W]*|[\w\W]*%>/gm);
      const TMPLIT_EXPR = seal(/\${[\w\W]*}/gm);
      const DATA_ATTR = seal(/^data-[\-\w.\u00B7-\uFFFF]/); // eslint-disable-line no-useless-escape

      const ARIA_ATTR = seal(/^aria-[\-\w]+$/); // eslint-disable-line no-useless-escape

      const IS_ALLOWED_URI = seal(/^(?:(?:(?:f|ht)tps?|mailto|tel|callto|sms|cid|xmpp):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i // eslint-disable-line no-useless-escape
      );
      const IS_SCRIPT_OR_DATA = seal(/^(?:\w+script|data):/i);
      const ATTR_WHITESPACE = seal(/[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205F\u3000]/g // eslint-disable-line no-control-regex
      );
      const DOCTYPE_NAME = seal(/^html$/i);

      var EXPRESSIONS = /*#__PURE__*/Object.freeze({
        __proto__: null,
        MUSTACHE_EXPR: MUSTACHE_EXPR,
        ERB_EXPR: ERB_EXPR,
        TMPLIT_EXPR: TMPLIT_EXPR,
        DATA_ATTR: DATA_ATTR,
        ARIA_ATTR: ARIA_ATTR,
        IS_ALLOWED_URI: IS_ALLOWED_URI,
        IS_SCRIPT_OR_DATA: IS_SCRIPT_OR_DATA,
        ATTR_WHITESPACE: ATTR_WHITESPACE,
        DOCTYPE_NAME: DOCTYPE_NAME
      });

      const getGlobal = () => typeof window === 'undefined' ? null : window;
      /**
       * Creates a no-op policy for internal use only.
       * Don't export this function outside this module!
       * @param {?TrustedTypePolicyFactory} trustedTypes The policy factory.
       * @param {HTMLScriptElement} purifyHostElement The Script element used to load DOMPurify (to determine policy name suffix).
       * @return {?TrustedTypePolicy} The policy created (or null, if Trusted Types
       * are not supported or creating the policy failed).
       */


      const _createTrustedTypesPolicy = function _createTrustedTypesPolicy(trustedTypes, purifyHostElement) {
        if (typeof trustedTypes !== 'object' || typeof trustedTypes.createPolicy !== 'function') {
          return null;
        } // Allow the callers to control the unique policy name
        // by adding a data-tt-policy-suffix to the script element with the DOMPurify.
        // Policy creation with duplicate names throws in Trusted Types.


        let suffix = null;
        const ATTR_NAME = 'data-tt-policy-suffix';

        if (purifyHostElement && purifyHostElement.hasAttribute(ATTR_NAME)) {
          suffix = purifyHostElement.getAttribute(ATTR_NAME);
        }

        const policyName = 'dompurify' + (suffix ? '#' + suffix : '');

        try {
          return trustedTypes.createPolicy(policyName, {
            createHTML(html) {
              return html;
            },

            createScriptURL(scriptUrl) {
              return scriptUrl;
            }

          });
        } catch (_) {
          // Policy creation failed (most likely another DOMPurify script has
          // already run). Skip creating the policy, as this will only cause errors
          // if TT are enforced.
          console.warn('TrustedTypes policy ' + policyName + ' could not be created.');
          return null;
        }
      };

      function createDOMPurify() {
        let window = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getGlobal();

        const DOMPurify = root => createDOMPurify(root);
        /**
         * Version label, exposed for easier checks
         * if DOMPurify is up to date or not
         */


        DOMPurify.version = '3.0.5';
        /**
         * Array of elements that DOMPurify removed during sanitation.
         * Empty if nothing was removed.
         */

        DOMPurify.removed = [];

        if (!window || !window.document || window.document.nodeType !== 9) {
          // Not running in a browser, provide a factory function
          // so that you can pass your own Window
          DOMPurify.isSupported = false;
          return DOMPurify;
        }

        const originalDocument = window.document;
        const currentScript = originalDocument.currentScript;
        let {
          document
        } = window;
        const {
          DocumentFragment,
          HTMLTemplateElement,
          Node,
          Element,
          NodeFilter,
          NamedNodeMap = window.NamedNodeMap || window.MozNamedAttrMap,
          HTMLFormElement,
          DOMParser,
          trustedTypes
        } = window;
        const ElementPrototype = Element.prototype;
        const cloneNode = lookupGetter(ElementPrototype, 'cloneNode');
        const getNextSibling = lookupGetter(ElementPrototype, 'nextSibling');
        const getChildNodes = lookupGetter(ElementPrototype, 'childNodes');
        const getParentNode = lookupGetter(ElementPrototype, 'parentNode'); // As per issue #47, the web-components registry is inherited by a
        // new document created via createHTMLDocument. As per the spec
        // (http://w3c.github.io/webcomponents/spec/custom/#creating-and-passing-registries)
        // a new empty registry is used when creating a template contents owner
        // document, so we use that as our parent document to ensure nothing
        // is inherited.

        if (typeof HTMLTemplateElement === 'function') {
          const template = document.createElement('template');

          if (template.content && template.content.ownerDocument) {
            document = template.content.ownerDocument;
          }
        }

        let trustedTypesPolicy;
        let emptyHTML = '';
        const {
          implementation,
          createNodeIterator,
          createDocumentFragment,
          getElementsByTagName
        } = document;
        const {
          importNode
        } = originalDocument;
        let hooks = {};
        /**
         * Expose whether this browser supports running the full DOMPurify.
         */

        DOMPurify.isSupported = typeof entries === 'function' && typeof getParentNode === 'function' && implementation && implementation.createHTMLDocument !== undefined;
        const {
          MUSTACHE_EXPR,
          ERB_EXPR,
          TMPLIT_EXPR,
          DATA_ATTR,
          ARIA_ATTR,
          IS_SCRIPT_OR_DATA,
          ATTR_WHITESPACE
        } = EXPRESSIONS;
        let {
          IS_ALLOWED_URI: IS_ALLOWED_URI$1
        } = EXPRESSIONS;
        /**
         * We consider the elements and attributes below to be safe. Ideally
         * don't add any new ones but feel free to remove unwanted ones.
         */

        /* allowed element names */

        let ALLOWED_TAGS = null;
        const DEFAULT_ALLOWED_TAGS = addToSet({}, [...html$1, ...svg$1, ...svgFilters, ...mathMl$1, ...text]);
        /* Allowed attribute names */

        let ALLOWED_ATTR = null;
        const DEFAULT_ALLOWED_ATTR = addToSet({}, [...html, ...svg, ...mathMl, ...xml]);
        /*
         * Configure how DOMPUrify should handle custom elements and their attributes as well as customized built-in elements.
         * @property {RegExp|Function|null} tagNameCheck one of [null, regexPattern, predicate]. Default: `null` (disallow any custom elements)
         * @property {RegExp|Function|null} attributeNameCheck one of [null, regexPattern, predicate]. Default: `null` (disallow any attributes not on the allow list)
         * @property {boolean} allowCustomizedBuiltInElements allow custom elements derived from built-ins if they pass CUSTOM_ELEMENT_HANDLING.tagNameCheck. Default: `false`.
         */

        let CUSTOM_ELEMENT_HANDLING = Object.seal(Object.create(null, {
          tagNameCheck: {
            writable: true,
            configurable: false,
            enumerable: true,
            value: null
          },
          attributeNameCheck: {
            writable: true,
            configurable: false,
            enumerable: true,
            value: null
          },
          allowCustomizedBuiltInElements: {
            writable: true,
            configurable: false,
            enumerable: true,
            value: false
          }
        }));
        /* Explicitly forbidden tags (overrides ALLOWED_TAGS/ADD_TAGS) */

        let FORBID_TAGS = null;
        /* Explicitly forbidden attributes (overrides ALLOWED_ATTR/ADD_ATTR) */

        let FORBID_ATTR = null;
        /* Decide if ARIA attributes are okay */

        let ALLOW_ARIA_ATTR = true;
        /* Decide if custom data attributes are okay */

        let ALLOW_DATA_ATTR = true;
        /* Decide if unknown protocols are okay */

        let ALLOW_UNKNOWN_PROTOCOLS = false;
        /* Decide if self-closing tags in attributes are allowed.
         * Usually removed due to a mXSS issue in jQuery 3.0 */

        let ALLOW_SELF_CLOSE_IN_ATTR = true;
        /* Output should be safe for common template engines.
         * This means, DOMPurify removes data attributes, mustaches and ERB
         */

        let SAFE_FOR_TEMPLATES = false;
        /* Decide if document with <html>... should be returned */

        let WHOLE_DOCUMENT = false;
        /* Track whether config is already set on this instance of DOMPurify. */

        let SET_CONFIG = false;
        /* Decide if all elements (e.g. style, script) must be children of
         * document.body. By default, browsers might move them to document.head */

        let FORCE_BODY = false;
        /* Decide if a DOM `HTMLBodyElement` should be returned, instead of a html
         * string (or a TrustedHTML object if Trusted Types are supported).
         * If `WHOLE_DOCUMENT` is enabled a `HTMLHtmlElement` will be returned instead
         */

        let RETURN_DOM = false;
        /* Decide if a DOM `DocumentFragment` should be returned, instead of a html
         * string  (or a TrustedHTML object if Trusted Types are supported) */

        let RETURN_DOM_FRAGMENT = false;
        /* Try to return a Trusted Type object instead of a string, return a string in
         * case Trusted Types are not supported  */

        let RETURN_TRUSTED_TYPE = false;
        /* Output should be free from DOM clobbering attacks?
         * This sanitizes markups named with colliding, clobberable built-in DOM APIs.
         */

        let SANITIZE_DOM = true;
        /* Achieve full DOM Clobbering protection by isolating the namespace of named
         * properties and JS variables, mitigating attacks that abuse the HTML/DOM spec rules.
         *
         * HTML/DOM spec rules that enable DOM Clobbering:
         *   - Named Access on Window (§7.3.3)
         *   - DOM Tree Accessors (§3.1.5)
         *   - Form Element Parent-Child Relations (§4.10.3)
         *   - Iframe srcdoc / Nested WindowProxies (§4.8.5)
         *   - HTMLCollection (§4.2.10.2)
         *
         * Namespace isolation is implemented by prefixing `id` and `name` attributes
         * with a constant string, i.e., `user-content-`
         */

        let SANITIZE_NAMED_PROPS = false;
        const SANITIZE_NAMED_PROPS_PREFIX = 'user-content-';
        /* Keep element content when removing element? */

        let KEEP_CONTENT = true;
        /* If a `Node` is passed to sanitize(), then performs sanitization in-place instead
         * of importing it into a new Document and returning a sanitized copy */

        let IN_PLACE = false;
        /* Allow usage of profiles like html, svg and mathMl */

        let USE_PROFILES = {};
        /* Tags to ignore content of when KEEP_CONTENT is true */

        let FORBID_CONTENTS = null;
        const DEFAULT_FORBID_CONTENTS = addToSet({}, ['annotation-xml', 'audio', 'colgroup', 'desc', 'foreignobject', 'head', 'iframe', 'math', 'mi', 'mn', 'mo', 'ms', 'mtext', 'noembed', 'noframes', 'noscript', 'plaintext', 'script', 'style', 'svg', 'template', 'thead', 'title', 'video', 'xmp']);
        /* Tags that are safe for data: URIs */

        let DATA_URI_TAGS = null;
        const DEFAULT_DATA_URI_TAGS = addToSet({}, ['audio', 'video', 'img', 'source', 'image', 'track']);
        /* Attributes safe for values like "javascript:" */

        let URI_SAFE_ATTRIBUTES = null;
        const DEFAULT_URI_SAFE_ATTRIBUTES = addToSet({}, ['alt', 'class', 'for', 'id', 'label', 'name', 'pattern', 'placeholder', 'role', 'summary', 'title', 'value', 'style', 'xmlns']);
        const MATHML_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
        const SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
        const HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';
        /* Document namespace */

        let NAMESPACE = HTML_NAMESPACE;
        let IS_EMPTY_INPUT = false;
        /* Allowed XHTML+XML namespaces */

        let ALLOWED_NAMESPACES = null;
        const DEFAULT_ALLOWED_NAMESPACES = addToSet({}, [MATHML_NAMESPACE, SVG_NAMESPACE, HTML_NAMESPACE], stringToString);
        /* Parsing of strict XHTML documents */

        let PARSER_MEDIA_TYPE;
        const SUPPORTED_PARSER_MEDIA_TYPES = ['application/xhtml+xml', 'text/html'];
        const DEFAULT_PARSER_MEDIA_TYPE = 'text/html';
        let transformCaseFunc;
        /* Keep a reference to config to pass to hooks */

        let CONFIG = null;
        /* Ideally, do not touch anything below this line */

        /* ______________________________________________ */

        const formElement = document.createElement('form');

        const isRegexOrFunction = function isRegexOrFunction(testValue) {
          return testValue instanceof RegExp || testValue instanceof Function;
        };
        /**
         * _parseConfig
         *
         * @param  {Object} cfg optional config literal
         */
        // eslint-disable-next-line complexity


        const _parseConfig = function _parseConfig(cfg) {
          if (CONFIG && CONFIG === cfg) {
            return;
          }
          /* Shield configuration object from tampering */


          if (!cfg || typeof cfg !== 'object') {
            cfg = {};
          }
          /* Shield configuration object from prototype pollution */


          cfg = clone(cfg);
          PARSER_MEDIA_TYPE = // eslint-disable-next-line unicorn/prefer-includes
          SUPPORTED_PARSER_MEDIA_TYPES.indexOf(cfg.PARSER_MEDIA_TYPE) === -1 ? PARSER_MEDIA_TYPE = DEFAULT_PARSER_MEDIA_TYPE : PARSER_MEDIA_TYPE = cfg.PARSER_MEDIA_TYPE; // HTML tags and attributes are not case-sensitive, converting to lowercase. Keeping XHTML as is.

          transformCaseFunc = PARSER_MEDIA_TYPE === 'application/xhtml+xml' ? stringToString : stringToLowerCase;
          /* Set configuration parameters */

          ALLOWED_TAGS = 'ALLOWED_TAGS' in cfg ? addToSet({}, cfg.ALLOWED_TAGS, transformCaseFunc) : DEFAULT_ALLOWED_TAGS;
          ALLOWED_ATTR = 'ALLOWED_ATTR' in cfg ? addToSet({}, cfg.ALLOWED_ATTR, transformCaseFunc) : DEFAULT_ALLOWED_ATTR;
          ALLOWED_NAMESPACES = 'ALLOWED_NAMESPACES' in cfg ? addToSet({}, cfg.ALLOWED_NAMESPACES, stringToString) : DEFAULT_ALLOWED_NAMESPACES;
          URI_SAFE_ATTRIBUTES = 'ADD_URI_SAFE_ATTR' in cfg ? addToSet(clone(DEFAULT_URI_SAFE_ATTRIBUTES), // eslint-disable-line indent
          cfg.ADD_URI_SAFE_ATTR, // eslint-disable-line indent
          transformCaseFunc // eslint-disable-line indent
          ) // eslint-disable-line indent
          : DEFAULT_URI_SAFE_ATTRIBUTES;
          DATA_URI_TAGS = 'ADD_DATA_URI_TAGS' in cfg ? addToSet(clone(DEFAULT_DATA_URI_TAGS), // eslint-disable-line indent
          cfg.ADD_DATA_URI_TAGS, // eslint-disable-line indent
          transformCaseFunc // eslint-disable-line indent
          ) // eslint-disable-line indent
          : DEFAULT_DATA_URI_TAGS;
          FORBID_CONTENTS = 'FORBID_CONTENTS' in cfg ? addToSet({}, cfg.FORBID_CONTENTS, transformCaseFunc) : DEFAULT_FORBID_CONTENTS;
          FORBID_TAGS = 'FORBID_TAGS' in cfg ? addToSet({}, cfg.FORBID_TAGS, transformCaseFunc) : {};
          FORBID_ATTR = 'FORBID_ATTR' in cfg ? addToSet({}, cfg.FORBID_ATTR, transformCaseFunc) : {};
          USE_PROFILES = 'USE_PROFILES' in cfg ? cfg.USE_PROFILES : false;
          ALLOW_ARIA_ATTR = cfg.ALLOW_ARIA_ATTR !== false; // Default true

          ALLOW_DATA_ATTR = cfg.ALLOW_DATA_ATTR !== false; // Default true

          ALLOW_UNKNOWN_PROTOCOLS = cfg.ALLOW_UNKNOWN_PROTOCOLS || false; // Default false

          ALLOW_SELF_CLOSE_IN_ATTR = cfg.ALLOW_SELF_CLOSE_IN_ATTR !== false; // Default true

          SAFE_FOR_TEMPLATES = cfg.SAFE_FOR_TEMPLATES || false; // Default false

          WHOLE_DOCUMENT = cfg.WHOLE_DOCUMENT || false; // Default false

          RETURN_DOM = cfg.RETURN_DOM || false; // Default false

          RETURN_DOM_FRAGMENT = cfg.RETURN_DOM_FRAGMENT || false; // Default false

          RETURN_TRUSTED_TYPE = cfg.RETURN_TRUSTED_TYPE || false; // Default false

          FORCE_BODY = cfg.FORCE_BODY || false; // Default false

          SANITIZE_DOM = cfg.SANITIZE_DOM !== false; // Default true

          SANITIZE_NAMED_PROPS = cfg.SANITIZE_NAMED_PROPS || false; // Default false

          KEEP_CONTENT = cfg.KEEP_CONTENT !== false; // Default true

          IN_PLACE = cfg.IN_PLACE || false; // Default false

          IS_ALLOWED_URI$1 = cfg.ALLOWED_URI_REGEXP || IS_ALLOWED_URI;
          NAMESPACE = cfg.NAMESPACE || HTML_NAMESPACE;
          CUSTOM_ELEMENT_HANDLING = cfg.CUSTOM_ELEMENT_HANDLING || {};

          if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck)) {
            CUSTOM_ELEMENT_HANDLING.tagNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck;
          }

          if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck)) {
            CUSTOM_ELEMENT_HANDLING.attributeNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck;
          }

          if (cfg.CUSTOM_ELEMENT_HANDLING && typeof cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements === 'boolean') {
            CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements = cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements;
          }

          if (SAFE_FOR_TEMPLATES) {
            ALLOW_DATA_ATTR = false;
          }

          if (RETURN_DOM_FRAGMENT) {
            RETURN_DOM = true;
          }
          /* Parse profile info */


          if (USE_PROFILES) {
            ALLOWED_TAGS = addToSet({}, [...text]);
            ALLOWED_ATTR = [];

            if (USE_PROFILES.html === true) {
              addToSet(ALLOWED_TAGS, html$1);
              addToSet(ALLOWED_ATTR, html);
            }

            if (USE_PROFILES.svg === true) {
              addToSet(ALLOWED_TAGS, svg$1);
              addToSet(ALLOWED_ATTR, svg);
              addToSet(ALLOWED_ATTR, xml);
            }

            if (USE_PROFILES.svgFilters === true) {
              addToSet(ALLOWED_TAGS, svgFilters);
              addToSet(ALLOWED_ATTR, svg);
              addToSet(ALLOWED_ATTR, xml);
            }

            if (USE_PROFILES.mathMl === true) {
              addToSet(ALLOWED_TAGS, mathMl$1);
              addToSet(ALLOWED_ATTR, mathMl);
              addToSet(ALLOWED_ATTR, xml);
            }
          }
          /* Merge configuration parameters */


          if (cfg.ADD_TAGS) {
            if (ALLOWED_TAGS === DEFAULT_ALLOWED_TAGS) {
              ALLOWED_TAGS = clone(ALLOWED_TAGS);
            }

            addToSet(ALLOWED_TAGS, cfg.ADD_TAGS, transformCaseFunc);
          }

          if (cfg.ADD_ATTR) {
            if (ALLOWED_ATTR === DEFAULT_ALLOWED_ATTR) {
              ALLOWED_ATTR = clone(ALLOWED_ATTR);
            }

            addToSet(ALLOWED_ATTR, cfg.ADD_ATTR, transformCaseFunc);
          }

          if (cfg.ADD_URI_SAFE_ATTR) {
            addToSet(URI_SAFE_ATTRIBUTES, cfg.ADD_URI_SAFE_ATTR, transformCaseFunc);
          }

          if (cfg.FORBID_CONTENTS) {
            if (FORBID_CONTENTS === DEFAULT_FORBID_CONTENTS) {
              FORBID_CONTENTS = clone(FORBID_CONTENTS);
            }

            addToSet(FORBID_CONTENTS, cfg.FORBID_CONTENTS, transformCaseFunc);
          }
          /* Add #text in case KEEP_CONTENT is set to true */


          if (KEEP_CONTENT) {
            ALLOWED_TAGS['#text'] = true;
          }
          /* Add html, head and body to ALLOWED_TAGS in case WHOLE_DOCUMENT is true */


          if (WHOLE_DOCUMENT) {
            addToSet(ALLOWED_TAGS, ['html', 'head', 'body']);
          }
          /* Add tbody to ALLOWED_TAGS in case tables are permitted, see #286, #365 */


          if (ALLOWED_TAGS.table) {
            addToSet(ALLOWED_TAGS, ['tbody']);
            delete FORBID_TAGS.tbody;
          }

          if (cfg.TRUSTED_TYPES_POLICY) {
            if (typeof cfg.TRUSTED_TYPES_POLICY.createHTML !== 'function') {
              throw typeErrorCreate('TRUSTED_TYPES_POLICY configuration option must provide a "createHTML" hook.');
            }

            if (typeof cfg.TRUSTED_TYPES_POLICY.createScriptURL !== 'function') {
              throw typeErrorCreate('TRUSTED_TYPES_POLICY configuration option must provide a "createScriptURL" hook.');
            } // Overwrite existing TrustedTypes policy.


            trustedTypesPolicy = cfg.TRUSTED_TYPES_POLICY; // Sign local variables required by `sanitize`.

            emptyHTML = trustedTypesPolicy.createHTML('');
          } else {
            // Uninitialized policy, attempt to initialize the internal dompurify policy.
            if (trustedTypesPolicy === undefined) {
              trustedTypesPolicy = _createTrustedTypesPolicy(trustedTypes, currentScript);
            } // If creating the internal policy succeeded sign internal variables.


            if (trustedTypesPolicy !== null && typeof emptyHTML === 'string') {
              emptyHTML = trustedTypesPolicy.createHTML('');
            }
          } // Prevent further manipulation of configuration.
          // Not available in IE8, Safari 5, etc.


          if (freeze) {
            freeze(cfg);
          }

          CONFIG = cfg;
        };

        const MATHML_TEXT_INTEGRATION_POINTS = addToSet({}, ['mi', 'mo', 'mn', 'ms', 'mtext']);
        const HTML_INTEGRATION_POINTS = addToSet({}, ['foreignobject', 'desc', 'title', 'annotation-xml']); // Certain elements are allowed in both SVG and HTML
        // namespace. We need to specify them explicitly
        // so that they don't get erroneously deleted from
        // HTML namespace.

        const COMMON_SVG_AND_HTML_ELEMENTS = addToSet({}, ['title', 'style', 'font', 'a', 'script']);
        /* Keep track of all possible SVG and MathML tags
         * so that we can perform the namespace checks
         * correctly. */

        const ALL_SVG_TAGS = addToSet({}, svg$1);
        addToSet(ALL_SVG_TAGS, svgFilters);
        addToSet(ALL_SVG_TAGS, svgDisallowed);
        const ALL_MATHML_TAGS = addToSet({}, mathMl$1);
        addToSet(ALL_MATHML_TAGS, mathMlDisallowed);
        /**
         *
         *
         * @param  {Element} element a DOM element whose namespace is being checked
         * @returns {boolean} Return false if the element has a
         *  namespace that a spec-compliant parser would never
         *  return. Return true otherwise.
         */

        const _checkValidNamespace = function _checkValidNamespace(element) {
          let parent = getParentNode(element); // In JSDOM, if we're inside shadow DOM, then parentNode
          // can be null. We just simulate parent in this case.

          if (!parent || !parent.tagName) {
            parent = {
              namespaceURI: NAMESPACE,
              tagName: 'template'
            };
          }

          const tagName = stringToLowerCase(element.tagName);
          const parentTagName = stringToLowerCase(parent.tagName);

          if (!ALLOWED_NAMESPACES[element.namespaceURI]) {
            return false;
          }

          if (element.namespaceURI === SVG_NAMESPACE) {
            // The only way to switch from HTML namespace to SVG
            // is via <svg>. If it happens via any other tag, then
            // it should be killed.
            if (parent.namespaceURI === HTML_NAMESPACE) {
              return tagName === 'svg';
            } // The only way to switch from MathML to SVG is via`
            // svg if parent is either <annotation-xml> or MathML
            // text integration points.


            if (parent.namespaceURI === MATHML_NAMESPACE) {
              return tagName === 'svg' && (parentTagName === 'annotation-xml' || MATHML_TEXT_INTEGRATION_POINTS[parentTagName]);
            } // We only allow elements that are defined in SVG
            // spec. All others are disallowed in SVG namespace.


            return Boolean(ALL_SVG_TAGS[tagName]);
          }

          if (element.namespaceURI === MATHML_NAMESPACE) {
            // The only way to switch from HTML namespace to MathML
            // is via <math>. If it happens via any other tag, then
            // it should be killed.
            if (parent.namespaceURI === HTML_NAMESPACE) {
              return tagName === 'math';
            } // The only way to switch from SVG to MathML is via
            // <math> and HTML integration points


            if (parent.namespaceURI === SVG_NAMESPACE) {
              return tagName === 'math' && HTML_INTEGRATION_POINTS[parentTagName];
            } // We only allow elements that are defined in MathML
            // spec. All others are disallowed in MathML namespace.


            return Boolean(ALL_MATHML_TAGS[tagName]);
          }

          if (element.namespaceURI === HTML_NAMESPACE) {
            // The only way to switch from SVG to HTML is via
            // HTML integration points, and from MathML to HTML
            // is via MathML text integration points
            if (parent.namespaceURI === SVG_NAMESPACE && !HTML_INTEGRATION_POINTS[parentTagName]) {
              return false;
            }

            if (parent.namespaceURI === MATHML_NAMESPACE && !MATHML_TEXT_INTEGRATION_POINTS[parentTagName]) {
              return false;
            } // We disallow tags that are specific for MathML
            // or SVG and should never appear in HTML namespace


            return !ALL_MATHML_TAGS[tagName] && (COMMON_SVG_AND_HTML_ELEMENTS[tagName] || !ALL_SVG_TAGS[tagName]);
          } // For XHTML and XML documents that support custom namespaces


          if (PARSER_MEDIA_TYPE === 'application/xhtml+xml' && ALLOWED_NAMESPACES[element.namespaceURI]) {
            return true;
          } // The code should never reach this place (this means
          // that the element somehow got namespace that is not
          // HTML, SVG, MathML or allowed via ALLOWED_NAMESPACES).
          // Return false just in case.


          return false;
        };
        /**
         * _forceRemove
         *
         * @param  {Node} node a DOM node
         */


        const _forceRemove = function _forceRemove(node) {
          arrayPush(DOMPurify.removed, {
            element: node
          });

          try {
            // eslint-disable-next-line unicorn/prefer-dom-node-remove
            node.parentNode.removeChild(node);
          } catch (_) {
            node.remove();
          }
        };
        /**
         * _removeAttribute
         *
         * @param  {String} name an Attribute name
         * @param  {Node} node a DOM node
         */


        const _removeAttribute = function _removeAttribute(name, node) {
          try {
            arrayPush(DOMPurify.removed, {
              attribute: node.getAttributeNode(name),
              from: node
            });
          } catch (_) {
            arrayPush(DOMPurify.removed, {
              attribute: null,
              from: node
            });
          }

          node.removeAttribute(name); // We void attribute values for unremovable "is"" attributes

          if (name === 'is' && !ALLOWED_ATTR[name]) {
            if (RETURN_DOM || RETURN_DOM_FRAGMENT) {
              try {
                _forceRemove(node);
              } catch (_) {}
            } else {
              try {
                node.setAttribute(name, '');
              } catch (_) {}
            }
          }
        };
        /**
         * _initDocument
         *
         * @param  {String} dirty a string of dirty markup
         * @return {Document} a DOM, filled with the dirty markup
         */


        const _initDocument = function _initDocument(dirty) {
          /* Create a HTML document */
          let doc;
          let leadingWhitespace;

          if (FORCE_BODY) {
            dirty = '<remove></remove>' + dirty;
          } else {
            /* If FORCE_BODY isn't used, leading whitespace needs to be preserved manually */
            const matches = stringMatch(dirty, /^[\r\n\t ]+/);
            leadingWhitespace = matches && matches[0];
          }

          if (PARSER_MEDIA_TYPE === 'application/xhtml+xml' && NAMESPACE === HTML_NAMESPACE) {
            // Root of XHTML doc must contain xmlns declaration (see https://www.w3.org/TR/xhtml1/normative.html#strict)
            dirty = '<html xmlns="http://www.w3.org/1999/xhtml"><head></head><body>' + dirty + '</body></html>';
          }

          const dirtyPayload = trustedTypesPolicy ? trustedTypesPolicy.createHTML(dirty) : dirty;
          /*
           * Use the DOMParser API by default, fallback later if needs be
           * DOMParser not work for svg when has multiple root element.
           */

          if (NAMESPACE === HTML_NAMESPACE) {
            try {
              doc = new DOMParser().parseFromString(dirtyPayload, PARSER_MEDIA_TYPE);
            } catch (_) {}
          }
          /* Use createHTMLDocument in case DOMParser is not available */


          if (!doc || !doc.documentElement) {
            doc = implementation.createDocument(NAMESPACE, 'template', null);

            try {
              doc.documentElement.innerHTML = IS_EMPTY_INPUT ? emptyHTML : dirtyPayload;
            } catch (_) {// Syntax error if dirtyPayload is invalid xml
            }
          }

          const body = doc.body || doc.documentElement;

          if (dirty && leadingWhitespace) {
            body.insertBefore(document.createTextNode(leadingWhitespace), body.childNodes[0] || null);
          }
          /* Work on whole document or just its body */


          if (NAMESPACE === HTML_NAMESPACE) {
            return getElementsByTagName.call(doc, WHOLE_DOCUMENT ? 'html' : 'body')[0];
          }

          return WHOLE_DOCUMENT ? doc.documentElement : body;
        };
        /**
         * _createIterator
         *
         * @param  {Document} root document/fragment to create iterator for
         * @return {Iterator} iterator instance
         */


        const _createIterator = function _createIterator(root) {
          return createNodeIterator.call(root.ownerDocument || root, root, // eslint-disable-next-line no-bitwise
          NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT | NodeFilter.SHOW_TEXT, null, false);
        };
        /**
         * _isClobbered
         *
         * @param  {Node} elm element to check for clobbering attacks
         * @return {Boolean} true if clobbered, false if safe
         */


        const _isClobbered = function _isClobbered(elm) {
          return elm instanceof HTMLFormElement && (typeof elm.nodeName !== 'string' || typeof elm.textContent !== 'string' || typeof elm.removeChild !== 'function' || !(elm.attributes instanceof NamedNodeMap) || typeof elm.removeAttribute !== 'function' || typeof elm.setAttribute !== 'function' || typeof elm.namespaceURI !== 'string' || typeof elm.insertBefore !== 'function' || typeof elm.hasChildNodes !== 'function');
        };
        /**
         * _isNode
         *
         * @param  {Node} obj object to check whether it's a DOM node
         * @return {Boolean} true is object is a DOM node
         */


        const _isNode = function _isNode(object) {
          return typeof Node === 'object' ? object instanceof Node : object && typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string';
        };
        /**
         * _executeHook
         * Execute user configurable hooks
         *
         * @param  {String} entryPoint  Name of the hook's entry point
         * @param  {Node} currentNode node to work on with the hook
         * @param  {Object} data additional hook parameters
         */


        const _executeHook = function _executeHook(entryPoint, currentNode, data) {
          if (!hooks[entryPoint]) {
            return;
          }

          arrayForEach(hooks[entryPoint], hook => {
            hook.call(DOMPurify, currentNode, data, CONFIG);
          });
        };
        /**
         * _sanitizeElements
         *
         * @protect nodeName
         * @protect textContent
         * @protect removeChild
         *
         * @param   {Node} currentNode to check for permission to exist
         * @return  {Boolean} true if node was killed, false if left alive
         */


        const _sanitizeElements = function _sanitizeElements(currentNode) {
          let content;
          /* Execute a hook if present */

          _executeHook('beforeSanitizeElements', currentNode, null);
          /* Check if element is clobbered or can clobber */


          if (_isClobbered(currentNode)) {
            _forceRemove(currentNode);

            return true;
          }
          /* Now let's check the element's type and name */


          const tagName = transformCaseFunc(currentNode.nodeName);
          /* Execute a hook if present */

          _executeHook('uponSanitizeElement', currentNode, {
            tagName,
            allowedTags: ALLOWED_TAGS
          });
          /* Detect mXSS attempts abusing namespace confusion */


          if (currentNode.hasChildNodes() && !_isNode(currentNode.firstElementChild) && (!_isNode(currentNode.content) || !_isNode(currentNode.content.firstElementChild)) && regExpTest(/<[/\w]/g, currentNode.innerHTML) && regExpTest(/<[/\w]/g, currentNode.textContent)) {
            _forceRemove(currentNode);

            return true;
          }
          /* Remove element if anything forbids its presence */


          if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {
            /* Check if we have a custom element to handle */
            if (!FORBID_TAGS[tagName] && _basicCustomElementTest(tagName)) {
              if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, tagName)) return false;
              if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(tagName)) return false;
            }
            /* Keep content except for bad-listed elements */


            if (KEEP_CONTENT && !FORBID_CONTENTS[tagName]) {
              const parentNode = getParentNode(currentNode) || currentNode.parentNode;
              const childNodes = getChildNodes(currentNode) || currentNode.childNodes;

              if (childNodes && parentNode) {
                const childCount = childNodes.length;

                for (let i = childCount - 1; i >= 0; --i) {
                  parentNode.insertBefore(cloneNode(childNodes[i], true), getNextSibling(currentNode));
                }
              }
            }

            _forceRemove(currentNode);

            return true;
          }
          /* Check whether element has a valid namespace */


          if (currentNode instanceof Element && !_checkValidNamespace(currentNode)) {
            _forceRemove(currentNode);

            return true;
          }
          /* Make sure that older browsers don't get fallback-tag mXSS */


          if ((tagName === 'noscript' || tagName === 'noembed' || tagName === 'noframes') && regExpTest(/<\/no(script|embed|frames)/i, currentNode.innerHTML)) {
            _forceRemove(currentNode);

            return true;
          }
          /* Sanitize element content to be template-safe */


          if (SAFE_FOR_TEMPLATES && currentNode.nodeType === 3) {
            /* Get the element's text content */
            content = currentNode.textContent;
            content = stringReplace(content, MUSTACHE_EXPR, ' ');
            content = stringReplace(content, ERB_EXPR, ' ');
            content = stringReplace(content, TMPLIT_EXPR, ' ');

            if (currentNode.textContent !== content) {
              arrayPush(DOMPurify.removed, {
                element: currentNode.cloneNode()
              });
              currentNode.textContent = content;
            }
          }
          /* Execute a hook if present */


          _executeHook('afterSanitizeElements', currentNode, null);

          return false;
        };
        /**
         * _isValidAttribute
         *
         * @param  {string} lcTag Lowercase tag name of containing element.
         * @param  {string} lcName Lowercase attribute name.
         * @param  {string} value Attribute value.
         * @return {Boolean} Returns true if `value` is valid, otherwise false.
         */
        // eslint-disable-next-line complexity


        const _isValidAttribute = function _isValidAttribute(lcTag, lcName, value) {
          /* Make sure attribute cannot clobber */
          if (SANITIZE_DOM && (lcName === 'id' || lcName === 'name') && (value in document || value in formElement)) {
            return false;
          }
          /* Allow valid data-* attributes: At least one character after "-"
              (https://html.spec.whatwg.org/multipage/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes)
              XML-compatible (https://html.spec.whatwg.org/multipage/infrastructure.html#xml-compatible and http://www.w3.org/TR/xml/#d0e804)
              We don't need to check the value; it's always URI safe. */


          if (ALLOW_DATA_ATTR && !FORBID_ATTR[lcName] && regExpTest(DATA_ATTR, lcName)) ; else if (ALLOW_ARIA_ATTR && regExpTest(ARIA_ATTR, lcName)) ; else if (!ALLOWED_ATTR[lcName] || FORBID_ATTR[lcName]) {
            if ( // First condition does a very basic check if a) it's basically a valid custom element tagname AND
            // b) if the tagName passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck
            // and c) if the attribute name passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.attributeNameCheck
            _basicCustomElementTest(lcTag) && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, lcTag) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(lcTag)) && (CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.attributeNameCheck, lcName) || CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.attributeNameCheck(lcName)) || // Alternative, second condition checks if it's an `is`-attribute, AND
            // the value passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck
            lcName === 'is' && CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, value) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(value))) ; else {
              return false;
            }
            /* Check value is safe. First, is attr inert? If so, is safe */

          } else if (URI_SAFE_ATTRIBUTES[lcName]) ; else if (regExpTest(IS_ALLOWED_URI$1, stringReplace(value, ATTR_WHITESPACE, ''))) ; else if ((lcName === 'src' || lcName === 'xlink:href' || lcName === 'href') && lcTag !== 'script' && stringIndexOf(value, 'data:') === 0 && DATA_URI_TAGS[lcTag]) ; else if (ALLOW_UNKNOWN_PROTOCOLS && !regExpTest(IS_SCRIPT_OR_DATA, stringReplace(value, ATTR_WHITESPACE, ''))) ; else if (value) {
            return false;
          } else ;

          return true;
        };
        /**
         * _basicCustomElementCheck
         * checks if at least one dash is included in tagName, and it's not the first char
         * for more sophisticated checking see https://github.com/sindresorhus/validate-element-name
         * @param {string} tagName name of the tag of the node to sanitize
         */


        const _basicCustomElementTest = function _basicCustomElementTest(tagName) {
          return tagName.indexOf('-') > 0;
        };
        /**
         * _sanitizeAttributes
         *
         * @protect attributes
         * @protect nodeName
         * @protect removeAttribute
         * @protect setAttribute
         *
         * @param  {Node} currentNode to sanitize
         */


        const _sanitizeAttributes = function _sanitizeAttributes(currentNode) {
          let attr;
          let value;
          let lcName;
          let l;
          /* Execute a hook if present */

          _executeHook('beforeSanitizeAttributes', currentNode, null);

          const {
            attributes
          } = currentNode;
          /* Check if we have attributes; if not we might have a text node */

          if (!attributes) {
            return;
          }

          const hookEvent = {
            attrName: '',
            attrValue: '',
            keepAttr: true,
            allowedAttributes: ALLOWED_ATTR
          };
          l = attributes.length;
          /* Go backwards over all attributes; safely remove bad ones */

          while (l--) {
            attr = attributes[l];
            const {
              name,
              namespaceURI
            } = attr;
            value = name === 'value' ? attr.value : stringTrim(attr.value);
            lcName = transformCaseFunc(name);
            /* Execute a hook if present */

            hookEvent.attrName = lcName;
            hookEvent.attrValue = value;
            hookEvent.keepAttr = true;
            hookEvent.forceKeepAttr = undefined; // Allows developers to see this is a property they can set

            _executeHook('uponSanitizeAttribute', currentNode, hookEvent);

            value = hookEvent.attrValue;
            /* Did the hooks approve of the attribute? */

            if (hookEvent.forceKeepAttr) {
              continue;
            }
            /* Remove attribute */


            _removeAttribute(name, currentNode);
            /* Did the hooks approve of the attribute? */


            if (!hookEvent.keepAttr) {
              continue;
            }
            /* Work around a security issue in jQuery 3.0 */


            if (!ALLOW_SELF_CLOSE_IN_ATTR && regExpTest(/\/>/i, value)) {
              _removeAttribute(name, currentNode);

              continue;
            }
            /* Sanitize attribute content to be template-safe */


            if (SAFE_FOR_TEMPLATES) {
              value = stringReplace(value, MUSTACHE_EXPR, ' ');
              value = stringReplace(value, ERB_EXPR, ' ');
              value = stringReplace(value, TMPLIT_EXPR, ' ');
            }
            /* Is `value` valid for this attribute? */


            const lcTag = transformCaseFunc(currentNode.nodeName);

            if (!_isValidAttribute(lcTag, lcName, value)) {
              continue;
            }
            /* Full DOM Clobbering protection via namespace isolation,
             * Prefix id and name attributes with `user-content-`
             */


            if (SANITIZE_NAMED_PROPS && (lcName === 'id' || lcName === 'name')) {
              // Remove the attribute with this value
              _removeAttribute(name, currentNode); // Prefix the value and later re-create the attribute with the sanitized value


              value = SANITIZE_NAMED_PROPS_PREFIX + value;
            }
            /* Handle attributes that require Trusted Types */


            if (trustedTypesPolicy && typeof trustedTypes === 'object' && typeof trustedTypes.getAttributeType === 'function') {
              if (namespaceURI) ; else {
                switch (trustedTypes.getAttributeType(lcTag, lcName)) {
                  case 'TrustedHTML':
                    {
                      value = trustedTypesPolicy.createHTML(value);
                      break;
                    }

                  case 'TrustedScriptURL':
                    {
                      value = trustedTypesPolicy.createScriptURL(value);
                      break;
                    }
                }
              }
            }
            /* Handle invalid data-* attribute set by try-catching it */


            try {
              if (namespaceURI) {
                currentNode.setAttributeNS(namespaceURI, name, value);
              } else {
                /* Fallback to setAttribute() for browser-unrecognized namespaces e.g. "x-schema". */
                currentNode.setAttribute(name, value);
              }

              arrayPop(DOMPurify.removed);
            } catch (_) {}
          }
          /* Execute a hook if present */


          _executeHook('afterSanitizeAttributes', currentNode, null);
        };
        /**
         * _sanitizeShadowDOM
         *
         * @param  {DocumentFragment} fragment to iterate over recursively
         */


        const _sanitizeShadowDOM = function _sanitizeShadowDOM(fragment) {
          let shadowNode;

          const shadowIterator = _createIterator(fragment);
          /* Execute a hook if present */


          _executeHook('beforeSanitizeShadowDOM', fragment, null);

          while (shadowNode = shadowIterator.nextNode()) {
            /* Execute a hook if present */
            _executeHook('uponSanitizeShadowNode', shadowNode, null);
            /* Sanitize tags and elements */


            if (_sanitizeElements(shadowNode)) {
              continue;
            }
            /* Deep shadow DOM detected */


            if (shadowNode.content instanceof DocumentFragment) {
              _sanitizeShadowDOM(shadowNode.content);
            }
            /* Check attributes, sanitize if necessary */


            _sanitizeAttributes(shadowNode);
          }
          /* Execute a hook if present */


          _executeHook('afterSanitizeShadowDOM', fragment, null);
        };
        /**
         * Sanitize
         * Public method providing core sanitation functionality
         *
         * @param {String|Node} dirty string or DOM node
         * @param {Object} configuration object
         */
        // eslint-disable-next-line complexity


        DOMPurify.sanitize = function (dirty) {
          let cfg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
          let body;
          let importedNode;
          let currentNode;
          let returnNode;
          /* Make sure we have a string to sanitize.
            DO NOT return early, as this will return the wrong type if
            the user has requested a DOM object rather than a string */

          IS_EMPTY_INPUT = !dirty;

          if (IS_EMPTY_INPUT) {
            dirty = '<!-->';
          }
          /* Stringify, in case dirty is an object */


          if (typeof dirty !== 'string' && !_isNode(dirty)) {
            if (typeof dirty.toString === 'function') {
              dirty = dirty.toString();

              if (typeof dirty !== 'string') {
                throw typeErrorCreate('dirty is not a string, aborting');
              }
            } else {
              throw typeErrorCreate('toString is not a function');
            }
          }
          /* Return dirty HTML if DOMPurify cannot run */


          if (!DOMPurify.isSupported) {
            return dirty;
          }
          /* Assign config vars */


          if (!SET_CONFIG) {
            _parseConfig(cfg);
          }
          /* Clean up removed elements */


          DOMPurify.removed = [];
          /* Check if dirty is correctly typed for IN_PLACE */

          if (typeof dirty === 'string') {
            IN_PLACE = false;
          }

          if (IN_PLACE) {
            /* Do some early pre-sanitization to avoid unsafe root nodes */
            if (dirty.nodeName) {
              const tagName = transformCaseFunc(dirty.nodeName);

              if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {
                throw typeErrorCreate('root node is forbidden and cannot be sanitized in-place');
              }
            }
          } else if (dirty instanceof Node) {
            /* If dirty is a DOM element, append to an empty document to avoid
               elements being stripped by the parser */
            body = _initDocument('<!---->');
            importedNode = body.ownerDocument.importNode(dirty, true);

            if (importedNode.nodeType === 1 && importedNode.nodeName === 'BODY') {
              /* Node is already a body, use as is */
              body = importedNode;
            } else if (importedNode.nodeName === 'HTML') {
              body = importedNode;
            } else {
              // eslint-disable-next-line unicorn/prefer-dom-node-append
              body.appendChild(importedNode);
            }
          } else {
            /* Exit directly if we have nothing to do */
            if (!RETURN_DOM && !SAFE_FOR_TEMPLATES && !WHOLE_DOCUMENT && // eslint-disable-next-line unicorn/prefer-includes
            dirty.indexOf('<') === -1) {
              return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(dirty) : dirty;
            }
            /* Initialize the document to work on */


            body = _initDocument(dirty);
            /* Check we have a DOM node from the data */

            if (!body) {
              return RETURN_DOM ? null : RETURN_TRUSTED_TYPE ? emptyHTML : '';
            }
          }
          /* Remove first element node (ours) if FORCE_BODY is set */


          if (body && FORCE_BODY) {
            _forceRemove(body.firstChild);
          }
          /* Get node iterator */


          const nodeIterator = _createIterator(IN_PLACE ? dirty : body);
          /* Now start iterating over the created document */


          while (currentNode = nodeIterator.nextNode()) {
            /* Sanitize tags and elements */
            if (_sanitizeElements(currentNode)) {
              continue;
            }
            /* Shadow DOM detected, sanitize it */


            if (currentNode.content instanceof DocumentFragment) {
              _sanitizeShadowDOM(currentNode.content);
            }
            /* Check attributes, sanitize if necessary */


            _sanitizeAttributes(currentNode);
          }
          /* If we sanitized `dirty` in-place, return it. */


          if (IN_PLACE) {
            return dirty;
          }
          /* Return sanitized string or DOM */


          if (RETURN_DOM) {
            if (RETURN_DOM_FRAGMENT) {
              returnNode = createDocumentFragment.call(body.ownerDocument);

              while (body.firstChild) {
                // eslint-disable-next-line unicorn/prefer-dom-node-append
                returnNode.appendChild(body.firstChild);
              }
            } else {
              returnNode = body;
            }

            if (ALLOWED_ATTR.shadowroot || ALLOWED_ATTR.shadowrootmode) {
              /*
                AdoptNode() is not used because internal state is not reset
                (e.g. the past names map of a HTMLFormElement), this is safe
                in theory but we would rather not risk another attack vector.
                The state that is cloned by importNode() is explicitly defined
                by the specs.
              */
              returnNode = importNode.call(originalDocument, returnNode, true);
            }

            return returnNode;
          }

          let serializedHTML = WHOLE_DOCUMENT ? body.outerHTML : body.innerHTML;
          /* Serialize doctype if allowed */

          if (WHOLE_DOCUMENT && ALLOWED_TAGS['!doctype'] && body.ownerDocument && body.ownerDocument.doctype && body.ownerDocument.doctype.name && regExpTest(DOCTYPE_NAME, body.ownerDocument.doctype.name)) {
            serializedHTML = '<!DOCTYPE ' + body.ownerDocument.doctype.name + '>\n' + serializedHTML;
          }
          /* Sanitize final string template-safe */


          if (SAFE_FOR_TEMPLATES) {
            serializedHTML = stringReplace(serializedHTML, MUSTACHE_EXPR, ' ');
            serializedHTML = stringReplace(serializedHTML, ERB_EXPR, ' ');
            serializedHTML = stringReplace(serializedHTML, TMPLIT_EXPR, ' ');
          }

          return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(serializedHTML) : serializedHTML;
        };
        /**
         * Public method to set the configuration once
         * setConfig
         *
         * @param {Object} cfg configuration object
         */


        DOMPurify.setConfig = function (cfg) {
          _parseConfig(cfg);

          SET_CONFIG = true;
        };
        /**
         * Public method to remove the configuration
         * clearConfig
         *
         */


        DOMPurify.clearConfig = function () {
          CONFIG = null;
          SET_CONFIG = false;
        };
        /**
         * Public method to check if an attribute value is valid.
         * Uses last set config, if any. Otherwise, uses config defaults.
         * isValidAttribute
         *
         * @param  {string} tag Tag name of containing element.
         * @param  {string} attr Attribute name.
         * @param  {string} value Attribute value.
         * @return {Boolean} Returns true if `value` is valid. Otherwise, returns false.
         */


        DOMPurify.isValidAttribute = function (tag, attr, value) {
          /* Initialize shared config vars if necessary. */
          if (!CONFIG) {
            _parseConfig({});
          }

          const lcTag = transformCaseFunc(tag);
          const lcName = transformCaseFunc(attr);
          return _isValidAttribute(lcTag, lcName, value);
        };
        /**
         * AddHook
         * Public method to add DOMPurify hooks
         *
         * @param {String} entryPoint entry point for the hook to add
         * @param {Function} hookFunction function to execute
         */


        DOMPurify.addHook = function (entryPoint, hookFunction) {
          if (typeof hookFunction !== 'function') {
            return;
          }

          hooks[entryPoint] = hooks[entryPoint] || [];
          arrayPush(hooks[entryPoint], hookFunction);
        };
        /**
         * RemoveHook
         * Public method to remove a DOMPurify hook at a given entryPoint
         * (pops it from the stack of hooks if more are present)
         *
         * @param {String} entryPoint entry point for the hook to remove
         * @return {Function} removed(popped) hook
         */


        DOMPurify.removeHook = function (entryPoint) {
          if (hooks[entryPoint]) {
            return arrayPop(hooks[entryPoint]);
          }
        };
        /**
         * RemoveHooks
         * Public method to remove all DOMPurify hooks at a given entryPoint
         *
         * @param  {String} entryPoint entry point for the hooks to remove
         */


        DOMPurify.removeHooks = function (entryPoint) {
          if (hooks[entryPoint]) {
            hooks[entryPoint] = [];
          }
        };
        /**
         * RemoveAllHooks
         * Public method to remove all DOMPurify hooks
         *
         */


        DOMPurify.removeAllHooks = function () {
          hooks = {};
        };

        return DOMPurify;
      }

      var purify = createDOMPurify();

      return purify;

    }));

    });

    var DOMPurify = /*#__PURE__*/Object.freeze(/*#__PURE__*/_mergeNamespaces({
        __proto__: null,
        'default': purify,
        __moduleExports: purify
    }, [purify]));

    /* assets/scripts/components/screens/intern/Editeur.svelte generated by Svelte v3.58.0 */
    const file_1 = "assets/scripts/components/screens/intern/Editeur.svelte";

    // (1:0) <script>   import '../../../types.js'    /** @type Promise<EditeurFile> */   export let fileP    /** @type any */   export let buildStatus    /** @type {FileContenu[]}
    function create_catch_block(ctx) {
    	const block = { c: noop, m: noop, p: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_catch_block.name,
    		type: "catch",
    		source: "(1:0) <script>   import '../../../types.js'    /** @type Promise<EditeurFile> */   export let fileP    /** @type any */   export let buildStatus    /** @type {FileContenu[]}",
    		ctx
    	});

    	return block;
    }

    // (150:4) {:then}
    function create_then_block(ctx) {
    	let div6;
    	let form;
    	let div0;
    	let label0;
    	let t1;
    	let input0;
    	let t2;
    	let div3;
    	let h4;
    	let t4;
    	let details0;
    	let summary0;
    	let t6;
    	let div1;
    	let p;
    	let t7;
    	let a0;
    	let t9;
    	let a1;
    	let t11;
    	let details1;
    	let summary1;
    	let t13;
    	let div2;
    	let ol;
    	let li0;
    	let label1;
    	let t15;
    	let input1;
    	let t16;
    	let li1;
    	let t18;
    	let figure;
    	let t19;
    	let t20;
    	let li2;
    	let t22;
    	let div4;
    	let label2;
    	let t24;
    	let textarea;
    	let t25;
    	let t26;
    	let div5;
    	let a2;
    	let t27;
    	let t28;
    	let button;
    	let t30;
    	let mounted;
    	let dispose;
    	let if_block0 = /*preview*/ ctx[9] && create_if_block_1$3(ctx);
    	let if_block1 = /*file*/ ctx[7].fileName && /*file*/ ctx[7].fileName !== 'index.md' && create_if_block$5(ctx);

    	const block = {
    		c: function create() {
    			div6 = element("div");
    			form = element("form");
    			div0 = element("div");
    			label0 = element("label");
    			label0.textContent = "Titre";
    			t1 = space();
    			input0 = element("input");
    			t2 = space();
    			div3 = element("div");
    			h4 = element("h4");
    			h4.textContent = "Aide";
    			t4 = space();
    			details0 = element("details");
    			summary0 = element("summary");
    			summary0.textContent = "Mettre en forme le contenu";
    			t6 = space();
    			div1 = element("div");
    			p = element("p");
    			t7 = text("Pour mettre en forme votre contenu, vous pouvez bidouiller\n                  ");
    			a0 = element("a");
    			a0.textContent = "avec du Markdown";
    			t9 = text("\n                  … ou\n                  ");
    			a1 = element("a");
    			a1.textContent = "apprendre le HTML";
    			t11 = space();
    			details1 = element("details");
    			summary1 = element("summary");
    			summary1.textContent = "Ajouter une image";
    			t13 = space();
    			div2 = element("div");
    			ol = element("ol");
    			li0 = element("li");
    			label1 = element("label");
    			label1.textContent = "Sélectionnez votre image :";
    			t15 = space();
    			input1 = element("input");
    			t16 = space();
    			li1 = element("li");
    			li1.textContent = "Insérez la ligne suivante là où vous souhaitez que votre\n                    image apparaisse :";
    			t18 = space();
    			figure = element("figure");
    			t19 = text(/*imageMd*/ ctx[8]);
    			t20 = space();
    			li2 = element("li");
    			li2.textContent = "Remplacez le texte entre crochets par une description pour\n                    les personnes malvoyantes (il s'affichera si l'image ne\n                    charge pas)";
    			t22 = space();
    			div4 = element("div");
    			label2 = element("label");
    			label2.textContent = "Contenu";
    			t24 = space();
    			textarea = element("textarea");
    			t25 = space();
    			if (if_block0) if_block0.c();
    			t26 = space();
    			div5 = element("div");
    			a2 = element("a");
    			t27 = text("Retour");
    			t28 = space();
    			button = element("button");
    			button.textContent = "Lancer la publication (~ 2 min)";
    			t30 = space();
    			if (if_block1) if_block1.c();
    			attr_dev(label0, "for", "title");
    			add_location(label0, file_1, 153, 12, 3628);
    			attr_dev(input0, "type", "text");
    			attr_dev(input0, "id", "title");
    			input0.required = true;
    			add_location(input0, file_1, 154, 12, 3673);
    			add_location(div0, file_1, 152, 10, 3610);
    			attr_dev(h4, "class", "label");
    			add_location(h4, file_1, 164, 12, 3924);
    			attr_dev(summary0, "class", "svelte-16pu79p");
    			add_location(summary0, file_1, 166, 14, 3988);
    			attr_dev(a0, "href", "https://flus.fr/carnet/markdown.html");
    			attr_dev(a0, "target", "_blank");
    			add_location(a0, file_1, 170, 18, 4169);
    			attr_dev(a1, "href", "https://developer.mozilla.org/fr/docs/Learn/Getting_started_with_the_web/HTML_basics");
    			attr_dev(a1, "target", "_blank");
    			add_location(a1, file_1, 177, 18, 4393);
    			add_location(p, file_1, 168, 16, 4070);
    			add_location(div1, file_1, 167, 14, 4048);
    			add_location(details0, file_1, 165, 12, 3964);
    			attr_dev(summary1, "class", "svelte-16pu79p");
    			add_location(summary1, file_1, 188, 14, 4727);
    			attr_dev(label1, "for", "image");
    			attr_dev(label1, "class", "svelte-16pu79p");
    			add_location(label1, file_1, 192, 20, 4848);
    			attr_dev(input1, "accept", "image/png, image/jpeg, image/webp, image/gif, image/svg");
    			attr_dev(input1, "id", "image");
    			attr_dev(input1, "name", "image");
    			attr_dev(input1, "type", "file");
    			attr_dev(input1, "class", "svelte-16pu79p");
    			add_location(input1, file_1, 193, 20, 4922);
    			attr_dev(li0, "class", "svelte-16pu79p");
    			add_location(li0, file_1, 191, 18, 4823);
    			attr_dev(li1, "class", "svelte-16pu79p");
    			add_location(li1, file_1, 202, 18, 5270);
    			attr_dev(figure, "class", "svelte-16pu79p");
    			add_location(figure, file_1, 206, 18, 5433);
    			attr_dev(li2, "class", "svelte-16pu79p");
    			add_location(li2, file_1, 210, 18, 5519);
    			attr_dev(ol, "class", "svelte-16pu79p");
    			add_location(ol, file_1, 190, 16, 4800);
    			add_location(div2, file_1, 189, 14, 4778);
    			attr_dev(details1, "class", "svelte-16pu79p");
    			add_location(details1, file_1, 187, 12, 4703);
    			attr_dev(div3, "class", "accordion aide-editeur svelte-16pu79p");
    			add_location(div3, file_1, 163, 10, 3875);
    			attr_dev(label2, "for", "content");
    			add_location(label2, file_1, 221, 12, 5863);
    			attr_dev(textarea, "id", "content");
    			attr_dev(textarea, "cols", "30");
    			attr_dev(textarea, "rows", "10");
    			add_location(textarea, file_1, 222, 12, 5912);
    			attr_dev(div4, "class", "content svelte-16pu79p");
    			add_location(div4, file_1, 220, 10, 5829);
    			attr_dev(a2, "href", /*listPrefix*/ ctx[2]);
    			attr_dev(a2, "class", "btn__retour svelte-16pu79p");
    			add_location(a2, file_1, 236, 12, 6282);
    			attr_dev(button, "type", "submit");
    			attr_dev(button, "class", "btn__medium btn");
    			add_location(button, file_1, 239, 12, 6397);
    			attr_dev(div5, "class", "actions-zone svelte-16pu79p");
    			add_location(div5, file_1, 235, 10, 6243);
    			add_location(form, file_1, 151, 8, 3572);
    			attr_dev(div6, "class", "wrapper");
    			add_location(div6, file_1, 150, 6, 3542);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div6, anchor);
    			append_dev(div6, form);
    			append_dev(form, div0);
    			append_dev(div0, label0);
    			append_dev(div0, t1);
    			append_dev(div0, input0);
    			set_input_value(input0, /*file*/ ctx[7].title);
    			append_dev(form, t2);
    			append_dev(form, div3);
    			append_dev(div3, h4);
    			append_dev(div3, t4);
    			append_dev(div3, details0);
    			append_dev(details0, summary0);
    			append_dev(details0, t6);
    			append_dev(details0, div1);
    			append_dev(div1, p);
    			append_dev(p, t7);
    			append_dev(p, a0);
    			append_dev(p, t9);
    			append_dev(p, a1);
    			append_dev(div3, t11);
    			append_dev(div3, details1);
    			append_dev(details1, summary1);
    			append_dev(details1, t13);
    			append_dev(details1, div2);
    			append_dev(div2, ol);
    			append_dev(ol, li0);
    			append_dev(li0, label1);
    			append_dev(li0, t15);
    			append_dev(li0, input1);
    			append_dev(ol, t16);
    			append_dev(ol, li1);
    			append_dev(ol, t18);
    			append_dev(ol, figure);
    			append_dev(figure, t19);
    			append_dev(ol, t20);
    			append_dev(ol, li2);
    			append_dev(form, t22);
    			append_dev(form, div4);
    			append_dev(div4, label2);
    			append_dev(div4, t24);
    			append_dev(div4, textarea);
    			set_input_value(textarea, /*file*/ ctx[7].content);
    			append_dev(form, t25);
    			if (if_block0) if_block0.m(form, null);
    			append_dev(form, t26);
    			append_dev(form, div5);
    			append_dev(div5, a2);
    			append_dev(a2, t27);
    			append_dev(div5, t28);
    			append_dev(div5, button);
    			append_dev(form, t30);
    			if (if_block1) if_block1.m(form, null);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "input", /*input0_input_handler*/ ctx[18]),
    					listen_dev(input0, "change", /*validateTitle*/ ctx[12], false, false, false, false),
    					listen_dev(input1, "change", /*input1_change_handler*/ ctx[19]),
    					listen_dev(input1, "change", /*imageSelect*/ ctx[15], false, false, false, false),
    					listen_dev(textarea, "input", /*textarea_input_handler*/ ctx[20]),
    					listen_dev(a2, "click", /*onBackClick*/ ctx[14], false, false, false, false),
    					listen_dev(form, "submit", /*onSubmit*/ ctx[13], false, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*file*/ 128 && input0.value !== /*file*/ ctx[7].title) {
    				set_input_value(input0, /*file*/ ctx[7].title);
    			}

    			if (dirty & /*imageMd*/ 256) set_data_dev(t19, /*imageMd*/ ctx[8]);

    			if (dirty & /*file*/ 128) {
    				set_input_value(textarea, /*file*/ ctx[7].content);
    			}

    			if (/*preview*/ ctx[9]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_1$3(ctx);
    					if_block0.c();
    					if_block0.m(form, t26);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (dirty & /*listPrefix*/ 4) {
    				attr_dev(a2, "href", /*listPrefix*/ ctx[2]);
    			}

    			if (/*file*/ ctx[7].fileName && /*file*/ ctx[7].fileName !== 'index.md') {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block$5(ctx);
    					if_block1.c();
    					if_block1.m(form, null);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div6);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_then_block.name,
    		type: "then",
    		source: "(150:4) {:then}",
    		ctx
    	});

    	return block;
    }

    // (230:10) {#if preview}
    function create_if_block_1$3(ctx) {
    	let div1;
    	let h4;
    	let t1;
    	let div0;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			h4 = element("h4");
    			h4.textContent = "Aperçu";
    			t1 = space();
    			div0 = element("div");
    			add_location(h4, file_1, 231, 14, 6141);
    			attr_dev(div0, "class", "svelte-16pu79p");
    			add_location(div0, file_1, 232, 14, 6171);
    			attr_dev(div1, "class", "preview svelte-16pu79p");
    			add_location(div1, file_1, 230, 12, 6105);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, h4);
    			append_dev(div1, t1);
    			append_dev(div1, div0);
    			div0.innerHTML = /*preview*/ ctx[9];
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*preview*/ 512) div0.innerHTML = /*preview*/ ctx[9];		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$3.name,
    		type: "if",
    		source: "(230:10) {#if preview}",
    		ctx
    	});

    	return block;
    }

    // (245:10) {#if file.fileName && file.fileName !== 'index.md'}
    function create_if_block$5(ctx) {
    	let div;
    	let h3;
    	let t0;
    	let t1;
    	let label;
    	let input;
    	let t2;
    	let t3;
    	let button;
    	let t4;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			h3 = element("h3");
    			t0 = text(/*deleteTitle*/ ctx[3]);
    			t1 = space();
    			label = element("label");
    			input = element("input");
    			t2 = text("\n                Afficher le bouton de suppression");
    			t3 = space();
    			button = element("button");
    			t4 = text(/*deleteTitle*/ ctx[3]);
    			add_location(h3, file_1, 246, 14, 6651);
    			attr_dev(input, "type", "checkbox");
    			add_location(input, file_1, 248, 16, 6712);
    			add_location(label, file_1, 247, 14, 6688);
    			attr_dev(button, "type", "button");
    			button.disabled = /*deleteDisabled*/ ctx[10];
    			attr_dev(button, "class", "btn__medium btn btn__danger");
    			add_location(button, file_1, 256, 14, 6970);
    			attr_dev(div, "class", "wrapper white-zone");
    			add_location(div, file_1, 245, 12, 6604);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, h3);
    			append_dev(h3, t0);
    			append_dev(div, t1);
    			append_dev(div, label);
    			append_dev(label, input);
    			append_dev(label, t2);
    			append_dev(div, t3);
    			append_dev(div, button);
    			append_dev(button, t4);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "change", /*change_handler*/ ctx[21], false, false, false, false),
    					listen_dev(button, "click", /*click_handler*/ ctx[22], false, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*deleteTitle*/ 8) set_data_dev(t0, /*deleteTitle*/ ctx[3]);
    			if (dirty & /*deleteTitle*/ 8) set_data_dev(t4, /*deleteTitle*/ ctx[3]);

    			if (dirty & /*deleteDisabled*/ 1024) {
    				prop_dev(button, "disabled", /*deleteDisabled*/ ctx[10]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$5.name,
    		type: "if",
    		source: "(245:10) {#if file.fileName && file.fileName !== 'index.md'}",
    		ctx
    	});

    	return block;
    }

    // (148:17)        <img src="./assets/images/oval.svg" alt="Chargement du contenu" />     {:then}
    function create_pending_block(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			if (!src_url_equal(img.src, img_src_value = "./assets/images/oval.svg")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "Chargement du contenu");
    			add_location(img, file_1, 148, 6, 3457);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_pending_block.name,
    		type: "pending",
    		source: "(148:17)        <img src=\\\"./assets/images/oval.svg\\\" alt=\\\"Chargement du contenu\\\" />     {:then}",
    		ctx
    	});

    	return block;
    }

    // (144:0) <Skeleton {currentRepository} {buildStatus} {showArticles}>
    function create_default_slot$6(ctx) {
    	let section;
    	let h3;
    	let t0;
    	let t1;
    	let promise;

    	let info = {
    		ctx,
    		current: null,
    		token: null,
    		hasCatch: false,
    		pending: create_pending_block,
    		then: create_then_block,
    		catch: create_catch_block
    	};

    	handle_promise(promise = /*file*/ ctx[7], info);

    	const block = {
    		c: function create() {
    			section = element("section");
    			h3 = element("h3");
    			t0 = text(/*editionTitle*/ ctx[1]);
    			t1 = space();
    			info.block.c();
    			add_location(h3, file_1, 145, 4, 3408);
    			attr_dev(section, "class", "screen");
    			add_location(section, file_1, 144, 2, 3379);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, h3);
    			append_dev(h3, t0);
    			append_dev(section, t1);
    			info.block.m(section, info.anchor = null);
    			info.mount = () => section;
    			info.anchor = null;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty & /*editionTitle*/ 2) set_data_dev(t0, /*editionTitle*/ ctx[1]);
    			info.ctx = ctx;

    			if (dirty & /*file*/ 128 && promise !== (promise = /*file*/ ctx[7]) && handle_promise(promise, info)) ; else {
    				update_await_block_branch(info, ctx, dirty);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			info.block.d();
    			info.token = null;
    			info = null;
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$6.name,
    		type: "slot",
    		source: "(144:0) <Skeleton {currentRepository} {buildStatus} {showArticles}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$9(ctx) {
    	let skeleton;
    	let current;

    	skeleton = new Skeleton({
    			props: {
    				currentRepository: /*currentRepository*/ ctx[5],
    				buildStatus: /*buildStatus*/ ctx[0],
    				showArticles: /*showArticles*/ ctx[4],
    				$$slots: { default: [create_default_slot$6] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(skeleton.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(skeleton, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const skeleton_changes = {};
    			if (dirty & /*currentRepository*/ 32) skeleton_changes.currentRepository = /*currentRepository*/ ctx[5];
    			if (dirty & /*buildStatus*/ 1) skeleton_changes.buildStatus = /*buildStatus*/ ctx[0];
    			if (dirty & /*showArticles*/ 16) skeleton_changes.showArticles = /*showArticles*/ ctx[4];

    			if (dirty & /*$$scope, file, deleteDisabled, deleteTitle, listPrefix, preview, imageMd, files, editionTitle*/ 33556430) {
    				skeleton_changes.$$scope = { dirty, ctx };
    			}

    			skeleton.$set(skeleton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(skeleton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(skeleton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(skeleton, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$9.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$9($$self, $$props, $$invalidate) {
    	let image;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Editeur', slots, []);
    	let { fileP } = $$props;
    	let { buildStatus } = $$props;
    	let { contenus = [] } = $$props;
    	let { editionTitle } = $$props;
    	let { listPrefix } = $$props;
    	let { deleteTitle } = $$props;
    	let { showArticles } = $$props;
    	let { currentRepository } = $$props;

    	/** @type {FileList} */
    	let files;

    	let imageMd = '';
    	let preview = '';

    	/** @type {EditeurFile} */
    	let file = {
    		fileName: '',
    		content: '',
    		previousContent: undefined,
    		title: '',
    		// @ts-ignore
    		index: store.state.pages.length + 1,
    		previousTitle: undefined
    	};

    	fileP.then(_file => {
    		$$invalidate(7, file = _file);
    	});

    	let deleteDisabled = true;
    	let filesPath = contenus.map(contenu => contenu.path);
    	const dispatch = createEventDispatcher();

    	// @ts-ignore
    	const validateTitle = e => {
    		const titleChanged = file.previousTitle?.trim() !== file.title.trim();

    		if (titleChanged && filesPath && filesPath.includes(makeFileNameFromTitle(file.title))) {
    			e.target.setCustomValidity('Vous avez déjà utilisé ce nom. Veuillez en choisir un autre.');
    			return;
    		}

    		e.target.setCustomValidity('');
    	};

    	// @ts-ignore
    	const onSubmit = e => {
    		e.preventDefault();

    		if (e.target.checkValidity()) {
    			dispatch('save', {
    				fileName: file.fileName,
    				content: file.content.trim(),
    				previousContent: file.previousContent,
    				title: file.title.trim(),
    				index: file.index,
    				previousTitle: file.previousTitle
    			});
    		}
    	};

    	// @ts-ignore
    	const onBackClick = e => {
    		if (file.previousContent?.trim() !== file.content.trim() || file.title?.trim() !== file.previousTitle?.trim()) {
    			if (!confirm('Êtes-vous sûr·e de vouloir revenir en arrière ? Toutes vos modifications seront perdues.')) {
    				e.preventDefault();
    			}
    		}
    	};

    	// @ts-ignore
    	const imageSelect = async () => {
    		$$invalidate(8, imageMd = 'Mise en ligne en cours…');
    		const buffer = new Uint8Array(await image.arrayBuffer());
    		const imageFilePath = `images/${image.name}`;
    		await writeFileAndCommit(imageFilePath, buffer, `Ajout de l'image ${image.name}`);
    		const imageLink = `{% link ${imageFilePath} %}`;
    		$$invalidate(8, imageMd = `![Texte décrivant l'image](${imageLink})`);
    	};

    	$$self.$$.on_mount.push(function () {
    		if (fileP === undefined && !('fileP' in $$props || $$self.$$.bound[$$self.$$.props['fileP']])) {
    			console.warn("<Editeur> was created without expected prop 'fileP'");
    		}

    		if (buildStatus === undefined && !('buildStatus' in $$props || $$self.$$.bound[$$self.$$.props['buildStatus']])) {
    			console.warn("<Editeur> was created without expected prop 'buildStatus'");
    		}

    		if (editionTitle === undefined && !('editionTitle' in $$props || $$self.$$.bound[$$self.$$.props['editionTitle']])) {
    			console.warn("<Editeur> was created without expected prop 'editionTitle'");
    		}

    		if (listPrefix === undefined && !('listPrefix' in $$props || $$self.$$.bound[$$self.$$.props['listPrefix']])) {
    			console.warn("<Editeur> was created without expected prop 'listPrefix'");
    		}

    		if (deleteTitle === undefined && !('deleteTitle' in $$props || $$self.$$.bound[$$self.$$.props['deleteTitle']])) {
    			console.warn("<Editeur> was created without expected prop 'deleteTitle'");
    		}

    		if (showArticles === undefined && !('showArticles' in $$props || $$self.$$.bound[$$self.$$.props['showArticles']])) {
    			console.warn("<Editeur> was created without expected prop 'showArticles'");
    		}

    		if (currentRepository === undefined && !('currentRepository' in $$props || $$self.$$.bound[$$self.$$.props['currentRepository']])) {
    			console.warn("<Editeur> was created without expected prop 'currentRepository'");
    		}
    	});

    	const writable_props = [
    		'fileP',
    		'buildStatus',
    		'contenus',
    		'editionTitle',
    		'listPrefix',
    		'deleteTitle',
    		'showArticles',
    		'currentRepository'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Editeur> was created with unknown prop '${key}'`);
    	});

    	function input0_input_handler() {
    		file.title = this.value;
    		$$invalidate(7, file);
    	}

    	function input1_change_handler() {
    		files = this.files;
    		$$invalidate(6, files);
    	}

    	function textarea_input_handler() {
    		file.content = this.value;
    		$$invalidate(7, file);
    	}

    	const change_handler = () => {
    		$$invalidate(10, deleteDisabled = !deleteDisabled);
    	};

    	const click_handler = () => dispatch('delete');

    	$$self.$$set = $$props => {
    		if ('fileP' in $$props) $$invalidate(16, fileP = $$props.fileP);
    		if ('buildStatus' in $$props) $$invalidate(0, buildStatus = $$props.buildStatus);
    		if ('contenus' in $$props) $$invalidate(17, contenus = $$props.contenus);
    		if ('editionTitle' in $$props) $$invalidate(1, editionTitle = $$props.editionTitle);
    		if ('listPrefix' in $$props) $$invalidate(2, listPrefix = $$props.listPrefix);
    		if ('deleteTitle' in $$props) $$invalidate(3, deleteTitle = $$props.deleteTitle);
    		if ('showArticles' in $$props) $$invalidate(4, showArticles = $$props.showArticles);
    		if ('currentRepository' in $$props) $$invalidate(5, currentRepository = $$props.currentRepository);
    	};

    	$$self.$capture_state = () => ({
    		fileP,
    		buildStatus,
    		contenus,
    		editionTitle,
    		listPrefix,
    		deleteTitle,
    		showArticles,
    		currentRepository,
    		createEventDispatcher,
    		marked: marked_umd,
    		DOMPurify,
    		Skeleton,
    		makeFileNameFromTitle,
    		store,
    		writeFileAndCommit,
    		files,
    		imageMd,
    		preview,
    		file,
    		deleteDisabled,
    		filesPath,
    		dispatch,
    		validateTitle,
    		onSubmit,
    		onBackClick,
    		imageSelect,
    		image
    	});

    	$$self.$inject_state = $$props => {
    		if ('fileP' in $$props) $$invalidate(16, fileP = $$props.fileP);
    		if ('buildStatus' in $$props) $$invalidate(0, buildStatus = $$props.buildStatus);
    		if ('contenus' in $$props) $$invalidate(17, contenus = $$props.contenus);
    		if ('editionTitle' in $$props) $$invalidate(1, editionTitle = $$props.editionTitle);
    		if ('listPrefix' in $$props) $$invalidate(2, listPrefix = $$props.listPrefix);
    		if ('deleteTitle' in $$props) $$invalidate(3, deleteTitle = $$props.deleteTitle);
    		if ('showArticles' in $$props) $$invalidate(4, showArticles = $$props.showArticles);
    		if ('currentRepository' in $$props) $$invalidate(5, currentRepository = $$props.currentRepository);
    		if ('files' in $$props) $$invalidate(6, files = $$props.files);
    		if ('imageMd' in $$props) $$invalidate(8, imageMd = $$props.imageMd);
    		if ('preview' in $$props) $$invalidate(9, preview = $$props.preview);
    		if ('file' in $$props) $$invalidate(7, file = $$props.file);
    		if ('deleteDisabled' in $$props) $$invalidate(10, deleteDisabled = $$props.deleteDisabled);
    		if ('filesPath' in $$props) filesPath = $$props.filesPath;
    		if ('image' in $$props) image = $$props.image;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*files*/ 64) {
    			// single-image selection
    			image = files && files[0];
    		}

    		if ($$self.$$.dirty & /*file*/ 128) {
    			{
    				try {
    					const html = marked_umd.parse(file.content);
    					$$invalidate(9, preview = purify.sanitize(html));
    				} catch(e) {
    					$$invalidate(9, preview = 'Il y a une erreur dans le Markdown. Veuillez vérifier votre syntaxe.');
    				}
    			}
    		}
    	};

    	return [
    		buildStatus,
    		editionTitle,
    		listPrefix,
    		deleteTitle,
    		showArticles,
    		currentRepository,
    		files,
    		file,
    		imageMd,
    		preview,
    		deleteDisabled,
    		dispatch,
    		validateTitle,
    		onSubmit,
    		onBackClick,
    		imageSelect,
    		fileP,
    		contenus,
    		input0_input_handler,
    		input1_change_handler,
    		textarea_input_handler,
    		change_handler,
    		click_handler
    	];
    }

    class Editeur extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$9, create_fragment$9, safe_not_equal, {
    			fileP: 16,
    			buildStatus: 0,
    			contenus: 17,
    			editionTitle: 1,
    			listPrefix: 2,
    			deleteTitle: 3,
    			showArticles: 4,
    			currentRepository: 5
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Editeur",
    			options,
    			id: create_fragment$9.name
    		});
    	}

    	get fileP() {
    		throw new Error("<Editeur>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fileP(value) {
    		throw new Error("<Editeur>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get buildStatus() {
    		throw new Error("<Editeur>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set buildStatus(value) {
    		throw new Error("<Editeur>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get contenus() {
    		throw new Error("<Editeur>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set contenus(value) {
    		throw new Error("<Editeur>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get editionTitle() {
    		throw new Error("<Editeur>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set editionTitle(value) {
    		throw new Error("<Editeur>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get listPrefix() {
    		throw new Error("<Editeur>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set listPrefix(value) {
    		throw new Error("<Editeur>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get deleteTitle() {
    		throw new Error("<Editeur>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set deleteTitle(value) {
    		throw new Error("<Editeur>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get showArticles() {
    		throw new Error("<Editeur>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set showArticles(value) {
    		throw new Error("<Editeur>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get currentRepository() {
    		throw new Error("<Editeur>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set currentRepository(value) {
    		throw new Error("<Editeur>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* assets/scripts/components/screens/PageContenu.svelte generated by Svelte v3.58.0 */

    function create_fragment$8(ctx) {
    	let editeur;
    	let current;

    	editeur = new Editeur({
    			props: {
    				fileP: /*fileP*/ ctx[0],
    				currentRepository: /*currentRepository*/ ctx[4],
    				buildStatus: /*buildStatus*/ ctx[1],
    				contenus: /*contenus*/ ctx[2],
    				showArticles: /*showArticles*/ ctx[3],
    				editionTitle: "Édition d'une page",
    				listPrefix: makeAtelierListPageURL(/*currentRepository*/ ctx[4]),
    				deleteTitle: "Supprimer la page"
    			},
    			$$inline: true
    		});

    	editeur.$on("save", /*save_handler*/ ctx[5]);
    	editeur.$on("delete", /*delete_handler*/ ctx[6]);

    	const block = {
    		c: function create() {
    			create_component(editeur.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(editeur, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const editeur_changes = {};
    			if (dirty & /*fileP*/ 1) editeur_changes.fileP = /*fileP*/ ctx[0];
    			if (dirty & /*currentRepository*/ 16) editeur_changes.currentRepository = /*currentRepository*/ ctx[4];
    			if (dirty & /*buildStatus*/ 2) editeur_changes.buildStatus = /*buildStatus*/ ctx[1];
    			if (dirty & /*contenus*/ 4) editeur_changes.contenus = /*contenus*/ ctx[2];
    			if (dirty & /*showArticles*/ 8) editeur_changes.showArticles = /*showArticles*/ ctx[3];
    			if (dirty & /*currentRepository*/ 16) editeur_changes.listPrefix = makeAtelierListPageURL(/*currentRepository*/ ctx[4]);
    			editeur.$set(editeur_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(editeur.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(editeur.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(editeur, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$8.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$8($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('PageContenu', slots, []);
    	let { fileP } = $$props;
    	let { buildStatus } = $$props;
    	let { contenus } = $$props;
    	let { showArticles } = $$props;
    	let { currentRepository } = $$props;

    	$$self.$$.on_mount.push(function () {
    		if (fileP === undefined && !('fileP' in $$props || $$self.$$.bound[$$self.$$.props['fileP']])) {
    			console.warn("<PageContenu> was created without expected prop 'fileP'");
    		}

    		if (buildStatus === undefined && !('buildStatus' in $$props || $$self.$$.bound[$$self.$$.props['buildStatus']])) {
    			console.warn("<PageContenu> was created without expected prop 'buildStatus'");
    		}

    		if (contenus === undefined && !('contenus' in $$props || $$self.$$.bound[$$self.$$.props['contenus']])) {
    			console.warn("<PageContenu> was created without expected prop 'contenus'");
    		}

    		if (showArticles === undefined && !('showArticles' in $$props || $$self.$$.bound[$$self.$$.props['showArticles']])) {
    			console.warn("<PageContenu> was created without expected prop 'showArticles'");
    		}

    		if (currentRepository === undefined && !('currentRepository' in $$props || $$self.$$.bound[$$self.$$.props['currentRepository']])) {
    			console.warn("<PageContenu> was created without expected prop 'currentRepository'");
    		}
    	});

    	const writable_props = ['fileP', 'buildStatus', 'contenus', 'showArticles', 'currentRepository'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<PageContenu> was created with unknown prop '${key}'`);
    	});

    	function save_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function delete_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	$$self.$$set = $$props => {
    		if ('fileP' in $$props) $$invalidate(0, fileP = $$props.fileP);
    		if ('buildStatus' in $$props) $$invalidate(1, buildStatus = $$props.buildStatus);
    		if ('contenus' in $$props) $$invalidate(2, contenus = $$props.contenus);
    		if ('showArticles' in $$props) $$invalidate(3, showArticles = $$props.showArticles);
    		if ('currentRepository' in $$props) $$invalidate(4, currentRepository = $$props.currentRepository);
    	};

    	$$self.$capture_state = () => ({
    		makeAtelierListPageURL,
    		fileP,
    		buildStatus,
    		contenus,
    		showArticles,
    		currentRepository,
    		Editeur
    	});

    	$$self.$inject_state = $$props => {
    		if ('fileP' in $$props) $$invalidate(0, fileP = $$props.fileP);
    		if ('buildStatus' in $$props) $$invalidate(1, buildStatus = $$props.buildStatus);
    		if ('contenus' in $$props) $$invalidate(2, contenus = $$props.contenus);
    		if ('showArticles' in $$props) $$invalidate(3, showArticles = $$props.showArticles);
    		if ('currentRepository' in $$props) $$invalidate(4, currentRepository = $$props.currentRepository);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		fileP,
    		buildStatus,
    		contenus,
    		showArticles,
    		currentRepository,
    		save_handler,
    		delete_handler
    	];
    }

    class PageContenu extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$8, create_fragment$8, safe_not_equal, {
    			fileP: 0,
    			buildStatus: 1,
    			contenus: 2,
    			showArticles: 3,
    			currentRepository: 4
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "PageContenu",
    			options,
    			id: create_fragment$8.name
    		});
    	}

    	get fileP() {
    		throw new Error("<PageContenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fileP(value) {
    		throw new Error("<PageContenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get buildStatus() {
    		throw new Error("<PageContenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set buildStatus(value) {
    		throw new Error("<PageContenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get contenus() {
    		throw new Error("<PageContenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set contenus(value) {
    		throw new Error("<PageContenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get showArticles() {
    		throw new Error("<PageContenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set showArticles(value) {
    		throw new Error("<PageContenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get currentRepository() {
    		throw new Error("<PageContenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set currentRepository(value) {
    		throw new Error("<PageContenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    // @ts-check

    /**
     *
     * @param {string} fileName
     * @returns {(state: import('../store').ScribouilliState) => any}
     */
    const makeMapStateToProps$1 = fileName => state => {
      // Display existing file
      if (fileName) {
        const {gitAgent} = store.state;

        if(!gitAgent){
          throw new TypeError('gitAgent is undefined')
        }

        const fileP = async function () {
          try {
            const content = await gitAgent.getFile(fileName);
            const { attributes: data, body: markdownContent } =
              frontMatter(content);
            return {
              fileName,
              content: markdownContent,
              previousContent: markdownContent,
              title: data?.title,
              index: data?.order,
              previousTitle: data?.title,
              inMenu: true,
            }
          } catch (errorMessage) {
            //@ts-ignore
            logMessage(errorMessage, 'routes/atelier-pages.js:makeMapStateToProps');
          }
        };

        return {
          fileP: fileP(),
          contenus: state.articles,
          buildStatus: state.buildStatus,
          showArticles:
            (state.pages &&
              state.pages.find(p => p.path === 'blog.md') !== undefined) ||
            (state.articles && state.articles.length > 0),
          currentRepository: state.currentRepository,
        }
      } else {
        return {
          fileP: Promise.resolve({
            fileName: '',
            title: '',
            index: state.pages && state.pages.length + 1,
            content: '',
            previousTitle: undefined,
            previousContent: undefined,
            inMenu: true,
          }),
          makeFileNameFromTitle: makeFileNameFromTitle,
          contenus: state.pages,
          buildStatus: state.buildStatus,
          showArticles:
            (state.pages &&
              state.pages.find(p => p.path === 'blog.md') !== undefined) ||
            (state.articles && state.articles.length > 0),
          currentRepository: state.currentRepository,
        }
      }
    };

    /**
     * @param {import('page').Context} _
     */
    var atelierPages = async ({ querystring }) => {
      await setCurrentRepositoryFromQuerystring(querystring);

      const state = store.state;
      const fileName = decodeURIComponent(new URLSearchParams(querystring).get('path') ?? '');
      const mapStateToProps = makeMapStateToProps$1(fileName);

      const currentRepository = store.state.currentRepository;

      if (!currentRepository) {
        throw new TypeError('currentRepository is undefined')
      }

      const pageContenu = new PageContenu({
        target: svelteTarget,
        props: mapStateToProps(state),
      });

      replaceComponent(pageContenu, mapStateToProps);

      pageContenu.$on('delete', () => {
        deletePage(fileName)
          .then(() => {
            state.buildStatus.setBuildingAndCheckStatusLater();
            page(makeAtelierListPageURL(currentRepository));
          })
          .catch(msg => handleErrors(msg));
      });

      // @ts-ignore
      pageContenu.$on(
        'save',
        ({
          detail: {
            fileName,
            title,
            content,
            previousTitle,
            previousContent,
            index,
          },
        }) => {
          const hasContentChanged = content !== previousContent;
          const hasTitleChanged = title !== previousTitle;

          // If no content changed, just redirect
          if (!hasTitleChanged && !hasContentChanged) {
            page(makeAtelierListPageURL(currentRepository));
            return
          }
          //
          // If the file name is empty, it means that we are creating a new page.
          if (fileName === '') {
            return createPage(content, title, index)
              .then(() => {
                state.buildStatus.setBuildingAndCheckStatusLater();
                page(makeAtelierListPageURL(currentRepository));
              })
              .catch(msg => handleErrors(msg))
          }

          updatePage(fileName, title, content, index)
            .then(() => {
              state.buildStatus.setBuildingAndCheckStatusLater();
              page(makeAtelierListPageURL(currentRepository));
            })
            .catch(msg => handleErrors(msg));
        },
      );
    };

    /* assets/scripts/components/screens/ArticleContenu.svelte generated by Svelte v3.58.0 */

    function create_fragment$7(ctx) {
    	let editeur;
    	let current;

    	editeur = new Editeur({
    			props: {
    				fileP: /*fileP*/ ctx[0],
    				buildStatus: /*buildStatus*/ ctx[1],
    				contenus: /*contenus*/ ctx[2],
    				showArticles: /*showArticles*/ ctx[3],
    				currentRepository: /*currentRepository*/ ctx[4],
    				editionTitle: "Édition d'un article",
    				listPrefix: makeAtelierListArticlesURL(/*currentRepository*/ ctx[4]),
    				deleteTitle: "Supprimer l'article"
    			},
    			$$inline: true
    		});

    	editeur.$on("save", /*save_handler*/ ctx[5]);
    	editeur.$on("delete", /*delete_handler*/ ctx[6]);

    	const block = {
    		c: function create() {
    			create_component(editeur.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(editeur, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const editeur_changes = {};
    			if (dirty & /*fileP*/ 1) editeur_changes.fileP = /*fileP*/ ctx[0];
    			if (dirty & /*buildStatus*/ 2) editeur_changes.buildStatus = /*buildStatus*/ ctx[1];
    			if (dirty & /*contenus*/ 4) editeur_changes.contenus = /*contenus*/ ctx[2];
    			if (dirty & /*showArticles*/ 8) editeur_changes.showArticles = /*showArticles*/ ctx[3];
    			if (dirty & /*currentRepository*/ 16) editeur_changes.currentRepository = /*currentRepository*/ ctx[4];
    			if (dirty & /*currentRepository*/ 16) editeur_changes.listPrefix = makeAtelierListArticlesURL(/*currentRepository*/ ctx[4]);
    			editeur.$set(editeur_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(editeur.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(editeur.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(editeur, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$7.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$7($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ArticleContenu', slots, []);
    	let { fileP } = $$props;
    	let { buildStatus } = $$props;
    	let { contenus } = $$props;
    	let { showArticles } = $$props;
    	let { currentRepository } = $$props;

    	$$self.$$.on_mount.push(function () {
    		if (fileP === undefined && !('fileP' in $$props || $$self.$$.bound[$$self.$$.props['fileP']])) {
    			console.warn("<ArticleContenu> was created without expected prop 'fileP'");
    		}

    		if (buildStatus === undefined && !('buildStatus' in $$props || $$self.$$.bound[$$self.$$.props['buildStatus']])) {
    			console.warn("<ArticleContenu> was created without expected prop 'buildStatus'");
    		}

    		if (contenus === undefined && !('contenus' in $$props || $$self.$$.bound[$$self.$$.props['contenus']])) {
    			console.warn("<ArticleContenu> was created without expected prop 'contenus'");
    		}

    		if (showArticles === undefined && !('showArticles' in $$props || $$self.$$.bound[$$self.$$.props['showArticles']])) {
    			console.warn("<ArticleContenu> was created without expected prop 'showArticles'");
    		}

    		if (currentRepository === undefined && !('currentRepository' in $$props || $$self.$$.bound[$$self.$$.props['currentRepository']])) {
    			console.warn("<ArticleContenu> was created without expected prop 'currentRepository'");
    		}
    	});

    	const writable_props = ['fileP', 'buildStatus', 'contenus', 'showArticles', 'currentRepository'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ArticleContenu> was created with unknown prop '${key}'`);
    	});

    	function save_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function delete_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	$$self.$$set = $$props => {
    		if ('fileP' in $$props) $$invalidate(0, fileP = $$props.fileP);
    		if ('buildStatus' in $$props) $$invalidate(1, buildStatus = $$props.buildStatus);
    		if ('contenus' in $$props) $$invalidate(2, contenus = $$props.contenus);
    		if ('showArticles' in $$props) $$invalidate(3, showArticles = $$props.showArticles);
    		if ('currentRepository' in $$props) $$invalidate(4, currentRepository = $$props.currentRepository);
    	};

    	$$self.$capture_state = () => ({
    		makeAtelierListArticlesURL,
    		fileP,
    		buildStatus,
    		contenus,
    		showArticles,
    		currentRepository,
    		Editeur
    	});

    	$$self.$inject_state = $$props => {
    		if ('fileP' in $$props) $$invalidate(0, fileP = $$props.fileP);
    		if ('buildStatus' in $$props) $$invalidate(1, buildStatus = $$props.buildStatus);
    		if ('contenus' in $$props) $$invalidate(2, contenus = $$props.contenus);
    		if ('showArticles' in $$props) $$invalidate(3, showArticles = $$props.showArticles);
    		if ('currentRepository' in $$props) $$invalidate(4, currentRepository = $$props.currentRepository);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		fileP,
    		buildStatus,
    		contenus,
    		showArticles,
    		currentRepository,
    		save_handler,
    		delete_handler
    	];
    }

    class ArticleContenu extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$7, create_fragment$7, safe_not_equal, {
    			fileP: 0,
    			buildStatus: 1,
    			contenus: 2,
    			showArticles: 3,
    			currentRepository: 4
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ArticleContenu",
    			options,
    			id: create_fragment$7.name
    		});
    	}

    	get fileP() {
    		throw new Error("<ArticleContenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fileP(value) {
    		throw new Error("<ArticleContenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get buildStatus() {
    		throw new Error("<ArticleContenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set buildStatus(value) {
    		throw new Error("<ArticleContenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get contenus() {
    		throw new Error("<ArticleContenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set contenus(value) {
    		throw new Error("<ArticleContenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get showArticles() {
    		throw new Error("<ArticleContenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set showArticles(value) {
    		throw new Error("<ArticleContenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get currentRepository() {
    		throw new Error("<ArticleContenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set currentRepository(value) {
    		throw new Error("<ArticleContenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    // @ts-check

    /**
     *
     * @param {string} fileName
     * @returns {(state: import('../store').ScribouilliState) => any}
     */
    const makeMapStateToProps = fileName => state => {
      if (fileName) {
        const {gitAgent} = store.state;

        if(!gitAgent){
          throw new TypeError('gitAgent is undefined')
        }

        // Display existing file
        const fileP = gitAgent
          .getFile(fileName)
          .then(contenu => {
            const { attributes: data, body: markdownContent } =
              frontMatter(contenu);

            return {
              fileName: fileName,
              content: markdownContent,
              previousContent: markdownContent,
              title: data?.title,
              previousTitle: data?.title,
            }
          })
          .catch(msg => handleErrors(msg));
        return {
          fileP,
          contenus: state.articles,
          buildStatus: state.buildStatus,
          showArticles:
            (state.pages &&
              state.pages.find(p => p.path === 'blog.md') !== undefined) ||
            (state.articles && state.articles.length > 0),
          currentRepository: state.currentRepository,
        }
      } else {
        // Create a new file
        return {
          fileP: Promise.resolve({
            fileName: '',
            content: '',
            previousContent: undefined,
            title: '',
            previousTitle: undefined,
          }),
          contenus: state.articles,
          buildStatus: state.buildStatus,
          showArticles:
            (state.pages &&
              state.pages.find(p => p.path === 'blog.md') !== undefined) ||
            (state.articles && state.articles.length > 0),
          currentRepository: state.currentRepository,
        }
      }
    };

    /**
     * @param {import('page').Context} _
     */
    var atelierArticles = async ({ querystring }) => {
      await setCurrentRepositoryFromQuerystring(querystring);

      const currentRepository = store.state.currentRepository;

      if (!currentRepository) {
        throw new TypeError('currentRepository is undefined')
      }

      const state = store.state;
      const fileName = decodeURIComponent(new URLSearchParams(querystring).get('path') ?? '');
      const mapStateToProps = makeMapStateToProps(fileName);

      const articleContenu = new ArticleContenu({
        target: svelteTarget,
        props: mapStateToProps(store.state),
      });

      replaceComponent(articleContenu, mapStateToProps);

      articleContenu.$on('delete', () => {
        deleteArticle(fileName)
          .then(() => {
            state.buildStatus.setBuildingAndCheckStatusLater();
            page(makeAtelierListArticlesURL(currentRepository));
          })
          .catch(msg => handleErrors(msg));
      });

      articleContenu.$on(
        'save',
        ({
          detail: { fileName, content, previousContent, title, previousTitle },
        }) => {
          const hasContentChanged = content !== previousContent;
          const hasTitleChanged = title !== previousTitle;
          const articlePageUrl = makeAtelierListArticlesURL(currentRepository);

          // If no content changed, just redirect
          if (!hasTitleChanged && !hasContentChanged) {
            return page(articlePageUrl)
          }

          // If the file name is empty, it means that we are creating a new article.
          if (fileName === '') {
            return createArticle(title, content)
              .then(() => {
                state.buildStatus.setBuildingAndCheckStatusLater();
                page(articlePageUrl);
              })
              .catch(msg => handleErrors(msg))
          }

          updateArticle(fileName, title, content)
            .then(() => {
              state.buildStatus.setBuildingAndCheckStatusLater();
              page(articlePageUrl);
            })
            .catch(msg => handleErrors(msg));
        },
      );
    };

    /* assets/scripts/components/screens/CreateAccount.svelte generated by Svelte v3.58.0 */
    const file$6 = "assets/scripts/components/screens/CreateAccount.svelte";

    // (9:2) {#if gitProvider === 'github.com'}
    function create_if_block_2(ctx) {
    	let section;
    	let div1;
    	let h2;
    	let t1;
    	let p0;
    	let t2;
    	let a0;
    	let t4;
    	let t5;
    	let p1;
    	let t7;
    	let p2;
    	let t9;
    	let ol;
    	let li0;
    	let t11;
    	let li1;
    	let t13;
    	let li2;
    	let t14;
    	let strong;
    	let t16;
    	let a1;
    	let t18;
    	let div0;
    	let a2;
    	let t20;
    	let a3;

    	const block = {
    		c: function create() {
    			section = element("section");
    			div1 = element("div");
    			h2 = element("h2");
    			h2.textContent = "Créer un compte GitHub";
    			t1 = space();
    			p0 = element("p");
    			t2 = text("Pour pouvoir publier votre contenu, il faut que Scribouilli se connecte\n        à un compte ");
    			a0 = element("a");
    			a0.textContent = "GitHub";
    			t4 = text(".");
    			t5 = space();
    			p1 = element("p");
    			p1.textContent = "La création va se passer sur GitHub.com.";
    			t7 = space();
    			p2 = element("p");
    			p2.textContent = "Elle comporte 3 étapes :";
    			t9 = space();
    			ol = element("ol");
    			li0 = element("li");
    			li0.textContent = "Rentrez votre mail, mot de passe, et votre nom d'utilisateur·ice";
    			t11 = space();
    			li1 = element("li");
    			li1.textContent = "Ouvrez le mail que GitHub vous a envoyé, et copiez le code pour\n          confirmer votre compte";
    			t13 = space();
    			li2 = element("li");
    			t14 = text("Dès que le code est validé, ");
    			strong = element("strong");
    			strong.textContent = "revenez sur Scribouilli";
    			t16 = text(" et\n          cliquez sur ");
    			a1 = element("a");
    			a1.textContent = "\"J'ai créé un compte\"";
    			t18 = space();
    			div0 = element("div");
    			a2 = element("a");
    			a2.textContent = "Créer un compte GitHub";
    			t20 = space();
    			a3 = element("a");
    			a3.textContent = "J'ai créé un compte";
    			attr_dev(h2, "class", "svelte-4af97f");
    			add_location(h2, file$6, 11, 6, 206);
    			attr_dev(a0, "href", "https://github.com");
    			attr_dev(a0, "target", "_blank");
    			add_location(a0, file$6, 14, 20, 348);
    			add_location(p0, file$6, 12, 6, 244);
    			add_location(p1, file$6, 16, 6, 422);
    			attr_dev(p2, "class", "npa svelte-4af97f");
    			add_location(p2, file$6, 17, 6, 476);
    			attr_dev(li0, "class", "svelte-4af97f");
    			add_location(li0, file$6, 19, 8, 539);
    			attr_dev(li1, "class", "svelte-4af97f");
    			add_location(li1, file$6, 22, 8, 641);
    			add_location(strong, file$6, 27, 38, 818);
    			attr_dev(a1, "href", "./login?provider=github.com");
    			add_location(a1, file$6, 28, 22, 884);
    			attr_dev(li2, "class", "svelte-4af97f");
    			add_location(li2, file$6, 26, 8, 775);
    			attr_dev(ol, "class", "svelte-4af97f");
    			add_location(ol, file$6, 18, 6, 526);
    			attr_dev(a2, "href", "https://github.com/signup");
    			attr_dev(a2, "target", "_blank");
    			attr_dev(a2, "class", "btn");
    			add_location(a2, file$6, 33, 8, 1012);
    			attr_dev(a3, "href", "./login?provider=github.com");
    			attr_dev(a3, "class", "btn");
    			add_location(a3, file$6, 36, 8, 1131);
    			attr_dev(div0, "class", "btn-list svelte-4af97f");
    			add_location(div0, file$6, 32, 6, 981);
    			attr_dev(div1, "class", "svelte-4af97f");
    			add_location(div1, file$6, 10, 4, 194);
    			attr_dev(section, "class", "screen svelte-4af97f");
    			add_location(section, file$6, 9, 2, 165);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, div1);
    			append_dev(div1, h2);
    			append_dev(div1, t1);
    			append_dev(div1, p0);
    			append_dev(p0, t2);
    			append_dev(p0, a0);
    			append_dev(p0, t4);
    			append_dev(div1, t5);
    			append_dev(div1, p1);
    			append_dev(div1, t7);
    			append_dev(div1, p2);
    			append_dev(div1, t9);
    			append_dev(div1, ol);
    			append_dev(ol, li0);
    			append_dev(ol, t11);
    			append_dev(ol, li1);
    			append_dev(ol, t13);
    			append_dev(ol, li2);
    			append_dev(li2, t14);
    			append_dev(li2, strong);
    			append_dev(li2, t16);
    			append_dev(li2, a1);
    			append_dev(div1, t18);
    			append_dev(div1, div0);
    			append_dev(div0, a2);
    			append_dev(div0, t20);
    			append_dev(div0, a3);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2.name,
    		type: "if",
    		source: "(9:2) {#if gitProvider === 'github.com'}",
    		ctx
    	});

    	return block;
    }

    // (43:2) {#if gitProvider === 'gitlab.com'}
    function create_if_block_1$2(ctx) {
    	let section;
    	let div1;
    	let h2;
    	let t1;
    	let div0;
    	let a0;
    	let t3;
    	let a1;

    	const block = {
    		c: function create() {
    			section = element("section");
    			div1 = element("div");
    			h2 = element("h2");
    			h2.textContent = "Créer un compte sur gitlab.com";
    			t1 = space();
    			div0 = element("div");
    			a0 = element("a");
    			a0.textContent = "Créer un compte gitlab.com";
    			t3 = space();
    			a1 = element("a");
    			a1.textContent = "J'ai créé un compte";
    			attr_dev(h2, "class", "svelte-4af97f");
    			add_location(h2, file$6, 45, 6, 1331);
    			attr_dev(a0, "href", "https://gitlab.com/users/sign_up");
    			attr_dev(a0, "target", "_blank");
    			attr_dev(a0, "class", "btn");
    			add_location(a0, file$6, 48, 8, 1409);
    			attr_dev(a1, "href", "./login?provider=gitlab.com");
    			attr_dev(a1, "class", "btn");
    			add_location(a1, file$6, 51, 8, 1539);
    			attr_dev(div0, "class", "btn-list svelte-4af97f");
    			add_location(div0, file$6, 47, 6, 1378);
    			attr_dev(div1, "class", "svelte-4af97f");
    			add_location(div1, file$6, 44, 4, 1319);
    			attr_dev(section, "class", "screen svelte-4af97f");
    			add_location(section, file$6, 43, 2, 1290);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, div1);
    			append_dev(div1, h2);
    			append_dev(div1, t1);
    			append_dev(div1, div0);
    			append_dev(div0, a0);
    			append_dev(div0, t3);
    			append_dev(div0, a1);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$2.name,
    		type: "if",
    		source: "(43:2) {#if gitProvider === 'gitlab.com'}",
    		ctx
    	});

    	return block;
    }

    // (58:2) {#if gitProvider === 'git.scribouilli.org'}
    function create_if_block$4(ctx) {
    	let section;
    	let div;
    	let h2;
    	let t1;
    	let p;
    	let t2;
    	let strong;
    	let t4;
    	let t5;
    	let ul;
    	let li0;
    	let t7;
    	let li1;
    	let t9;
    	let li2;

    	const block = {
    		c: function create() {
    			section = element("section");
    			div = element("div");
    			h2 = element("h2");
    			h2.textContent = "Créer un compte sur git.scribouilli.org";
    			t1 = space();
    			p = element("p");
    			t2 = text("Pour vérifier que vous n'êtes pas un robot, envoyez-nous un mail à\n          ");
    			strong = element("strong");
    			strong.textContent = "coucou@scribouilli.org";
    			t4 = text(" en indiquant :");
    			t5 = space();
    			ul = element("ul");
    			li0 = element("li");
    			li0.textContent = "le pseudo que vous souhaitez,";
    			t7 = space();
    			li1 = element("li");
    			li1.textContent = "l'email avec lequel vous voulez créer votre compte,";
    			t9 = space();
    			li2 = element("li");
    			li2.textContent = "un message pour nous indiquer quel genre de petit site vous voulez\n          créer.";
    			attr_dev(h2, "class", "svelte-4af97f");
    			add_location(h2, file$6, 60, 8, 1754);
    			add_location(strong, file$6, 64, 10, 1903);
    			add_location(p, file$6, 62, 8, 1812);
    			add_location(li0, file$6, 68, 10, 2015);
    			add_location(li1, file$6, 69, 10, 2064);
    			add_location(li2, file$6, 70, 10, 2135);
    			attr_dev(ul, "class", "simple-list svelte-4af97f");
    			add_location(ul, file$6, 67, 8, 1980);
    			attr_dev(div, "class", "svelte-4af97f");
    			add_location(div, file$6, 59, 6, 1740);
    			attr_dev(section, "class", "screen svelte-4af97f");
    			add_location(section, file$6, 58, 4, 1709);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, div);
    			append_dev(div, h2);
    			append_dev(div, t1);
    			append_dev(div, p);
    			append_dev(p, t2);
    			append_dev(p, strong);
    			append_dev(p, t4);
    			append_dev(div, t5);
    			append_dev(div, ul);
    			append_dev(ul, li0);
    			append_dev(ul, t7);
    			append_dev(ul, li1);
    			append_dev(ul, t9);
    			append_dev(ul, li2);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$4.name,
    		type: "if",
    		source: "(58:2) {#if gitProvider === 'git.scribouilli.org'}",
    		ctx
    	});

    	return block;
    }

    // (8:0) <Skeleton>
    function create_default_slot$5(ctx) {
    	let t0;
    	let t1;
    	let if_block2_anchor;
    	let if_block0 = /*gitProvider*/ ctx[0] === 'github.com' && create_if_block_2(ctx);
    	let if_block1 = /*gitProvider*/ ctx[0] === 'gitlab.com' && create_if_block_1$2(ctx);
    	let if_block2 = /*gitProvider*/ ctx[0] === 'git.scribouilli.org' && create_if_block$4(ctx);

    	const block = {
    		c: function create() {
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			if (if_block2) if_block2.c();
    			if_block2_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t0, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, t1, anchor);
    			if (if_block2) if_block2.m(target, anchor);
    			insert_dev(target, if_block2_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (/*gitProvider*/ ctx[0] === 'github.com') {
    				if (if_block0) ; else {
    					if_block0 = create_if_block_2(ctx);
    					if_block0.c();
    					if_block0.m(t0.parentNode, t0);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*gitProvider*/ ctx[0] === 'gitlab.com') {
    				if (if_block1) ; else {
    					if_block1 = create_if_block_1$2(ctx);
    					if_block1.c();
    					if_block1.m(t1.parentNode, t1);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (/*gitProvider*/ ctx[0] === 'git.scribouilli.org') {
    				if (if_block2) ; else {
    					if_block2 = create_if_block$4(ctx);
    					if_block2.c();
    					if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t0);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(t1);
    			if (if_block2) if_block2.d(detaching);
    			if (detaching) detach_dev(if_block2_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$5.name,
    		type: "slot",
    		source: "(8:0) <Skeleton>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$6(ctx) {
    	let skeleton;
    	let current;

    	skeleton = new Skeleton({
    			props: {
    				$$slots: { default: [create_default_slot$5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(skeleton.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(skeleton, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const skeleton_changes = {};

    			if (dirty & /*$$scope, gitProvider*/ 3) {
    				skeleton_changes.$$scope = { dirty, ctx };
    			}

    			skeleton.$set(skeleton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(skeleton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(skeleton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(skeleton, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$6.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$6($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('CreateAccount', slots, []);
    	let { gitProvider } = $$props;

    	$$self.$$.on_mount.push(function () {
    		if (gitProvider === undefined && !('gitProvider' in $$props || $$self.$$.bound[$$self.$$.props['gitProvider']])) {
    			console.warn("<CreateAccount> was created without expected prop 'gitProvider'");
    		}
    	});

    	const writable_props = ['gitProvider'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<CreateAccount> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('gitProvider' in $$props) $$invalidate(0, gitProvider = $$props.gitProvider);
    	};

    	$$self.$capture_state = () => ({ Skeleton, gitProvider });

    	$$self.$inject_state = $$props => {
    		if ('gitProvider' in $$props) $$invalidate(0, gitProvider = $$props.gitProvider);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [gitProvider];
    }

    class CreateAccount extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$6, create_fragment$6, safe_not_equal, { gitProvider: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "CreateAccount",
    			options,
    			id: create_fragment$6.name
    		});
    	}

    	get gitProvider() {
    		throw new Error("<CreateAccount>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set gitProvider(value) {
    		throw new Error("<CreateAccount>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    // @ts-check

    /**
     * @param {import('page').Context} _
     */
    var createAccount = ({ querystring }) => {
      const params = new URLSearchParams(querystring);
      const gitProvider = params.get('provider');

      if (!gitProvider) {
        throw new TypeError(`Missing 'provider' parameter`)
      }

      const createAccount = new CreateAccount({
        target: svelteTarget,
        props: { gitProvider },
      });

      replaceComponent(createAccount, () => {});
    };

    /* assets/scripts/components/screens/SelectOrCreateSite.svelte generated by Svelte v3.58.0 */
    const file$5 = "assets/scripts/components/screens/SelectOrCreateSite.svelte";

    // (5:0) <Skeleton>
    function create_default_slot$4(ctx) {
    	let section;
    	let div1;
    	let h2;
    	let t1;
    	let p;
    	let t3;
    	let div0;
    	let a0;
    	let t5;
    	let a1;

    	const block = {
    		c: function create() {
    			section = element("section");
    			div1 = element("div");
    			h2 = element("h2");
    			h2.textContent = "Travailler sur votre site";
    			t1 = space();
    			p = element("p");
    			p.textContent = "Vous pouvez créer un nouveau site ou partir d'un site existant.";
    			t3 = space();
    			div0 = element("div");
    			a0 = element("a");
    			a0.textContent = "Créer un nouveau site";
    			t5 = space();
    			a1 = element("a");
    			a1.textContent = "Partir d'un site existant";
    			add_location(h2, file$5, 7, 6, 146);
    			add_location(p, file$5, 8, 6, 187);
    			attr_dev(a0, "href", "./creer-un-nouveau-site");
    			attr_dev(a0, "class", "btn");
    			add_location(a0, file$5, 13, 8, 312);
    			attr_dev(a1, "href", "./partir-dun-site-existant");
    			attr_dev(a1, "class", "btn");
    			add_location(a1, file$5, 14, 8, 392);
    			attr_dev(div0, "class", "btn-list");
    			add_location(div0, file$5, 12, 6, 281);
    			attr_dev(div1, "id", "creer_compte_github");
    			add_location(div1, file$5, 6, 4, 109);
    			attr_dev(section, "class", "screen");
    			add_location(section, file$5, 5, 2, 80);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, div1);
    			append_dev(div1, h2);
    			append_dev(div1, t1);
    			append_dev(div1, p);
    			append_dev(div1, t3);
    			append_dev(div1, div0);
    			append_dev(div0, a0);
    			append_dev(div0, t5);
    			append_dev(div0, a1);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$4.name,
    		type: "slot",
    		source: "(5:0) <Skeleton>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$5(ctx) {
    	let skeleton;
    	let current;

    	skeleton = new Skeleton({
    			props: {
    				$$slots: { default: [create_default_slot$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(skeleton.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(skeleton, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const skeleton_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				skeleton_changes.$$scope = { dirty, ctx };
    			}

    			skeleton.$set(skeleton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(skeleton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(skeleton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(skeleton, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$5.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$5($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('SelectOrCreateSite', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<SelectOrCreateSite> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ Skeleton });
    	return [];
    }

    class SelectOrCreateSite extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$5, create_fragment$5, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SelectOrCreateSite",
    			options,
    			id: create_fragment$5.name
    		});
    	}
    }

    var selectOrCreateSite = () => {
      const selectOrCreateSite = new SelectOrCreateSite({
        target: svelteTarget,
        props: {},
      });

      replaceComponent(selectOrCreateSite, () => {});
    };

    /* assets/scripts/components/screens/CreateNewSite.svelte generated by Svelte v3.58.0 */
    const file$4 = "assets/scripts/components/screens/CreateNewSite.svelte";

    function get_each_context$3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[7] = list[i];
    	return child_ctx;
    }

    // (40:4) {:else}
    function create_else_block$3(ctx) {
    	let h3;
    	let t1;
    	let div3;
    	let form;
    	let div0;
    	let label0;
    	let t3;
    	let input;
    	let t4;
    	let div1;
    	let label1;
    	let t6;
    	let select;
    	let t7;
    	let div2;
    	let mounted;
    	let dispose;
    	let each_value = templates;
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$3(get_each_context$3(ctx, each_value, i));
    	}

    	function select_block_type_1(ctx, dirty) {
    		if (/*hasError*/ ctx[2]) return create_if_block_1$1;
    		return create_else_block_1$1;
    	}

    	let current_block_type = select_block_type_1(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			h3 = element("h3");
    			h3.textContent = "Créer un nouveau site";
    			t1 = space();
    			div3 = element("div");
    			form = element("form");
    			div0 = element("div");
    			label0 = element("label");
    			label0.textContent = "Nom de votre site";
    			t3 = space();
    			input = element("input");
    			t4 = space();
    			div1 = element("div");
    			label1 = element("label");
    			label1.textContent = "Je veux créer :";
    			t6 = space();
    			select = element("select");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t7 = space();
    			div2 = element("div");
    			if_block.c();
    			add_location(h3, file$4, 40, 6, 1132);
    			attr_dev(label0, "for", "name");
    			add_location(label0, file$4, 45, 12, 1271);
    			attr_dev(input, "type", "text");
    			attr_dev(input, "id", "name");
    			input.required = true;
    			add_location(input, file$4, 46, 12, 1327);
    			add_location(div0, file$4, 44, 10, 1253);
    			attr_dev(label1, "for", "template");
    			attr_dev(label1, "class", "svelte-hkuc98");
    			add_location(label1, file$4, 55, 12, 1500);
    			attr_dev(select, "id", "template");
    			attr_dev(select, "class", "svelte-hkuc98");
    			if (/*selectedTemplate*/ ctx[3] === void 0) add_render_callback(() => /*select_change_handler*/ ctx[6].call(select));
    			add_location(select, file$4, 56, 12, 1558);
    			add_location(div1, file$4, 54, 10, 1482);
    			attr_dev(div2, "class", "actions-zone svelte-hkuc98");
    			add_location(div2, file$4, 63, 10, 1842);
    			add_location(form, file$4, 43, 8, 1200);
    			attr_dev(div3, "class", "wrapper");
    			add_location(div3, file$4, 42, 6, 1170);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h3, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div3, anchor);
    			append_dev(div3, form);
    			append_dev(form, div0);
    			append_dev(div0, label0);
    			append_dev(div0, t3);
    			append_dev(div0, input);
    			set_input_value(input, /*name*/ ctx[0]);
    			append_dev(form, t4);
    			append_dev(form, div1);
    			append_dev(div1, label1);
    			append_dev(div1, t6);
    			append_dev(div1, select);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(select, null);
    				}
    			}

    			select_option(select, /*selectedTemplate*/ ctx[3], true);
    			append_dev(form, t7);
    			append_dev(form, div2);
    			if_block.m(div2, null);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "input", /*input_input_handler*/ ctx[5]),
    					listen_dev(select, "change", /*select_change_handler*/ ctx[6]),
    					listen_dev(form, "submit", prevent_default(/*onSubmit*/ ctx[4]), false, true, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*name*/ 1 && input.value !== /*name*/ ctx[0]) {
    				set_input_value(input, /*name*/ ctx[0]);
    			}

    			if (dirty & /*templates*/ 0) {
    				each_value = templates;
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$3(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$3(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(select, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (dirty & /*selectedTemplate, templates*/ 8) {
    				select_option(select, /*selectedTemplate*/ ctx[3]);
    			}

    			if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(div2, null);
    				}
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h3);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div3);
    			destroy_each(each_blocks, detaching);
    			if_block.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$3.name,
    		type: "else",
    		source: "(40:4) {:else}",
    		ctx
    	});

    	return block;
    }

    // (38:4) {#if loading}
    function create_if_block$3(ctx) {
    	let sitecreationloader;
    	let current;
    	sitecreationloader = new SiteCreationLoader({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(sitecreationloader.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(sitecreationloader, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(sitecreationloader.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(sitecreationloader.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(sitecreationloader, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$3.name,
    		type: "if",
    		source: "(38:4) {#if loading}",
    		ctx
    	});

    	return block;
    }

    // (58:14) {#each templates as template}
    function create_each_block$3(ctx) {
    	let option;
    	let t_value = /*template*/ ctx[7].description + "";
    	let t;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(t_value);
    			option.__value = /*template*/ ctx[7];
    			option.value = option.__value;
    			option.selected = /*template*/ ctx[7] === templates.default;
    			add_location(option, file$4, 58, 16, 1671);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$3.name,
    		type: "each",
    		source: "(58:14) {#each templates as template}",
    		ctx
    	});

    	return block;
    }

    // (71:12) {:else}
    function create_else_block_1$1(ctx) {
    	let button;
    	let t;

    	const block = {
    		c: function create() {
    			button = element("button");
    			t = text("Créer mon nouveau site");
    			attr_dev(button, "type", "submit");
    			attr_dev(button, "class", "btn__medium btn");
    			button.disabled = /*loading*/ ctx[1];
    			add_location(button, file$4, 71, 14, 2190);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*loading*/ 2) {
    				prop_dev(button, "disabled", /*loading*/ ctx[1]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1$1.name,
    		type: "else",
    		source: "(71:12) {:else}",
    		ctx
    	});

    	return block;
    }

    // (65:12) {#if hasError}
    function create_if_block_1$1(ctx) {
    	let div;
    	let t0;
    	let strong;
    	let t2;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t0 = text("Il y a un ");
    			strong = element("strong");
    			strong.textContent = "souci de notre côté";
    			t2 = text(". Vous pouvez\n                réessayer dans une heure ou demain. Si le problème persiste,\n                vous pouvez nous contacter.");
    			add_location(strong, file$4, 66, 26, 1964);
    			attr_dev(div, "class", "error-message");
    			add_location(div, file$4, 65, 14, 1910);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t0);
    			append_dev(div, strong);
    			append_dev(div, t2);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$1.name,
    		type: "if",
    		source: "(65:12) {#if hasError}",
    		ctx
    	});

    	return block;
    }

    // (36:0) <Skeleton>
    function create_default_slot$3(ctx) {
    	let section;
    	let current_block_type_index;
    	let if_block;
    	let current;
    	const if_block_creators = [create_if_block$3, create_else_block$3];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*loading*/ ctx[1]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			section = element("section");
    			if_block.c();
    			attr_dev(section, "class", "screen");
    			add_location(section, file$4, 36, 2, 1042);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			if_blocks[current_block_type_index].m(section, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(section, null);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			if_blocks[current_block_type_index].d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$3.name,
    		type: "slot",
    		source: "(36:0) <Skeleton>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$4(ctx) {
    	let skeleton;
    	let current;

    	skeleton = new Skeleton({
    			props: {
    				$$slots: { default: [create_default_slot$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(skeleton.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(skeleton, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const skeleton_changes = {};

    			if (dirty & /*$$scope, loading, hasError, selectedTemplate, name*/ 1039) {
    				skeleton_changes.$$scope = { dirty, ctx };
    			}

    			skeleton.$set(skeleton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(skeleton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(skeleton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(skeleton, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$4.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$4($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('CreateNewSite', slots, []);
    	let name = "";
    	let loading = false;
    	let hasError = false;

    	/** @type {GitSiteTemplate} */
    	let selectedTemplate;

    	// @ts-ignore
    	const onSubmit = e => {
    		e.preventDefault();
    		$$invalidate(1, loading = true);

    		// Pour le moment on crée forcément un dépôt sur son propre compte.
    		// Peut-être dans le futur on permettra de sélectionner une organisation
    		// directement depuis Scribouilli.
    		// Pour le moment on fait comme ça, et on documente comment transférer un
    		// dépôt perso dans une organisation, via l'interface GitHub, pour les
    		// utilisateurices avancé.es
    		createRepositoryForCurrentAccount(name, selectedTemplate).catch(() => {
    			$$invalidate(1, loading = false);
    			$$invalidate(2, hasError = true);
    		});
    	};

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<CreateNewSite> was created with unknown prop '${key}'`);
    	});

    	function input_input_handler() {
    		name = this.value;
    		$$invalidate(0, name);
    	}

    	function select_change_handler() {
    		selectedTemplate = select_value(this);
    		$$invalidate(3, selectedTemplate);
    	}

    	$$self.$capture_state = () => ({
    		Skeleton,
    		SiteCreationLoader,
    		createRepositoryForCurrentAccount,
    		templates,
    		name,
    		loading,
    		hasError,
    		selectedTemplate,
    		onSubmit
    	});

    	$$self.$inject_state = $$props => {
    		if ('name' in $$props) $$invalidate(0, name = $$props.name);
    		if ('loading' in $$props) $$invalidate(1, loading = $$props.loading);
    		if ('hasError' in $$props) $$invalidate(2, hasError = $$props.hasError);
    		if ('selectedTemplate' in $$props) $$invalidate(3, selectedTemplate = $$props.selectedTemplate);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		name,
    		loading,
    		hasError,
    		selectedTemplate,
    		onSubmit,
    		input_input_handler,
    		select_change_handler
    	];
    }

    class CreateNewSite extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$4, create_fragment$4, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "CreateNewSite",
    			options,
    			id: create_fragment$4.name
    		});
    	}
    }

    var createNewSite = () => {
      fetchAuthenticatedUserLogin();

      const createNewSite = new CreateNewSite({
        target: svelteTarget,
        props: {},
      });

      replaceComponent(createNewSite, () => {});
    };

    /* assets/scripts/components/loaders/Loader.svelte generated by Svelte v3.58.0 */

    const file$3 = "assets/scripts/components/loaders/Loader.svelte";

    function create_fragment$3(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			if (!src_url_equal(img.src, img_src_value = "./assets/images/oval.svg")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "Chargement du contenu");
    			add_location(img, file$3, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$3.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$3($$self, $$props) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Loader', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Loader> was created with unknown prop '${key}'`);
    	});

    	return [];
    }

    class Loader extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$3, create_fragment$3, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Loader",
    			options,
    			id: create_fragment$3.name
    		});
    	}
    }

    /* assets/scripts/components/screens/SelectCurrentSite.svelte generated by Svelte v3.58.0 */
    const file$2 = "assets/scripts/components/screens/SelectCurrentSite.svelte";

    function get_each_context$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[2] = list[i];
    	return child_ctx;
    }

    // (45:4) {:else}
    function create_else_block$2(ctx) {
    	let div2;
    	let form;
    	let div0;
    	let label;
    	let t1;
    	let select;
    	let t2;
    	let div1;
    	let button;
    	let current_block_type_index;
    	let if_block;
    	let current;
    	let mounted;
    	let dispose;
    	let each_value = /*currentAccountRepositories*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
    	}

    	const if_block_creators = [create_if_block_1, create_else_block_1];
    	const if_blocks = [];

    	function select_block_type_1(ctx, dirty) {
    		if (/*loading*/ ctx[1]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type_1(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			form = element("form");
    			div0 = element("div");
    			label = element("label");
    			label.textContent = "Nom de votre site";
    			t1 = space();
    			select = element("select");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t2 = space();
    			div1 = element("div");
    			button = element("button");
    			if_block.c();
    			attr_dev(label, "for", "name");
    			add_location(label, file$2, 48, 12, 1052);
    			attr_dev(select, "id", "name");
    			attr_dev(select, "class", "svelte-yy3g68");
    			if (/*repo*/ ctx[2] === void 0) add_render_callback(() => /*select_change_handler*/ ctx[6].call(select));
    			add_location(select, file$2, 49, 12, 1108);
    			add_location(div0, file$2, 47, 10, 1034);
    			attr_dev(button, "type", "submit");
    			attr_dev(button, "class", "btn__medium btn");
    			button.disabled = /*loading*/ ctx[1];
    			add_location(button, file$2, 57, 12, 1383);
    			attr_dev(div1, "class", "actions-zone svelte-yy3g68");
    			add_location(div1, file$2, 56, 10, 1344);
    			add_location(form, file$2, 46, 8, 996);
    			attr_dev(div2, "class", "wrapper");
    			add_location(div2, file$2, 45, 6, 966);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, form);
    			append_dev(form, div0);
    			append_dev(div0, label);
    			append_dev(div0, t1);
    			append_dev(div0, select);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(select, null);
    				}
    			}

    			select_option(select, /*repo*/ ctx[2], true);
    			append_dev(form, t2);
    			append_dev(form, div1);
    			append_dev(div1, button);
    			if_blocks[current_block_type_index].m(button, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(select, "change", /*select_change_handler*/ ctx[6]),
    					listen_dev(form, "submit", /*onSubmit*/ ctx[4], false, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*currentAccountRepositories, displayRepoName*/ 9) {
    				each_value = /*currentAccountRepositories*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$2(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$2(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(select, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (dirty & /*repo, currentAccountRepositories*/ 5) {
    				select_option(select, /*repo*/ ctx[2]);
    			}

    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_1(ctx);

    			if (current_block_type_index !== previous_block_index) {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				}

    				transition_in(if_block, 1);
    				if_block.m(button, null);
    			}

    			if (!current || dirty & /*loading*/ 2) {
    				prop_dev(button, "disabled", /*loading*/ ctx[1]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			destroy_each(each_blocks, detaching);
    			if_blocks[current_block_type_index].d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$2.name,
    		type: "else",
    		source: "(45:4) {:else}",
    		ctx
    	});

    	return block;
    }

    // (43:4) {#if !currentAccountRepositories}
    function create_if_block$2(ctx) {
    	let loader;
    	let current;
    	loader = new Loader({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(loader.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(loader, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(loader.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(loader.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(loader, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$2.name,
    		type: "if",
    		source: "(43:4) {#if !currentAccountRepositories}",
    		ctx
    	});

    	return block;
    }

    // (51:14) {#each currentAccountRepositories as repo}
    function create_each_block$2(ctx) {
    	let option;
    	let t_value = /*displayRepoName*/ ctx[3](/*repo*/ ctx[2]) + "";
    	let t;
    	let option_value_value;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(t_value);
    			option.__value = option_value_value = /*repo*/ ctx[2];
    			option.value = option.__value;
    			add_location(option, file$2, 51, 16, 1218);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*currentAccountRepositories*/ 1 && t_value !== (t_value = /*displayRepoName*/ ctx[3](/*repo*/ ctx[2]) + "")) set_data_dev(t, t_value);

    			if (dirty & /*currentAccountRepositories*/ 1 && option_value_value !== (option_value_value = /*repo*/ ctx[2])) {
    				prop_dev(option, "__value", option_value_value);
    				option.value = option.__value;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$2.name,
    		type: "each",
    		source: "(51:14) {#each currentAccountRepositories as repo}",
    		ctx
    	});

    	return block;
    }

    // (61:14) {:else}
    function create_else_block_1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Choisir ce site");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1.name,
    		type: "else",
    		source: "(61:14) {:else}",
    		ctx
    	});

    	return block;
    }

    // (59:14) {#if loading}
    function create_if_block_1(ctx) {
    	let loader;
    	let current;
    	loader = new Loader({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(loader.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(loader, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(loader.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(loader.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(loader, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1.name,
    		type: "if",
    		source: "(59:14) {#if loading}",
    		ctx
    	});

    	return block;
    }

    // (39:0) <Skeleton>
    function create_default_slot$2(ctx) {
    	let section;
    	let h3;
    	let t1;
    	let current_block_type_index;
    	let if_block;
    	let current;
    	const if_block_creators = [create_if_block$2, create_else_block$2];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (!/*currentAccountRepositories*/ ctx[0]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			section = element("section");
    			h3 = element("h3");
    			h3.textContent = "Choisir le site sur lequel vous souhaitez travailler";
    			t1 = space();
    			if_block.c();
    			add_location(h3, file$2, 40, 4, 830);
    			attr_dev(section, "class", "screen");
    			add_location(section, file$2, 39, 2, 801);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, h3);
    			append_dev(section, t1);
    			if_blocks[current_block_type_index].m(section, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(section, null);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			if_blocks[current_block_type_index].d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$2.name,
    		type: "slot",
    		source: "(39:0) <Skeleton>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$2(ctx) {
    	let skeleton;
    	let current;

    	skeleton = new Skeleton({
    			props: {
    				$$slots: { default: [create_default_slot$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(skeleton.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(skeleton, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const skeleton_changes = {};

    			if (dirty & /*$$scope, currentAccountRepositories, loading, repo*/ 519) {
    				skeleton_changes.$$scope = { dirty, ctx };
    			}

    			skeleton.$set(skeleton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(skeleton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(skeleton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(skeleton, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$2.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$2($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('SelectCurrentSite', slots, []);
    	let { currentAccount } = $$props;
    	let { currentAccountRepositories } = $$props;

    	/** @type {GithubRepository} */
    	let repo;

    	let loading = false;

    	// @ts-ignore
    	const displayRepoName = repo => {
    		if (repo.owner.login === currentAccount) {
    			return repo.name;
    		} else {
    			return `${repo.owner.login} / ${repo.name}`;
    		}
    	};

    	// @ts-ignore
    	const onSubmit = e => {
    		e.preventDefault();
    		$$invalidate(1, loading = true);
    		page(`/atelier-list-pages?repoName=${repo.name}&account=${repo.owner.login}`);
    		$$invalidate(1, loading = false);
    	};

    	$$self.$$.on_mount.push(function () {
    		if (currentAccount === undefined && !('currentAccount' in $$props || $$self.$$.bound[$$self.$$.props['currentAccount']])) {
    			console.warn("<SelectCurrentSite> was created without expected prop 'currentAccount'");
    		}

    		if (currentAccountRepositories === undefined && !('currentAccountRepositories' in $$props || $$self.$$.bound[$$self.$$.props['currentAccountRepositories']])) {
    			console.warn("<SelectCurrentSite> was created without expected prop 'currentAccountRepositories'");
    		}
    	});

    	const writable_props = ['currentAccount', 'currentAccountRepositories'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<SelectCurrentSite> was created with unknown prop '${key}'`);
    	});

    	function select_change_handler() {
    		repo = select_value(this);
    		$$invalidate(2, repo);
    		$$invalidate(0, currentAccountRepositories);
    	}

    	$$self.$$set = $$props => {
    		if ('currentAccount' in $$props) $$invalidate(5, currentAccount = $$props.currentAccount);
    		if ('currentAccountRepositories' in $$props) $$invalidate(0, currentAccountRepositories = $$props.currentAccountRepositories);
    	};

    	$$self.$capture_state = () => ({
    		page,
    		Skeleton,
    		Loader,
    		currentAccount,
    		currentAccountRepositories,
    		repo,
    		loading,
    		displayRepoName,
    		onSubmit
    	});

    	$$self.$inject_state = $$props => {
    		if ('currentAccount' in $$props) $$invalidate(5, currentAccount = $$props.currentAccount);
    		if ('currentAccountRepositories' in $$props) $$invalidate(0, currentAccountRepositories = $$props.currentAccountRepositories);
    		if ('repo' in $$props) $$invalidate(2, repo = $$props.repo);
    		if ('loading' in $$props) $$invalidate(1, loading = $$props.loading);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		currentAccountRepositories,
    		loading,
    		repo,
    		displayRepoName,
    		onSubmit,
    		currentAccount,
    		select_change_handler
    	];
    }

    class SelectCurrentSite extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$2, create_fragment$2, safe_not_equal, {
    			currentAccount: 5,
    			currentAccountRepositories: 0
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SelectCurrentSite",
    			options,
    			id: create_fragment$2.name
    		});
    	}

    	get currentAccount() {
    		throw new Error("<SelectCurrentSite>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set currentAccount(value) {
    		throw new Error("<SelectCurrentSite>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get currentAccountRepositories() {
    		throw new Error("<SelectCurrentSite>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set currentAccountRepositories(value) {
    		throw new Error("<SelectCurrentSite>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    //@ts-check

    /**
     *
     * @param {import('../store').ScribouilliState} state
     * @returns
     */
    const mapStateToProps$2 = state => {
      const { login, reposByAccount } = state;

      return {
        currentAccount: login,
        // @ts-ignore
        currentAccountRepositories: reposByAccount[login],
      }
    };

    var startFromExistingSite = () => {
      fetchAuthenticatedUserLogin();
      fetchCurrentUserRepositories();

      const selectCurrentSite = new SelectCurrentSite({
        target: svelteTarget,
        props: mapStateToProps$2(store.state),
      });

      replaceComponent(selectCurrentSite, mapStateToProps$2);
    };

    /* assets/scripts/components/screens/Settings.svelte generated by Svelte v3.58.0 */
    const file$1 = "assets/scripts/components/screens/Settings.svelte";

    function get_each_context$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[15] = list[i].id;
    	child_ctx[16] = list[i].color;
    	child_ctx[17] = list[i].name;
    	return child_ctx;
    }

    // (155:10) {:else}
    function create_else_block$1(ctx) {
    	let div;
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			div = element("div");
    			img = element("img");
    			if (!src_url_equal(img.src, img_src_value = "./assets/images/oval.svg")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "");
    			add_location(img, file$1, 155, 17, 3592);
    			add_location(div, file$1, 155, 12, 3587);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, img);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$1.name,
    		type: "else",
    		source: "(155:10) {:else}",
    		ctx
    	});

    	return block;
    }

    // (139:10) {#if theme.css}
    function create_if_block$1(ctx) {
    	let each_1_anchor;
    	let each_value = /*mesCouleurs*/ ctx[12];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(target, anchor);
    				}
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*mesCouleurs, checkThemeColor, setColor*/ 4736) {
    				each_value = /*mesCouleurs*/ ctx[12];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$1(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$1.name,
    		type: "if",
    		source: "(139:10) {#if theme.css}",
    		ctx
    	});

    	return block;
    }

    // (140:12) {#each mesCouleurs as { id, color, name }}
    function create_each_block$1(ctx) {
    	let div;
    	let input;
    	let t0;
    	let label;
    	let span;
    	let t1;
    	let t2_value = /*name*/ ctx[17] + "";
    	let t2;
    	let t3;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			input = element("input");
    			t0 = space();
    			label = element("label");
    			span = element("span");
    			t1 = space();
    			t2 = text(t2_value);
    			t3 = space();
    			attr_dev(input, "type", "radio");
    			attr_dev(input, "name", "theme-color-select");
    			attr_dev(input, "id", /*id*/ ctx[15]);
    			input.value = /*color*/ ctx[16];
    			input.checked = /*checkThemeColor*/ ctx[7](/*color*/ ctx[16]);
    			add_location(input, file$1, 141, 16, 3145);
    			set_style(span, "background-color", /*color*/ ctx[16]);
    			add_location(span, file$1, 150, 18, 3441);
    			attr_dev(label, "for", /*id*/ ctx[15]);
    			add_location(label, file$1, 149, 16, 3406);
    			attr_dev(div, "class", "radio");
    			add_location(div, file$1, 140, 14, 3109);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, input);
    			append_dev(div, t0);
    			append_dev(div, label);
    			append_dev(label, span);
    			append_dev(label, t1);
    			append_dev(label, t2);
    			append_dev(div, t3);

    			if (!mounted) {
    				dispose = listen_dev(input, "click", /*setColor*/ ctx[9], false, false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$1.name,
    		type: "each",
    		source: "(140:12) {#each mesCouleurs as { id, color, name }}",
    		ctx
    	});

    	return block;
    }

    // (115:0) <Skeleton {currentRepository} {buildStatus} {showArticles}>
    function create_default_slot$1(ctx) {
    	let section;
    	let h2;
    	let t1;
    	let div0;
    	let t2;
    	let t3;
    	let div1;
    	let h30;
    	let t5;
    	let label;
    	let input;
    	let t6;
    	let t7;
    	let div5;
    	let div3;
    	let h31;
    	let t9;
    	let div2;
    	let t10;
    	let div4;
    	let button0;
    	let t12;
    	let p0;
    	let t14;
    	let div6;
    	let h32;
    	let t16;
    	let p1;
    	let t17;
    	let a0;
    	let t19;
    	let t20;
    	let textarea;
    	let textarea_value_value;
    	let t21;
    	let button1;
    	let t23;
    	let div7;
    	let h33;
    	let t25;
    	let p2;
    	let t26;
    	let a1;
    	let t27;
    	let t28;
    	let t29;
    	let p3;
    	let t30;
    	let strong0;
    	let t32;
    	let hr;
    	let t33;
    	let div8;
    	let h34;
    	let t35;
    	let p4;
    	let t36;
    	let strong1;
    	let t38;
    	let strong2;
    	let t40;
    	let t41;
    	let a2;
    	let mounted;
    	let dispose;

    	function select_block_type(ctx, dirty) {
    		if (/*theme*/ ctx[0].css) return create_if_block$1;
    		return create_else_block$1;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			section = element("section");
    			h2 = element("h2");
    			h2.textContent = "Paramètres";
    			t1 = space();
    			div0 = element("div");
    			t2 = text(/*notification*/ ctx[6]);
    			t3 = space();
    			div1 = element("div");
    			h30 = element("h3");
    			h30.textContent = "Sections supplémentaires";
    			t5 = space();
    			label = element("label");
    			input = element("input");
    			t6 = text("\n        Ajouter une page articles");
    			t7 = space();
    			div5 = element("div");
    			div3 = element("div");
    			h31 = element("h3");
    			h31.textContent = "Couleur principale";
    			t9 = space();
    			div2 = element("div");
    			if_block.c();
    			t10 = space();
    			div4 = element("div");
    			button0 = element("button");
    			button0.textContent = "Changer la couleur (~ 2 min.)";
    			t12 = space();
    			p0 = element("p");
    			p0.textContent = "Si la couleur ne change pas, essayez d'actualiser la page sans le cache\n        (Ctrl + Maj + R) après les 2 minutes";
    			t14 = space();
    			div6 = element("div");
    			h32 = element("h3");
    			h32.textContent = "Personnalisation du site";
    			t16 = space();
    			p1 = element("p");
    			t17 = text("Pour personnaliser le look de votre site, vous pouvez ");
    			a0 = element("a");
    			a0.textContent = "coder en CSS";
    			t19 = text(" ici !");
    			t20 = space();
    			textarea = element("textarea");
    			t21 = space();
    			button1 = element("button");
    			button1.textContent = "Enregistrer le CSS";
    			t23 = space();
    			div7 = element("div");
    			h33 = element("h3");
    			h33.textContent = "Supprimer le site";
    			t25 = space();
    			p2 = element("p");
    			t26 = text("Pour supprimer le site, cliquez sur le bouton \"Delete this repository\"\n        en bas de la page ");
    			a1 = element("a");
    			t27 = text("\"Settings\" de GitHub");
    			t28 = text(".");
    			t29 = space();
    			p3 = element("p");
    			t30 = text("Scribouilli saura que le compte est supprimé\n        ");
    			strong0 = element("strong");
    			strong0.textContent = "~ 2 minutes après.";
    			t32 = space();
    			hr = element("hr");
    			t33 = space();
    			div8 = element("div");
    			h34 = element("h3");
    			h34.textContent = "Autres sites";
    			t35 = space();
    			p4 = element("p");
    			t36 = text("Vous pouvez ");
    			strong1 = element("strong");
    			strong1.textContent = "créer un nouveau site";
    			t38 = text(" Scribouilli ou\n        retrouver ceux que vous avez ");
    			strong2 = element("strong");
    			strong2.textContent = "déjà créés";
    			t40 = text(".");
    			t41 = space();
    			a2 = element("a");
    			a2.textContent = "Changer de site";
    			add_location(h2, file$1, 116, 4, 2545);
    			attr_dev(div0, "id", "notifications");
    			add_location(div0, file$1, 118, 4, 2570);
    			add_location(h30, file$1, 121, 6, 2659);
    			attr_dev(input, "type", "checkbox");
    			add_location(input, file$1, 124, 8, 2716);
    			add_location(label, file$1, 123, 6, 2700);
    			attr_dev(div1, "class", "wrapper white-zone");
    			add_location(div1, file$1, 120, 4, 2620);
    			add_location(h31, file$1, 135, 8, 2948);
    			attr_dev(div2, "class", "radios-wrapper svelte-17uecsg");
    			add_location(div2, file$1, 137, 8, 2985);
    			add_location(div3, file$1, 134, 6, 2934);
    			attr_dev(button0, "class", "btn btn__medium");
    			add_location(button0, file$1, 161, 8, 3709);
    			add_location(div4, file$1, 160, 6, 3695);
    			add_location(p0, file$1, 165, 6, 3850);
    			attr_dev(div5, "class", "wrapper white-zone");
    			add_location(div5, file$1, 133, 4, 2895);
    			add_location(h32, file$1, 172, 6, 4055);
    			attr_dev(a0, "href", "https://developer.mozilla.org/fr/docs/Learn/Getting_started_with_the_web/CSS_basics");
    			add_location(a0, file$1, 174, 62, 4176);
    			attr_dev(p1, "id", "customCSS");
    			add_location(p1, file$1, 173, 6, 4095);
    			attr_dev(textarea, "aria-labelledby", "customCSS");
    			attr_dev(textarea, "cols", "20");
    			attr_dev(textarea, "rows", "8");
    			textarea.value = textarea_value_value = /*theme*/ ctx[0].css || 'Chargement du thème personnalisé...';
    			add_location(textarea, file$1, 179, 6, 4345);
    			attr_dev(button1, "type", "button");
    			attr_dev(button1, "class", "btn btn__medium");
    			add_location(button1, file$1, 186, 6, 4541);
    			attr_dev(div6, "class", "wrapper white-zone");
    			add_location(div6, file$1, 171, 4, 4016);
    			add_location(h33, file$1, 192, 6, 4707);
    			attr_dev(a1, "href", /*deleteRepositoryUrl*/ ctx[3]);
    			add_location(a1, file$1, 195, 26, 4849);
    			add_location(p2, file$1, 193, 6, 4740);
    			add_location(strong0, file$1, 200, 8, 4996);
    			add_location(p3, file$1, 198, 6, 4931);
    			attr_dev(div7, "class", "wrapper white-zone");
    			add_location(div7, file$1, 191, 4, 4668);
    			attr_dev(hr, "class", "svelte-17uecsg");
    			add_location(hr, file$1, 204, 4, 5069);
    			add_location(h34, file$1, 207, 6, 5120);
    			add_location(strong1, file$1, 209, 20, 5172);
    			add_location(strong2, file$1, 210, 37, 5263);
    			add_location(p4, file$1, 208, 6, 5148);
    			attr_dev(a2, "class", "btn btn__medium");
    			attr_dev(a2, "href", "selectionner-un-site");
    			add_location(a2, file$1, 213, 6, 5310);
    			attr_dev(div8, "class", "wrapper white-zone");
    			add_location(div8, file$1, 206, 4, 5081);
    			attr_dev(section, "class", "screen");
    			attr_dev(section, "id", "settings");
    			add_location(section, file$1, 115, 2, 2502);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, h2);
    			append_dev(section, t1);
    			append_dev(section, div0);
    			append_dev(div0, t2);
    			append_dev(section, t3);
    			append_dev(section, div1);
    			append_dev(div1, h30);
    			append_dev(div1, t5);
    			append_dev(div1, label);
    			append_dev(label, input);
    			input.checked = /*blogEnabled*/ ctx[1];
    			append_dev(label, t6);
    			append_dev(section, t7);
    			append_dev(section, div5);
    			append_dev(div5, div3);
    			append_dev(div3, h31);
    			append_dev(div3, t9);
    			append_dev(div3, div2);
    			if_block.m(div2, null);
    			append_dev(div5, t10);
    			append_dev(div5, div4);
    			append_dev(div4, button0);
    			append_dev(div5, t12);
    			append_dev(div5, p0);
    			append_dev(section, t14);
    			append_dev(section, div6);
    			append_dev(div6, h32);
    			append_dev(div6, t16);
    			append_dev(div6, p1);
    			append_dev(p1, t17);
    			append_dev(p1, a0);
    			append_dev(p1, t19);
    			append_dev(div6, t20);
    			append_dev(div6, textarea);
    			append_dev(div6, t21);
    			append_dev(div6, button1);
    			append_dev(section, t23);
    			append_dev(section, div7);
    			append_dev(div7, h33);
    			append_dev(div7, t25);
    			append_dev(div7, p2);
    			append_dev(p2, t26);
    			append_dev(p2, a1);
    			append_dev(a1, t27);
    			append_dev(p2, t28);
    			append_dev(div7, t29);
    			append_dev(div7, p3);
    			append_dev(p3, t30);
    			append_dev(p3, strong0);
    			append_dev(section, t32);
    			append_dev(section, hr);
    			append_dev(section, t33);
    			append_dev(section, div8);
    			append_dev(div8, h34);
    			append_dev(div8, t35);
    			append_dev(div8, p4);
    			append_dev(p4, t36);
    			append_dev(p4, strong1);
    			append_dev(p4, t38);
    			append_dev(p4, strong2);
    			append_dev(p4, t40);
    			append_dev(div8, t41);
    			append_dev(div8, a2);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "change", /*input_change_handler*/ ctx[13]),
    					listen_dev(input, "change", /*toggleBlog*/ ctx[11], false, false, false, false),
    					listen_dev(button0, "click", /*saveTheme*/ ctx[8], false, false, false, false),
    					listen_dev(textarea, "change", /*setTheme*/ ctx[10], false, false, false, false),
    					listen_dev(button1, "click", /*saveTheme*/ ctx[8], false, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*notification*/ 64) set_data_dev(t2, /*notification*/ ctx[6]);

    			if (dirty & /*blogEnabled*/ 2) {
    				input.checked = /*blogEnabled*/ ctx[1];
    			}

    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(div2, null);
    				}
    			}

    			if (dirty & /*theme*/ 1 && textarea_value_value !== (textarea_value_value = /*theme*/ ctx[0].css || 'Chargement du thème personnalisé...')) {
    				prop_dev(textarea, "value", textarea_value_value);
    			}

    			if (dirty & /*deleteRepositoryUrl*/ 8) {
    				attr_dev(a1, "href", /*deleteRepositoryUrl*/ ctx[3]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			if_block.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$1.name,
    		type: "slot",
    		source: "(115:0) <Skeleton {currentRepository} {buildStatus} {showArticles}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1(ctx) {
    	let skeleton;
    	let current;

    	skeleton = new Skeleton({
    			props: {
    				currentRepository: /*currentRepository*/ ctx[5],
    				buildStatus: /*buildStatus*/ ctx[2],
    				showArticles: /*showArticles*/ ctx[4],
    				$$slots: { default: [create_default_slot$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(skeleton.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(skeleton, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const skeleton_changes = {};
    			if (dirty & /*currentRepository*/ 32) skeleton_changes.currentRepository = /*currentRepository*/ ctx[5];
    			if (dirty & /*buildStatus*/ 4) skeleton_changes.buildStatus = /*buildStatus*/ ctx[2];
    			if (dirty & /*showArticles*/ 16) skeleton_changes.showArticles = /*showArticles*/ ctx[4];

    			if (dirty & /*$$scope, deleteRepositoryUrl, theme, blogEnabled, notification*/ 1048651) {
    				skeleton_changes.$$scope = { dirty, ctx };
    			}

    			skeleton.$set(skeleton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(skeleton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(skeleton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(skeleton, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Settings', slots, []);
    	const dispatch = createEventDispatcher();
    	let { buildStatus } = $$props;
    	let { theme } = $$props;
    	let { deleteRepositoryUrl } = $$props;
    	let { blogEnabled } = $$props;
    	let { showArticles } = $$props;
    	let { currentRepository } = $$props;
    	let notification = '';

    	/**
     * @param {string} color
     * @returns {boolean}
     */
    	const checkThemeColor = color => {
    		const themeColor = theme.css?.replace(/(.*)--couleur-primaire(.*)#(?<color>[a-fA-F0-9]{6});(.*)/gs, '#$<color>');
    		return themeColor === color;
    	};

    	// @ts-ignore
    	const saveTheme = e => {
    		dispatch('update-theme', { theme });
    		$$invalidate(6, notification = 'Le thème sera mis à jour après le déploiement des modifications (~ 2min)');
    		document.body.scrollIntoView();
    	};

    	// @ts-ignore
    	const setColor = e => {
    		$$invalidate(0, theme.css = theme.css?.replace(/(?<before>(.*)--couleur-primaire(.*))(#[a-fA-F0-9]{6})(?<after>;(.*))/gs, `$<before>${e.target.value}$<after>`), theme);
    	};

    	// @ts-ignore
    	const setTheme = e => {
    		$$invalidate(0, theme.css = e.target.value, theme);
    	};

    	// @ts-ignore
    	const toggleBlog = e => {
    		dispatch('toggle-blog', { activated: e.target.checked });

    		if (e.target.checked) {
    			$$invalidate(6, notification = 'Une section « Articles » a été ajoutée dans le menu');
    		} else {
    			$$invalidate(6, notification = 'Les articles ont été masqués sur votre site');
    		}
    	};

    	const mesCouleurs = [
    		{
    			id: 'vertBooteille',
    			color: '#2a6442',
    			name: 'Vert Booteille'
    		},
    		{
    			id: 'bleu-outre-mer',
    			color: '#07357d',
    			name: 'Bleu outre-mer'
    		},
    		{
    			id: 'bleu-lagon',
    			color: '#0E6270',
    			name: 'Bleu lagon'
    		},
    		{
    			id: 'violet-aubergine',
    			color: '#753785',
    			name: 'Violet aubergine'
    		},
    		{
    			id: 'rouge-brique',
    			color: '#993B1F',
    			name: 'Rouge brique'
    		},
    		{
    			id: 'marron-volcanique',
    			color: '#6C5353',
    			name: 'Marron volcanique'
    		},
    		{
    			id: 'gris-breton',
    			color: '#53606C',
    			name: 'Gris breton'
    		}
    	];

    	$$self.$$.on_mount.push(function () {
    		if (buildStatus === undefined && !('buildStatus' in $$props || $$self.$$.bound[$$self.$$.props['buildStatus']])) {
    			console.warn("<Settings> was created without expected prop 'buildStatus'");
    		}

    		if (theme === undefined && !('theme' in $$props || $$self.$$.bound[$$self.$$.props['theme']])) {
    			console.warn("<Settings> was created without expected prop 'theme'");
    		}

    		if (deleteRepositoryUrl === undefined && !('deleteRepositoryUrl' in $$props || $$self.$$.bound[$$self.$$.props['deleteRepositoryUrl']])) {
    			console.warn("<Settings> was created without expected prop 'deleteRepositoryUrl'");
    		}

    		if (blogEnabled === undefined && !('blogEnabled' in $$props || $$self.$$.bound[$$self.$$.props['blogEnabled']])) {
    			console.warn("<Settings> was created without expected prop 'blogEnabled'");
    		}

    		if (showArticles === undefined && !('showArticles' in $$props || $$self.$$.bound[$$self.$$.props['showArticles']])) {
    			console.warn("<Settings> was created without expected prop 'showArticles'");
    		}

    		if (currentRepository === undefined && !('currentRepository' in $$props || $$self.$$.bound[$$self.$$.props['currentRepository']])) {
    			console.warn("<Settings> was created without expected prop 'currentRepository'");
    		}
    	});

    	const writable_props = [
    		'buildStatus',
    		'theme',
    		'deleteRepositoryUrl',
    		'blogEnabled',
    		'showArticles',
    		'currentRepository'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Settings> was created with unknown prop '${key}'`);
    	});

    	function input_change_handler() {
    		blogEnabled = this.checked;
    		$$invalidate(1, blogEnabled);
    	}

    	$$self.$$set = $$props => {
    		if ('buildStatus' in $$props) $$invalidate(2, buildStatus = $$props.buildStatus);
    		if ('theme' in $$props) $$invalidate(0, theme = $$props.theme);
    		if ('deleteRepositoryUrl' in $$props) $$invalidate(3, deleteRepositoryUrl = $$props.deleteRepositoryUrl);
    		if ('blogEnabled' in $$props) $$invalidate(1, blogEnabled = $$props.blogEnabled);
    		if ('showArticles' in $$props) $$invalidate(4, showArticles = $$props.showArticles);
    		if ('currentRepository' in $$props) $$invalidate(5, currentRepository = $$props.currentRepository);
    	};

    	$$self.$capture_state = () => ({
    		Skeleton,
    		createEventDispatcher,
    		dispatch,
    		buildStatus,
    		theme,
    		deleteRepositoryUrl,
    		blogEnabled,
    		showArticles,
    		currentRepository,
    		notification,
    		checkThemeColor,
    		saveTheme,
    		setColor,
    		setTheme,
    		toggleBlog,
    		mesCouleurs
    	});

    	$$self.$inject_state = $$props => {
    		if ('buildStatus' in $$props) $$invalidate(2, buildStatus = $$props.buildStatus);
    		if ('theme' in $$props) $$invalidate(0, theme = $$props.theme);
    		if ('deleteRepositoryUrl' in $$props) $$invalidate(3, deleteRepositoryUrl = $$props.deleteRepositoryUrl);
    		if ('blogEnabled' in $$props) $$invalidate(1, blogEnabled = $$props.blogEnabled);
    		if ('showArticles' in $$props) $$invalidate(4, showArticles = $$props.showArticles);
    		if ('currentRepository' in $$props) $$invalidate(5, currentRepository = $$props.currentRepository);
    		if ('notification' in $$props) $$invalidate(6, notification = $$props.notification);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		theme,
    		blogEnabled,
    		buildStatus,
    		deleteRepositoryUrl,
    		showArticles,
    		currentRepository,
    		notification,
    		checkThemeColor,
    		saveTheme,
    		setColor,
    		setTheme,
    		toggleBlog,
    		mesCouleurs,
    		input_change_handler
    	];
    }

    class Settings extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$1, create_fragment$1, safe_not_equal, {
    			buildStatus: 2,
    			theme: 0,
    			deleteRepositoryUrl: 3,
    			blogEnabled: 1,
    			showArticles: 4,
    			currentRepository: 5
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Settings",
    			options,
    			id: create_fragment$1.name
    		});
    	}

    	get buildStatus() {
    		throw new Error("<Settings>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set buildStatus(value) {
    		throw new Error("<Settings>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get theme() {
    		throw new Error("<Settings>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set theme(value) {
    		throw new Error("<Settings>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get deleteRepositoryUrl() {
    		throw new Error("<Settings>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set deleteRepositoryUrl(value) {
    		throw new Error("<Settings>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get blogEnabled() {
    		throw new Error("<Settings>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set blogEnabled(value) {
    		throw new Error("<Settings>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get showArticles() {
    		throw new Error("<Settings>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set showArticles(value) {
    		throw new Error("<Settings>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get currentRepository() {
    		throw new Error("<Settings>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set currentRepository(value) {
    		throw new Error("<Settings>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    // @ts-check


    const blogMdContent = `---
layout: default
title: Articles
permalink: /articles/
---
<h1>
  Articles
</h1>
<aside>
  S'abonner via le <a href="{{ '/feed.xml' | relative_url }}">flux RSS</a>
  (<a href="https://flus.fr/carnet/a-quoi-servent-les-flux.html">c'est quoi ?</a>)
</aside>

{% for post in site.posts %}
<article class="blog-item">
  <h2>
    <a href="{{post.url | relative_url}}"> {{ post.title }} </a>
  </h2>

  <a href="{{post.url | relative_url}}"> Lire l'article ➞ </a>
</article>
<hr />
{% endfor %}
`;

    /**
     *
     * @param {import('../store').ScribouilliState} state
     * @returns
     */
    function mapStateToProps$1(state) {
      const blogFile = state.pages && state.pages.find(p => p.path === 'blog.md');
      const currentRepository = store.state.currentRepository;

      if (!currentRepository) {
        throw new TypeError('currentRepository is undefined')
      }

      return {
        buildStatus: state.buildStatus,
        theme: state.theme,
        deleteRepositoryUrl: `${currentRepository.publicRepositoryURL}/settings#danger-zone`,
        blogEnabled: blogFile !== undefined,
        showArticles:
          blogFile !== undefined || (state.articles && state.articles?.length > 0),
        currentRepository: state.currentRepository,
      }
    }

    /**
     * @param {import('page').Context} _
     */
    var settings = async ({ querystring }) => {
      await setCurrentRepositoryFromQuerystring(querystring);

      const {gitAgent} = store.state;

      if(!gitAgent){
        throw new TypeError('gitAgent is undefined')
      }

      const settings = new Settings({
        target: svelteTarget,
        props: mapStateToProps$1(store.state),
      });

      settings.$on('update-theme', ({ detail: { theme } }) => {
        saveCustomCSS(theme.css).catch(handleErrors);
      });

      settings.$on('toggle-blog', async ({ detail: { activated } }) => {
        try {
          if (activated) {
            await writeFileAndCommit('blog.md', blogMdContent, 'Activation du blog');
          } else {
            await deleteFileAndCommit('blog.md', 'Désactivation du blog');
          }
          await getCurrentRepoArticles();
          await getCurrentRepoPages();

          gitAgent.safePush();
        } catch (msg) {
          //@ts-ignore
          handleErrors(msg);
        }
      });

      if (!store.state.theme.css) {
        gitAgent
          .getFile(CUSTOM_CSS_PATH)
          .then(content => {
            store.mutations.setTheme(content);
          })
          .catch(msg => handleErrors(msg));
      }

      getCurrentRepoPages();

      replaceComponent(settings, mapStateToProps$1);
    };

    /* assets/scripts/components/screens/ResolutionDesynchronisation.svelte generated by Svelte v3.58.0 */
    const file = "assets/scripts/components/screens/ResolutionDesynchronisation.svelte";

    function get_each_context(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[6] = list[i].message;
    	child_ctx[7] = list[i].resolution;
    	return child_ctx;
    }

    // (79:12) {:else}
    function create_else_block(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Woops... gros problème, on n'arrive pas à trouver les options. Scribouilli est vraiment très cassé !\n                Tu peux prévenir l'équipe ou alors revenir dans quelques heures ou jours");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block.name,
    		type: "else",
    		source: "(79:12) {:else}",
    		ctx
    	});

    	return block;
    }

    // (72:12) {#if newConflictOptions}
    function create_if_block(ctx) {
    	let each_1_anchor;
    	let each_value = /*newConflictOptions*/ ctx[4];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(target, anchor);
    				}
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*newConflictOptions*/ 16) {
    				each_value = /*newConflictOptions*/ ctx[4];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block.name,
    		type: "if",
    		source: "(72:12) {#if newConflictOptions}",
    		ctx
    	});

    	return block;
    }

    // (73:16) {#each newConflictOptions as {message, resolution}}
    function create_each_block(ctx) {
    	let li;
    	let p;
    	let t0_value = /*message*/ ctx[6] + "";
    	let t0;
    	let t1;
    	let button;
    	let t3;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			li = element("li");
    			p = element("p");
    			t0 = text(t0_value);
    			t1 = space();
    			button = element("button");
    			button.textContent = "Je choisis cette option !";
    			t3 = space();
    			attr_dev(p, "class", "svelte-11iuh81");
    			add_location(p, file, 74, 24, 3064);
    			attr_dev(button, "class", "btn__medium btn");
    			add_location(button, file, 75, 24, 3105);
    			attr_dev(li, "class", "svelte-11iuh81");
    			add_location(li, file, 73, 20, 3035);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			append_dev(li, p);
    			append_dev(p, t0);
    			append_dev(li, t1);
    			append_dev(li, button);
    			append_dev(li, t3);

    			if (!mounted) {
    				dispose = listen_dev(
    					button,
    					"click",
    					function () {
    						if (is_function(/*resolution*/ ctx[7])) /*resolution*/ ctx[7].apply(this, arguments);
    					},
    					false,
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty & /*newConflictOptions*/ 16 && t0_value !== (t0_value = /*message*/ ctx[6] + "")) set_data_dev(t0, t0_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block.name,
    		type: "each",
    		source: "(73:16) {#each newConflictOptions as {message, resolution}}",
    		ctx
    	});

    	return block;
    }

    // (37:0) <Skeleton {currentRepository} {buildStatus} {showArticles} conflict={undefined}>
    function create_default_slot(ctx) {
    	let article;
    	let h1;
    	let t1;
    	let p0;
    	let t3;
    	let p1;
    	let t5;
    	let p2;
    	let t6;
    	let strong0;
    	let t8;
    	let br0;
    	let t9;
    	let br1;
    	let t10;
    	let strong1;
    	let t12;
    	let strong2;
    	let t14;
    	let t15;
    	let p3;
    	let strong3;
    	let t17;
    	let strong4;
    	let t19;
    	let br2;
    	let t20;
    	let a;
    	let t21;
    	let t22;
    	let br3;
    	let t23;
    	let t24;
    	let p4;
    	let t26;
    	let ul;

    	function select_block_type(ctx, dirty) {
    		if (/*newConflictOptions*/ ctx[4]) return create_if_block;
    		return create_else_block;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			article = element("article");
    			h1 = element("h1");
    			h1.textContent = "Problème de synchronisation";
    			t1 = space();
    			p0 = element("p");
    			p0.textContent = "La version du site web dans l'atelier sur cet ordinateur/téléphone et la version du site web en ligne\n            actuellement sont désynchronisées.\n            Celà peut être dû au fait que tu as modifié une page directement dans Github/Gitlab ou qu'un.e collègue/ami.e\n            travaille sur le site de manière simultannée";
    			t3 = space();
    			p1 = element("p");
    			p1.textContent = "La conséquence est que, pour le moment, tu ne peux plus mettre à jour le site web depuis l'atelier Scribouilli\n            (mais tu peux continuer à modifier ce qu'il y a dans l'atelier)";
    			t5 = space();
    			p2 = element("p");
    			t6 = text("Mais ");
    			strong0 = element("strong");
    			strong0.textContent = "ça va bien se passer";
    			t8 = text(" ! On va résoudre ça tranquillement !");
    			br0 = element("br");
    			t9 = text("\n            On va proposer 2 choix : imposer la version actuelle de l'atelier ou ramener l'atelier à la version actuelle\n            du site web.");
    			br1 = element("br");
    			t10 = text("\n            Dans les deux cas, ");
    			strong1 = element("strong");
    			strong1.textContent = "des données vont être perdues";
    			t12 = text(", donc ça vaut le coup de\n            ");
    			strong2 = element("strong");
    			strong2.textContent = "prendre le temps";
    			t14 = text(" de prendre la bonne décision");
    			t15 = space();
    			p3 = element("p");
    			strong3 = element("strong");
    			strong3.textContent = "Avant de prendre la décision";
    			t17 = text(", ça peut valoir le coup de : ");
    			strong4 = element("strong");
    			strong4.textContent = "discuter avec les\n            autres personnes qui travaillent sur le site";
    			t19 = text(" pour se rendre compte des changements qui\n            pourraient être perdus en imposant ce qui est actuellement dans ton atelier");
    			br2 = element("br");
    			t20 = text("\n            Ou alors ");
    			a = element("a");
    			t21 = text("d'aller regarder les fichiers dans github/gitlab");
    			t22 = text(" pour se rendre compte\n            de ce qui pourrait être perdu");
    			br3 = element("br");
    			t23 = text("\n            Il est encore temps de modifier le contenu de l'atelier");
    			t24 = space();
    			p4 = element("p");
    			p4.textContent = "Voici les options :";
    			t26 = space();
    			ul = element("ul");
    			if_block.c();
    			add_location(h1, file, 38, 8, 1193);
    			attr_dev(p0, "class", "svelte-11iuh81");
    			add_location(p0, file, 40, 8, 1239);
    			attr_dev(p1, "class", "svelte-11iuh81");
    			add_location(p1, file, 47, 8, 1605);
    			add_location(strong0, file, 53, 17, 1851);
    			add_location(br0, file, 53, 91, 1925);
    			add_location(br1, file, 55, 24, 2075);
    			add_location(strong1, file, 56, 31, 2111);
    			add_location(strong2, file, 57, 12, 2195);
    			attr_dev(p2, "class", "svelte-11iuh81");
    			add_location(p2, file, 52, 8, 1830);
    			add_location(strong3, file, 60, 12, 2295);
    			add_location(strong4, file, 60, 87, 2370);
    			add_location(br2, file, 62, 87, 2591);
    			attr_dev(a, "href", /*repositoryURL*/ ctx[3]);
    			add_location(a, file, 63, 21, 2617);
    			add_location(br3, file, 64, 41, 2757);
    			attr_dev(p3, "class", "svelte-11iuh81");
    			add_location(p3, file, 59, 8, 2279);
    			attr_dev(p4, "class", "svelte-11iuh81");
    			add_location(p4, file, 68, 8, 2852);
    			attr_dev(ul, "class", "options svelte-11iuh81");
    			add_location(ul, file, 70, 8, 2889);
    			attr_dev(article, "class", "svelte-11iuh81");
    			add_location(article, file, 37, 4, 1175);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, article, anchor);
    			append_dev(article, h1);
    			append_dev(article, t1);
    			append_dev(article, p0);
    			append_dev(article, t3);
    			append_dev(article, p1);
    			append_dev(article, t5);
    			append_dev(article, p2);
    			append_dev(p2, t6);
    			append_dev(p2, strong0);
    			append_dev(p2, t8);
    			append_dev(p2, br0);
    			append_dev(p2, t9);
    			append_dev(p2, br1);
    			append_dev(p2, t10);
    			append_dev(p2, strong1);
    			append_dev(p2, t12);
    			append_dev(p2, strong2);
    			append_dev(p2, t14);
    			append_dev(article, t15);
    			append_dev(article, p3);
    			append_dev(p3, strong3);
    			append_dev(p3, t17);
    			append_dev(p3, strong4);
    			append_dev(p3, t19);
    			append_dev(p3, br2);
    			append_dev(p3, t20);
    			append_dev(p3, a);
    			append_dev(a, t21);
    			append_dev(p3, t22);
    			append_dev(p3, br3);
    			append_dev(p3, t23);
    			append_dev(article, t24);
    			append_dev(article, p4);
    			append_dev(article, t26);
    			append_dev(article, ul);
    			if_block.m(ul, null);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*repositoryURL*/ 8) {
    				attr_dev(a, "href", /*repositoryURL*/ ctx[3]);
    			}

    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(ul, null);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(article);
    			if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot.name,
    		type: "slot",
    		source: "(37:0) <Skeleton {currentRepository} {buildStatus} {showArticles} conflict={undefined}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment(ctx) {
    	let skeleton;
    	let current;

    	skeleton = new Skeleton({
    			props: {
    				currentRepository: /*currentRepository*/ ctx[2],
    				buildStatus: /*buildStatus*/ ctx[0],
    				showArticles: /*showArticles*/ ctx[1],
    				conflict: undefined,
    				$$slots: { default: [create_default_slot] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(skeleton.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(skeleton, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const skeleton_changes = {};
    			if (dirty & /*currentRepository*/ 4) skeleton_changes.currentRepository = /*currentRepository*/ ctx[2];
    			if (dirty & /*buildStatus*/ 1) skeleton_changes.buildStatus = /*buildStatus*/ ctx[0];
    			if (dirty & /*showArticles*/ 2) skeleton_changes.showArticles = /*showArticles*/ ctx[1];

    			if (dirty & /*$$scope, newConflictOptions, repositoryURL*/ 1048) {
    				skeleton_changes.$$scope = { dirty, ctx };
    			}

    			skeleton.$set(skeleton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(skeleton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(skeleton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(skeleton, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ResolutionDesynchronisation', slots, []);
    	let { buildStatus } = $$props;
    	let { showArticles } = $$props;
    	let { currentRepository } = $$props;

    	/** @type {string | undefined} */
    	let repositoryURL;

    	let { conflict } = $$props;

    	/** @type {ScribouilliState["conflict"]} */
    	let newConflictOptions;

    	$$self.$$.on_mount.push(function () {
    		if (buildStatus === undefined && !('buildStatus' in $$props || $$self.$$.bound[$$self.$$.props['buildStatus']])) {
    			console.warn("<ResolutionDesynchronisation> was created without expected prop 'buildStatus'");
    		}

    		if (showArticles === undefined && !('showArticles' in $$props || $$self.$$.bound[$$self.$$.props['showArticles']])) {
    			console.warn("<ResolutionDesynchronisation> was created without expected prop 'showArticles'");
    		}

    		if (currentRepository === undefined && !('currentRepository' in $$props || $$self.$$.bound[$$self.$$.props['currentRepository']])) {
    			console.warn("<ResolutionDesynchronisation> was created without expected prop 'currentRepository'");
    		}

    		if (conflict === undefined && !('conflict' in $$props || $$self.$$.bound[$$self.$$.props['conflict']])) {
    			console.warn("<ResolutionDesynchronisation> was created without expected prop 'conflict'");
    		}
    	});

    	const writable_props = ['buildStatus', 'showArticles', 'currentRepository', 'conflict'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ResolutionDesynchronisation> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('buildStatus' in $$props) $$invalidate(0, buildStatus = $$props.buildStatus);
    		if ('showArticles' in $$props) $$invalidate(1, showArticles = $$props.showArticles);
    		if ('currentRepository' in $$props) $$invalidate(2, currentRepository = $$props.currentRepository);
    		if ('conflict' in $$props) $$invalidate(5, conflict = $$props.conflict);
    	};

    	$$self.$capture_state = () => ({
    		Skeleton,
    		addConflictRemovalAndRedirectToResolution,
    		buildStatus,
    		showArticles,
    		currentRepository,
    		repositoryURL,
    		conflict,
    		newConflictOptions
    	});

    	$$self.$inject_state = $$props => {
    		if ('buildStatus' in $$props) $$invalidate(0, buildStatus = $$props.buildStatus);
    		if ('showArticles' in $$props) $$invalidate(1, showArticles = $$props.showArticles);
    		if ('currentRepository' in $$props) $$invalidate(2, currentRepository = $$props.currentRepository);
    		if ('repositoryURL' in $$props) $$invalidate(3, repositoryURL = $$props.repositoryURL);
    		if ('conflict' in $$props) $$invalidate(5, conflict = $$props.conflict);
    		if ('newConflictOptions' in $$props) $$invalidate(4, newConflictOptions = $$props.newConflictOptions);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*currentRepository*/ 4) {
    			$$invalidate(3, repositoryURL = currentRepository?.publicRepositoryURL);
    		}

    		if ($$self.$$.dirty & /*conflict*/ 32) {
    			$$invalidate(4, newConflictOptions = conflict && conflict.map(({ message, resolution }) => {
    				return {
    					message,
    					resolution: addConflictRemovalAndRedirectToResolution(resolution)
    				};
    			}));
    		}
    	};

    	return [
    		buildStatus,
    		showArticles,
    		currentRepository,
    		repositoryURL,
    		newConflictOptions,
    		conflict
    	];
    }

    class ResolutionDesynchronisation extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance, create_fragment, safe_not_equal, {
    			buildStatus: 0,
    			showArticles: 1,
    			currentRepository: 2,
    			conflict: 5
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ResolutionDesynchronisation",
    			options,
    			id: create_fragment.name
    		});
    	}

    	get buildStatus() {
    		throw new Error("<ResolutionDesynchronisation>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set buildStatus(value) {
    		throw new Error("<ResolutionDesynchronisation>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get showArticles() {
    		throw new Error("<ResolutionDesynchronisation>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set showArticles(value) {
    		throw new Error("<ResolutionDesynchronisation>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get currentRepository() {
    		throw new Error("<ResolutionDesynchronisation>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set currentRepository(value) {
    		throw new Error("<ResolutionDesynchronisation>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get conflict() {
    		throw new Error("<ResolutionDesynchronisation>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set conflict(value) {
    		throw new Error("<ResolutionDesynchronisation>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    // @ts-check

    /**
     *
     * @param {import('../store.js').ScribouilliState} state
     * @returns
     */
    const mapStateToProps = state => {
      const { conflict, currentRepository, buildStatus, pages, articles } = state;

      return {
        conflict,
        currentRepository,
        showArticles:
          (pages && pages.find(p => p.path === 'blog.md') !== undefined) ||
          (articles && articles.length > 0),
        buildStatus,
      }
    };

    /**
     * @param {import('page').Context} _
     */
    var resolutionDesynchronisation = async ({ querystring }) => {
      await setCurrentRepositoryFromQuerystring(querystring);

      const conflictResolution = new ResolutionDesynchronisation({
        target: svelteTarget,
        props: mapStateToProps(store.state),
      });

      replaceComponent(conflictResolution, mapStateToProps);
    };

    //@ts-check

    /**
     *
     * @param {any} _
     * @param {any} next
     */
    function waitOauthProviderMiddleware(_, next) {
      waitOauthProvider().then(next);
    }

    page('/', welcome);
    page('/choose-account', chooseAccount);
    page('/account', account);
    page('/create-account', createAccount);
    page('/login', login);

    page(
      '/after-github-login',
      (_, next) => {
        console.warn(
          `Utilisation de la route dépréciée '/after-github-login'. Utiliser plutôt '/after-oauth-login'`,
        );
        next();
      },
      afterOauthLogin,
    );
    page('/after-oauth-login', afterOauthLogin);

    page('/atelier-list-articles', waitOauthProviderMiddleware, atelierListArticles);
    page('/atelier-list-pages', waitOauthProviderMiddleware, atelierListPages);
    page('/atelier-page', waitOauthProviderMiddleware, atelierPages);
    page('/atelier-article', waitOauthProviderMiddleware, atelierArticles);
    page('/selectionner-un-site', waitOauthProviderMiddleware, selectOrCreateSite);
    page('/creer-un-nouveau-site', waitOauthProviderMiddleware, createNewSite);
    page(
      '/partir-dun-site-existant',
      waitOauthProviderMiddleware,
      startFromExistingSite,
    );
    page('/settings', waitOauthProviderMiddleware, settings);
    page(
      '/resolution-desynchronisation',
      waitOauthProviderMiddleware,
      resolutionDesynchronisation,
    );

    page.base(store.state.basePath);

    page.start();

    //@ts-check

    // @ts-ignore
    window.Buffer = buffer.Buffer;

    remember(OAUTH_PROVIDER_STORAGE_KEY)
      // @ts-ignore
      .then(oAuthProvider => store.mutations.setOAuthProvider(oAuthProvider));

})(buffer);
//# sourceMappingURL=bundle.js.map
